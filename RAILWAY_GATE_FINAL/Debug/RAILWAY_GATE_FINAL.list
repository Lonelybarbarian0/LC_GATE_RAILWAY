
RAILWAY_GATE_FINAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009340  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08009504  08009504  0000a504  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009564  08009564  0000b11c  2**0
                  CONTENTS
  4 .ARM          00000008  08009564  08009564  0000a564  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800956c  0800956c  0000b11c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800956c  0800956c  0000a56c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009570  08009570  0000a570  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000011c  20000000  08009574  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d80  2000011c  08009690  0000b11c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001e9c  08009690  0000be9c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b11c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000183d9  00000000  00000000  0000b14c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b58  00000000  00000000  00023525  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001450  00000000  00000000  00027080  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f92  00000000  00000000  000284d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025c7e  00000000  00000000  00029462  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ae61  00000000  00000000  0004f0e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d4f8f  00000000  00000000  00069f41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013eed0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005394  00000000  00000000  0013ef14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  001442a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000011c 	.word	0x2000011c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080094ec 	.word	0x080094ec

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000120 	.word	0x20000120
 8000200:	080094ec 	.word	0x080094ec

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000214:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000218:	f000 b96a 	b.w	80004f0 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	460c      	mov	r4, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14e      	bne.n	80002de <__udivmoddi4+0xaa>
 8000240:	4694      	mov	ip, r2
 8000242:	458c      	cmp	ip, r1
 8000244:	4686      	mov	lr, r0
 8000246:	fab2 f282 	clz	r2, r2
 800024a:	d962      	bls.n	8000312 <__udivmoddi4+0xde>
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0320 	rsb	r3, r2, #32
 8000252:	4091      	lsls	r1, r2
 8000254:	fa20 f303 	lsr.w	r3, r0, r3
 8000258:	fa0c fc02 	lsl.w	ip, ip, r2
 800025c:	4319      	orrs	r1, r3
 800025e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000262:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000266:	fa1f f68c 	uxth.w	r6, ip
 800026a:	fbb1 f4f7 	udiv	r4, r1, r7
 800026e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000272:	fb07 1114 	mls	r1, r7, r4, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb04 f106 	mul.w	r1, r4, r6
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800028a:	f080 8112 	bcs.w	80004b2 <__udivmoddi4+0x27e>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 810f 	bls.w	80004b2 <__udivmoddi4+0x27e>
 8000294:	3c02      	subs	r4, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a59      	subs	r1, r3, r1
 800029a:	fa1f f38e 	uxth.w	r3, lr
 800029e:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a2:	fb07 1110 	mls	r1, r7, r0, r1
 80002a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002aa:	fb00 f606 	mul.w	r6, r0, r6
 80002ae:	429e      	cmp	r6, r3
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x94>
 80002b2:	eb1c 0303 	adds.w	r3, ip, r3
 80002b6:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80002ba:	f080 80fc 	bcs.w	80004b6 <__udivmoddi4+0x282>
 80002be:	429e      	cmp	r6, r3
 80002c0:	f240 80f9 	bls.w	80004b6 <__udivmoddi4+0x282>
 80002c4:	4463      	add	r3, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	1b9b      	subs	r3, r3, r6
 80002ca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11d      	cbz	r5, 80002da <__udivmoddi4+0xa6>
 80002d2:	40d3      	lsrs	r3, r2
 80002d4:	2200      	movs	r2, #0
 80002d6:	e9c5 3200 	strd	r3, r2, [r5]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d905      	bls.n	80002ee <__udivmoddi4+0xba>
 80002e2:	b10d      	cbz	r5, 80002e8 <__udivmoddi4+0xb4>
 80002e4:	e9c5 0100 	strd	r0, r1, [r5]
 80002e8:	2100      	movs	r1, #0
 80002ea:	4608      	mov	r0, r1
 80002ec:	e7f5      	b.n	80002da <__udivmoddi4+0xa6>
 80002ee:	fab3 f183 	clz	r1, r3
 80002f2:	2900      	cmp	r1, #0
 80002f4:	d146      	bne.n	8000384 <__udivmoddi4+0x150>
 80002f6:	42a3      	cmp	r3, r4
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xcc>
 80002fa:	4290      	cmp	r0, r2
 80002fc:	f0c0 80f0 	bcc.w	80004e0 <__udivmoddi4+0x2ac>
 8000300:	1a86      	subs	r6, r0, r2
 8000302:	eb64 0303 	sbc.w	r3, r4, r3
 8000306:	2001      	movs	r0, #1
 8000308:	2d00      	cmp	r5, #0
 800030a:	d0e6      	beq.n	80002da <__udivmoddi4+0xa6>
 800030c:	e9c5 6300 	strd	r6, r3, [r5]
 8000310:	e7e3      	b.n	80002da <__udivmoddi4+0xa6>
 8000312:	2a00      	cmp	r2, #0
 8000314:	f040 8090 	bne.w	8000438 <__udivmoddi4+0x204>
 8000318:	eba1 040c 	sub.w	r4, r1, ip
 800031c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000320:	fa1f f78c 	uxth.w	r7, ip
 8000324:	2101      	movs	r1, #1
 8000326:	fbb4 f6f8 	udiv	r6, r4, r8
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb08 4416 	mls	r4, r8, r6, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb07 f006 	mul.w	r0, r7, r6
 800033a:	4298      	cmp	r0, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x11c>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x11a>
 8000348:	4298      	cmp	r0, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 800034e:	4626      	mov	r6, r4
 8000350:	1a1c      	subs	r4, r3, r0
 8000352:	fa1f f38e 	uxth.w	r3, lr
 8000356:	fbb4 f0f8 	udiv	r0, r4, r8
 800035a:	fb08 4410 	mls	r4, r8, r0, r4
 800035e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000362:	fb00 f707 	mul.w	r7, r0, r7
 8000366:	429f      	cmp	r7, r3
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x148>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x146>
 8000374:	429f      	cmp	r7, r3
 8000376:	f200 80b0 	bhi.w	80004da <__udivmoddi4+0x2a6>
 800037a:	4620      	mov	r0, r4
 800037c:	1bdb      	subs	r3, r3, r7
 800037e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000382:	e7a5      	b.n	80002d0 <__udivmoddi4+0x9c>
 8000384:	f1c1 0620 	rsb	r6, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 f706 	lsr.w	r7, r2, r6
 800038e:	431f      	orrs	r7, r3
 8000390:	fa20 fc06 	lsr.w	ip, r0, r6
 8000394:	fa04 f301 	lsl.w	r3, r4, r1
 8000398:	ea43 030c 	orr.w	r3, r3, ip
 800039c:	40f4      	lsrs	r4, r6
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	0c38      	lsrs	r0, r7, #16
 80003a4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a8:	fbb4 fef0 	udiv	lr, r4, r0
 80003ac:	fa1f fc87 	uxth.w	ip, r7
 80003b0:	fb00 441e 	mls	r4, r0, lr, r4
 80003b4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b8:	fb0e f90c 	mul.w	r9, lr, ip
 80003bc:	45a1      	cmp	r9, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	d90a      	bls.n	80003da <__udivmoddi4+0x1a6>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003ca:	f080 8084 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80003ce:	45a1      	cmp	r9, r4
 80003d0:	f240 8081 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80003d4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d8:	443c      	add	r4, r7
 80003da:	eba4 0409 	sub.w	r4, r4, r9
 80003de:	fa1f f983 	uxth.w	r9, r3
 80003e2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003e6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ee:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1d2>
 80003f6:	193c      	adds	r4, r7, r4
 80003f8:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003fc:	d267      	bcs.n	80004ce <__udivmoddi4+0x29a>
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d965      	bls.n	80004ce <__udivmoddi4+0x29a>
 8000402:	3b02      	subs	r3, #2
 8000404:	443c      	add	r4, r7
 8000406:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040a:	fba0 9302 	umull	r9, r3, r0, r2
 800040e:	eba4 040c 	sub.w	r4, r4, ip
 8000412:	429c      	cmp	r4, r3
 8000414:	46ce      	mov	lr, r9
 8000416:	469c      	mov	ip, r3
 8000418:	d351      	bcc.n	80004be <__udivmoddi4+0x28a>
 800041a:	d04e      	beq.n	80004ba <__udivmoddi4+0x286>
 800041c:	b155      	cbz	r5, 8000434 <__udivmoddi4+0x200>
 800041e:	ebb8 030e 	subs.w	r3, r8, lr
 8000422:	eb64 040c 	sbc.w	r4, r4, ip
 8000426:	fa04 f606 	lsl.w	r6, r4, r6
 800042a:	40cb      	lsrs	r3, r1
 800042c:	431e      	orrs	r6, r3
 800042e:	40cc      	lsrs	r4, r1
 8000430:	e9c5 6400 	strd	r6, r4, [r5]
 8000434:	2100      	movs	r1, #0
 8000436:	e750      	b.n	80002da <__udivmoddi4+0xa6>
 8000438:	f1c2 0320 	rsb	r3, r2, #32
 800043c:	fa20 f103 	lsr.w	r1, r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa24 f303 	lsr.w	r3, r4, r3
 8000448:	4094      	lsls	r4, r2
 800044a:	430c      	orrs	r4, r1
 800044c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000450:	fa00 fe02 	lsl.w	lr, r0, r2
 8000454:	fa1f f78c 	uxth.w	r7, ip
 8000458:	fbb3 f0f8 	udiv	r0, r3, r8
 800045c:	fb08 3110 	mls	r1, r8, r0, r3
 8000460:	0c23      	lsrs	r3, r4, #16
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f107 	mul.w	r1, r0, r7
 800046a:	4299      	cmp	r1, r3
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x24c>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000476:	d22c      	bcs.n	80004d2 <__udivmoddi4+0x29e>
 8000478:	4299      	cmp	r1, r3
 800047a:	d92a      	bls.n	80004d2 <__udivmoddi4+0x29e>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1a5b      	subs	r3, r3, r1
 8000482:	b2a4      	uxth	r4, r4
 8000484:	fbb3 f1f8 	udiv	r1, r3, r8
 8000488:	fb08 3311 	mls	r3, r8, r1, r3
 800048c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000490:	fb01 f307 	mul.w	r3, r1, r7
 8000494:	42a3      	cmp	r3, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x276>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80004a0:	d213      	bcs.n	80004ca <__udivmoddi4+0x296>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d911      	bls.n	80004ca <__udivmoddi4+0x296>
 80004a6:	3902      	subs	r1, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	1ae4      	subs	r4, r4, r3
 80004ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b0:	e739      	b.n	8000326 <__udivmoddi4+0xf2>
 80004b2:	4604      	mov	r4, r0
 80004b4:	e6f0      	b.n	8000298 <__udivmoddi4+0x64>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e706      	b.n	80002c8 <__udivmoddi4+0x94>
 80004ba:	45c8      	cmp	r8, r9
 80004bc:	d2ae      	bcs.n	800041c <__udivmoddi4+0x1e8>
 80004be:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004c6:	3801      	subs	r0, #1
 80004c8:	e7a8      	b.n	800041c <__udivmoddi4+0x1e8>
 80004ca:	4631      	mov	r1, r6
 80004cc:	e7ed      	b.n	80004aa <__udivmoddi4+0x276>
 80004ce:	4603      	mov	r3, r0
 80004d0:	e799      	b.n	8000406 <__udivmoddi4+0x1d2>
 80004d2:	4630      	mov	r0, r6
 80004d4:	e7d4      	b.n	8000480 <__udivmoddi4+0x24c>
 80004d6:	46d6      	mov	lr, sl
 80004d8:	e77f      	b.n	80003da <__udivmoddi4+0x1a6>
 80004da:	4463      	add	r3, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e74d      	b.n	800037c <__udivmoddi4+0x148>
 80004e0:	4606      	mov	r6, r0
 80004e2:	4623      	mov	r3, r4
 80004e4:	4608      	mov	r0, r1
 80004e6:	e70f      	b.n	8000308 <__udivmoddi4+0xd4>
 80004e8:	3e02      	subs	r6, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	e730      	b.n	8000350 <__udivmoddi4+0x11c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <Lever_Lock>:
  *         Uses temp_rx_buff[0] to determine
  * @param  None
  * @retval None
  */
void Lever_Lock()
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
	if(temp_rx_buff[0] == 0x01)
 80004f8:	4b0c      	ldr	r3, [pc, #48]	@ (800052c <Lever_Lock+0x38>)
 80004fa:	781b      	ldrb	r3, [r3, #0]
 80004fc:	b2db      	uxtb	r3, r3
 80004fe:	2b01      	cmp	r3, #1
 8000500:	d106      	bne.n	8000510 <Lever_Lock+0x1c>
	{
		HAL_GPIO_WritePin(LT_GPIO_Port, LT_Pin, GPIO_PIN_SET); /* Turn ON */
 8000502:	2201      	movs	r2, #1
 8000504:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000508:	4809      	ldr	r0, [pc, #36]	@ (8000530 <Lever_Lock+0x3c>)
 800050a:	f001 f98d 	bl	8001828 <HAL_GPIO_WritePin>
	}
	else if (temp_rx_buff[0] == 0x00)
	{
		HAL_GPIO_WritePin(LT_GPIO_Port, LT_Pin, GPIO_PIN_RESET); /* Turn OFF */
	}
}
 800050e:	e00a      	b.n	8000526 <Lever_Lock+0x32>
	else if (temp_rx_buff[0] == 0x00)
 8000510:	4b06      	ldr	r3, [pc, #24]	@ (800052c <Lever_Lock+0x38>)
 8000512:	781b      	ldrb	r3, [r3, #0]
 8000514:	b2db      	uxtb	r3, r3
 8000516:	2b00      	cmp	r3, #0
 8000518:	d105      	bne.n	8000526 <Lever_Lock+0x32>
		HAL_GPIO_WritePin(LT_GPIO_Port, LT_Pin, GPIO_PIN_RESET); /* Turn OFF */
 800051a:	2200      	movs	r2, #0
 800051c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000520:	4803      	ldr	r0, [pc, #12]	@ (8000530 <Lever_Lock+0x3c>)
 8000522:	f001 f981 	bl	8001828 <HAL_GPIO_WritePin>
}
 8000526:	bf00      	nop
 8000528:	bd80      	pop	{r7, pc}
 800052a:	bf00      	nop
 800052c:	20000000 	.word	0x20000000
 8000530:	40020800 	.word	0x40020800

08000534 <Alarm_ON>:
  *         Uses temp_rx_buff[1] to determine
  * @param  None
  * @retval None
  */
void Alarm_ON()
{
 8000534:	b580      	push	{r7, lr}
 8000536:	af00      	add	r7, sp, #0
	if(temp_rx_buff[1] == 0x01)
 8000538:	4b0c      	ldr	r3, [pc, #48]	@ (800056c <Alarm_ON+0x38>)
 800053a:	785b      	ldrb	r3, [r3, #1]
 800053c:	b2db      	uxtb	r3, r3
 800053e:	2b01      	cmp	r3, #1
 8000540:	d106      	bne.n	8000550 <Alarm_ON+0x1c>
	{
		HAL_GPIO_WritePin(AT_GPIO_Port, AT_Pin, GPIO_PIN_SET); /* Turn ON */
 8000542:	2201      	movs	r2, #1
 8000544:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000548:	4809      	ldr	r0, [pc, #36]	@ (8000570 <Alarm_ON+0x3c>)
 800054a:	f001 f96d 	bl	8001828 <HAL_GPIO_WritePin>
	}
	else if (temp_rx_buff[1] == 0x00)
	{
		HAL_GPIO_WritePin(AT_GPIO_Port, AT_Pin, GPIO_PIN_RESET); /* Turn OFF */
	}
}
 800054e:	e00a      	b.n	8000566 <Alarm_ON+0x32>
	else if (temp_rx_buff[1] == 0x00)
 8000550:	4b06      	ldr	r3, [pc, #24]	@ (800056c <Alarm_ON+0x38>)
 8000552:	785b      	ldrb	r3, [r3, #1]
 8000554:	b2db      	uxtb	r3, r3
 8000556:	2b00      	cmp	r3, #0
 8000558:	d105      	bne.n	8000566 <Alarm_ON+0x32>
		HAL_GPIO_WritePin(AT_GPIO_Port, AT_Pin, GPIO_PIN_RESET); /* Turn OFF */
 800055a:	2200      	movs	r2, #0
 800055c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000560:	4803      	ldr	r0, [pc, #12]	@ (8000570 <Alarm_ON+0x3c>)
 8000562:	f001 f961 	bl	8001828 <HAL_GPIO_WritePin>
}
 8000566:	bf00      	nop
 8000568:	bd80      	pop	{r7, pc}
 800056a:	bf00      	nop
 800056c:	20000000 	.word	0x20000000
 8000570:	40020800 	.word	0x40020800

08000574 <Transmit_Msg>:
  *         Total 10 bytes of data...
  * @param  None
  * @retval None
  */
void Transmit_Msg()
{
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
	tx_buff[0] = 0x55;            /* Header */
 8000578:	4b17      	ldr	r3, [pc, #92]	@ (80005d8 <Transmit_Msg+0x64>)
 800057a:	2255      	movs	r2, #85	@ 0x55
 800057c:	701a      	strb	r2, [r3, #0]
	tx_buff[1] = 0x55;            /* Header */
 800057e:	4b16      	ldr	r3, [pc, #88]	@ (80005d8 <Transmit_Msg+0x64>)
 8000580:	2255      	movs	r2, #85	@ 0x55
 8000582:	705a      	strb	r2, [r3, #1]

	tx_buff[2] = temp_tx_buff[2];    /* Train UP */
 8000584:	4b15      	ldr	r3, [pc, #84]	@ (80005dc <Transmit_Msg+0x68>)
 8000586:	789b      	ldrb	r3, [r3, #2]
 8000588:	b2da      	uxtb	r2, r3
 800058a:	4b13      	ldr	r3, [pc, #76]	@ (80005d8 <Transmit_Msg+0x64>)
 800058c:	709a      	strb	r2, [r3, #2]
	tx_buff[3] = temp_tx_buff[3];    /* Train DOWN */
 800058e:	4b13      	ldr	r3, [pc, #76]	@ (80005dc <Transmit_Msg+0x68>)
 8000590:	78db      	ldrb	r3, [r3, #3]
 8000592:	b2da      	uxtb	r2, r3
 8000594:	4b10      	ldr	r3, [pc, #64]	@ (80005d8 <Transmit_Msg+0x64>)
 8000596:	70da      	strb	r2, [r3, #3]

	tx_buff[4] = temp_tx_buff[4];    /* BOOM 1 STATUS */
 8000598:	4b10      	ldr	r3, [pc, #64]	@ (80005dc <Transmit_Msg+0x68>)
 800059a:	791b      	ldrb	r3, [r3, #4]
 800059c:	b2da      	uxtb	r2, r3
 800059e:	4b0e      	ldr	r3, [pc, #56]	@ (80005d8 <Transmit_Msg+0x64>)
 80005a0:	711a      	strb	r2, [r3, #4]
	tx_buff[5] = temp_tx_buff[5];    /* BOOM 2 STATUS */
 80005a2:	4b0e      	ldr	r3, [pc, #56]	@ (80005dc <Transmit_Msg+0x68>)
 80005a4:	795b      	ldrb	r3, [r3, #5]
 80005a6:	b2da      	uxtb	r2, r3
 80005a8:	4b0b      	ldr	r3, [pc, #44]	@ (80005d8 <Transmit_Msg+0x64>)
 80005aa:	715a      	strb	r2, [r3, #5]

	tx_buff[6] = temp_tx_buff[6];    /* BOOM 1 HEALTH */
 80005ac:	4b0b      	ldr	r3, [pc, #44]	@ (80005dc <Transmit_Msg+0x68>)
 80005ae:	799b      	ldrb	r3, [r3, #6]
 80005b0:	b2da      	uxtb	r2, r3
 80005b2:	4b09      	ldr	r3, [pc, #36]	@ (80005d8 <Transmit_Msg+0x64>)
 80005b4:	719a      	strb	r2, [r3, #6]
	tx_buff[7] = temp_tx_buff[7];    /* BOOM 2 HEALTH */
 80005b6:	4b09      	ldr	r3, [pc, #36]	@ (80005dc <Transmit_Msg+0x68>)
 80005b8:	79db      	ldrb	r3, [r3, #7]
 80005ba:	b2da      	uxtb	r2, r3
 80005bc:	4b06      	ldr	r3, [pc, #24]	@ (80005d8 <Transmit_Msg+0x64>)
 80005be:	71da      	strb	r2, [r3, #7]

	tx_buff[8] = 0xFF;            /* Lever Lock Status */
 80005c0:	4b05      	ldr	r3, [pc, #20]	@ (80005d8 <Transmit_Msg+0x64>)
 80005c2:	22ff      	movs	r2, #255	@ 0xff
 80005c4:	721a      	strb	r2, [r3, #8]
	tx_buff[9] = 0xFF;            /* Alarm Status */
 80005c6:	4b04      	ldr	r3, [pc, #16]	@ (80005d8 <Transmit_Msg+0x64>)
 80005c8:	22ff      	movs	r2, #255	@ 0xff
 80005ca:	725a      	strb	r2, [r3, #9]

	CDC_Transmit_FS((uint8_t*)tx_buff,10);
 80005cc:	210a      	movs	r1, #10
 80005ce:	4802      	ldr	r0, [pc, #8]	@ (80005d8 <Transmit_Msg+0x64>)
 80005d0:	f008 fa8e 	bl	8008af0 <CDC_Transmit_FS>
}
 80005d4:	bf00      	nop
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	20000140 	.word	0x20000140
 80005dc:	20000004 	.word	0x20000004

080005e0 <Receive_Msg>:
  * @brief  Reads the recieved buffer from USC VCP
  * @param  None
  * @retval None
  */
void Receive_Msg()
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
	if( (rx_buff[0] == 0x59) && (rx_buff[1] == 0x59))
 80005e4:	4b0f      	ldr	r3, [pc, #60]	@ (8000624 <Receive_Msg+0x44>)
 80005e6:	781b      	ldrb	r3, [r3, #0]
 80005e8:	b2db      	uxtb	r3, r3
 80005ea:	2b59      	cmp	r3, #89	@ 0x59
 80005ec:	d118      	bne.n	8000620 <Receive_Msg+0x40>
 80005ee:	4b0d      	ldr	r3, [pc, #52]	@ (8000624 <Receive_Msg+0x44>)
 80005f0:	785b      	ldrb	r3, [r3, #1]
 80005f2:	b2db      	uxtb	r3, r3
 80005f4:	2b59      	cmp	r3, #89	@ 0x59
 80005f6:	d113      	bne.n	8000620 <Receive_Msg+0x40>
	{
		temp_rx_buff[0] = rx_buff[2];
 80005f8:	4b0a      	ldr	r3, [pc, #40]	@ (8000624 <Receive_Msg+0x44>)
 80005fa:	789b      	ldrb	r3, [r3, #2]
 80005fc:	b2da      	uxtb	r2, r3
 80005fe:	4b0a      	ldr	r3, [pc, #40]	@ (8000628 <Receive_Msg+0x48>)
 8000600:	701a      	strb	r2, [r3, #0]
		temp_rx_buff[1] = rx_buff[3];
 8000602:	4b08      	ldr	r3, [pc, #32]	@ (8000624 <Receive_Msg+0x44>)
 8000604:	78db      	ldrb	r3, [r3, #3]
 8000606:	b2da      	uxtb	r2, r3
 8000608:	4b07      	ldr	r3, [pc, #28]	@ (8000628 <Receive_Msg+0x48>)
 800060a:	705a      	strb	r2, [r3, #1]
		if(rx_buff[4] == 0x01)
 800060c:	4b05      	ldr	r3, [pc, #20]	@ (8000624 <Receive_Msg+0x44>)
 800060e:	791b      	ldrb	r3, [r3, #4]
 8000610:	b2db      	uxtb	r3, r3
 8000612:	2b01      	cmp	r3, #1
 8000614:	d104      	bne.n	8000620 <Receive_Msg+0x40>
		{
			Transmit_Msg();
 8000616:	f7ff ffad 	bl	8000574 <Transmit_Msg>
			rx_buff[4] = 0xFF;
 800061a:	4b02      	ldr	r3, [pc, #8]	@ (8000624 <Receive_Msg+0x44>)
 800061c:	22ff      	movs	r2, #255	@ 0xff
 800061e:	711a      	strb	r2, [r3, #4]
		}
	}
}
 8000620:	bf00      	nop
 8000622:	bd80      	pop	{r7, pc}
 8000624:	20000138 	.word	0x20000138
 8000628:	20000000 	.word	0x20000000

0800062c <Boom1_Status>:
  *         Changes temp_tx_msg[4] - UP/DOWN and temp_tx_msg[6] - GOOD/BAD  accordingly...
  * @param  None
  * @retval None.
  */
void Boom1_Status()
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
	if( ( (HAL_GPIO_ReadPin(BOOM1_LS11_GPIO_Port, BOOM1_LS11_Pin) == GPIO_PIN_RESET) &&
 8000630:	2104      	movs	r1, #4
 8000632:	4828      	ldr	r0, [pc, #160]	@ (80006d4 <Boom1_Status+0xa8>)
 8000634:	f001 f8e0 	bl	80017f8 <HAL_GPIO_ReadPin>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d106      	bne.n	800064c <Boom1_Status+0x20>
		  (HAL_GPIO_ReadPin(BOOM1_LS12_GPIO_Port, BOOM1_LS12_Pin) == GPIO_PIN_SET) ) ||
 800063e:	2108      	movs	r1, #8
 8000640:	4824      	ldr	r0, [pc, #144]	@ (80006d4 <Boom1_Status+0xa8>)
 8000642:	f001 f8d9 	bl	80017f8 <HAL_GPIO_ReadPin>
 8000646:	4603      	mov	r3, r0
	if( ( (HAL_GPIO_ReadPin(BOOM1_LS11_GPIO_Port, BOOM1_LS11_Pin) == GPIO_PIN_RESET) &&
 8000648:	2b01      	cmp	r3, #1
 800064a:	d00e      	beq.n	800066a <Boom1_Status+0x3e>
		( (HAL_GPIO_ReadPin(BOOM1_LS21_GPIO_Port, BOOM1_LS21_Pin) == GPIO_PIN_RESET) &&
 800064c:	2180      	movs	r1, #128	@ 0x80
 800064e:	4822      	ldr	r0, [pc, #136]	@ (80006d8 <Boom1_Status+0xac>)
 8000650:	f001 f8d2 	bl	80017f8 <HAL_GPIO_ReadPin>
 8000654:	4603      	mov	r3, r0
		  (HAL_GPIO_ReadPin(BOOM1_LS12_GPIO_Port, BOOM1_LS12_Pin) == GPIO_PIN_SET) ) ||
 8000656:	2b00      	cmp	r3, #0
 8000658:	d10e      	bne.n	8000678 <Boom1_Status+0x4c>
		  (HAL_GPIO_ReadPin(BOOM1_LS22_GPIO_Port, BOOM1_LS22_Pin) == GPIO_PIN_SET) ) )
 800065a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800065e:	481d      	ldr	r0, [pc, #116]	@ (80006d4 <Boom1_Status+0xa8>)
 8000660:	f001 f8ca 	bl	80017f8 <HAL_GPIO_ReadPin>
 8000664:	4603      	mov	r3, r0
		( (HAL_GPIO_ReadPin(BOOM1_LS21_GPIO_Port, BOOM1_LS21_Pin) == GPIO_PIN_RESET) &&
 8000666:	2b01      	cmp	r3, #1
 8000668:	d106      	bne.n	8000678 <Boom1_Status+0x4c>
	{
		temp_tx_buff[4] = 0x00; /* BOOM 1 CLOSED */
 800066a:	4b1c      	ldr	r3, [pc, #112]	@ (80006dc <Boom1_Status+0xb0>)
 800066c:	2200      	movs	r2, #0
 800066e:	711a      	strb	r2, [r3, #4]
		temp_tx_buff[6] = 0x01; /* BOOM 1 Healthy */
 8000670:	4b1a      	ldr	r3, [pc, #104]	@ (80006dc <Boom1_Status+0xb0>)
 8000672:	2201      	movs	r2, #1
 8000674:	719a      	strb	r2, [r3, #6]
 8000676:	e02a      	b.n	80006ce <Boom1_Status+0xa2>

	}
	else if( ( (HAL_GPIO_ReadPin(BOOM1_LS11_GPIO_Port, BOOM1_LS11_Pin) == GPIO_PIN_SET) &&
 8000678:	2104      	movs	r1, #4
 800067a:	4816      	ldr	r0, [pc, #88]	@ (80006d4 <Boom1_Status+0xa8>)
 800067c:	f001 f8bc 	bl	80017f8 <HAL_GPIO_ReadPin>
 8000680:	4603      	mov	r3, r0
 8000682:	2b01      	cmp	r3, #1
 8000684:	d106      	bne.n	8000694 <Boom1_Status+0x68>
		       (HAL_GPIO_ReadPin(BOOM1_LS12_GPIO_Port, BOOM1_LS12_Pin) == GPIO_PIN_RESET) ) ||
 8000686:	2108      	movs	r1, #8
 8000688:	4812      	ldr	r0, [pc, #72]	@ (80006d4 <Boom1_Status+0xa8>)
 800068a:	f001 f8b5 	bl	80017f8 <HAL_GPIO_ReadPin>
 800068e:	4603      	mov	r3, r0
	else if( ( (HAL_GPIO_ReadPin(BOOM1_LS11_GPIO_Port, BOOM1_LS11_Pin) == GPIO_PIN_SET) &&
 8000690:	2b00      	cmp	r3, #0
 8000692:	d00e      	beq.n	80006b2 <Boom1_Status+0x86>
		     ( (HAL_GPIO_ReadPin(BOOM1_LS21_GPIO_Port, BOOM1_LS21_Pin) == GPIO_PIN_SET) &&
 8000694:	2180      	movs	r1, #128	@ 0x80
 8000696:	4810      	ldr	r0, [pc, #64]	@ (80006d8 <Boom1_Status+0xac>)
 8000698:	f001 f8ae 	bl	80017f8 <HAL_GPIO_ReadPin>
 800069c:	4603      	mov	r3, r0
		       (HAL_GPIO_ReadPin(BOOM1_LS12_GPIO_Port, BOOM1_LS12_Pin) == GPIO_PIN_RESET) ) ||
 800069e:	2b01      	cmp	r3, #1
 80006a0:	d10e      	bne.n	80006c0 <Boom1_Status+0x94>
		       (HAL_GPIO_ReadPin(BOOM1_LS22_GPIO_Port, BOOM1_LS22_Pin) == GPIO_PIN_RESET) ) )
 80006a2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80006a6:	480b      	ldr	r0, [pc, #44]	@ (80006d4 <Boom1_Status+0xa8>)
 80006a8:	f001 f8a6 	bl	80017f8 <HAL_GPIO_ReadPin>
 80006ac:	4603      	mov	r3, r0
		     ( (HAL_GPIO_ReadPin(BOOM1_LS21_GPIO_Port, BOOM1_LS21_Pin) == GPIO_PIN_SET) &&
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d106      	bne.n	80006c0 <Boom1_Status+0x94>
	{
		temp_tx_buff[4] = 0x01; /* BOOM 1 OPEN */
 80006b2:	4b0a      	ldr	r3, [pc, #40]	@ (80006dc <Boom1_Status+0xb0>)
 80006b4:	2201      	movs	r2, #1
 80006b6:	711a      	strb	r2, [r3, #4]
		temp_tx_buff[6] = 0x01; /* BOOM 1 Healthy */
 80006b8:	4b08      	ldr	r3, [pc, #32]	@ (80006dc <Boom1_Status+0xb0>)
 80006ba:	2201      	movs	r2, #1
 80006bc:	719a      	strb	r2, [r3, #6]
 80006be:	e006      	b.n	80006ce <Boom1_Status+0xa2>
	}
	else
	{
		temp_tx_buff[4] = 0xFF;
 80006c0:	4b06      	ldr	r3, [pc, #24]	@ (80006dc <Boom1_Status+0xb0>)
 80006c2:	22ff      	movs	r2, #255	@ 0xff
 80006c4:	711a      	strb	r2, [r3, #4]
		temp_tx_buff[6] = 0x00; /* BOOM 1 HEALTH BAD */
 80006c6:	4b05      	ldr	r3, [pc, #20]	@ (80006dc <Boom1_Status+0xb0>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	719a      	strb	r2, [r3, #6]
	}

}
 80006cc:	bf00      	nop
 80006ce:	bf00      	nop
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	40020800 	.word	0x40020800
 80006d8:	40020400 	.word	0x40020400
 80006dc:	20000004 	.word	0x20000004

080006e0 <Boom2_Status>:
  *         Changes temp_tx_msg[5] - UP/DOWN and temp_tx_msg[7] - GOOD/BAD  accordingly...
  * @param  None
  * @retval None.
  */
void Boom2_Status()
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
	if( ( (HAL_GPIO_ReadPin(BOOM2_LS11_GPIO_Port, BOOM2_LS11_Pin) == GPIO_PIN_RESET) &&
 80006e4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80006e8:	4829      	ldr	r0, [pc, #164]	@ (8000790 <Boom2_Status+0xb0>)
 80006ea:	f001 f885 	bl	80017f8 <HAL_GPIO_ReadPin>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d107      	bne.n	8000704 <Boom2_Status+0x24>
		  (HAL_GPIO_ReadPin(BOOM2_LS12_GPIO_Port, BOOM2_LS12_Pin) == GPIO_PIN_SET) ) ||
 80006f4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80006f8:	4825      	ldr	r0, [pc, #148]	@ (8000790 <Boom2_Status+0xb0>)
 80006fa:	f001 f87d 	bl	80017f8 <HAL_GPIO_ReadPin>
 80006fe:	4603      	mov	r3, r0
	if( ( (HAL_GPIO_ReadPin(BOOM2_LS11_GPIO_Port, BOOM2_LS11_Pin) == GPIO_PIN_RESET) &&
 8000700:	2b01      	cmp	r3, #1
 8000702:	d00e      	beq.n	8000722 <Boom2_Status+0x42>
		( (HAL_GPIO_ReadPin(BOOM2_LS21_GPIO_Port, BOOM2_LS21_Pin) == GPIO_PIN_RESET) &&
 8000704:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000708:	4821      	ldr	r0, [pc, #132]	@ (8000790 <Boom2_Status+0xb0>)
 800070a:	f001 f875 	bl	80017f8 <HAL_GPIO_ReadPin>
 800070e:	4603      	mov	r3, r0
		  (HAL_GPIO_ReadPin(BOOM2_LS12_GPIO_Port, BOOM2_LS12_Pin) == GPIO_PIN_SET) ) ||
 8000710:	2b00      	cmp	r3, #0
 8000712:	d10d      	bne.n	8000730 <Boom2_Status+0x50>
		  (HAL_GPIO_ReadPin(BOOM2_LS22_GPIO_Port, BOOM2_LS22_Pin) == GPIO_PIN_SET) ) )
 8000714:	2102      	movs	r1, #2
 8000716:	481e      	ldr	r0, [pc, #120]	@ (8000790 <Boom2_Status+0xb0>)
 8000718:	f001 f86e 	bl	80017f8 <HAL_GPIO_ReadPin>
 800071c:	4603      	mov	r3, r0
		( (HAL_GPIO_ReadPin(BOOM2_LS21_GPIO_Port, BOOM2_LS21_Pin) == GPIO_PIN_RESET) &&
 800071e:	2b01      	cmp	r3, #1
 8000720:	d106      	bne.n	8000730 <Boom2_Status+0x50>
	{
		temp_tx_buff[5] = 0x00; /* BOOM 2 CLOSED */
 8000722:	4b1c      	ldr	r3, [pc, #112]	@ (8000794 <Boom2_Status+0xb4>)
 8000724:	2200      	movs	r2, #0
 8000726:	715a      	strb	r2, [r3, #5]
		temp_tx_buff[7] = 0x01; /* BOOM 2 Healthy */
 8000728:	4b1a      	ldr	r3, [pc, #104]	@ (8000794 <Boom2_Status+0xb4>)
 800072a:	2201      	movs	r2, #1
 800072c:	71da      	strb	r2, [r3, #7]
 800072e:	e02c      	b.n	800078a <Boom2_Status+0xaa>

	}
	else if( ( (HAL_GPIO_ReadPin(BOOM2_LS11_GPIO_Port, BOOM2_LS11_Pin) == GPIO_PIN_SET) &&
 8000730:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000734:	4816      	ldr	r0, [pc, #88]	@ (8000790 <Boom2_Status+0xb0>)
 8000736:	f001 f85f 	bl	80017f8 <HAL_GPIO_ReadPin>
 800073a:	4603      	mov	r3, r0
 800073c:	2b01      	cmp	r3, #1
 800073e:	d107      	bne.n	8000750 <Boom2_Status+0x70>
		       (HAL_GPIO_ReadPin(BOOM2_LS12_GPIO_Port, BOOM2_LS12_Pin) == GPIO_PIN_RESET) ) ||
 8000740:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000744:	4812      	ldr	r0, [pc, #72]	@ (8000790 <Boom2_Status+0xb0>)
 8000746:	f001 f857 	bl	80017f8 <HAL_GPIO_ReadPin>
 800074a:	4603      	mov	r3, r0
	else if( ( (HAL_GPIO_ReadPin(BOOM2_LS11_GPIO_Port, BOOM2_LS11_Pin) == GPIO_PIN_SET) &&
 800074c:	2b00      	cmp	r3, #0
 800074e:	d00e      	beq.n	800076e <Boom2_Status+0x8e>
		     ( (HAL_GPIO_ReadPin(BOOM2_LS21_GPIO_Port, BOOM2_LS21_Pin) == GPIO_PIN_SET) &&
 8000750:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000754:	480e      	ldr	r0, [pc, #56]	@ (8000790 <Boom2_Status+0xb0>)
 8000756:	f001 f84f 	bl	80017f8 <HAL_GPIO_ReadPin>
 800075a:	4603      	mov	r3, r0
		       (HAL_GPIO_ReadPin(BOOM2_LS12_GPIO_Port, BOOM2_LS12_Pin) == GPIO_PIN_RESET) ) ||
 800075c:	2b01      	cmp	r3, #1
 800075e:	d10d      	bne.n	800077c <Boom2_Status+0x9c>
		       (HAL_GPIO_ReadPin(BOOM2_LS22_GPIO_Port, BOOM2_LS22_Pin) == GPIO_PIN_RESET) ) )
 8000760:	2102      	movs	r1, #2
 8000762:	480b      	ldr	r0, [pc, #44]	@ (8000790 <Boom2_Status+0xb0>)
 8000764:	f001 f848 	bl	80017f8 <HAL_GPIO_ReadPin>
 8000768:	4603      	mov	r3, r0
		     ( (HAL_GPIO_ReadPin(BOOM2_LS21_GPIO_Port, BOOM2_LS21_Pin) == GPIO_PIN_SET) &&
 800076a:	2b00      	cmp	r3, #0
 800076c:	d106      	bne.n	800077c <Boom2_Status+0x9c>
	{
		temp_tx_buff[5] = 0x01; /* BOOM 2 OPEN */
 800076e:	4b09      	ldr	r3, [pc, #36]	@ (8000794 <Boom2_Status+0xb4>)
 8000770:	2201      	movs	r2, #1
 8000772:	715a      	strb	r2, [r3, #5]
		temp_tx_buff[7] = 0x01; /* BOOM 2 Healthy */
 8000774:	4b07      	ldr	r3, [pc, #28]	@ (8000794 <Boom2_Status+0xb4>)
 8000776:	2201      	movs	r2, #1
 8000778:	71da      	strb	r2, [r3, #7]
 800077a:	e006      	b.n	800078a <Boom2_Status+0xaa>
	}
	else
	{
		temp_tx_buff[5] = 0xFF;
 800077c:	4b05      	ldr	r3, [pc, #20]	@ (8000794 <Boom2_Status+0xb4>)
 800077e:	22ff      	movs	r2, #255	@ 0xff
 8000780:	715a      	strb	r2, [r3, #5]
		temp_tx_buff[7] = 0x00; /* BOOM 2 HEALTH BAD */
 8000782:	4b04      	ldr	r3, [pc, #16]	@ (8000794 <Boom2_Status+0xb4>)
 8000784:	2200      	movs	r2, #0
 8000786:	71da      	strb	r2, [r3, #7]
	}

}
 8000788:	bf00      	nop
 800078a:	bf00      	nop
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	40020400 	.word	0x40020400
 8000794:	20000004 	.word	0x20000004

08000798 <UP_Train_Status>:
  *         Compare it with TRAIN_DIST MACRO and changes temp_tx_buff[2] - UP direction
  * @param  None
  * @retval None
  */
void UP_Train_Status()
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
	volatile uint16_t data1 = {0xFFFF};
 800079e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80007a2:	80fb      	strh	r3, [r7, #6]
	volatile uint16_t data2 = {0xFFFF};
 80007a4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80007a8:	80bb      	strh	r3, [r7, #4]

    data1 = TF02_Get_Dist(&huart1);
 80007aa:	4818      	ldr	r0, [pc, #96]	@ (800080c <UP_Train_Status+0x74>)
 80007ac:	f000 f874 	bl	8000898 <TF02_Get_Dist>
 80007b0:	4603      	mov	r3, r0
 80007b2:	80fb      	strh	r3, [r7, #6]
    data2 = TF02_Get_Dist(&huart2);
 80007b4:	4816      	ldr	r0, [pc, #88]	@ (8000810 <UP_Train_Status+0x78>)
 80007b6:	f000 f86f 	bl	8000898 <TF02_Get_Dist>
 80007ba:	4603      	mov	r3, r0
 80007bc:	80bb      	strh	r3, [r7, #4]

    if( (data1 == 0xFFFF) || (data2 == 0xFFFF) )
 80007be:	88fb      	ldrh	r3, [r7, #6]
 80007c0:	b29b      	uxth	r3, r3
 80007c2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80007c6:	4293      	cmp	r3, r2
 80007c8:	d005      	beq.n	80007d6 <UP_Train_Status+0x3e>
 80007ca:	88bb      	ldrh	r3, [r7, #4]
 80007cc:	b29b      	uxth	r3, r3
 80007ce:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80007d2:	4293      	cmp	r3, r2
 80007d4:	d103      	bne.n	80007de <UP_Train_Status+0x46>
    {
    	temp_tx_buff[2] = 0xFF; /* Sensor Error */
 80007d6:	4b0f      	ldr	r3, [pc, #60]	@ (8000814 <UP_Train_Status+0x7c>)
 80007d8:	22ff      	movs	r2, #255	@ 0xff
 80007da:	709a      	strb	r2, [r3, #2]
 80007dc:	e011      	b.n	8000802 <UP_Train_Status+0x6a>
    }
    else if( (data1 <= TRAIN_DIST) && (data2 <= TRAIN_DIST) )
 80007de:	88fb      	ldrh	r3, [r7, #6]
 80007e0:	b29b      	uxth	r3, r3
 80007e2:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 80007e6:	d808      	bhi.n	80007fa <UP_Train_Status+0x62>
 80007e8:	88bb      	ldrh	r3, [r7, #4]
 80007ea:	b29b      	uxth	r3, r3
 80007ec:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 80007f0:	d803      	bhi.n	80007fa <UP_Train_Status+0x62>
    {
    	temp_tx_buff[2] = 0x01; /* Train Detected */
 80007f2:	4b08      	ldr	r3, [pc, #32]	@ (8000814 <UP_Train_Status+0x7c>)
 80007f4:	2201      	movs	r2, #1
 80007f6:	709a      	strb	r2, [r3, #2]
 80007f8:	e003      	b.n	8000802 <UP_Train_Status+0x6a>
    }
    else temp_tx_buff[2] = 0x00; /* No Train Detected */
 80007fa:	4b06      	ldr	r3, [pc, #24]	@ (8000814 <UP_Train_Status+0x7c>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	709a      	strb	r2, [r3, #2]

}
 8000800:	bf00      	nop
 8000802:	bf00      	nop
 8000804:	3708      	adds	r7, #8
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	200001dc 	.word	0x200001dc
 8000810:	20000224 	.word	0x20000224
 8000814:	20000004 	.word	0x20000004

08000818 <DOWN_Train_Status>:
  *         Compare it with TRAIN_DIST MACRO and changes temp_tx_buff[3] - DOWN direction
  * @param  None
  * @retval None
  */
void DOWN_Train_Status()
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
	volatile uint16_t data3 = {0xFFFF};
 800081e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000822:	80fb      	strh	r3, [r7, #6]
	volatile uint16_t data4 = {0xFFFF};
 8000824:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000828:	80bb      	strh	r3, [r7, #4]

    data3 = TF02_Get_Dist(&huart3);
 800082a:	4818      	ldr	r0, [pc, #96]	@ (800088c <DOWN_Train_Status+0x74>)
 800082c:	f000 f834 	bl	8000898 <TF02_Get_Dist>
 8000830:	4603      	mov	r3, r0
 8000832:	80fb      	strh	r3, [r7, #6]
    data4 = TF02_Get_Dist(&huart4);
 8000834:	4816      	ldr	r0, [pc, #88]	@ (8000890 <DOWN_Train_Status+0x78>)
 8000836:	f000 f82f 	bl	8000898 <TF02_Get_Dist>
 800083a:	4603      	mov	r3, r0
 800083c:	80bb      	strh	r3, [r7, #4]

    if( (data3 == 0xFFFF) || (data4 == 0xFFFF) )
 800083e:	88fb      	ldrh	r3, [r7, #6]
 8000840:	b29b      	uxth	r3, r3
 8000842:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000846:	4293      	cmp	r3, r2
 8000848:	d005      	beq.n	8000856 <DOWN_Train_Status+0x3e>
 800084a:	88bb      	ldrh	r3, [r7, #4]
 800084c:	b29b      	uxth	r3, r3
 800084e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000852:	4293      	cmp	r3, r2
 8000854:	d103      	bne.n	800085e <DOWN_Train_Status+0x46>
    {
    	temp_tx_buff[3] = 0xFF; /* Sensor Error */
 8000856:	4b0f      	ldr	r3, [pc, #60]	@ (8000894 <DOWN_Train_Status+0x7c>)
 8000858:	22ff      	movs	r2, #255	@ 0xff
 800085a:	70da      	strb	r2, [r3, #3]
 800085c:	e011      	b.n	8000882 <DOWN_Train_Status+0x6a>
    }
    else if( (data3 <= TRAIN_DIST) && (data4 <= TRAIN_DIST) )
 800085e:	88fb      	ldrh	r3, [r7, #6]
 8000860:	b29b      	uxth	r3, r3
 8000862:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8000866:	d808      	bhi.n	800087a <DOWN_Train_Status+0x62>
 8000868:	88bb      	ldrh	r3, [r7, #4]
 800086a:	b29b      	uxth	r3, r3
 800086c:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8000870:	d803      	bhi.n	800087a <DOWN_Train_Status+0x62>
    {
    	temp_tx_buff[3] = 0x01; /* Train Detected */
 8000872:	4b08      	ldr	r3, [pc, #32]	@ (8000894 <DOWN_Train_Status+0x7c>)
 8000874:	2201      	movs	r2, #1
 8000876:	70da      	strb	r2, [r3, #3]
 8000878:	e003      	b.n	8000882 <DOWN_Train_Status+0x6a>
    }
    else temp_tx_buff[3] = 0x00; /* No Train Detected */
 800087a:	4b06      	ldr	r3, [pc, #24]	@ (8000894 <DOWN_Train_Status+0x7c>)
 800087c:	2200      	movs	r2, #0
 800087e:	70da      	strb	r2, [r3, #3]

}
 8000880:	bf00      	nop
 8000882:	bf00      	nop
 8000884:	3708      	adds	r7, #8
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	2000026c 	.word	0x2000026c
 8000890:	20000194 	.word	0x20000194
 8000894:	20000004 	.word	0x20000004

08000898 <TF02_Get_Dist>:
  *               the configuration information for the specified UART module.
  * @retval 16-bit distance data in cm (by default)
  */

uint16_t TF02_Get_Dist(UART_HandleTypeDef *UART_BUS)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b084      	sub	sp, #16
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
	volatile uint8_t data[8];

	if(HAL_UART_Receive(UART_BUS,(uint8_t*)data, 8, 100)== HAL_OK)
 80008a0:	f107 0108 	add.w	r1, r7, #8
 80008a4:	2364      	movs	r3, #100	@ 0x64
 80008a6:	2208      	movs	r2, #8
 80008a8:	6878      	ldr	r0, [r7, #4]
 80008aa:	f004 f925 	bl	8004af8 <HAL_UART_Receive>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d112      	bne.n	80008da <TF02_Get_Dist+0x42>
	{
		if (data[1] == 0x59 && data[2] == 0x59)
 80008b4:	7a7b      	ldrb	r3, [r7, #9]
 80008b6:	b2db      	uxtb	r3, r3
 80008b8:	2b59      	cmp	r3, #89	@ 0x59
 80008ba:	d111      	bne.n	80008e0 <TF02_Get_Dist+0x48>
 80008bc:	7abb      	ldrb	r3, [r7, #10]
 80008be:	b2db      	uxtb	r3, r3
 80008c0:	2b59      	cmp	r3, #89	@ 0x59
 80008c2:	d10d      	bne.n	80008e0 <TF02_Get_Dist+0x48>
		{
			return (data[4] << 8 | data[3]);
 80008c4:	7b3b      	ldrb	r3, [r7, #12]
 80008c6:	b2db      	uxtb	r3, r3
 80008c8:	021b      	lsls	r3, r3, #8
 80008ca:	b21a      	sxth	r2, r3
 80008cc:	7afb      	ldrb	r3, [r7, #11]
 80008ce:	b2db      	uxtb	r3, r3
 80008d0:	b21b      	sxth	r3, r3
 80008d2:	4313      	orrs	r3, r2
 80008d4:	b21b      	sxth	r3, r3
 80008d6:	b29b      	uxth	r3, r3
 80008d8:	e004      	b.n	80008e4 <TF02_Get_Dist+0x4c>
		}
	}
	else return 0xFFFF;
 80008da:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80008de:	e001      	b.n	80008e4 <TF02_Get_Dist+0x4c>
	return 0xFFFF;
 80008e0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 80008e4:	4618      	mov	r0, r3
 80008e6:	3710      	adds	r7, #16
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}

080008ec <Start_Polling>:
  * @brief  Starts reading the status of two BOOM , all 4 lidar etc
  * @param  None
  * @retval None
  */
void Start_Polling()
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
	Boom1_Status();
 80008f0:	f7ff fe9c 	bl	800062c <Boom1_Status>
	Boom2_Status();
 80008f4:	f7ff fef4 	bl	80006e0 <Boom2_Status>
	UP_Train_Status();
 80008f8:	f7ff ff4e 	bl	8000798 <UP_Train_Status>
	DOWN_Train_Status();
 80008fc:	f7ff ff8c 	bl	8000818 <DOWN_Train_Status>
}
 8000900:	bf00      	nop
 8000902:	bd80      	pop	{r7, pc}

08000904 <Send_If_Change>:
  * @brief  Sends Data via USB VCP whenever a change in the status of BOOM or Lidar data is detected
  * @param  None
  * @retval None
  */
void Send_If_Change()
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
	if( (temp_tx_buff[2] != tx_buff[2]) || (temp_tx_buff[3] != tx_buff[3]) ||
 8000908:	4b19      	ldr	r3, [pc, #100]	@ (8000970 <Send_If_Change+0x6c>)
 800090a:	789b      	ldrb	r3, [r3, #2]
 800090c:	b2da      	uxtb	r2, r3
 800090e:	4b19      	ldr	r3, [pc, #100]	@ (8000974 <Send_If_Change+0x70>)
 8000910:	789b      	ldrb	r3, [r3, #2]
 8000912:	b2db      	uxtb	r3, r3
 8000914:	429a      	cmp	r2, r3
 8000916:	d127      	bne.n	8000968 <Send_If_Change+0x64>
 8000918:	4b15      	ldr	r3, [pc, #84]	@ (8000970 <Send_If_Change+0x6c>)
 800091a:	78db      	ldrb	r3, [r3, #3]
 800091c:	b2da      	uxtb	r2, r3
 800091e:	4b15      	ldr	r3, [pc, #84]	@ (8000974 <Send_If_Change+0x70>)
 8000920:	78db      	ldrb	r3, [r3, #3]
 8000922:	b2db      	uxtb	r3, r3
 8000924:	429a      	cmp	r2, r3
 8000926:	d11f      	bne.n	8000968 <Send_If_Change+0x64>
		(temp_tx_buff[4] != tx_buff[4]) || (temp_tx_buff[5] != tx_buff[5]) ||
 8000928:	4b11      	ldr	r3, [pc, #68]	@ (8000970 <Send_If_Change+0x6c>)
 800092a:	791b      	ldrb	r3, [r3, #4]
 800092c:	b2da      	uxtb	r2, r3
 800092e:	4b11      	ldr	r3, [pc, #68]	@ (8000974 <Send_If_Change+0x70>)
 8000930:	791b      	ldrb	r3, [r3, #4]
 8000932:	b2db      	uxtb	r3, r3
	if( (temp_tx_buff[2] != tx_buff[2]) || (temp_tx_buff[3] != tx_buff[3]) ||
 8000934:	429a      	cmp	r2, r3
 8000936:	d117      	bne.n	8000968 <Send_If_Change+0x64>
		(temp_tx_buff[4] != tx_buff[4]) || (temp_tx_buff[5] != tx_buff[5]) ||
 8000938:	4b0d      	ldr	r3, [pc, #52]	@ (8000970 <Send_If_Change+0x6c>)
 800093a:	795b      	ldrb	r3, [r3, #5]
 800093c:	b2da      	uxtb	r2, r3
 800093e:	4b0d      	ldr	r3, [pc, #52]	@ (8000974 <Send_If_Change+0x70>)
 8000940:	795b      	ldrb	r3, [r3, #5]
 8000942:	b2db      	uxtb	r3, r3
 8000944:	429a      	cmp	r2, r3
 8000946:	d10f      	bne.n	8000968 <Send_If_Change+0x64>
		(temp_tx_buff[6] != tx_buff[6]) || (temp_tx_buff[7] != tx_buff[7]) )
 8000948:	4b09      	ldr	r3, [pc, #36]	@ (8000970 <Send_If_Change+0x6c>)
 800094a:	799b      	ldrb	r3, [r3, #6]
 800094c:	b2da      	uxtb	r2, r3
 800094e:	4b09      	ldr	r3, [pc, #36]	@ (8000974 <Send_If_Change+0x70>)
 8000950:	799b      	ldrb	r3, [r3, #6]
 8000952:	b2db      	uxtb	r3, r3
		(temp_tx_buff[4] != tx_buff[4]) || (temp_tx_buff[5] != tx_buff[5]) ||
 8000954:	429a      	cmp	r2, r3
 8000956:	d107      	bne.n	8000968 <Send_If_Change+0x64>
		(temp_tx_buff[6] != tx_buff[6]) || (temp_tx_buff[7] != tx_buff[7]) )
 8000958:	4b05      	ldr	r3, [pc, #20]	@ (8000970 <Send_If_Change+0x6c>)
 800095a:	79db      	ldrb	r3, [r3, #7]
 800095c:	b2da      	uxtb	r2, r3
 800095e:	4b05      	ldr	r3, [pc, #20]	@ (8000974 <Send_If_Change+0x70>)
 8000960:	79db      	ldrb	r3, [r3, #7]
 8000962:	b2db      	uxtb	r3, r3
 8000964:	429a      	cmp	r2, r3
 8000966:	d001      	beq.n	800096c <Send_If_Change+0x68>
	{
		Transmit_Msg();
 8000968:	f7ff fe04 	bl	8000574 <Transmit_Msg>
	}
}
 800096c:	bf00      	nop
 800096e:	bd80      	pop	{r7, pc}
 8000970:	20000004 	.word	0x20000004
 8000974:	20000140 	.word	0x20000140

08000978 <Receive_Handler>:
  * @brief  Handles Recieved message and trigger lever lock , alarm , and data transmit
  * @param  None
  * @retval None
  */
void Receive_Handler()
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
	Receive_Msg();
 800097c:	f7ff fe30 	bl	80005e0 <Receive_Msg>
	Lever_Lock();
 8000980:	f7ff fdb8 	bl	80004f4 <Lever_Lock>
	Alarm_ON();
 8000984:	f7ff fdd6 	bl	8000534 <Alarm_ON>
}
 8000988:	bf00      	nop
 800098a:	bd80      	pop	{r7, pc}

0800098c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000990:	f000 fbf6 	bl	8001180 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000994:	f000 f81c 	bl	80009d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000998:	f000 f996 	bl	8000cc8 <MX_GPIO_Init>
  MX_TIM1_Init();
 800099c:	f000 f884 	bl	8000aa8 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80009a0:	f000 f914 	bl	8000bcc <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80009a4:	f000 f93c 	bl	8000c20 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80009a8:	f000 f964 	bl	8000c74 <MX_USART3_UART_Init>
  MX_USB_DEVICE_Init();
 80009ac:	f007 ffcc 	bl	8008948 <MX_USB_DEVICE_Init>
  MX_UART4_Init();
 80009b0:	f000 f8e2 	bl	8000b78 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */

  // Start TIM1 with interrupt
  HAL_TIM_Base_Start_IT(&htim1); /* 15s Interrupt Timer Start */
 80009b4:	4805      	ldr	r0, [pc, #20]	@ (80009cc <main+0x40>)
 80009b6:	f003 fb51 	bl	800405c <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Start_Polling(); /* Starts Polling Boom status along with Train passing and save the status */
 80009ba:	f7ff ff97 	bl	80008ec <Start_Polling>
	  Send_If_Change(); /* If any change is detected with the Previous state of any Boom or Train pass tx is enabled */
 80009be:	f7ff ffa1 	bl	8000904 <Send_If_Change>
	  Receive_Handler(); /* Used to Trigger lever lock and alarm based on rx data */
 80009c2:	f7ff ffd9 	bl	8000978 <Receive_Handler>
	  Start_Polling(); /* Starts Polling Boom status along with Train passing and save the status */
 80009c6:	bf00      	nop
 80009c8:	e7f7      	b.n	80009ba <main+0x2e>
 80009ca:	bf00      	nop
 80009cc:	2000014c 	.word	0x2000014c

080009d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b094      	sub	sp, #80	@ 0x50
 80009d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009d6:	f107 031c 	add.w	r3, r7, #28
 80009da:	2234      	movs	r2, #52	@ 0x34
 80009dc:	2100      	movs	r1, #0
 80009de:	4618      	mov	r0, r3
 80009e0:	f008 fd58 	bl	8009494 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009e4:	f107 0308 	add.w	r3, r7, #8
 80009e8:	2200      	movs	r2, #0
 80009ea:	601a      	str	r2, [r3, #0]
 80009ec:	605a      	str	r2, [r3, #4]
 80009ee:	609a      	str	r2, [r3, #8]
 80009f0:	60da      	str	r2, [r3, #12]
 80009f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009f4:	2300      	movs	r3, #0
 80009f6:	607b      	str	r3, [r7, #4]
 80009f8:	4b29      	ldr	r3, [pc, #164]	@ (8000aa0 <SystemClock_Config+0xd0>)
 80009fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009fc:	4a28      	ldr	r2, [pc, #160]	@ (8000aa0 <SystemClock_Config+0xd0>)
 80009fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a02:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a04:	4b26      	ldr	r3, [pc, #152]	@ (8000aa0 <SystemClock_Config+0xd0>)
 8000a06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a08:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a0c:	607b      	str	r3, [r7, #4]
 8000a0e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a10:	2300      	movs	r3, #0
 8000a12:	603b      	str	r3, [r7, #0]
 8000a14:	4b23      	ldr	r3, [pc, #140]	@ (8000aa4 <SystemClock_Config+0xd4>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000a1c:	4a21      	ldr	r2, [pc, #132]	@ (8000aa4 <SystemClock_Config+0xd4>)
 8000a1e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a22:	6013      	str	r3, [r2, #0]
 8000a24:	4b1f      	ldr	r3, [pc, #124]	@ (8000aa4 <SystemClock_Config+0xd4>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000a2c:	603b      	str	r3, [r7, #0]
 8000a2e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a30:	2301      	movs	r3, #1
 8000a32:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a34:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a38:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a3a:	2302      	movs	r3, #2
 8000a3c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a3e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000a42:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000a44:	2304      	movs	r3, #4
 8000a46:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000a48:	2348      	movs	r3, #72	@ 0x48
 8000a4a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a4c:	2302      	movs	r3, #2
 8000a4e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000a50:	2303      	movs	r3, #3
 8000a52:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a54:	2302      	movs	r3, #2
 8000a56:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a58:	f107 031c 	add.w	r3, r7, #28
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f003 f80f 	bl	8003a80 <HAL_RCC_OscConfig>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d001      	beq.n	8000a6c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000a68:	f000 f9aa 	bl	8000dc0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a6c:	230f      	movs	r3, #15
 8000a6e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a70:	2302      	movs	r3, #2
 8000a72:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a74:	2300      	movs	r3, #0
 8000a76:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a78:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a7c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a82:	f107 0308 	add.w	r3, r7, #8
 8000a86:	2102      	movs	r1, #2
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f002 f985 	bl	8002d98 <HAL_RCC_ClockConfig>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000a94:	f000 f994 	bl	8000dc0 <Error_Handler>
  }
}
 8000a98:	bf00      	nop
 8000a9a:	3750      	adds	r7, #80	@ 0x50
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	40023800 	.word	0x40023800
 8000aa4:	40007000 	.word	0x40007000

08000aa8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b08c      	sub	sp, #48	@ 0x30
 8000aac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000aae:	f107 0320 	add.w	r3, r7, #32
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	601a      	str	r2, [r3, #0]
 8000ab6:	605a      	str	r2, [r3, #4]
 8000ab8:	609a      	str	r2, [r3, #8]
 8000aba:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000abc:	f107 030c 	add.w	r3, r7, #12
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	601a      	str	r2, [r3, #0]
 8000ac4:	605a      	str	r2, [r3, #4]
 8000ac6:	609a      	str	r2, [r3, #8]
 8000ac8:	60da      	str	r2, [r3, #12]
 8000aca:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000acc:	1d3b      	adds	r3, r7, #4
 8000ace:	2200      	movs	r2, #0
 8000ad0:	601a      	str	r2, [r3, #0]
 8000ad2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000ad4:	4b26      	ldr	r3, [pc, #152]	@ (8000b70 <MX_TIM1_Init+0xc8>)
 8000ad6:	4a27      	ldr	r2, [pc, #156]	@ (8000b74 <MX_TIM1_Init+0xcc>)
 8000ad8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16467;
 8000ada:	4b25      	ldr	r3, [pc, #148]	@ (8000b70 <MX_TIM1_Init+0xc8>)
 8000adc:	f244 0253 	movw	r2, #16467	@ 0x4053
 8000ae0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ae2:	4b23      	ldr	r3, [pc, #140]	@ (8000b70 <MX_TIM1_Init+0xc8>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000ae8:	4b21      	ldr	r3, [pc, #132]	@ (8000b70 <MX_TIM1_Init+0xc8>)
 8000aea:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000aee:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000af0:	4b1f      	ldr	r3, [pc, #124]	@ (8000b70 <MX_TIM1_Init+0xc8>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000af6:	4b1e      	ldr	r3, [pc, #120]	@ (8000b70 <MX_TIM1_Init+0xc8>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000afc:	4b1c      	ldr	r3, [pc, #112]	@ (8000b70 <MX_TIM1_Init+0xc8>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000b02:	481b      	ldr	r0, [pc, #108]	@ (8000b70 <MX_TIM1_Init+0xc8>)
 8000b04:	f003 fa5a 	bl	8003fbc <HAL_TIM_Base_Init>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 8000b0e:	f000 f957 	bl	8000dc0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b12:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b16:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000b18:	f107 0320 	add.w	r3, r7, #32
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	4814      	ldr	r0, [pc, #80]	@ (8000b70 <MX_TIM1_Init+0xc8>)
 8000b20:	f003 fbfc 	bl	800431c <HAL_TIM_ConfigClockSource>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <MX_TIM1_Init+0x86>
  {
    Error_Handler();
 8000b2a:	f000 f949 	bl	8000dc0 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000b32:	2300      	movs	r3, #0
 8000b34:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8000b36:	f107 030c 	add.w	r3, r7, #12
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	480c      	ldr	r0, [pc, #48]	@ (8000b70 <MX_TIM1_Init+0xc8>)
 8000b3e:	f003 fcb4 	bl	80044aa <HAL_TIM_SlaveConfigSynchro>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d001      	beq.n	8000b4c <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000b48:	f000 f93a 	bl	8000dc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b50:	2300      	movs	r3, #0
 8000b52:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b54:	1d3b      	adds	r3, r7, #4
 8000b56:	4619      	mov	r1, r3
 8000b58:	4805      	ldr	r0, [pc, #20]	@ (8000b70 <MX_TIM1_Init+0xc8>)
 8000b5a:	f003 feed 	bl	8004938 <HAL_TIMEx_MasterConfigSynchronization>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 8000b64:	f000 f92c 	bl	8000dc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000b68:	bf00      	nop
 8000b6a:	3730      	adds	r7, #48	@ 0x30
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	2000014c 	.word	0x2000014c
 8000b74:	40010000 	.word	0x40010000

08000b78 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000b7c:	4b11      	ldr	r3, [pc, #68]	@ (8000bc4 <MX_UART4_Init+0x4c>)
 8000b7e:	4a12      	ldr	r2, [pc, #72]	@ (8000bc8 <MX_UART4_Init+0x50>)
 8000b80:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000b82:	4b10      	ldr	r3, [pc, #64]	@ (8000bc4 <MX_UART4_Init+0x4c>)
 8000b84:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b88:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000b8a:	4b0e      	ldr	r3, [pc, #56]	@ (8000bc4 <MX_UART4_Init+0x4c>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000b90:	4b0c      	ldr	r3, [pc, #48]	@ (8000bc4 <MX_UART4_Init+0x4c>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000b96:	4b0b      	ldr	r3, [pc, #44]	@ (8000bc4 <MX_UART4_Init+0x4c>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000b9c:	4b09      	ldr	r3, [pc, #36]	@ (8000bc4 <MX_UART4_Init+0x4c>)
 8000b9e:	220c      	movs	r2, #12
 8000ba0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ba2:	4b08      	ldr	r3, [pc, #32]	@ (8000bc4 <MX_UART4_Init+0x4c>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ba8:	4b06      	ldr	r3, [pc, #24]	@ (8000bc4 <MX_UART4_Init+0x4c>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000bae:	4805      	ldr	r0, [pc, #20]	@ (8000bc4 <MX_UART4_Init+0x4c>)
 8000bb0:	f003 ff52 	bl	8004a58 <HAL_UART_Init>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8000bba:	f000 f901 	bl	8000dc0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000bbe:	bf00      	nop
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	20000194 	.word	0x20000194
 8000bc8:	40004c00 	.word	0x40004c00

08000bcc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000bd0:	4b11      	ldr	r3, [pc, #68]	@ (8000c18 <MX_USART1_UART_Init+0x4c>)
 8000bd2:	4a12      	ldr	r2, [pc, #72]	@ (8000c1c <MX_USART1_UART_Init+0x50>)
 8000bd4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000bd6:	4b10      	ldr	r3, [pc, #64]	@ (8000c18 <MX_USART1_UART_Init+0x4c>)
 8000bd8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000bdc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000bde:	4b0e      	ldr	r3, [pc, #56]	@ (8000c18 <MX_USART1_UART_Init+0x4c>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000be4:	4b0c      	ldr	r3, [pc, #48]	@ (8000c18 <MX_USART1_UART_Init+0x4c>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000bea:	4b0b      	ldr	r3, [pc, #44]	@ (8000c18 <MX_USART1_UART_Init+0x4c>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000bf0:	4b09      	ldr	r3, [pc, #36]	@ (8000c18 <MX_USART1_UART_Init+0x4c>)
 8000bf2:	220c      	movs	r2, #12
 8000bf4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bf6:	4b08      	ldr	r3, [pc, #32]	@ (8000c18 <MX_USART1_UART_Init+0x4c>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bfc:	4b06      	ldr	r3, [pc, #24]	@ (8000c18 <MX_USART1_UART_Init+0x4c>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c02:	4805      	ldr	r0, [pc, #20]	@ (8000c18 <MX_USART1_UART_Init+0x4c>)
 8000c04:	f003 ff28 	bl	8004a58 <HAL_UART_Init>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d001      	beq.n	8000c12 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000c0e:	f000 f8d7 	bl	8000dc0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c12:	bf00      	nop
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	200001dc 	.word	0x200001dc
 8000c1c:	40011000 	.word	0x40011000

08000c20 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c24:	4b11      	ldr	r3, [pc, #68]	@ (8000c6c <MX_USART2_UART_Init+0x4c>)
 8000c26:	4a12      	ldr	r2, [pc, #72]	@ (8000c70 <MX_USART2_UART_Init+0x50>)
 8000c28:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c2a:	4b10      	ldr	r3, [pc, #64]	@ (8000c6c <MX_USART2_UART_Init+0x4c>)
 8000c2c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c30:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c32:	4b0e      	ldr	r3, [pc, #56]	@ (8000c6c <MX_USART2_UART_Init+0x4c>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c38:	4b0c      	ldr	r3, [pc, #48]	@ (8000c6c <MX_USART2_UART_Init+0x4c>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c3e:	4b0b      	ldr	r3, [pc, #44]	@ (8000c6c <MX_USART2_UART_Init+0x4c>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c44:	4b09      	ldr	r3, [pc, #36]	@ (8000c6c <MX_USART2_UART_Init+0x4c>)
 8000c46:	220c      	movs	r2, #12
 8000c48:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c4a:	4b08      	ldr	r3, [pc, #32]	@ (8000c6c <MX_USART2_UART_Init+0x4c>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c50:	4b06      	ldr	r3, [pc, #24]	@ (8000c6c <MX_USART2_UART_Init+0x4c>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c56:	4805      	ldr	r0, [pc, #20]	@ (8000c6c <MX_USART2_UART_Init+0x4c>)
 8000c58:	f003 fefe 	bl	8004a58 <HAL_UART_Init>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000c62:	f000 f8ad 	bl	8000dc0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c66:	bf00      	nop
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	20000224 	.word	0x20000224
 8000c70:	40004400 	.word	0x40004400

08000c74 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c78:	4b11      	ldr	r3, [pc, #68]	@ (8000cc0 <MX_USART3_UART_Init+0x4c>)
 8000c7a:	4a12      	ldr	r2, [pc, #72]	@ (8000cc4 <MX_USART3_UART_Init+0x50>)
 8000c7c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000c7e:	4b10      	ldr	r3, [pc, #64]	@ (8000cc0 <MX_USART3_UART_Init+0x4c>)
 8000c80:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c84:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c86:	4b0e      	ldr	r3, [pc, #56]	@ (8000cc0 <MX_USART3_UART_Init+0x4c>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c8c:	4b0c      	ldr	r3, [pc, #48]	@ (8000cc0 <MX_USART3_UART_Init+0x4c>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c92:	4b0b      	ldr	r3, [pc, #44]	@ (8000cc0 <MX_USART3_UART_Init+0x4c>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c98:	4b09      	ldr	r3, [pc, #36]	@ (8000cc0 <MX_USART3_UART_Init+0x4c>)
 8000c9a:	220c      	movs	r2, #12
 8000c9c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c9e:	4b08      	ldr	r3, [pc, #32]	@ (8000cc0 <MX_USART3_UART_Init+0x4c>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ca4:	4b06      	ldr	r3, [pc, #24]	@ (8000cc0 <MX_USART3_UART_Init+0x4c>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000caa:	4805      	ldr	r0, [pc, #20]	@ (8000cc0 <MX_USART3_UART_Init+0x4c>)
 8000cac:	f003 fed4 	bl	8004a58 <HAL_UART_Init>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000cb6:	f000 f883 	bl	8000dc0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000cba:	bf00      	nop
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	2000026c 	.word	0x2000026c
 8000cc4:	40004800 	.word	0x40004800

08000cc8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b08a      	sub	sp, #40	@ 0x28
 8000ccc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cce:	f107 0314 	add.w	r3, r7, #20
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	601a      	str	r2, [r3, #0]
 8000cd6:	605a      	str	r2, [r3, #4]
 8000cd8:	609a      	str	r2, [r3, #8]
 8000cda:	60da      	str	r2, [r3, #12]
 8000cdc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cde:	2300      	movs	r3, #0
 8000ce0:	613b      	str	r3, [r7, #16]
 8000ce2:	4b34      	ldr	r3, [pc, #208]	@ (8000db4 <MX_GPIO_Init+0xec>)
 8000ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ce6:	4a33      	ldr	r2, [pc, #204]	@ (8000db4 <MX_GPIO_Init+0xec>)
 8000ce8:	f043 0304 	orr.w	r3, r3, #4
 8000cec:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cee:	4b31      	ldr	r3, [pc, #196]	@ (8000db4 <MX_GPIO_Init+0xec>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cf2:	f003 0304 	and.w	r3, r3, #4
 8000cf6:	613b      	str	r3, [r7, #16]
 8000cf8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	60fb      	str	r3, [r7, #12]
 8000cfe:	4b2d      	ldr	r3, [pc, #180]	@ (8000db4 <MX_GPIO_Init+0xec>)
 8000d00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d02:	4a2c      	ldr	r2, [pc, #176]	@ (8000db4 <MX_GPIO_Init+0xec>)
 8000d04:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d08:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d0a:	4b2a      	ldr	r3, [pc, #168]	@ (8000db4 <MX_GPIO_Init+0xec>)
 8000d0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d12:	60fb      	str	r3, [r7, #12]
 8000d14:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d16:	2300      	movs	r3, #0
 8000d18:	60bb      	str	r3, [r7, #8]
 8000d1a:	4b26      	ldr	r3, [pc, #152]	@ (8000db4 <MX_GPIO_Init+0xec>)
 8000d1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d1e:	4a25      	ldr	r2, [pc, #148]	@ (8000db4 <MX_GPIO_Init+0xec>)
 8000d20:	f043 0301 	orr.w	r3, r3, #1
 8000d24:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d26:	4b23      	ldr	r3, [pc, #140]	@ (8000db4 <MX_GPIO_Init+0xec>)
 8000d28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d2a:	f003 0301 	and.w	r3, r3, #1
 8000d2e:	60bb      	str	r3, [r7, #8]
 8000d30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d32:	2300      	movs	r3, #0
 8000d34:	607b      	str	r3, [r7, #4]
 8000d36:	4b1f      	ldr	r3, [pc, #124]	@ (8000db4 <MX_GPIO_Init+0xec>)
 8000d38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d3a:	4a1e      	ldr	r2, [pc, #120]	@ (8000db4 <MX_GPIO_Init+0xec>)
 8000d3c:	f043 0302 	orr.w	r3, r3, #2
 8000d40:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d42:	4b1c      	ldr	r3, [pc, #112]	@ (8000db4 <MX_GPIO_Init+0xec>)
 8000d44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d46:	f003 0302 	and.w	r3, r3, #2
 8000d4a:	607b      	str	r3, [r7, #4]
 8000d4c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, AT_Pin|LT_Pin, GPIO_PIN_RESET);
 8000d4e:	2200      	movs	r2, #0
 8000d50:	f44f 51a0 	mov.w	r1, #5120	@ 0x1400
 8000d54:	4818      	ldr	r0, [pc, #96]	@ (8000db8 <MX_GPIO_Init+0xf0>)
 8000d56:	f000 fd67 	bl	8001828 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BOOM1_LS22_Pin BOOM1_LS11_Pin BOOM1_LS12_Pin */
  GPIO_InitStruct.Pin = BOOM1_LS22_Pin|BOOM1_LS11_Pin|BOOM1_LS12_Pin;
 8000d5a:	f242 030c 	movw	r3, #8204	@ 0x200c
 8000d5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d60:	2300      	movs	r3, #0
 8000d62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d64:	2301      	movs	r3, #1
 8000d66:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d68:	f107 0314 	add.w	r3, r7, #20
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	4812      	ldr	r0, [pc, #72]	@ (8000db8 <MX_GPIO_Init+0xf0>)
 8000d70:	f000 fbae 	bl	80014d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : BOOM2_LS22_Pin BOOM2_LS11_Pin BOOM2_LS12_Pin BOOM2_LS21_Pin
                           BOOM1_LS21_Pin */
  GPIO_InitStruct.Pin = BOOM2_LS22_Pin|BOOM2_LS11_Pin|BOOM2_LS12_Pin|BOOM2_LS21_Pin
 8000d74:	f24e 0382 	movw	r3, #57474	@ 0xe082
 8000d78:	617b      	str	r3, [r7, #20]
                          |BOOM1_LS21_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d7e:	2301      	movs	r3, #1
 8000d80:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d82:	f107 0314 	add.w	r3, r7, #20
 8000d86:	4619      	mov	r1, r3
 8000d88:	480c      	ldr	r0, [pc, #48]	@ (8000dbc <MX_GPIO_Init+0xf4>)
 8000d8a:	f000 fba1 	bl	80014d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : AT_Pin LT_Pin */
  GPIO_InitStruct.Pin = AT_Pin|LT_Pin;
 8000d8e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000d92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d94:	2301      	movs	r3, #1
 8000d96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000da0:	f107 0314 	add.w	r3, r7, #20
 8000da4:	4619      	mov	r1, r3
 8000da6:	4804      	ldr	r0, [pc, #16]	@ (8000db8 <MX_GPIO_Init+0xf0>)
 8000da8:	f000 fb92 	bl	80014d0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000dac:	bf00      	nop
 8000dae:	3728      	adds	r7, #40	@ 0x28
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	40023800 	.word	0x40023800
 8000db8:	40020800 	.word	0x40020800
 8000dbc:	40020400 	.word	0x40020400

08000dc0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dc4:	b672      	cpsid	i
}
 8000dc6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dc8:	bf00      	nop
 8000dca:	e7fd      	b.n	8000dc8 <Error_Handler+0x8>

08000dcc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	607b      	str	r3, [r7, #4]
 8000dd6:	4b10      	ldr	r3, [pc, #64]	@ (8000e18 <HAL_MspInit+0x4c>)
 8000dd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dda:	4a0f      	ldr	r2, [pc, #60]	@ (8000e18 <HAL_MspInit+0x4c>)
 8000ddc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000de0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000de2:	4b0d      	ldr	r3, [pc, #52]	@ (8000e18 <HAL_MspInit+0x4c>)
 8000de4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000de6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000dea:	607b      	str	r3, [r7, #4]
 8000dec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dee:	2300      	movs	r3, #0
 8000df0:	603b      	str	r3, [r7, #0]
 8000df2:	4b09      	ldr	r3, [pc, #36]	@ (8000e18 <HAL_MspInit+0x4c>)
 8000df4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000df6:	4a08      	ldr	r2, [pc, #32]	@ (8000e18 <HAL_MspInit+0x4c>)
 8000df8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000dfc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000dfe:	4b06      	ldr	r3, [pc, #24]	@ (8000e18 <HAL_MspInit+0x4c>)
 8000e00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e06:	603b      	str	r3, [r7, #0]
 8000e08:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000e0a:	2007      	movs	r0, #7
 8000e0c:	f000 fb1e 	bl	800144c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e10:	bf00      	nop
 8000e12:	3708      	adds	r7, #8
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	40023800 	.word	0x40023800

08000e1c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b084      	sub	sp, #16
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a0e      	ldr	r2, [pc, #56]	@ (8000e64 <HAL_TIM_Base_MspInit+0x48>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d115      	bne.n	8000e5a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000e2e:	2300      	movs	r3, #0
 8000e30:	60fb      	str	r3, [r7, #12]
 8000e32:	4b0d      	ldr	r3, [pc, #52]	@ (8000e68 <HAL_TIM_Base_MspInit+0x4c>)
 8000e34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e36:	4a0c      	ldr	r2, [pc, #48]	@ (8000e68 <HAL_TIM_Base_MspInit+0x4c>)
 8000e38:	f043 0301 	orr.w	r3, r3, #1
 8000e3c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e3e:	4b0a      	ldr	r3, [pc, #40]	@ (8000e68 <HAL_TIM_Base_MspInit+0x4c>)
 8000e40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e42:	f003 0301 	and.w	r3, r3, #1
 8000e46:	60fb      	str	r3, [r7, #12]
 8000e48:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	2100      	movs	r1, #0
 8000e4e:	2019      	movs	r0, #25
 8000e50:	f000 fb07 	bl	8001462 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000e54:	2019      	movs	r0, #25
 8000e56:	f000 fb20 	bl	800149a <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8000e5a:	bf00      	nop
 8000e5c:	3710      	adds	r7, #16
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	40010000 	.word	0x40010000
 8000e68:	40023800 	.word	0x40023800

08000e6c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b090      	sub	sp, #64	@ 0x40
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e74:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e78:	2200      	movs	r2, #0
 8000e7a:	601a      	str	r2, [r3, #0]
 8000e7c:	605a      	str	r2, [r3, #4]
 8000e7e:	609a      	str	r2, [r3, #8]
 8000e80:	60da      	str	r2, [r3, #12]
 8000e82:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a74      	ldr	r2, [pc, #464]	@ (800105c <HAL_UART_MspInit+0x1f0>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d12c      	bne.n	8000ee8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000e8e:	2300      	movs	r3, #0
 8000e90:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000e92:	4b73      	ldr	r3, [pc, #460]	@ (8001060 <HAL_UART_MspInit+0x1f4>)
 8000e94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e96:	4a72      	ldr	r2, [pc, #456]	@ (8001060 <HAL_UART_MspInit+0x1f4>)
 8000e98:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000e9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e9e:	4b70      	ldr	r3, [pc, #448]	@ (8001060 <HAL_UART_MspInit+0x1f4>)
 8000ea0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ea2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000ea6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000ea8:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eaa:	2300      	movs	r3, #0
 8000eac:	627b      	str	r3, [r7, #36]	@ 0x24
 8000eae:	4b6c      	ldr	r3, [pc, #432]	@ (8001060 <HAL_UART_MspInit+0x1f4>)
 8000eb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eb2:	4a6b      	ldr	r2, [pc, #428]	@ (8001060 <HAL_UART_MspInit+0x1f4>)
 8000eb4:	f043 0301 	orr.w	r3, r3, #1
 8000eb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eba:	4b69      	ldr	r3, [pc, #420]	@ (8001060 <HAL_UART_MspInit+0x1f4>)
 8000ebc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ebe:	f003 0301 	and.w	r3, r3, #1
 8000ec2:	627b      	str	r3, [r7, #36]	@ 0x24
 8000ec4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|G1_L2_Pin;
 8000ec6:	2303      	movs	r3, #3
 8000ec8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eca:	2302      	movs	r3, #2
 8000ecc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ed2:	2303      	movs	r3, #3
 8000ed4:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000ed6:	2308      	movs	r3, #8
 8000ed8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eda:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ede:	4619      	mov	r1, r3
 8000ee0:	4860      	ldr	r0, [pc, #384]	@ (8001064 <HAL_UART_MspInit+0x1f8>)
 8000ee2:	f000 faf5 	bl	80014d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000ee6:	e0b5      	b.n	8001054 <HAL_UART_MspInit+0x1e8>
  else if(huart->Instance==USART1)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a5e      	ldr	r2, [pc, #376]	@ (8001068 <HAL_UART_MspInit+0x1fc>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d12d      	bne.n	8000f4e <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	623b      	str	r3, [r7, #32]
 8000ef6:	4b5a      	ldr	r3, [pc, #360]	@ (8001060 <HAL_UART_MspInit+0x1f4>)
 8000ef8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000efa:	4a59      	ldr	r2, [pc, #356]	@ (8001060 <HAL_UART_MspInit+0x1f4>)
 8000efc:	f043 0310 	orr.w	r3, r3, #16
 8000f00:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f02:	4b57      	ldr	r3, [pc, #348]	@ (8001060 <HAL_UART_MspInit+0x1f4>)
 8000f04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f06:	f003 0310 	and.w	r3, r3, #16
 8000f0a:	623b      	str	r3, [r7, #32]
 8000f0c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f0e:	2300      	movs	r3, #0
 8000f10:	61fb      	str	r3, [r7, #28]
 8000f12:	4b53      	ldr	r3, [pc, #332]	@ (8001060 <HAL_UART_MspInit+0x1f4>)
 8000f14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f16:	4a52      	ldr	r2, [pc, #328]	@ (8001060 <HAL_UART_MspInit+0x1f4>)
 8000f18:	f043 0301 	orr.w	r3, r3, #1
 8000f1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f1e:	4b50      	ldr	r3, [pc, #320]	@ (8001060 <HAL_UART_MspInit+0x1f4>)
 8000f20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f22:	f003 0301 	and.w	r3, r3, #1
 8000f26:	61fb      	str	r3, [r7, #28]
 8000f28:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_9|G2_L1_Pin;
 8000f2a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000f2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f30:	2302      	movs	r3, #2
 8000f32:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f34:	2300      	movs	r3, #0
 8000f36:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f38:	2303      	movs	r3, #3
 8000f3a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000f3c:	2307      	movs	r3, #7
 8000f3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f40:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f44:	4619      	mov	r1, r3
 8000f46:	4847      	ldr	r0, [pc, #284]	@ (8001064 <HAL_UART_MspInit+0x1f8>)
 8000f48:	f000 fac2 	bl	80014d0 <HAL_GPIO_Init>
}
 8000f4c:	e082      	b.n	8001054 <HAL_UART_MspInit+0x1e8>
  else if(huart->Instance==USART2)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	4a46      	ldr	r2, [pc, #280]	@ (800106c <HAL_UART_MspInit+0x200>)
 8000f54:	4293      	cmp	r3, r2
 8000f56:	d12c      	bne.n	8000fb2 <HAL_UART_MspInit+0x146>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f58:	2300      	movs	r3, #0
 8000f5a:	61bb      	str	r3, [r7, #24]
 8000f5c:	4b40      	ldr	r3, [pc, #256]	@ (8001060 <HAL_UART_MspInit+0x1f4>)
 8000f5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f60:	4a3f      	ldr	r2, [pc, #252]	@ (8001060 <HAL_UART_MspInit+0x1f4>)
 8000f62:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f66:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f68:	4b3d      	ldr	r3, [pc, #244]	@ (8001060 <HAL_UART_MspInit+0x1f4>)
 8000f6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f70:	61bb      	str	r3, [r7, #24]
 8000f72:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f74:	2300      	movs	r3, #0
 8000f76:	617b      	str	r3, [r7, #20]
 8000f78:	4b39      	ldr	r3, [pc, #228]	@ (8001060 <HAL_UART_MspInit+0x1f4>)
 8000f7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f7c:	4a38      	ldr	r2, [pc, #224]	@ (8001060 <HAL_UART_MspInit+0x1f4>)
 8000f7e:	f043 0301 	orr.w	r3, r3, #1
 8000f82:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f84:	4b36      	ldr	r3, [pc, #216]	@ (8001060 <HAL_UART_MspInit+0x1f4>)
 8000f86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f88:	f003 0301 	and.w	r3, r3, #1
 8000f8c:	617b      	str	r3, [r7, #20]
 8000f8e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|G2_L2_Pin;
 8000f90:	230c      	movs	r3, #12
 8000f92:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f94:	2302      	movs	r3, #2
 8000f96:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f9c:	2303      	movs	r3, #3
 8000f9e:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000fa0:	2307      	movs	r3, #7
 8000fa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fa4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000fa8:	4619      	mov	r1, r3
 8000faa:	482e      	ldr	r0, [pc, #184]	@ (8001064 <HAL_UART_MspInit+0x1f8>)
 8000fac:	f000 fa90 	bl	80014d0 <HAL_GPIO_Init>
}
 8000fb0:	e050      	b.n	8001054 <HAL_UART_MspInit+0x1e8>
  else if(huart->Instance==USART3)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	4a2e      	ldr	r2, [pc, #184]	@ (8001070 <HAL_UART_MspInit+0x204>)
 8000fb8:	4293      	cmp	r3, r2
 8000fba:	d14b      	bne.n	8001054 <HAL_UART_MspInit+0x1e8>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	613b      	str	r3, [r7, #16]
 8000fc0:	4b27      	ldr	r3, [pc, #156]	@ (8001060 <HAL_UART_MspInit+0x1f4>)
 8000fc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fc4:	4a26      	ldr	r2, [pc, #152]	@ (8001060 <HAL_UART_MspInit+0x1f4>)
 8000fc6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000fca:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fcc:	4b24      	ldr	r3, [pc, #144]	@ (8001060 <HAL_UART_MspInit+0x1f4>)
 8000fce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fd0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000fd4:	613b      	str	r3, [r7, #16]
 8000fd6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fd8:	2300      	movs	r3, #0
 8000fda:	60fb      	str	r3, [r7, #12]
 8000fdc:	4b20      	ldr	r3, [pc, #128]	@ (8001060 <HAL_UART_MspInit+0x1f4>)
 8000fde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fe0:	4a1f      	ldr	r2, [pc, #124]	@ (8001060 <HAL_UART_MspInit+0x1f4>)
 8000fe2:	f043 0302 	orr.w	r3, r3, #2
 8000fe6:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fe8:	4b1d      	ldr	r3, [pc, #116]	@ (8001060 <HAL_UART_MspInit+0x1f4>)
 8000fea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fec:	f003 0302 	and.w	r3, r3, #2
 8000ff0:	60fb      	str	r3, [r7, #12]
 8000ff2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	60bb      	str	r3, [r7, #8]
 8000ff8:	4b19      	ldr	r3, [pc, #100]	@ (8001060 <HAL_UART_MspInit+0x1f4>)
 8000ffa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ffc:	4a18      	ldr	r2, [pc, #96]	@ (8001060 <HAL_UART_MspInit+0x1f4>)
 8000ffe:	f043 0304 	orr.w	r3, r3, #4
 8001002:	6313      	str	r3, [r2, #48]	@ 0x30
 8001004:	4b16      	ldr	r3, [pc, #88]	@ (8001060 <HAL_UART_MspInit+0x1f4>)
 8001006:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001008:	f003 0304 	and.w	r3, r3, #4
 800100c:	60bb      	str	r3, [r7, #8]
 800100e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001010:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001014:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001016:	2302      	movs	r3, #2
 8001018:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101a:	2300      	movs	r3, #0
 800101c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800101e:	2303      	movs	r3, #3
 8001020:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001022:	2307      	movs	r3, #7
 8001024:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001026:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800102a:	4619      	mov	r1, r3
 800102c:	4811      	ldr	r0, [pc, #68]	@ (8001074 <HAL_UART_MspInit+0x208>)
 800102e:	f000 fa4f 	bl	80014d0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = G1_L1_Pin;
 8001032:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001036:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001038:	2302      	movs	r3, #2
 800103a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103c:	2300      	movs	r3, #0
 800103e:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001040:	2303      	movs	r3, #3
 8001042:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001044:	2307      	movs	r3, #7
 8001046:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(G1_L1_GPIO_Port, &GPIO_InitStruct);
 8001048:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800104c:	4619      	mov	r1, r3
 800104e:	480a      	ldr	r0, [pc, #40]	@ (8001078 <HAL_UART_MspInit+0x20c>)
 8001050:	f000 fa3e 	bl	80014d0 <HAL_GPIO_Init>
}
 8001054:	bf00      	nop
 8001056:	3740      	adds	r7, #64	@ 0x40
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	40004c00 	.word	0x40004c00
 8001060:	40023800 	.word	0x40023800
 8001064:	40020000 	.word	0x40020000
 8001068:	40011000 	.word	0x40011000
 800106c:	40004400 	.word	0x40004400
 8001070:	40004800 	.word	0x40004800
 8001074:	40020400 	.word	0x40020400
 8001078:	40020800 	.word	0x40020800

0800107c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001080:	bf00      	nop
 8001082:	e7fd      	b.n	8001080 <NMI_Handler+0x4>

08001084 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001088:	bf00      	nop
 800108a:	e7fd      	b.n	8001088 <HardFault_Handler+0x4>

0800108c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001090:	bf00      	nop
 8001092:	e7fd      	b.n	8001090 <MemManage_Handler+0x4>

08001094 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001098:	bf00      	nop
 800109a:	e7fd      	b.n	8001098 <BusFault_Handler+0x4>

0800109c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010a0:	bf00      	nop
 80010a2:	e7fd      	b.n	80010a0 <UsageFault_Handler+0x4>

080010a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010a8:	bf00      	nop
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr

080010b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010b2:	b480      	push	{r7}
 80010b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010b6:	bf00      	nop
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr

080010c0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010c4:	bf00      	nop
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr

080010ce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010ce:	b580      	push	{r7, lr}
 80010d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010d2:	f000 f8a7 	bl	8001224 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010d6:	bf00      	nop
 80010d8:	bd80      	pop	{r7, pc}
	...

080010dc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  Transmit_Msg(); /* Transmit existing Parsed Data */
 80010e0:	f7ff fa48 	bl	8000574 <Transmit_Msg>

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80010e4:	4802      	ldr	r0, [pc, #8]	@ (80010f0 <TIM1_UP_TIM10_IRQHandler+0x14>)
 80010e6:	f003 f829 	bl	800413c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80010ea:	bf00      	nop
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	2000014c 	.word	0x2000014c

080010f4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80010f8:	4802      	ldr	r0, [pc, #8]	@ (8001104 <OTG_FS_IRQHandler+0x10>)
 80010fa:	f000 fcf9 	bl	8001af0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80010fe:	bf00      	nop
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	20001798 	.word	0x20001798

08001108 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800110c:	4b06      	ldr	r3, [pc, #24]	@ (8001128 <SystemInit+0x20>)
 800110e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001112:	4a05      	ldr	r2, [pc, #20]	@ (8001128 <SystemInit+0x20>)
 8001114:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001118:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800111c:	bf00      	nop
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	e000ed00 	.word	0xe000ed00

0800112c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800112c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001164 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001130:	f7ff ffea 	bl	8001108 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001134:	480c      	ldr	r0, [pc, #48]	@ (8001168 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001136:	490d      	ldr	r1, [pc, #52]	@ (800116c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001138:	4a0d      	ldr	r2, [pc, #52]	@ (8001170 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800113a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800113c:	e002      	b.n	8001144 <LoopCopyDataInit>

0800113e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800113e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001140:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001142:	3304      	adds	r3, #4

08001144 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001144:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001146:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001148:	d3f9      	bcc.n	800113e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800114a:	4a0a      	ldr	r2, [pc, #40]	@ (8001174 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800114c:	4c0a      	ldr	r4, [pc, #40]	@ (8001178 <LoopFillZerobss+0x22>)
  movs r3, #0
 800114e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001150:	e001      	b.n	8001156 <LoopFillZerobss>

08001152 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001152:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001154:	3204      	adds	r2, #4

08001156 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001156:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001158:	d3fb      	bcc.n	8001152 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800115a:	f008 f9a3 	bl	80094a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800115e:	f7ff fc15 	bl	800098c <main>
  bx  lr    
 8001162:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001164:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001168:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800116c:	2000011c 	.word	0x2000011c
  ldr r2, =_sidata
 8001170:	08009574 	.word	0x08009574
  ldr r2, =_sbss
 8001174:	2000011c 	.word	0x2000011c
  ldr r4, =_ebss
 8001178:	20001e9c 	.word	0x20001e9c

0800117c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800117c:	e7fe      	b.n	800117c <ADC_IRQHandler>
	...

08001180 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001184:	4b0e      	ldr	r3, [pc, #56]	@ (80011c0 <HAL_Init+0x40>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a0d      	ldr	r2, [pc, #52]	@ (80011c0 <HAL_Init+0x40>)
 800118a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800118e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001190:	4b0b      	ldr	r3, [pc, #44]	@ (80011c0 <HAL_Init+0x40>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4a0a      	ldr	r2, [pc, #40]	@ (80011c0 <HAL_Init+0x40>)
 8001196:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800119a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800119c:	4b08      	ldr	r3, [pc, #32]	@ (80011c0 <HAL_Init+0x40>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a07      	ldr	r2, [pc, #28]	@ (80011c0 <HAL_Init+0x40>)
 80011a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011a8:	2003      	movs	r0, #3
 80011aa:	f000 f94f 	bl	800144c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011ae:	2000      	movs	r0, #0
 80011b0:	f000 f808 	bl	80011c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011b4:	f7ff fe0a 	bl	8000dcc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011b8:	2300      	movs	r3, #0
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	40023c00 	.word	0x40023c00

080011c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011cc:	4b12      	ldr	r3, [pc, #72]	@ (8001218 <HAL_InitTick+0x54>)
 80011ce:	681a      	ldr	r2, [r3, #0]
 80011d0:	4b12      	ldr	r3, [pc, #72]	@ (800121c <HAL_InitTick+0x58>)
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	4619      	mov	r1, r3
 80011d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011da:	fbb3 f3f1 	udiv	r3, r3, r1
 80011de:	fbb2 f3f3 	udiv	r3, r2, r3
 80011e2:	4618      	mov	r0, r3
 80011e4:	f000 f967 	bl	80014b6 <HAL_SYSTICK_Config>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011ee:	2301      	movs	r3, #1
 80011f0:	e00e      	b.n	8001210 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	2b0f      	cmp	r3, #15
 80011f6:	d80a      	bhi.n	800120e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011f8:	2200      	movs	r2, #0
 80011fa:	6879      	ldr	r1, [r7, #4]
 80011fc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001200:	f000 f92f 	bl	8001462 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001204:	4a06      	ldr	r2, [pc, #24]	@ (8001220 <HAL_InitTick+0x5c>)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800120a:	2300      	movs	r3, #0
 800120c:	e000      	b.n	8001210 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800120e:	2301      	movs	r3, #1
}
 8001210:	4618      	mov	r0, r3
 8001212:	3708      	adds	r7, #8
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	20000010 	.word	0x20000010
 800121c:	20000018 	.word	0x20000018
 8001220:	20000014 	.word	0x20000014

08001224 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001228:	4b06      	ldr	r3, [pc, #24]	@ (8001244 <HAL_IncTick+0x20>)
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	461a      	mov	r2, r3
 800122e:	4b06      	ldr	r3, [pc, #24]	@ (8001248 <HAL_IncTick+0x24>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4413      	add	r3, r2
 8001234:	4a04      	ldr	r2, [pc, #16]	@ (8001248 <HAL_IncTick+0x24>)
 8001236:	6013      	str	r3, [r2, #0]
}
 8001238:	bf00      	nop
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop
 8001244:	20000018 	.word	0x20000018
 8001248:	200002b4 	.word	0x200002b4

0800124c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  return uwTick;
 8001250:	4b03      	ldr	r3, [pc, #12]	@ (8001260 <HAL_GetTick+0x14>)
 8001252:	681b      	ldr	r3, [r3, #0]
}
 8001254:	4618      	mov	r0, r3
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr
 800125e:	bf00      	nop
 8001260:	200002b4 	.word	0x200002b4

08001264 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b084      	sub	sp, #16
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800126c:	f7ff ffee 	bl	800124c <HAL_GetTick>
 8001270:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800127c:	d005      	beq.n	800128a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800127e:	4b0a      	ldr	r3, [pc, #40]	@ (80012a8 <HAL_Delay+0x44>)
 8001280:	781b      	ldrb	r3, [r3, #0]
 8001282:	461a      	mov	r2, r3
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	4413      	add	r3, r2
 8001288:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800128a:	bf00      	nop
 800128c:	f7ff ffde 	bl	800124c <HAL_GetTick>
 8001290:	4602      	mov	r2, r0
 8001292:	68bb      	ldr	r3, [r7, #8]
 8001294:	1ad3      	subs	r3, r2, r3
 8001296:	68fa      	ldr	r2, [r7, #12]
 8001298:	429a      	cmp	r2, r3
 800129a:	d8f7      	bhi.n	800128c <HAL_Delay+0x28>
  {
  }
}
 800129c:	bf00      	nop
 800129e:	bf00      	nop
 80012a0:	3710      	adds	r7, #16
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	20000018 	.word	0x20000018

080012ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b085      	sub	sp, #20
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	f003 0307 	and.w	r3, r3, #7
 80012ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012bc:	4b0c      	ldr	r3, [pc, #48]	@ (80012f0 <__NVIC_SetPriorityGrouping+0x44>)
 80012be:	68db      	ldr	r3, [r3, #12]
 80012c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012c2:	68ba      	ldr	r2, [r7, #8]
 80012c4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80012c8:	4013      	ands	r3, r2
 80012ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012d0:	68bb      	ldr	r3, [r7, #8]
 80012d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012d4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80012d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012de:	4a04      	ldr	r2, [pc, #16]	@ (80012f0 <__NVIC_SetPriorityGrouping+0x44>)
 80012e0:	68bb      	ldr	r3, [r7, #8]
 80012e2:	60d3      	str	r3, [r2, #12]
}
 80012e4:	bf00      	nop
 80012e6:	3714      	adds	r7, #20
 80012e8:	46bd      	mov	sp, r7
 80012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ee:	4770      	bx	lr
 80012f0:	e000ed00 	.word	0xe000ed00

080012f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012f8:	4b04      	ldr	r3, [pc, #16]	@ (800130c <__NVIC_GetPriorityGrouping+0x18>)
 80012fa:	68db      	ldr	r3, [r3, #12]
 80012fc:	0a1b      	lsrs	r3, r3, #8
 80012fe:	f003 0307 	and.w	r3, r3, #7
}
 8001302:	4618      	mov	r0, r3
 8001304:	46bd      	mov	sp, r7
 8001306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130a:	4770      	bx	lr
 800130c:	e000ed00 	.word	0xe000ed00

08001310 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001310:	b480      	push	{r7}
 8001312:	b083      	sub	sp, #12
 8001314:	af00      	add	r7, sp, #0
 8001316:	4603      	mov	r3, r0
 8001318:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800131a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800131e:	2b00      	cmp	r3, #0
 8001320:	db0b      	blt.n	800133a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001322:	79fb      	ldrb	r3, [r7, #7]
 8001324:	f003 021f 	and.w	r2, r3, #31
 8001328:	4907      	ldr	r1, [pc, #28]	@ (8001348 <__NVIC_EnableIRQ+0x38>)
 800132a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800132e:	095b      	lsrs	r3, r3, #5
 8001330:	2001      	movs	r0, #1
 8001332:	fa00 f202 	lsl.w	r2, r0, r2
 8001336:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800133a:	bf00      	nop
 800133c:	370c      	adds	r7, #12
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop
 8001348:	e000e100 	.word	0xe000e100

0800134c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800134c:	b480      	push	{r7}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0
 8001352:	4603      	mov	r3, r0
 8001354:	6039      	str	r1, [r7, #0]
 8001356:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001358:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800135c:	2b00      	cmp	r3, #0
 800135e:	db0a      	blt.n	8001376 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	b2da      	uxtb	r2, r3
 8001364:	490c      	ldr	r1, [pc, #48]	@ (8001398 <__NVIC_SetPriority+0x4c>)
 8001366:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800136a:	0112      	lsls	r2, r2, #4
 800136c:	b2d2      	uxtb	r2, r2
 800136e:	440b      	add	r3, r1
 8001370:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001374:	e00a      	b.n	800138c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	b2da      	uxtb	r2, r3
 800137a:	4908      	ldr	r1, [pc, #32]	@ (800139c <__NVIC_SetPriority+0x50>)
 800137c:	79fb      	ldrb	r3, [r7, #7]
 800137e:	f003 030f 	and.w	r3, r3, #15
 8001382:	3b04      	subs	r3, #4
 8001384:	0112      	lsls	r2, r2, #4
 8001386:	b2d2      	uxtb	r2, r2
 8001388:	440b      	add	r3, r1
 800138a:	761a      	strb	r2, [r3, #24]
}
 800138c:	bf00      	nop
 800138e:	370c      	adds	r7, #12
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr
 8001398:	e000e100 	.word	0xe000e100
 800139c:	e000ed00 	.word	0xe000ed00

080013a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b089      	sub	sp, #36	@ 0x24
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	60f8      	str	r0, [r7, #12]
 80013a8:	60b9      	str	r1, [r7, #8]
 80013aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	f003 0307 	and.w	r3, r3, #7
 80013b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013b4:	69fb      	ldr	r3, [r7, #28]
 80013b6:	f1c3 0307 	rsb	r3, r3, #7
 80013ba:	2b04      	cmp	r3, #4
 80013bc:	bf28      	it	cs
 80013be:	2304      	movcs	r3, #4
 80013c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013c2:	69fb      	ldr	r3, [r7, #28]
 80013c4:	3304      	adds	r3, #4
 80013c6:	2b06      	cmp	r3, #6
 80013c8:	d902      	bls.n	80013d0 <NVIC_EncodePriority+0x30>
 80013ca:	69fb      	ldr	r3, [r7, #28]
 80013cc:	3b03      	subs	r3, #3
 80013ce:	e000      	b.n	80013d2 <NVIC_EncodePriority+0x32>
 80013d0:	2300      	movs	r3, #0
 80013d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013d4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80013d8:	69bb      	ldr	r3, [r7, #24]
 80013da:	fa02 f303 	lsl.w	r3, r2, r3
 80013de:	43da      	mvns	r2, r3
 80013e0:	68bb      	ldr	r3, [r7, #8]
 80013e2:	401a      	ands	r2, r3
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013e8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	fa01 f303 	lsl.w	r3, r1, r3
 80013f2:	43d9      	mvns	r1, r3
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013f8:	4313      	orrs	r3, r2
         );
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	3724      	adds	r7, #36	@ 0x24
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr
	...

08001408 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	3b01      	subs	r3, #1
 8001414:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001418:	d301      	bcc.n	800141e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800141a:	2301      	movs	r3, #1
 800141c:	e00f      	b.n	800143e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800141e:	4a0a      	ldr	r2, [pc, #40]	@ (8001448 <SysTick_Config+0x40>)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	3b01      	subs	r3, #1
 8001424:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001426:	210f      	movs	r1, #15
 8001428:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800142c:	f7ff ff8e 	bl	800134c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001430:	4b05      	ldr	r3, [pc, #20]	@ (8001448 <SysTick_Config+0x40>)
 8001432:	2200      	movs	r2, #0
 8001434:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001436:	4b04      	ldr	r3, [pc, #16]	@ (8001448 <SysTick_Config+0x40>)
 8001438:	2207      	movs	r2, #7
 800143a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800143c:	2300      	movs	r3, #0
}
 800143e:	4618      	mov	r0, r3
 8001440:	3708      	adds	r7, #8
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	e000e010 	.word	0xe000e010

0800144c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001454:	6878      	ldr	r0, [r7, #4]
 8001456:	f7ff ff29 	bl	80012ac <__NVIC_SetPriorityGrouping>
}
 800145a:	bf00      	nop
 800145c:	3708      	adds	r7, #8
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}

08001462 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001462:	b580      	push	{r7, lr}
 8001464:	b086      	sub	sp, #24
 8001466:	af00      	add	r7, sp, #0
 8001468:	4603      	mov	r3, r0
 800146a:	60b9      	str	r1, [r7, #8]
 800146c:	607a      	str	r2, [r7, #4]
 800146e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001470:	2300      	movs	r3, #0
 8001472:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001474:	f7ff ff3e 	bl	80012f4 <__NVIC_GetPriorityGrouping>
 8001478:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800147a:	687a      	ldr	r2, [r7, #4]
 800147c:	68b9      	ldr	r1, [r7, #8]
 800147e:	6978      	ldr	r0, [r7, #20]
 8001480:	f7ff ff8e 	bl	80013a0 <NVIC_EncodePriority>
 8001484:	4602      	mov	r2, r0
 8001486:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800148a:	4611      	mov	r1, r2
 800148c:	4618      	mov	r0, r3
 800148e:	f7ff ff5d 	bl	800134c <__NVIC_SetPriority>
}
 8001492:	bf00      	nop
 8001494:	3718      	adds	r7, #24
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}

0800149a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800149a:	b580      	push	{r7, lr}
 800149c:	b082      	sub	sp, #8
 800149e:	af00      	add	r7, sp, #0
 80014a0:	4603      	mov	r3, r0
 80014a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014a8:	4618      	mov	r0, r3
 80014aa:	f7ff ff31 	bl	8001310 <__NVIC_EnableIRQ>
}
 80014ae:	bf00      	nop
 80014b0:	3708      	adds	r7, #8
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}

080014b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014b6:	b580      	push	{r7, lr}
 80014b8:	b082      	sub	sp, #8
 80014ba:	af00      	add	r7, sp, #0
 80014bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014be:	6878      	ldr	r0, [r7, #4]
 80014c0:	f7ff ffa2 	bl	8001408 <SysTick_Config>
 80014c4:	4603      	mov	r3, r0
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	3708      	adds	r7, #8
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
	...

080014d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b089      	sub	sp, #36	@ 0x24
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
 80014d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80014da:	2300      	movs	r3, #0
 80014dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80014de:	2300      	movs	r3, #0
 80014e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80014e2:	2300      	movs	r3, #0
 80014e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014e6:	2300      	movs	r3, #0
 80014e8:	61fb      	str	r3, [r7, #28]
 80014ea:	e165      	b.n	80017b8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80014ec:	2201      	movs	r2, #1
 80014ee:	69fb      	ldr	r3, [r7, #28]
 80014f0:	fa02 f303 	lsl.w	r3, r2, r3
 80014f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	697a      	ldr	r2, [r7, #20]
 80014fc:	4013      	ands	r3, r2
 80014fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001500:	693a      	ldr	r2, [r7, #16]
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	429a      	cmp	r2, r3
 8001506:	f040 8154 	bne.w	80017b2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	f003 0303 	and.w	r3, r3, #3
 8001512:	2b01      	cmp	r3, #1
 8001514:	d005      	beq.n	8001522 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800151e:	2b02      	cmp	r3, #2
 8001520:	d130      	bne.n	8001584 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	689b      	ldr	r3, [r3, #8]
 8001526:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001528:	69fb      	ldr	r3, [r7, #28]
 800152a:	005b      	lsls	r3, r3, #1
 800152c:	2203      	movs	r2, #3
 800152e:	fa02 f303 	lsl.w	r3, r2, r3
 8001532:	43db      	mvns	r3, r3
 8001534:	69ba      	ldr	r2, [r7, #24]
 8001536:	4013      	ands	r3, r2
 8001538:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	68da      	ldr	r2, [r3, #12]
 800153e:	69fb      	ldr	r3, [r7, #28]
 8001540:	005b      	lsls	r3, r3, #1
 8001542:	fa02 f303 	lsl.w	r3, r2, r3
 8001546:	69ba      	ldr	r2, [r7, #24]
 8001548:	4313      	orrs	r3, r2
 800154a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	69ba      	ldr	r2, [r7, #24]
 8001550:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001558:	2201      	movs	r2, #1
 800155a:	69fb      	ldr	r3, [r7, #28]
 800155c:	fa02 f303 	lsl.w	r3, r2, r3
 8001560:	43db      	mvns	r3, r3
 8001562:	69ba      	ldr	r2, [r7, #24]
 8001564:	4013      	ands	r3, r2
 8001566:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	091b      	lsrs	r3, r3, #4
 800156e:	f003 0201 	and.w	r2, r3, #1
 8001572:	69fb      	ldr	r3, [r7, #28]
 8001574:	fa02 f303 	lsl.w	r3, r2, r3
 8001578:	69ba      	ldr	r2, [r7, #24]
 800157a:	4313      	orrs	r3, r2
 800157c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	69ba      	ldr	r2, [r7, #24]
 8001582:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	f003 0303 	and.w	r3, r3, #3
 800158c:	2b03      	cmp	r3, #3
 800158e:	d017      	beq.n	80015c0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	68db      	ldr	r3, [r3, #12]
 8001594:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001596:	69fb      	ldr	r3, [r7, #28]
 8001598:	005b      	lsls	r3, r3, #1
 800159a:	2203      	movs	r2, #3
 800159c:	fa02 f303 	lsl.w	r3, r2, r3
 80015a0:	43db      	mvns	r3, r3
 80015a2:	69ba      	ldr	r2, [r7, #24]
 80015a4:	4013      	ands	r3, r2
 80015a6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	689a      	ldr	r2, [r3, #8]
 80015ac:	69fb      	ldr	r3, [r7, #28]
 80015ae:	005b      	lsls	r3, r3, #1
 80015b0:	fa02 f303 	lsl.w	r3, r2, r3
 80015b4:	69ba      	ldr	r2, [r7, #24]
 80015b6:	4313      	orrs	r3, r2
 80015b8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	69ba      	ldr	r2, [r7, #24]
 80015be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	f003 0303 	and.w	r3, r3, #3
 80015c8:	2b02      	cmp	r3, #2
 80015ca:	d123      	bne.n	8001614 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015cc:	69fb      	ldr	r3, [r7, #28]
 80015ce:	08da      	lsrs	r2, r3, #3
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	3208      	adds	r2, #8
 80015d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80015da:	69fb      	ldr	r3, [r7, #28]
 80015dc:	f003 0307 	and.w	r3, r3, #7
 80015e0:	009b      	lsls	r3, r3, #2
 80015e2:	220f      	movs	r2, #15
 80015e4:	fa02 f303 	lsl.w	r3, r2, r3
 80015e8:	43db      	mvns	r3, r3
 80015ea:	69ba      	ldr	r2, [r7, #24]
 80015ec:	4013      	ands	r3, r2
 80015ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	691a      	ldr	r2, [r3, #16]
 80015f4:	69fb      	ldr	r3, [r7, #28]
 80015f6:	f003 0307 	and.w	r3, r3, #7
 80015fa:	009b      	lsls	r3, r3, #2
 80015fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001600:	69ba      	ldr	r2, [r7, #24]
 8001602:	4313      	orrs	r3, r2
 8001604:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001606:	69fb      	ldr	r3, [r7, #28]
 8001608:	08da      	lsrs	r2, r3, #3
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	3208      	adds	r2, #8
 800160e:	69b9      	ldr	r1, [r7, #24]
 8001610:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800161a:	69fb      	ldr	r3, [r7, #28]
 800161c:	005b      	lsls	r3, r3, #1
 800161e:	2203      	movs	r2, #3
 8001620:	fa02 f303 	lsl.w	r3, r2, r3
 8001624:	43db      	mvns	r3, r3
 8001626:	69ba      	ldr	r2, [r7, #24]
 8001628:	4013      	ands	r3, r2
 800162a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	f003 0203 	and.w	r2, r3, #3
 8001634:	69fb      	ldr	r3, [r7, #28]
 8001636:	005b      	lsls	r3, r3, #1
 8001638:	fa02 f303 	lsl.w	r3, r2, r3
 800163c:	69ba      	ldr	r2, [r7, #24]
 800163e:	4313      	orrs	r3, r2
 8001640:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	69ba      	ldr	r2, [r7, #24]
 8001646:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001650:	2b00      	cmp	r3, #0
 8001652:	f000 80ae 	beq.w	80017b2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001656:	2300      	movs	r3, #0
 8001658:	60fb      	str	r3, [r7, #12]
 800165a:	4b5d      	ldr	r3, [pc, #372]	@ (80017d0 <HAL_GPIO_Init+0x300>)
 800165c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800165e:	4a5c      	ldr	r2, [pc, #368]	@ (80017d0 <HAL_GPIO_Init+0x300>)
 8001660:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001664:	6453      	str	r3, [r2, #68]	@ 0x44
 8001666:	4b5a      	ldr	r3, [pc, #360]	@ (80017d0 <HAL_GPIO_Init+0x300>)
 8001668:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800166a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800166e:	60fb      	str	r3, [r7, #12]
 8001670:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001672:	4a58      	ldr	r2, [pc, #352]	@ (80017d4 <HAL_GPIO_Init+0x304>)
 8001674:	69fb      	ldr	r3, [r7, #28]
 8001676:	089b      	lsrs	r3, r3, #2
 8001678:	3302      	adds	r3, #2
 800167a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800167e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001680:	69fb      	ldr	r3, [r7, #28]
 8001682:	f003 0303 	and.w	r3, r3, #3
 8001686:	009b      	lsls	r3, r3, #2
 8001688:	220f      	movs	r2, #15
 800168a:	fa02 f303 	lsl.w	r3, r2, r3
 800168e:	43db      	mvns	r3, r3
 8001690:	69ba      	ldr	r2, [r7, #24]
 8001692:	4013      	ands	r3, r2
 8001694:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	4a4f      	ldr	r2, [pc, #316]	@ (80017d8 <HAL_GPIO_Init+0x308>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d025      	beq.n	80016ea <HAL_GPIO_Init+0x21a>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	4a4e      	ldr	r2, [pc, #312]	@ (80017dc <HAL_GPIO_Init+0x30c>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d01f      	beq.n	80016e6 <HAL_GPIO_Init+0x216>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	4a4d      	ldr	r2, [pc, #308]	@ (80017e0 <HAL_GPIO_Init+0x310>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d019      	beq.n	80016e2 <HAL_GPIO_Init+0x212>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	4a4c      	ldr	r2, [pc, #304]	@ (80017e4 <HAL_GPIO_Init+0x314>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d013      	beq.n	80016de <HAL_GPIO_Init+0x20e>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	4a4b      	ldr	r2, [pc, #300]	@ (80017e8 <HAL_GPIO_Init+0x318>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d00d      	beq.n	80016da <HAL_GPIO_Init+0x20a>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	4a4a      	ldr	r2, [pc, #296]	@ (80017ec <HAL_GPIO_Init+0x31c>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d007      	beq.n	80016d6 <HAL_GPIO_Init+0x206>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	4a49      	ldr	r2, [pc, #292]	@ (80017f0 <HAL_GPIO_Init+0x320>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d101      	bne.n	80016d2 <HAL_GPIO_Init+0x202>
 80016ce:	2306      	movs	r3, #6
 80016d0:	e00c      	b.n	80016ec <HAL_GPIO_Init+0x21c>
 80016d2:	2307      	movs	r3, #7
 80016d4:	e00a      	b.n	80016ec <HAL_GPIO_Init+0x21c>
 80016d6:	2305      	movs	r3, #5
 80016d8:	e008      	b.n	80016ec <HAL_GPIO_Init+0x21c>
 80016da:	2304      	movs	r3, #4
 80016dc:	e006      	b.n	80016ec <HAL_GPIO_Init+0x21c>
 80016de:	2303      	movs	r3, #3
 80016e0:	e004      	b.n	80016ec <HAL_GPIO_Init+0x21c>
 80016e2:	2302      	movs	r3, #2
 80016e4:	e002      	b.n	80016ec <HAL_GPIO_Init+0x21c>
 80016e6:	2301      	movs	r3, #1
 80016e8:	e000      	b.n	80016ec <HAL_GPIO_Init+0x21c>
 80016ea:	2300      	movs	r3, #0
 80016ec:	69fa      	ldr	r2, [r7, #28]
 80016ee:	f002 0203 	and.w	r2, r2, #3
 80016f2:	0092      	lsls	r2, r2, #2
 80016f4:	4093      	lsls	r3, r2
 80016f6:	69ba      	ldr	r2, [r7, #24]
 80016f8:	4313      	orrs	r3, r2
 80016fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80016fc:	4935      	ldr	r1, [pc, #212]	@ (80017d4 <HAL_GPIO_Init+0x304>)
 80016fe:	69fb      	ldr	r3, [r7, #28]
 8001700:	089b      	lsrs	r3, r3, #2
 8001702:	3302      	adds	r3, #2
 8001704:	69ba      	ldr	r2, [r7, #24]
 8001706:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800170a:	4b3a      	ldr	r3, [pc, #232]	@ (80017f4 <HAL_GPIO_Init+0x324>)
 800170c:	689b      	ldr	r3, [r3, #8]
 800170e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001710:	693b      	ldr	r3, [r7, #16]
 8001712:	43db      	mvns	r3, r3
 8001714:	69ba      	ldr	r2, [r7, #24]
 8001716:	4013      	ands	r3, r2
 8001718:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001722:	2b00      	cmp	r3, #0
 8001724:	d003      	beq.n	800172e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001726:	69ba      	ldr	r2, [r7, #24]
 8001728:	693b      	ldr	r3, [r7, #16]
 800172a:	4313      	orrs	r3, r2
 800172c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800172e:	4a31      	ldr	r2, [pc, #196]	@ (80017f4 <HAL_GPIO_Init+0x324>)
 8001730:	69bb      	ldr	r3, [r7, #24]
 8001732:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001734:	4b2f      	ldr	r3, [pc, #188]	@ (80017f4 <HAL_GPIO_Init+0x324>)
 8001736:	68db      	ldr	r3, [r3, #12]
 8001738:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800173a:	693b      	ldr	r3, [r7, #16]
 800173c:	43db      	mvns	r3, r3
 800173e:	69ba      	ldr	r2, [r7, #24]
 8001740:	4013      	ands	r3, r2
 8001742:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800174c:	2b00      	cmp	r3, #0
 800174e:	d003      	beq.n	8001758 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001750:	69ba      	ldr	r2, [r7, #24]
 8001752:	693b      	ldr	r3, [r7, #16]
 8001754:	4313      	orrs	r3, r2
 8001756:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001758:	4a26      	ldr	r2, [pc, #152]	@ (80017f4 <HAL_GPIO_Init+0x324>)
 800175a:	69bb      	ldr	r3, [r7, #24]
 800175c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800175e:	4b25      	ldr	r3, [pc, #148]	@ (80017f4 <HAL_GPIO_Init+0x324>)
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	43db      	mvns	r3, r3
 8001768:	69ba      	ldr	r2, [r7, #24]
 800176a:	4013      	ands	r3, r2
 800176c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001776:	2b00      	cmp	r3, #0
 8001778:	d003      	beq.n	8001782 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800177a:	69ba      	ldr	r2, [r7, #24]
 800177c:	693b      	ldr	r3, [r7, #16]
 800177e:	4313      	orrs	r3, r2
 8001780:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001782:	4a1c      	ldr	r2, [pc, #112]	@ (80017f4 <HAL_GPIO_Init+0x324>)
 8001784:	69bb      	ldr	r3, [r7, #24]
 8001786:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001788:	4b1a      	ldr	r3, [pc, #104]	@ (80017f4 <HAL_GPIO_Init+0x324>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800178e:	693b      	ldr	r3, [r7, #16]
 8001790:	43db      	mvns	r3, r3
 8001792:	69ba      	ldr	r2, [r7, #24]
 8001794:	4013      	ands	r3, r2
 8001796:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d003      	beq.n	80017ac <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80017a4:	69ba      	ldr	r2, [r7, #24]
 80017a6:	693b      	ldr	r3, [r7, #16]
 80017a8:	4313      	orrs	r3, r2
 80017aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80017ac:	4a11      	ldr	r2, [pc, #68]	@ (80017f4 <HAL_GPIO_Init+0x324>)
 80017ae:	69bb      	ldr	r3, [r7, #24]
 80017b0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017b2:	69fb      	ldr	r3, [r7, #28]
 80017b4:	3301      	adds	r3, #1
 80017b6:	61fb      	str	r3, [r7, #28]
 80017b8:	69fb      	ldr	r3, [r7, #28]
 80017ba:	2b0f      	cmp	r3, #15
 80017bc:	f67f ae96 	bls.w	80014ec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80017c0:	bf00      	nop
 80017c2:	bf00      	nop
 80017c4:	3724      	adds	r7, #36	@ 0x24
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop
 80017d0:	40023800 	.word	0x40023800
 80017d4:	40013800 	.word	0x40013800
 80017d8:	40020000 	.word	0x40020000
 80017dc:	40020400 	.word	0x40020400
 80017e0:	40020800 	.word	0x40020800
 80017e4:	40020c00 	.word	0x40020c00
 80017e8:	40021000 	.word	0x40021000
 80017ec:	40021400 	.word	0x40021400
 80017f0:	40021800 	.word	0x40021800
 80017f4:	40013c00 	.word	0x40013c00

080017f8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b085      	sub	sp, #20
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
 8001800:	460b      	mov	r3, r1
 8001802:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	691a      	ldr	r2, [r3, #16]
 8001808:	887b      	ldrh	r3, [r7, #2]
 800180a:	4013      	ands	r3, r2
 800180c:	2b00      	cmp	r3, #0
 800180e:	d002      	beq.n	8001816 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001810:	2301      	movs	r3, #1
 8001812:	73fb      	strb	r3, [r7, #15]
 8001814:	e001      	b.n	800181a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001816:	2300      	movs	r3, #0
 8001818:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800181a:	7bfb      	ldrb	r3, [r7, #15]
}
 800181c:	4618      	mov	r0, r3
 800181e:	3714      	adds	r7, #20
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr

08001828 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001828:	b480      	push	{r7}
 800182a:	b083      	sub	sp, #12
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
 8001830:	460b      	mov	r3, r1
 8001832:	807b      	strh	r3, [r7, #2]
 8001834:	4613      	mov	r3, r2
 8001836:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001838:	787b      	ldrb	r3, [r7, #1]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d003      	beq.n	8001846 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800183e:	887a      	ldrh	r2, [r7, #2]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001844:	e003      	b.n	800184e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001846:	887b      	ldrh	r3, [r7, #2]
 8001848:	041a      	lsls	r2, r3, #16
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	619a      	str	r2, [r3, #24]
}
 800184e:	bf00      	nop
 8001850:	370c      	adds	r7, #12
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr

0800185a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800185a:	b580      	push	{r7, lr}
 800185c:	b086      	sub	sp, #24
 800185e:	af02      	add	r7, sp, #8
 8001860:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d101      	bne.n	800186c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001868:	2301      	movs	r3, #1
 800186a:	e108      	b.n	8001a7e <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001878:	b2db      	uxtb	r3, r3
 800187a:	2b00      	cmp	r3, #0
 800187c:	d106      	bne.n	800188c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2200      	movs	r2, #0
 8001882:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001886:	6878      	ldr	r0, [r7, #4]
 8001888:	f007 fa8c 	bl	8008da4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2203      	movs	r2, #3
 8001890:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001894:	68bb      	ldr	r3, [r7, #8]
 8001896:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800189a:	d102      	bne.n	80018a2 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2200      	movs	r2, #0
 80018a0:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4618      	mov	r0, r3
 80018a8:	f003 fe05 	bl	80054b6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6818      	ldr	r0, [r3, #0]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	7c1a      	ldrb	r2, [r3, #16]
 80018b4:	f88d 2000 	strb.w	r2, [sp]
 80018b8:	3304      	adds	r3, #4
 80018ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 80018bc:	f003 fce4 	bl	8005288 <USB_CoreInit>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d005      	beq.n	80018d2 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2202      	movs	r2, #2
 80018ca:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80018ce:	2301      	movs	r3, #1
 80018d0:	e0d5      	b.n	8001a7e <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	2100      	movs	r1, #0
 80018d8:	4618      	mov	r0, r3
 80018da:	f003 fdfd 	bl	80054d8 <USB_SetCurrentMode>
 80018de:	4603      	mov	r3, r0
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d005      	beq.n	80018f0 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2202      	movs	r2, #2
 80018e8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80018ec:	2301      	movs	r3, #1
 80018ee:	e0c6      	b.n	8001a7e <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018f0:	2300      	movs	r3, #0
 80018f2:	73fb      	strb	r3, [r7, #15]
 80018f4:	e04a      	b.n	800198c <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80018f6:	7bfa      	ldrb	r2, [r7, #15]
 80018f8:	6879      	ldr	r1, [r7, #4]
 80018fa:	4613      	mov	r3, r2
 80018fc:	00db      	lsls	r3, r3, #3
 80018fe:	4413      	add	r3, r2
 8001900:	009b      	lsls	r3, r3, #2
 8001902:	440b      	add	r3, r1
 8001904:	3315      	adds	r3, #21
 8001906:	2201      	movs	r2, #1
 8001908:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800190a:	7bfa      	ldrb	r2, [r7, #15]
 800190c:	6879      	ldr	r1, [r7, #4]
 800190e:	4613      	mov	r3, r2
 8001910:	00db      	lsls	r3, r3, #3
 8001912:	4413      	add	r3, r2
 8001914:	009b      	lsls	r3, r3, #2
 8001916:	440b      	add	r3, r1
 8001918:	3314      	adds	r3, #20
 800191a:	7bfa      	ldrb	r2, [r7, #15]
 800191c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800191e:	7bfa      	ldrb	r2, [r7, #15]
 8001920:	7bfb      	ldrb	r3, [r7, #15]
 8001922:	b298      	uxth	r0, r3
 8001924:	6879      	ldr	r1, [r7, #4]
 8001926:	4613      	mov	r3, r2
 8001928:	00db      	lsls	r3, r3, #3
 800192a:	4413      	add	r3, r2
 800192c:	009b      	lsls	r3, r3, #2
 800192e:	440b      	add	r3, r1
 8001930:	332e      	adds	r3, #46	@ 0x2e
 8001932:	4602      	mov	r2, r0
 8001934:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001936:	7bfa      	ldrb	r2, [r7, #15]
 8001938:	6879      	ldr	r1, [r7, #4]
 800193a:	4613      	mov	r3, r2
 800193c:	00db      	lsls	r3, r3, #3
 800193e:	4413      	add	r3, r2
 8001940:	009b      	lsls	r3, r3, #2
 8001942:	440b      	add	r3, r1
 8001944:	3318      	adds	r3, #24
 8001946:	2200      	movs	r2, #0
 8001948:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800194a:	7bfa      	ldrb	r2, [r7, #15]
 800194c:	6879      	ldr	r1, [r7, #4]
 800194e:	4613      	mov	r3, r2
 8001950:	00db      	lsls	r3, r3, #3
 8001952:	4413      	add	r3, r2
 8001954:	009b      	lsls	r3, r3, #2
 8001956:	440b      	add	r3, r1
 8001958:	331c      	adds	r3, #28
 800195a:	2200      	movs	r2, #0
 800195c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800195e:	7bfa      	ldrb	r2, [r7, #15]
 8001960:	6879      	ldr	r1, [r7, #4]
 8001962:	4613      	mov	r3, r2
 8001964:	00db      	lsls	r3, r3, #3
 8001966:	4413      	add	r3, r2
 8001968:	009b      	lsls	r3, r3, #2
 800196a:	440b      	add	r3, r1
 800196c:	3320      	adds	r3, #32
 800196e:	2200      	movs	r2, #0
 8001970:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001972:	7bfa      	ldrb	r2, [r7, #15]
 8001974:	6879      	ldr	r1, [r7, #4]
 8001976:	4613      	mov	r3, r2
 8001978:	00db      	lsls	r3, r3, #3
 800197a:	4413      	add	r3, r2
 800197c:	009b      	lsls	r3, r3, #2
 800197e:	440b      	add	r3, r1
 8001980:	3324      	adds	r3, #36	@ 0x24
 8001982:	2200      	movs	r2, #0
 8001984:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001986:	7bfb      	ldrb	r3, [r7, #15]
 8001988:	3301      	adds	r3, #1
 800198a:	73fb      	strb	r3, [r7, #15]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	791b      	ldrb	r3, [r3, #4]
 8001990:	7bfa      	ldrb	r2, [r7, #15]
 8001992:	429a      	cmp	r2, r3
 8001994:	d3af      	bcc.n	80018f6 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001996:	2300      	movs	r3, #0
 8001998:	73fb      	strb	r3, [r7, #15]
 800199a:	e044      	b.n	8001a26 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800199c:	7bfa      	ldrb	r2, [r7, #15]
 800199e:	6879      	ldr	r1, [r7, #4]
 80019a0:	4613      	mov	r3, r2
 80019a2:	00db      	lsls	r3, r3, #3
 80019a4:	4413      	add	r3, r2
 80019a6:	009b      	lsls	r3, r3, #2
 80019a8:	440b      	add	r3, r1
 80019aa:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80019ae:	2200      	movs	r2, #0
 80019b0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80019b2:	7bfa      	ldrb	r2, [r7, #15]
 80019b4:	6879      	ldr	r1, [r7, #4]
 80019b6:	4613      	mov	r3, r2
 80019b8:	00db      	lsls	r3, r3, #3
 80019ba:	4413      	add	r3, r2
 80019bc:	009b      	lsls	r3, r3, #2
 80019be:	440b      	add	r3, r1
 80019c0:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80019c4:	7bfa      	ldrb	r2, [r7, #15]
 80019c6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80019c8:	7bfa      	ldrb	r2, [r7, #15]
 80019ca:	6879      	ldr	r1, [r7, #4]
 80019cc:	4613      	mov	r3, r2
 80019ce:	00db      	lsls	r3, r3, #3
 80019d0:	4413      	add	r3, r2
 80019d2:	009b      	lsls	r3, r3, #2
 80019d4:	440b      	add	r3, r1
 80019d6:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80019da:	2200      	movs	r2, #0
 80019dc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80019de:	7bfa      	ldrb	r2, [r7, #15]
 80019e0:	6879      	ldr	r1, [r7, #4]
 80019e2:	4613      	mov	r3, r2
 80019e4:	00db      	lsls	r3, r3, #3
 80019e6:	4413      	add	r3, r2
 80019e8:	009b      	lsls	r3, r3, #2
 80019ea:	440b      	add	r3, r1
 80019ec:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80019f0:	2200      	movs	r2, #0
 80019f2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80019f4:	7bfa      	ldrb	r2, [r7, #15]
 80019f6:	6879      	ldr	r1, [r7, #4]
 80019f8:	4613      	mov	r3, r2
 80019fa:	00db      	lsls	r3, r3, #3
 80019fc:	4413      	add	r3, r2
 80019fe:	009b      	lsls	r3, r3, #2
 8001a00:	440b      	add	r3, r1
 8001a02:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8001a06:	2200      	movs	r2, #0
 8001a08:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001a0a:	7bfa      	ldrb	r2, [r7, #15]
 8001a0c:	6879      	ldr	r1, [r7, #4]
 8001a0e:	4613      	mov	r3, r2
 8001a10:	00db      	lsls	r3, r3, #3
 8001a12:	4413      	add	r3, r2
 8001a14:	009b      	lsls	r3, r3, #2
 8001a16:	440b      	add	r3, r1
 8001a18:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a20:	7bfb      	ldrb	r3, [r7, #15]
 8001a22:	3301      	adds	r3, #1
 8001a24:	73fb      	strb	r3, [r7, #15]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	791b      	ldrb	r3, [r3, #4]
 8001a2a:	7bfa      	ldrb	r2, [r7, #15]
 8001a2c:	429a      	cmp	r2, r3
 8001a2e:	d3b5      	bcc.n	800199c <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6818      	ldr	r0, [r3, #0]
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	7c1a      	ldrb	r2, [r3, #16]
 8001a38:	f88d 2000 	strb.w	r2, [sp]
 8001a3c:	3304      	adds	r3, #4
 8001a3e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a40:	f003 fd96 	bl	8005570 <USB_DevInit>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d005      	beq.n	8001a56 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2202      	movs	r2, #2
 8001a4e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	e013      	b.n	8001a7e <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2200      	movs	r2, #0
 8001a5a:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2201      	movs	r2, #1
 8001a60:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	7b1b      	ldrb	r3, [r3, #12]
 8001a68:	2b01      	cmp	r3, #1
 8001a6a:	d102      	bne.n	8001a72 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001a6c:	6878      	ldr	r0, [r7, #4]
 8001a6e:	f001 f96f 	bl	8002d50 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4618      	mov	r0, r3
 8001a78:	f004 fdd3 	bl	8006622 <USB_DevDisconnect>

  return HAL_OK;
 8001a7c:	2300      	movs	r3, #0
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	3710      	adds	r7, #16
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}

08001a86 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001a86:	b580      	push	{r7, lr}
 8001a88:	b084      	sub	sp, #16
 8001a8a:	af00      	add	r7, sp, #0
 8001a8c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001a9a:	2b01      	cmp	r3, #1
 8001a9c:	d101      	bne.n	8001aa2 <HAL_PCD_Start+0x1c>
 8001a9e:	2302      	movs	r3, #2
 8001aa0:	e022      	b.n	8001ae8 <HAL_PCD_Start+0x62>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	68db      	ldr	r3, [r3, #12]
 8001aae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d009      	beq.n	8001aca <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001aba:	2b01      	cmp	r3, #1
 8001abc:	d105      	bne.n	8001aca <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ac2:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f003 fce0 	bl	8005494 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f004 fd81 	bl	80065e0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001ae6:	2300      	movs	r3, #0
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	3710      	adds	r7, #16
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}

08001af0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001af0:	b590      	push	{r4, r7, lr}
 8001af2:	b08d      	sub	sp, #52	@ 0x34
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001afe:	6a3b      	ldr	r3, [r7, #32]
 8001b00:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4618      	mov	r0, r3
 8001b08:	f004 fe3f 	bl	800678a <USB_GetMode>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	f040 84b9 	bne.w	8002486 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f004 fda3 	bl	8006664 <USB_ReadInterrupts>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	f000 84af 	beq.w	8002484 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001b26:	69fb      	ldr	r3, [r7, #28]
 8001b28:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001b2c:	689b      	ldr	r3, [r3, #8]
 8001b2e:	0a1b      	lsrs	r3, r3, #8
 8001b30:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f004 fd90 	bl	8006664 <USB_ReadInterrupts>
 8001b44:	4603      	mov	r3, r0
 8001b46:	f003 0302 	and.w	r3, r3, #2
 8001b4a:	2b02      	cmp	r3, #2
 8001b4c:	d107      	bne.n	8001b5e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	695a      	ldr	r2, [r3, #20]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f002 0202 	and.w	r2, r2, #2
 8001b5c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4618      	mov	r0, r3
 8001b64:	f004 fd7e 	bl	8006664 <USB_ReadInterrupts>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	f003 0310 	and.w	r3, r3, #16
 8001b6e:	2b10      	cmp	r3, #16
 8001b70:	d161      	bne.n	8001c36 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	699a      	ldr	r2, [r3, #24]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f022 0210 	bic.w	r2, r2, #16
 8001b80:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001b82:	6a3b      	ldr	r3, [r7, #32]
 8001b84:	6a1b      	ldr	r3, [r3, #32]
 8001b86:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001b88:	69bb      	ldr	r3, [r7, #24]
 8001b8a:	f003 020f 	and.w	r2, r3, #15
 8001b8e:	4613      	mov	r3, r2
 8001b90:	00db      	lsls	r3, r3, #3
 8001b92:	4413      	add	r3, r2
 8001b94:	009b      	lsls	r3, r3, #2
 8001b96:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001b9a:	687a      	ldr	r2, [r7, #4]
 8001b9c:	4413      	add	r3, r2
 8001b9e:	3304      	adds	r3, #4
 8001ba0:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001ba2:	69bb      	ldr	r3, [r7, #24]
 8001ba4:	0c5b      	lsrs	r3, r3, #17
 8001ba6:	f003 030f 	and.w	r3, r3, #15
 8001baa:	2b02      	cmp	r3, #2
 8001bac:	d124      	bne.n	8001bf8 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001bae:	69ba      	ldr	r2, [r7, #24]
 8001bb0:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d035      	beq.n	8001c26 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001bbe:	69bb      	ldr	r3, [r7, #24]
 8001bc0:	091b      	lsrs	r3, r3, #4
 8001bc2:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001bc4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001bc8:	b29b      	uxth	r3, r3
 8001bca:	461a      	mov	r2, r3
 8001bcc:	6a38      	ldr	r0, [r7, #32]
 8001bce:	f004 fbb5 	bl	800633c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	68da      	ldr	r2, [r3, #12]
 8001bd6:	69bb      	ldr	r3, [r7, #24]
 8001bd8:	091b      	lsrs	r3, r3, #4
 8001bda:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001bde:	441a      	add	r2, r3
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	695a      	ldr	r2, [r3, #20]
 8001be8:	69bb      	ldr	r3, [r7, #24]
 8001bea:	091b      	lsrs	r3, r3, #4
 8001bec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001bf0:	441a      	add	r2, r3
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	615a      	str	r2, [r3, #20]
 8001bf6:	e016      	b.n	8001c26 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001bf8:	69bb      	ldr	r3, [r7, #24]
 8001bfa:	0c5b      	lsrs	r3, r3, #17
 8001bfc:	f003 030f 	and.w	r3, r3, #15
 8001c00:	2b06      	cmp	r3, #6
 8001c02:	d110      	bne.n	8001c26 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001c0a:	2208      	movs	r2, #8
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	6a38      	ldr	r0, [r7, #32]
 8001c10:	f004 fb94 	bl	800633c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	695a      	ldr	r2, [r3, #20]
 8001c18:	69bb      	ldr	r3, [r7, #24]
 8001c1a:	091b      	lsrs	r3, r3, #4
 8001c1c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001c20:	441a      	add	r2, r3
 8001c22:	697b      	ldr	r3, [r7, #20]
 8001c24:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	699a      	ldr	r2, [r3, #24]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f042 0210 	orr.w	r2, r2, #16
 8001c34:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f004 fd12 	bl	8006664 <USB_ReadInterrupts>
 8001c40:	4603      	mov	r3, r0
 8001c42:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001c46:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8001c4a:	f040 80a7 	bne.w	8001d9c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4618      	mov	r0, r3
 8001c58:	f004 fd17 	bl	800668a <USB_ReadDevAllOutEpInterrupt>
 8001c5c:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8001c5e:	e099      	b.n	8001d94 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001c60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c62:	f003 0301 	and.w	r3, r3, #1
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	f000 808e 	beq.w	8001d88 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c72:	b2d2      	uxtb	r2, r2
 8001c74:	4611      	mov	r1, r2
 8001c76:	4618      	mov	r0, r3
 8001c78:	f004 fd3b 	bl	80066f2 <USB_ReadDevOutEPInterrupt>
 8001c7c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	f003 0301 	and.w	r3, r3, #1
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d00c      	beq.n	8001ca2 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001c88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c8a:	015a      	lsls	r2, r3, #5
 8001c8c:	69fb      	ldr	r3, [r7, #28]
 8001c8e:	4413      	add	r3, r2
 8001c90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001c94:	461a      	mov	r2, r3
 8001c96:	2301      	movs	r3, #1
 8001c98:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001c9a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001c9c:	6878      	ldr	r0, [r7, #4]
 8001c9e:	f000 fed1 	bl	8002a44 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001ca2:	693b      	ldr	r3, [r7, #16]
 8001ca4:	f003 0308 	and.w	r3, r3, #8
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d00c      	beq.n	8001cc6 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001cac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cae:	015a      	lsls	r2, r3, #5
 8001cb0:	69fb      	ldr	r3, [r7, #28]
 8001cb2:	4413      	add	r3, r2
 8001cb4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001cb8:	461a      	mov	r2, r3
 8001cba:	2308      	movs	r3, #8
 8001cbc:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001cbe:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001cc0:	6878      	ldr	r0, [r7, #4]
 8001cc2:	f000 ffa7 	bl	8002c14 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	f003 0310 	and.w	r3, r3, #16
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d008      	beq.n	8001ce2 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001cd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cd2:	015a      	lsls	r2, r3, #5
 8001cd4:	69fb      	ldr	r3, [r7, #28]
 8001cd6:	4413      	add	r3, r2
 8001cd8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001cdc:	461a      	mov	r2, r3
 8001cde:	2310      	movs	r3, #16
 8001ce0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	f003 0302 	and.w	r3, r3, #2
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d030      	beq.n	8001d4e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001cec:	6a3b      	ldr	r3, [r7, #32]
 8001cee:	695b      	ldr	r3, [r3, #20]
 8001cf0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001cf4:	2b80      	cmp	r3, #128	@ 0x80
 8001cf6:	d109      	bne.n	8001d0c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001cf8:	69fb      	ldr	r3, [r7, #28]
 8001cfa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	69fa      	ldr	r2, [r7, #28]
 8001d02:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001d06:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001d0a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001d0c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d0e:	4613      	mov	r3, r2
 8001d10:	00db      	lsls	r3, r3, #3
 8001d12:	4413      	add	r3, r2
 8001d14:	009b      	lsls	r3, r3, #2
 8001d16:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001d1a:	687a      	ldr	r2, [r7, #4]
 8001d1c:	4413      	add	r3, r2
 8001d1e:	3304      	adds	r3, #4
 8001d20:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	78db      	ldrb	r3, [r3, #3]
 8001d26:	2b01      	cmp	r3, #1
 8001d28:	d108      	bne.n	8001d3c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001d30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d32:	b2db      	uxtb	r3, r3
 8001d34:	4619      	mov	r1, r3
 8001d36:	6878      	ldr	r0, [r7, #4]
 8001d38:	f007 f950 	bl	8008fdc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001d3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d3e:	015a      	lsls	r2, r3, #5
 8001d40:	69fb      	ldr	r3, [r7, #28]
 8001d42:	4413      	add	r3, r2
 8001d44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001d48:	461a      	mov	r2, r3
 8001d4a:	2302      	movs	r3, #2
 8001d4c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	f003 0320 	and.w	r3, r3, #32
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d008      	beq.n	8001d6a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001d58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d5a:	015a      	lsls	r2, r3, #5
 8001d5c:	69fb      	ldr	r3, [r7, #28]
 8001d5e:	4413      	add	r3, r2
 8001d60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001d64:	461a      	mov	r2, r3
 8001d66:	2320      	movs	r3, #32
 8001d68:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d009      	beq.n	8001d88 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001d74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d76:	015a      	lsls	r2, r3, #5
 8001d78:	69fb      	ldr	r3, [r7, #28]
 8001d7a:	4413      	add	r3, r2
 8001d7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001d80:	461a      	mov	r2, r3
 8001d82:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001d86:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001d88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d8a:	3301      	adds	r3, #1
 8001d8c:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8001d8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d90:	085b      	lsrs	r3, r3, #1
 8001d92:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8001d94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	f47f af62 	bne.w	8001c60 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4618      	mov	r0, r3
 8001da2:	f004 fc5f 	bl	8006664 <USB_ReadInterrupts>
 8001da6:	4603      	mov	r3, r0
 8001da8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001dac:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001db0:	f040 80db 	bne.w	8001f6a <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4618      	mov	r0, r3
 8001dba:	f004 fc80 	bl	80066be <USB_ReadDevAllInEpInterrupt>
 8001dbe:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8001dc4:	e0cd      	b.n	8001f62 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001dc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001dc8:	f003 0301 	and.w	r3, r3, #1
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	f000 80c2 	beq.w	8001f56 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001dd8:	b2d2      	uxtb	r2, r2
 8001dda:	4611      	mov	r1, r2
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f004 fca6 	bl	800672e <USB_ReadDevInEPInterrupt>
 8001de2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	f003 0301 	and.w	r3, r3, #1
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d057      	beq.n	8001e9e <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001dee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001df0:	f003 030f 	and.w	r3, r3, #15
 8001df4:	2201      	movs	r2, #1
 8001df6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfa:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001dfc:	69fb      	ldr	r3, [r7, #28]
 8001dfe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001e02:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	43db      	mvns	r3, r3
 8001e08:	69f9      	ldr	r1, [r7, #28]
 8001e0a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8001e0e:	4013      	ands	r3, r2
 8001e10:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001e12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e14:	015a      	lsls	r2, r3, #5
 8001e16:	69fb      	ldr	r3, [r7, #28]
 8001e18:	4413      	add	r3, r2
 8001e1a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001e1e:	461a      	mov	r2, r3
 8001e20:	2301      	movs	r3, #1
 8001e22:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	799b      	ldrb	r3, [r3, #6]
 8001e28:	2b01      	cmp	r3, #1
 8001e2a:	d132      	bne.n	8001e92 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001e2c:	6879      	ldr	r1, [r7, #4]
 8001e2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e30:	4613      	mov	r3, r2
 8001e32:	00db      	lsls	r3, r3, #3
 8001e34:	4413      	add	r3, r2
 8001e36:	009b      	lsls	r3, r3, #2
 8001e38:	440b      	add	r3, r1
 8001e3a:	3320      	adds	r3, #32
 8001e3c:	6819      	ldr	r1, [r3, #0]
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e42:	4613      	mov	r3, r2
 8001e44:	00db      	lsls	r3, r3, #3
 8001e46:	4413      	add	r3, r2
 8001e48:	009b      	lsls	r3, r3, #2
 8001e4a:	4403      	add	r3, r0
 8001e4c:	331c      	adds	r3, #28
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4419      	add	r1, r3
 8001e52:	6878      	ldr	r0, [r7, #4]
 8001e54:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e56:	4613      	mov	r3, r2
 8001e58:	00db      	lsls	r3, r3, #3
 8001e5a:	4413      	add	r3, r2
 8001e5c:	009b      	lsls	r3, r3, #2
 8001e5e:	4403      	add	r3, r0
 8001e60:	3320      	adds	r3, #32
 8001e62:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001e64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d113      	bne.n	8001e92 <HAL_PCD_IRQHandler+0x3a2>
 8001e6a:	6879      	ldr	r1, [r7, #4]
 8001e6c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e6e:	4613      	mov	r3, r2
 8001e70:	00db      	lsls	r3, r3, #3
 8001e72:	4413      	add	r3, r2
 8001e74:	009b      	lsls	r3, r3, #2
 8001e76:	440b      	add	r3, r1
 8001e78:	3324      	adds	r3, #36	@ 0x24
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d108      	bne.n	8001e92 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6818      	ldr	r0, [r3, #0]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001e8a:	461a      	mov	r2, r3
 8001e8c:	2101      	movs	r1, #1
 8001e8e:	f004 fcad 	bl	80067ec <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001e92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e94:	b2db      	uxtb	r3, r3
 8001e96:	4619      	mov	r1, r3
 8001e98:	6878      	ldr	r0, [r7, #4]
 8001e9a:	f007 f81a 	bl	8008ed2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	f003 0308 	and.w	r3, r3, #8
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d008      	beq.n	8001eba <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001ea8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eaa:	015a      	lsls	r2, r3, #5
 8001eac:	69fb      	ldr	r3, [r7, #28]
 8001eae:	4413      	add	r3, r2
 8001eb0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001eb4:	461a      	mov	r2, r3
 8001eb6:	2308      	movs	r3, #8
 8001eb8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	f003 0310 	and.w	r3, r3, #16
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d008      	beq.n	8001ed6 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001ec4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ec6:	015a      	lsls	r2, r3, #5
 8001ec8:	69fb      	ldr	r3, [r7, #28]
 8001eca:	4413      	add	r3, r2
 8001ecc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001ed0:	461a      	mov	r2, r3
 8001ed2:	2310      	movs	r3, #16
 8001ed4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d008      	beq.n	8001ef2 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001ee0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ee2:	015a      	lsls	r2, r3, #5
 8001ee4:	69fb      	ldr	r3, [r7, #28]
 8001ee6:	4413      	add	r3, r2
 8001ee8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001eec:	461a      	mov	r2, r3
 8001eee:	2340      	movs	r3, #64	@ 0x40
 8001ef0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	f003 0302 	and.w	r3, r3, #2
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d023      	beq.n	8001f44 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001efc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001efe:	6a38      	ldr	r0, [r7, #32]
 8001f00:	f003 fc94 	bl	800582c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001f04:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f06:	4613      	mov	r3, r2
 8001f08:	00db      	lsls	r3, r3, #3
 8001f0a:	4413      	add	r3, r2
 8001f0c:	009b      	lsls	r3, r3, #2
 8001f0e:	3310      	adds	r3, #16
 8001f10:	687a      	ldr	r2, [r7, #4]
 8001f12:	4413      	add	r3, r2
 8001f14:	3304      	adds	r3, #4
 8001f16:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	78db      	ldrb	r3, [r3, #3]
 8001f1c:	2b01      	cmp	r3, #1
 8001f1e:	d108      	bne.n	8001f32 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	2200      	movs	r2, #0
 8001f24:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	6878      	ldr	r0, [r7, #4]
 8001f2e:	f007 f867 	bl	8009000 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001f32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f34:	015a      	lsls	r2, r3, #5
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	4413      	add	r3, r2
 8001f3a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001f3e:	461a      	mov	r2, r3
 8001f40:	2302      	movs	r3, #2
 8001f42:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d003      	beq.n	8001f56 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001f4e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001f50:	6878      	ldr	r0, [r7, #4]
 8001f52:	f000 fcea 	bl	800292a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f58:	3301      	adds	r3, #1
 8001f5a:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8001f5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f5e:	085b      	lsrs	r3, r3, #1
 8001f60:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8001f62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	f47f af2e 	bne.w	8001dc6 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f004 fb78 	bl	8006664 <USB_ReadInterrupts>
 8001f74:	4603      	mov	r3, r0
 8001f76:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8001f7a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001f7e:	d122      	bne.n	8001fc6 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001f80:	69fb      	ldr	r3, [r7, #28]
 8001f82:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	69fa      	ldr	r2, [r7, #28]
 8001f8a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001f8e:	f023 0301 	bic.w	r3, r3, #1
 8001f92:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8001f9a:	2b01      	cmp	r3, #1
 8001f9c:	d108      	bne.n	8001fb0 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001fa6:	2100      	movs	r1, #0
 8001fa8:	6878      	ldr	r0, [r7, #4]
 8001faa:	f007 f9e1 	bl	8009370 <HAL_PCDEx_LPM_Callback>
 8001fae:	e002      	b.n	8001fb6 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001fb0:	6878      	ldr	r0, [r7, #4]
 8001fb2:	f007 f805 	bl	8008fc0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	695a      	ldr	r2, [r3, #20]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8001fc4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f004 fb4a 	bl	8006664 <USB_ReadInterrupts>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001fd6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001fda:	d112      	bne.n	8002002 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001fdc:	69fb      	ldr	r3, [r7, #28]
 8001fde:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	f003 0301 	and.w	r3, r3, #1
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	d102      	bne.n	8001ff2 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001fec:	6878      	ldr	r0, [r7, #4]
 8001fee:	f006 ffc1 	bl	8008f74 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	695a      	ldr	r2, [r3, #20]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8002000:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4618      	mov	r0, r3
 8002008:	f004 fb2c 	bl	8006664 <USB_ReadInterrupts>
 800200c:	4603      	mov	r3, r0
 800200e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002012:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002016:	d121      	bne.n	800205c <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	695a      	ldr	r2, [r3, #20]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8002026:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800202e:	2b00      	cmp	r3, #0
 8002030:	d111      	bne.n	8002056 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2201      	movs	r2, #1
 8002036:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002040:	089b      	lsrs	r3, r3, #2
 8002042:	f003 020f 	and.w	r2, r3, #15
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800204c:	2101      	movs	r1, #1
 800204e:	6878      	ldr	r0, [r7, #4]
 8002050:	f007 f98e 	bl	8009370 <HAL_PCDEx_LPM_Callback>
 8002054:	e002      	b.n	800205c <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002056:	6878      	ldr	r0, [r7, #4]
 8002058:	f006 ff8c 	bl	8008f74 <HAL_PCD_SuspendCallback>
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4618      	mov	r0, r3
 8002062:	f004 faff 	bl	8006664 <USB_ReadInterrupts>
 8002066:	4603      	mov	r3, r0
 8002068:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800206c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002070:	f040 80b7 	bne.w	80021e2 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002074:	69fb      	ldr	r3, [r7, #28]
 8002076:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	69fa      	ldr	r2, [r7, #28]
 800207e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002082:	f023 0301 	bic.w	r3, r3, #1
 8002086:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	2110      	movs	r1, #16
 800208e:	4618      	mov	r0, r3
 8002090:	f003 fbcc 	bl	800582c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002094:	2300      	movs	r3, #0
 8002096:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002098:	e046      	b.n	8002128 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800209a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800209c:	015a      	lsls	r2, r3, #5
 800209e:	69fb      	ldr	r3, [r7, #28]
 80020a0:	4413      	add	r3, r2
 80020a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80020a6:	461a      	mov	r2, r3
 80020a8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80020ac:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80020ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020b0:	015a      	lsls	r2, r3, #5
 80020b2:	69fb      	ldr	r3, [r7, #28]
 80020b4:	4413      	add	r3, r2
 80020b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80020be:	0151      	lsls	r1, r2, #5
 80020c0:	69fa      	ldr	r2, [r7, #28]
 80020c2:	440a      	add	r2, r1
 80020c4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80020c8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80020cc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80020ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020d0:	015a      	lsls	r2, r3, #5
 80020d2:	69fb      	ldr	r3, [r7, #28]
 80020d4:	4413      	add	r3, r2
 80020d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80020da:	461a      	mov	r2, r3
 80020dc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80020e0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80020e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020e4:	015a      	lsls	r2, r3, #5
 80020e6:	69fb      	ldr	r3, [r7, #28]
 80020e8:	4413      	add	r3, r2
 80020ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80020f2:	0151      	lsls	r1, r2, #5
 80020f4:	69fa      	ldr	r2, [r7, #28]
 80020f6:	440a      	add	r2, r1
 80020f8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80020fc:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002100:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002102:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002104:	015a      	lsls	r2, r3, #5
 8002106:	69fb      	ldr	r3, [r7, #28]
 8002108:	4413      	add	r3, r2
 800210a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002112:	0151      	lsls	r1, r2, #5
 8002114:	69fa      	ldr	r2, [r7, #28]
 8002116:	440a      	add	r2, r1
 8002118:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800211c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002120:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002122:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002124:	3301      	adds	r3, #1
 8002126:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	791b      	ldrb	r3, [r3, #4]
 800212c:	461a      	mov	r2, r3
 800212e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002130:	4293      	cmp	r3, r2
 8002132:	d3b2      	bcc.n	800209a <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002134:	69fb      	ldr	r3, [r7, #28]
 8002136:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800213a:	69db      	ldr	r3, [r3, #28]
 800213c:	69fa      	ldr	r2, [r7, #28]
 800213e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002142:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8002146:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	7bdb      	ldrb	r3, [r3, #15]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d016      	beq.n	800217e <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002150:	69fb      	ldr	r3, [r7, #28]
 8002152:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002156:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800215a:	69fa      	ldr	r2, [r7, #28]
 800215c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002160:	f043 030b 	orr.w	r3, r3, #11
 8002164:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002168:	69fb      	ldr	r3, [r7, #28]
 800216a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800216e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002170:	69fa      	ldr	r2, [r7, #28]
 8002172:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002176:	f043 030b 	orr.w	r3, r3, #11
 800217a:	6453      	str	r3, [r2, #68]	@ 0x44
 800217c:	e015      	b.n	80021aa <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800217e:	69fb      	ldr	r3, [r7, #28]
 8002180:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002184:	695b      	ldr	r3, [r3, #20]
 8002186:	69fa      	ldr	r2, [r7, #28]
 8002188:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800218c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002190:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8002194:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002196:	69fb      	ldr	r3, [r7, #28]
 8002198:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800219c:	691b      	ldr	r3, [r3, #16]
 800219e:	69fa      	ldr	r2, [r7, #28]
 80021a0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80021a4:	f043 030b 	orr.w	r3, r3, #11
 80021a8:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80021aa:	69fb      	ldr	r3, [r7, #28]
 80021ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	69fa      	ldr	r2, [r7, #28]
 80021b4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80021b8:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80021bc:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6818      	ldr	r0, [r3, #0]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80021cc:	461a      	mov	r2, r3
 80021ce:	f004 fb0d 	bl	80067ec <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	695a      	ldr	r2, [r3, #20]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80021e0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4618      	mov	r0, r3
 80021e8:	f004 fa3c 	bl	8006664 <USB_ReadInterrupts>
 80021ec:	4603      	mov	r3, r0
 80021ee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80021f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80021f6:	d123      	bne.n	8002240 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4618      	mov	r0, r3
 80021fe:	f004 fad2 	bl	80067a6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4618      	mov	r0, r3
 8002208:	f003 fb89 	bl	800591e <USB_GetDevSpeed>
 800220c:	4603      	mov	r3, r0
 800220e:	461a      	mov	r2, r3
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681c      	ldr	r4, [r3, #0]
 8002218:	f000 fea4 	bl	8002f64 <HAL_RCC_GetHCLKFreq>
 800221c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002222:	461a      	mov	r2, r3
 8002224:	4620      	mov	r0, r4
 8002226:	f003 f893 	bl	8005350 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800222a:	6878      	ldr	r0, [r7, #4]
 800222c:	f006 fe79 	bl	8008f22 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	695a      	ldr	r2, [r3, #20]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800223e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4618      	mov	r0, r3
 8002246:	f004 fa0d 	bl	8006664 <USB_ReadInterrupts>
 800224a:	4603      	mov	r3, r0
 800224c:	f003 0308 	and.w	r3, r3, #8
 8002250:	2b08      	cmp	r3, #8
 8002252:	d10a      	bne.n	800226a <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002254:	6878      	ldr	r0, [r7, #4]
 8002256:	f006 fe56 	bl	8008f06 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	695a      	ldr	r2, [r3, #20]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f002 0208 	and.w	r2, r2, #8
 8002268:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4618      	mov	r0, r3
 8002270:	f004 f9f8 	bl	8006664 <USB_ReadInterrupts>
 8002274:	4603      	mov	r3, r0
 8002276:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800227a:	2b80      	cmp	r3, #128	@ 0x80
 800227c:	d123      	bne.n	80022c6 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800227e:	6a3b      	ldr	r3, [r7, #32]
 8002280:	699b      	ldr	r3, [r3, #24]
 8002282:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002286:	6a3b      	ldr	r3, [r7, #32]
 8002288:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800228a:	2301      	movs	r3, #1
 800228c:	627b      	str	r3, [r7, #36]	@ 0x24
 800228e:	e014      	b.n	80022ba <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002290:	6879      	ldr	r1, [r7, #4]
 8002292:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002294:	4613      	mov	r3, r2
 8002296:	00db      	lsls	r3, r3, #3
 8002298:	4413      	add	r3, r2
 800229a:	009b      	lsls	r3, r3, #2
 800229c:	440b      	add	r3, r1
 800229e:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80022a2:	781b      	ldrb	r3, [r3, #0]
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	d105      	bne.n	80022b4 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80022a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022aa:	b2db      	uxtb	r3, r3
 80022ac:	4619      	mov	r1, r3
 80022ae:	6878      	ldr	r0, [r7, #4]
 80022b0:	f000 fb0a 	bl	80028c8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80022b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022b6:	3301      	adds	r3, #1
 80022b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	791b      	ldrb	r3, [r3, #4]
 80022be:	461a      	mov	r2, r3
 80022c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d3e4      	bcc.n	8002290 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4618      	mov	r0, r3
 80022cc:	f004 f9ca 	bl	8006664 <USB_ReadInterrupts>
 80022d0:	4603      	mov	r3, r0
 80022d2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80022d6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80022da:	d13c      	bne.n	8002356 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80022dc:	2301      	movs	r3, #1
 80022de:	627b      	str	r3, [r7, #36]	@ 0x24
 80022e0:	e02b      	b.n	800233a <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80022e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022e4:	015a      	lsls	r2, r3, #5
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	4413      	add	r3, r2
 80022ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80022f2:	6879      	ldr	r1, [r7, #4]
 80022f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80022f6:	4613      	mov	r3, r2
 80022f8:	00db      	lsls	r3, r3, #3
 80022fa:	4413      	add	r3, r2
 80022fc:	009b      	lsls	r3, r3, #2
 80022fe:	440b      	add	r3, r1
 8002300:	3318      	adds	r3, #24
 8002302:	781b      	ldrb	r3, [r3, #0]
 8002304:	2b01      	cmp	r3, #1
 8002306:	d115      	bne.n	8002334 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002308:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800230a:	2b00      	cmp	r3, #0
 800230c:	da12      	bge.n	8002334 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800230e:	6879      	ldr	r1, [r7, #4]
 8002310:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002312:	4613      	mov	r3, r2
 8002314:	00db      	lsls	r3, r3, #3
 8002316:	4413      	add	r3, r2
 8002318:	009b      	lsls	r3, r3, #2
 800231a:	440b      	add	r3, r1
 800231c:	3317      	adds	r3, #23
 800231e:	2201      	movs	r2, #1
 8002320:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002324:	b2db      	uxtb	r3, r3
 8002326:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800232a:	b2db      	uxtb	r3, r3
 800232c:	4619      	mov	r1, r3
 800232e:	6878      	ldr	r0, [r7, #4]
 8002330:	f000 faca 	bl	80028c8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002334:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002336:	3301      	adds	r3, #1
 8002338:	627b      	str	r3, [r7, #36]	@ 0x24
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	791b      	ldrb	r3, [r3, #4]
 800233e:	461a      	mov	r2, r3
 8002340:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002342:	4293      	cmp	r3, r2
 8002344:	d3cd      	bcc.n	80022e2 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	695a      	ldr	r2, [r3, #20]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8002354:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4618      	mov	r0, r3
 800235c:	f004 f982 	bl	8006664 <USB_ReadInterrupts>
 8002360:	4603      	mov	r3, r0
 8002362:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002366:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800236a:	d156      	bne.n	800241a <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800236c:	2301      	movs	r3, #1
 800236e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002370:	e045      	b.n	80023fe <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002372:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002374:	015a      	lsls	r2, r3, #5
 8002376:	69fb      	ldr	r3, [r7, #28]
 8002378:	4413      	add	r3, r2
 800237a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002382:	6879      	ldr	r1, [r7, #4]
 8002384:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002386:	4613      	mov	r3, r2
 8002388:	00db      	lsls	r3, r3, #3
 800238a:	4413      	add	r3, r2
 800238c:	009b      	lsls	r3, r3, #2
 800238e:	440b      	add	r3, r1
 8002390:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002394:	781b      	ldrb	r3, [r3, #0]
 8002396:	2b01      	cmp	r3, #1
 8002398:	d12e      	bne.n	80023f8 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800239a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800239c:	2b00      	cmp	r3, #0
 800239e:	da2b      	bge.n	80023f8 <HAL_PCD_IRQHandler+0x908>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 80023a0:	69bb      	ldr	r3, [r7, #24]
 80023a2:	0c1a      	lsrs	r2, r3, #16
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80023aa:	4053      	eors	r3, r2
 80023ac:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d121      	bne.n	80023f8 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80023b4:	6879      	ldr	r1, [r7, #4]
 80023b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80023b8:	4613      	mov	r3, r2
 80023ba:	00db      	lsls	r3, r3, #3
 80023bc:	4413      	add	r3, r2
 80023be:	009b      	lsls	r3, r3, #2
 80023c0:	440b      	add	r3, r1
 80023c2:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80023c6:	2201      	movs	r2, #1
 80023c8:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80023ca:	6a3b      	ldr	r3, [r7, #32]
 80023cc:	699b      	ldr	r3, [r3, #24]
 80023ce:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80023d2:	6a3b      	ldr	r3, [r7, #32]
 80023d4:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80023d6:	6a3b      	ldr	r3, [r7, #32]
 80023d8:	695b      	ldr	r3, [r3, #20]
 80023da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d10a      	bne.n	80023f8 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80023e2:	69fb      	ldr	r3, [r7, #28]
 80023e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	69fa      	ldr	r2, [r7, #28]
 80023ec:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80023f0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80023f4:	6053      	str	r3, [r2, #4]
            break;
 80023f6:	e008      	b.n	800240a <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80023f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023fa:	3301      	adds	r3, #1
 80023fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	791b      	ldrb	r3, [r3, #4]
 8002402:	461a      	mov	r2, r3
 8002404:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002406:	4293      	cmp	r3, r2
 8002408:	d3b3      	bcc.n	8002372 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	695a      	ldr	r2, [r3, #20]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8002418:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4618      	mov	r0, r3
 8002420:	f004 f920 	bl	8006664 <USB_ReadInterrupts>
 8002424:	4603      	mov	r3, r0
 8002426:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800242a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800242e:	d10a      	bne.n	8002446 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002430:	6878      	ldr	r0, [r7, #4]
 8002432:	f006 fdf7 	bl	8009024 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	695a      	ldr	r2, [r3, #20]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002444:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4618      	mov	r0, r3
 800244c:	f004 f90a 	bl	8006664 <USB_ReadInterrupts>
 8002450:	4603      	mov	r3, r0
 8002452:	f003 0304 	and.w	r3, r3, #4
 8002456:	2b04      	cmp	r3, #4
 8002458:	d115      	bne.n	8002486 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002462:	69bb      	ldr	r3, [r7, #24]
 8002464:	f003 0304 	and.w	r3, r3, #4
 8002468:	2b00      	cmp	r3, #0
 800246a:	d002      	beq.n	8002472 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800246c:	6878      	ldr	r0, [r7, #4]
 800246e:	f006 fde7 	bl	8009040 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	6859      	ldr	r1, [r3, #4]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	69ba      	ldr	r2, [r7, #24]
 800247e:	430a      	orrs	r2, r1
 8002480:	605a      	str	r2, [r3, #4]
 8002482:	e000      	b.n	8002486 <HAL_PCD_IRQHandler+0x996>
      return;
 8002484:	bf00      	nop
    }
  }
}
 8002486:	3734      	adds	r7, #52	@ 0x34
 8002488:	46bd      	mov	sp, r7
 800248a:	bd90      	pop	{r4, r7, pc}

0800248c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b082      	sub	sp, #8
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
 8002494:	460b      	mov	r3, r1
 8002496:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800249e:	2b01      	cmp	r3, #1
 80024a0:	d101      	bne.n	80024a6 <HAL_PCD_SetAddress+0x1a>
 80024a2:	2302      	movs	r3, #2
 80024a4:	e012      	b.n	80024cc <HAL_PCD_SetAddress+0x40>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2201      	movs	r2, #1
 80024aa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	78fa      	ldrb	r2, [r7, #3]
 80024b2:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	78fa      	ldrb	r2, [r7, #3]
 80024ba:	4611      	mov	r1, r2
 80024bc:	4618      	mov	r0, r3
 80024be:	f004 f869 	bl	8006594 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2200      	movs	r2, #0
 80024c6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80024ca:	2300      	movs	r3, #0
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	3708      	adds	r7, #8
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}

080024d4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b084      	sub	sp, #16
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
 80024dc:	4608      	mov	r0, r1
 80024de:	4611      	mov	r1, r2
 80024e0:	461a      	mov	r2, r3
 80024e2:	4603      	mov	r3, r0
 80024e4:	70fb      	strb	r3, [r7, #3]
 80024e6:	460b      	mov	r3, r1
 80024e8:	803b      	strh	r3, [r7, #0]
 80024ea:	4613      	mov	r3, r2
 80024ec:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 80024ee:	2300      	movs	r3, #0
 80024f0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80024f2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	da0f      	bge.n	800251a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80024fa:	78fb      	ldrb	r3, [r7, #3]
 80024fc:	f003 020f 	and.w	r2, r3, #15
 8002500:	4613      	mov	r3, r2
 8002502:	00db      	lsls	r3, r3, #3
 8002504:	4413      	add	r3, r2
 8002506:	009b      	lsls	r3, r3, #2
 8002508:	3310      	adds	r3, #16
 800250a:	687a      	ldr	r2, [r7, #4]
 800250c:	4413      	add	r3, r2
 800250e:	3304      	adds	r3, #4
 8002510:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	2201      	movs	r2, #1
 8002516:	705a      	strb	r2, [r3, #1]
 8002518:	e00f      	b.n	800253a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800251a:	78fb      	ldrb	r3, [r7, #3]
 800251c:	f003 020f 	and.w	r2, r3, #15
 8002520:	4613      	mov	r3, r2
 8002522:	00db      	lsls	r3, r3, #3
 8002524:	4413      	add	r3, r2
 8002526:	009b      	lsls	r3, r3, #2
 8002528:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800252c:	687a      	ldr	r2, [r7, #4]
 800252e:	4413      	add	r3, r2
 8002530:	3304      	adds	r3, #4
 8002532:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	2200      	movs	r2, #0
 8002538:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800253a:	78fb      	ldrb	r3, [r7, #3]
 800253c:	f003 030f 	and.w	r3, r3, #15
 8002540:	b2da      	uxtb	r2, r3
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8002546:	883b      	ldrh	r3, [r7, #0]
 8002548:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	78ba      	ldrb	r2, [r7, #2]
 8002554:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	785b      	ldrb	r3, [r3, #1]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d004      	beq.n	8002568 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	781b      	ldrb	r3, [r3, #0]
 8002562:	461a      	mov	r2, r3
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002568:	78bb      	ldrb	r3, [r7, #2]
 800256a:	2b02      	cmp	r3, #2
 800256c:	d102      	bne.n	8002574 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	2200      	movs	r2, #0
 8002572:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800257a:	2b01      	cmp	r3, #1
 800257c:	d101      	bne.n	8002582 <HAL_PCD_EP_Open+0xae>
 800257e:	2302      	movs	r3, #2
 8002580:	e00e      	b.n	80025a0 <HAL_PCD_EP_Open+0xcc>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2201      	movs	r2, #1
 8002586:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	68f9      	ldr	r1, [r7, #12]
 8002590:	4618      	mov	r0, r3
 8002592:	f003 f9e9 	bl	8005968 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2200      	movs	r2, #0
 800259a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 800259e:	7afb      	ldrb	r3, [r7, #11]
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	3710      	adds	r7, #16
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}

080025a8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b084      	sub	sp, #16
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
 80025b0:	460b      	mov	r3, r1
 80025b2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80025b4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	da0f      	bge.n	80025dc <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80025bc:	78fb      	ldrb	r3, [r7, #3]
 80025be:	f003 020f 	and.w	r2, r3, #15
 80025c2:	4613      	mov	r3, r2
 80025c4:	00db      	lsls	r3, r3, #3
 80025c6:	4413      	add	r3, r2
 80025c8:	009b      	lsls	r3, r3, #2
 80025ca:	3310      	adds	r3, #16
 80025cc:	687a      	ldr	r2, [r7, #4]
 80025ce:	4413      	add	r3, r2
 80025d0:	3304      	adds	r3, #4
 80025d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	2201      	movs	r2, #1
 80025d8:	705a      	strb	r2, [r3, #1]
 80025da:	e00f      	b.n	80025fc <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80025dc:	78fb      	ldrb	r3, [r7, #3]
 80025de:	f003 020f 	and.w	r2, r3, #15
 80025e2:	4613      	mov	r3, r2
 80025e4:	00db      	lsls	r3, r3, #3
 80025e6:	4413      	add	r3, r2
 80025e8:	009b      	lsls	r3, r3, #2
 80025ea:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80025ee:	687a      	ldr	r2, [r7, #4]
 80025f0:	4413      	add	r3, r2
 80025f2:	3304      	adds	r3, #4
 80025f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	2200      	movs	r2, #0
 80025fa:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80025fc:	78fb      	ldrb	r3, [r7, #3]
 80025fe:	f003 030f 	and.w	r3, r3, #15
 8002602:	b2da      	uxtb	r2, r3
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800260e:	2b01      	cmp	r3, #1
 8002610:	d101      	bne.n	8002616 <HAL_PCD_EP_Close+0x6e>
 8002612:	2302      	movs	r3, #2
 8002614:	e00e      	b.n	8002634 <HAL_PCD_EP_Close+0x8c>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2201      	movs	r2, #1
 800261a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	68f9      	ldr	r1, [r7, #12]
 8002624:	4618      	mov	r0, r3
 8002626:	f003 fa27 	bl	8005a78 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2200      	movs	r2, #0
 800262e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8002632:	2300      	movs	r3, #0
}
 8002634:	4618      	mov	r0, r3
 8002636:	3710      	adds	r7, #16
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}

0800263c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b086      	sub	sp, #24
 8002640:	af00      	add	r7, sp, #0
 8002642:	60f8      	str	r0, [r7, #12]
 8002644:	607a      	str	r2, [r7, #4]
 8002646:	603b      	str	r3, [r7, #0]
 8002648:	460b      	mov	r3, r1
 800264a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800264c:	7afb      	ldrb	r3, [r7, #11]
 800264e:	f003 020f 	and.w	r2, r3, #15
 8002652:	4613      	mov	r3, r2
 8002654:	00db      	lsls	r3, r3, #3
 8002656:	4413      	add	r3, r2
 8002658:	009b      	lsls	r3, r3, #2
 800265a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800265e:	68fa      	ldr	r2, [r7, #12]
 8002660:	4413      	add	r3, r2
 8002662:	3304      	adds	r3, #4
 8002664:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	687a      	ldr	r2, [r7, #4]
 800266a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	683a      	ldr	r2, [r7, #0]
 8002670:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	2200      	movs	r2, #0
 8002676:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	2200      	movs	r2, #0
 800267c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800267e:	7afb      	ldrb	r3, [r7, #11]
 8002680:	f003 030f 	and.w	r3, r3, #15
 8002684:	b2da      	uxtb	r2, r3
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	799b      	ldrb	r3, [r3, #6]
 800268e:	2b01      	cmp	r3, #1
 8002690:	d102      	bne.n	8002698 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002692:	687a      	ldr	r2, [r7, #4]
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	6818      	ldr	r0, [r3, #0]
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	799b      	ldrb	r3, [r3, #6]
 80026a0:	461a      	mov	r2, r3
 80026a2:	6979      	ldr	r1, [r7, #20]
 80026a4:	f003 fac4 	bl	8005c30 <USB_EPStartXfer>

  return HAL_OK;
 80026a8:	2300      	movs	r3, #0
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	3718      	adds	r7, #24
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}

080026b2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80026b2:	b480      	push	{r7}
 80026b4:	b083      	sub	sp, #12
 80026b6:	af00      	add	r7, sp, #0
 80026b8:	6078      	str	r0, [r7, #4]
 80026ba:	460b      	mov	r3, r1
 80026bc:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80026be:	78fb      	ldrb	r3, [r7, #3]
 80026c0:	f003 020f 	and.w	r2, r3, #15
 80026c4:	6879      	ldr	r1, [r7, #4]
 80026c6:	4613      	mov	r3, r2
 80026c8:	00db      	lsls	r3, r3, #3
 80026ca:	4413      	add	r3, r2
 80026cc:	009b      	lsls	r3, r3, #2
 80026ce:	440b      	add	r3, r1
 80026d0:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 80026d4:	681b      	ldr	r3, [r3, #0]
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	370c      	adds	r7, #12
 80026da:	46bd      	mov	sp, r7
 80026dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e0:	4770      	bx	lr

080026e2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80026e2:	b580      	push	{r7, lr}
 80026e4:	b086      	sub	sp, #24
 80026e6:	af00      	add	r7, sp, #0
 80026e8:	60f8      	str	r0, [r7, #12]
 80026ea:	607a      	str	r2, [r7, #4]
 80026ec:	603b      	str	r3, [r7, #0]
 80026ee:	460b      	mov	r3, r1
 80026f0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80026f2:	7afb      	ldrb	r3, [r7, #11]
 80026f4:	f003 020f 	and.w	r2, r3, #15
 80026f8:	4613      	mov	r3, r2
 80026fa:	00db      	lsls	r3, r3, #3
 80026fc:	4413      	add	r3, r2
 80026fe:	009b      	lsls	r3, r3, #2
 8002700:	3310      	adds	r3, #16
 8002702:	68fa      	ldr	r2, [r7, #12]
 8002704:	4413      	add	r3, r2
 8002706:	3304      	adds	r3, #4
 8002708:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	687a      	ldr	r2, [r7, #4]
 800270e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	683a      	ldr	r2, [r7, #0]
 8002714:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	2200      	movs	r2, #0
 800271a:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	2201      	movs	r2, #1
 8002720:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002722:	7afb      	ldrb	r3, [r7, #11]
 8002724:	f003 030f 	and.w	r3, r3, #15
 8002728:	b2da      	uxtb	r2, r3
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	799b      	ldrb	r3, [r3, #6]
 8002732:	2b01      	cmp	r3, #1
 8002734:	d102      	bne.n	800273c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002736:	687a      	ldr	r2, [r7, #4]
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	6818      	ldr	r0, [r3, #0]
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	799b      	ldrb	r3, [r3, #6]
 8002744:	461a      	mov	r2, r3
 8002746:	6979      	ldr	r1, [r7, #20]
 8002748:	f003 fa72 	bl	8005c30 <USB_EPStartXfer>

  return HAL_OK;
 800274c:	2300      	movs	r3, #0
}
 800274e:	4618      	mov	r0, r3
 8002750:	3718      	adds	r7, #24
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}

08002756 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002756:	b580      	push	{r7, lr}
 8002758:	b084      	sub	sp, #16
 800275a:	af00      	add	r7, sp, #0
 800275c:	6078      	str	r0, [r7, #4]
 800275e:	460b      	mov	r3, r1
 8002760:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002762:	78fb      	ldrb	r3, [r7, #3]
 8002764:	f003 030f 	and.w	r3, r3, #15
 8002768:	687a      	ldr	r2, [r7, #4]
 800276a:	7912      	ldrb	r2, [r2, #4]
 800276c:	4293      	cmp	r3, r2
 800276e:	d901      	bls.n	8002774 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002770:	2301      	movs	r3, #1
 8002772:	e04f      	b.n	8002814 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002774:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002778:	2b00      	cmp	r3, #0
 800277a:	da0f      	bge.n	800279c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800277c:	78fb      	ldrb	r3, [r7, #3]
 800277e:	f003 020f 	and.w	r2, r3, #15
 8002782:	4613      	mov	r3, r2
 8002784:	00db      	lsls	r3, r3, #3
 8002786:	4413      	add	r3, r2
 8002788:	009b      	lsls	r3, r3, #2
 800278a:	3310      	adds	r3, #16
 800278c:	687a      	ldr	r2, [r7, #4]
 800278e:	4413      	add	r3, r2
 8002790:	3304      	adds	r3, #4
 8002792:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	2201      	movs	r2, #1
 8002798:	705a      	strb	r2, [r3, #1]
 800279a:	e00d      	b.n	80027b8 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800279c:	78fa      	ldrb	r2, [r7, #3]
 800279e:	4613      	mov	r3, r2
 80027a0:	00db      	lsls	r3, r3, #3
 80027a2:	4413      	add	r3, r2
 80027a4:	009b      	lsls	r3, r3, #2
 80027a6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80027aa:	687a      	ldr	r2, [r7, #4]
 80027ac:	4413      	add	r3, r2
 80027ae:	3304      	adds	r3, #4
 80027b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	2200      	movs	r2, #0
 80027b6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	2201      	movs	r2, #1
 80027bc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80027be:	78fb      	ldrb	r3, [r7, #3]
 80027c0:	f003 030f 	and.w	r3, r3, #15
 80027c4:	b2da      	uxtb	r2, r3
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80027d0:	2b01      	cmp	r3, #1
 80027d2:	d101      	bne.n	80027d8 <HAL_PCD_EP_SetStall+0x82>
 80027d4:	2302      	movs	r3, #2
 80027d6:	e01d      	b.n	8002814 <HAL_PCD_EP_SetStall+0xbe>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2201      	movs	r2, #1
 80027dc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	68f9      	ldr	r1, [r7, #12]
 80027e6:	4618      	mov	r0, r3
 80027e8:	f003 fe00 	bl	80063ec <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80027ec:	78fb      	ldrb	r3, [r7, #3]
 80027ee:	f003 030f 	and.w	r3, r3, #15
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d109      	bne.n	800280a <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6818      	ldr	r0, [r3, #0]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	7999      	ldrb	r1, [r3, #6]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002804:	461a      	mov	r2, r3
 8002806:	f003 fff1 	bl	80067ec <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2200      	movs	r2, #0
 800280e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002812:	2300      	movs	r3, #0
}
 8002814:	4618      	mov	r0, r3
 8002816:	3710      	adds	r7, #16
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}

0800281c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b084      	sub	sp, #16
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
 8002824:	460b      	mov	r3, r1
 8002826:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002828:	78fb      	ldrb	r3, [r7, #3]
 800282a:	f003 030f 	and.w	r3, r3, #15
 800282e:	687a      	ldr	r2, [r7, #4]
 8002830:	7912      	ldrb	r2, [r2, #4]
 8002832:	4293      	cmp	r3, r2
 8002834:	d901      	bls.n	800283a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	e042      	b.n	80028c0 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800283a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800283e:	2b00      	cmp	r3, #0
 8002840:	da0f      	bge.n	8002862 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002842:	78fb      	ldrb	r3, [r7, #3]
 8002844:	f003 020f 	and.w	r2, r3, #15
 8002848:	4613      	mov	r3, r2
 800284a:	00db      	lsls	r3, r3, #3
 800284c:	4413      	add	r3, r2
 800284e:	009b      	lsls	r3, r3, #2
 8002850:	3310      	adds	r3, #16
 8002852:	687a      	ldr	r2, [r7, #4]
 8002854:	4413      	add	r3, r2
 8002856:	3304      	adds	r3, #4
 8002858:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	2201      	movs	r2, #1
 800285e:	705a      	strb	r2, [r3, #1]
 8002860:	e00f      	b.n	8002882 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002862:	78fb      	ldrb	r3, [r7, #3]
 8002864:	f003 020f 	and.w	r2, r3, #15
 8002868:	4613      	mov	r3, r2
 800286a:	00db      	lsls	r3, r3, #3
 800286c:	4413      	add	r3, r2
 800286e:	009b      	lsls	r3, r3, #2
 8002870:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002874:	687a      	ldr	r2, [r7, #4]
 8002876:	4413      	add	r3, r2
 8002878:	3304      	adds	r3, #4
 800287a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	2200      	movs	r2, #0
 8002880:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	2200      	movs	r2, #0
 8002886:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002888:	78fb      	ldrb	r3, [r7, #3]
 800288a:	f003 030f 	and.w	r3, r3, #15
 800288e:	b2da      	uxtb	r2, r3
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800289a:	2b01      	cmp	r3, #1
 800289c:	d101      	bne.n	80028a2 <HAL_PCD_EP_ClrStall+0x86>
 800289e:	2302      	movs	r3, #2
 80028a0:	e00e      	b.n	80028c0 <HAL_PCD_EP_ClrStall+0xa4>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2201      	movs	r2, #1
 80028a6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	68f9      	ldr	r1, [r7, #12]
 80028b0:	4618      	mov	r0, r3
 80028b2:	f003 fe09 	bl	80064c8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2200      	movs	r2, #0
 80028ba:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80028be:	2300      	movs	r3, #0
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	3710      	adds	r7, #16
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}

080028c8 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b084      	sub	sp, #16
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
 80028d0:	460b      	mov	r3, r1
 80028d2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80028d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	da0c      	bge.n	80028f6 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80028dc:	78fb      	ldrb	r3, [r7, #3]
 80028de:	f003 020f 	and.w	r2, r3, #15
 80028e2:	4613      	mov	r3, r2
 80028e4:	00db      	lsls	r3, r3, #3
 80028e6:	4413      	add	r3, r2
 80028e8:	009b      	lsls	r3, r3, #2
 80028ea:	3310      	adds	r3, #16
 80028ec:	687a      	ldr	r2, [r7, #4]
 80028ee:	4413      	add	r3, r2
 80028f0:	3304      	adds	r3, #4
 80028f2:	60fb      	str	r3, [r7, #12]
 80028f4:	e00c      	b.n	8002910 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80028f6:	78fb      	ldrb	r3, [r7, #3]
 80028f8:	f003 020f 	and.w	r2, r3, #15
 80028fc:	4613      	mov	r3, r2
 80028fe:	00db      	lsls	r3, r3, #3
 8002900:	4413      	add	r3, r2
 8002902:	009b      	lsls	r3, r3, #2
 8002904:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002908:	687a      	ldr	r2, [r7, #4]
 800290a:	4413      	add	r3, r2
 800290c:	3304      	adds	r3, #4
 800290e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	68f9      	ldr	r1, [r7, #12]
 8002916:	4618      	mov	r0, r3
 8002918:	f003 fc28 	bl	800616c <USB_EPStopXfer>
 800291c:	4603      	mov	r3, r0
 800291e:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002920:	7afb      	ldrb	r3, [r7, #11]
}
 8002922:	4618      	mov	r0, r3
 8002924:	3710      	adds	r7, #16
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}

0800292a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800292a:	b580      	push	{r7, lr}
 800292c:	b08a      	sub	sp, #40	@ 0x28
 800292e:	af02      	add	r7, sp, #8
 8002930:	6078      	str	r0, [r7, #4]
 8002932:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800293e:	683a      	ldr	r2, [r7, #0]
 8002940:	4613      	mov	r3, r2
 8002942:	00db      	lsls	r3, r3, #3
 8002944:	4413      	add	r3, r2
 8002946:	009b      	lsls	r3, r3, #2
 8002948:	3310      	adds	r3, #16
 800294a:	687a      	ldr	r2, [r7, #4]
 800294c:	4413      	add	r3, r2
 800294e:	3304      	adds	r3, #4
 8002950:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	695a      	ldr	r2, [r3, #20]
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	691b      	ldr	r3, [r3, #16]
 800295a:	429a      	cmp	r2, r3
 800295c:	d901      	bls.n	8002962 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	e06b      	b.n	8002a3a <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	691a      	ldr	r2, [r3, #16]
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	695b      	ldr	r3, [r3, #20]
 800296a:	1ad3      	subs	r3, r2, r3
 800296c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	689b      	ldr	r3, [r3, #8]
 8002972:	69fa      	ldr	r2, [r7, #28]
 8002974:	429a      	cmp	r2, r3
 8002976:	d902      	bls.n	800297e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800297e:	69fb      	ldr	r3, [r7, #28]
 8002980:	3303      	adds	r3, #3
 8002982:	089b      	lsrs	r3, r3, #2
 8002984:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002986:	e02a      	b.n	80029de <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	691a      	ldr	r2, [r3, #16]
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	695b      	ldr	r3, [r3, #20]
 8002990:	1ad3      	subs	r3, r2, r3
 8002992:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	69fa      	ldr	r2, [r7, #28]
 800299a:	429a      	cmp	r2, r3
 800299c:	d902      	bls.n	80029a4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80029a4:	69fb      	ldr	r3, [r7, #28]
 80029a6:	3303      	adds	r3, #3
 80029a8:	089b      	lsrs	r3, r3, #2
 80029aa:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	68d9      	ldr	r1, [r3, #12]
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	b2da      	uxtb	r2, r3
 80029b4:	69fb      	ldr	r3, [r7, #28]
 80029b6:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80029bc:	9300      	str	r3, [sp, #0]
 80029be:	4603      	mov	r3, r0
 80029c0:	6978      	ldr	r0, [r7, #20]
 80029c2:	f003 fc7d 	bl	80062c0 <USB_WritePacket>

    ep->xfer_buff  += len;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	68da      	ldr	r2, [r3, #12]
 80029ca:	69fb      	ldr	r3, [r7, #28]
 80029cc:	441a      	add	r2, r3
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	695a      	ldr	r2, [r3, #20]
 80029d6:	69fb      	ldr	r3, [r7, #28]
 80029d8:	441a      	add	r2, r3
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	015a      	lsls	r2, r3, #5
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	4413      	add	r3, r2
 80029e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80029ea:	699b      	ldr	r3, [r3, #24]
 80029ec:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80029ee:	69ba      	ldr	r2, [r7, #24]
 80029f0:	429a      	cmp	r2, r3
 80029f2:	d809      	bhi.n	8002a08 <PCD_WriteEmptyTxFifo+0xde>
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	695a      	ldr	r2, [r3, #20]
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80029fc:	429a      	cmp	r2, r3
 80029fe:	d203      	bcs.n	8002a08 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	691b      	ldr	r3, [r3, #16]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d1bf      	bne.n	8002988 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	691a      	ldr	r2, [r3, #16]
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	695b      	ldr	r3, [r3, #20]
 8002a10:	429a      	cmp	r2, r3
 8002a12:	d811      	bhi.n	8002a38 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	f003 030f 	and.w	r3, r3, #15
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a20:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002a28:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	43db      	mvns	r3, r3
 8002a2e:	6939      	ldr	r1, [r7, #16]
 8002a30:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002a34:	4013      	ands	r3, r2
 8002a36:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8002a38:	2300      	movs	r3, #0
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	3720      	adds	r7, #32
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}
	...

08002a44 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b088      	sub	sp, #32
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
 8002a4c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a54:	69fb      	ldr	r3, [r7, #28]
 8002a56:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002a58:	69fb      	ldr	r3, [r7, #28]
 8002a5a:	333c      	adds	r3, #60	@ 0x3c
 8002a5c:	3304      	adds	r3, #4
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	015a      	lsls	r2, r3, #5
 8002a66:	69bb      	ldr	r3, [r7, #24]
 8002a68:	4413      	add	r3, r2
 8002a6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	799b      	ldrb	r3, [r3, #6]
 8002a76:	2b01      	cmp	r3, #1
 8002a78:	d17b      	bne.n	8002b72 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	f003 0308 	and.w	r3, r3, #8
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d015      	beq.n	8002ab0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	4a61      	ldr	r2, [pc, #388]	@ (8002c0c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	f240 80b9 	bls.w	8002c00 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	f000 80b3 	beq.w	8002c00 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	015a      	lsls	r2, r3, #5
 8002a9e:	69bb      	ldr	r3, [r7, #24]
 8002aa0:	4413      	add	r3, r2
 8002aa2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002aa6:	461a      	mov	r2, r3
 8002aa8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002aac:	6093      	str	r3, [r2, #8]
 8002aae:	e0a7      	b.n	8002c00 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	f003 0320 	and.w	r3, r3, #32
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d009      	beq.n	8002ace <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	015a      	lsls	r2, r3, #5
 8002abe:	69bb      	ldr	r3, [r7, #24]
 8002ac0:	4413      	add	r3, r2
 8002ac2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002ac6:	461a      	mov	r2, r3
 8002ac8:	2320      	movs	r3, #32
 8002aca:	6093      	str	r3, [r2, #8]
 8002acc:	e098      	b.n	8002c00 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	f040 8093 	bne.w	8002c00 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	4a4b      	ldr	r2, [pc, #300]	@ (8002c0c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d90f      	bls.n	8002b02 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d00a      	beq.n	8002b02 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	015a      	lsls	r2, r3, #5
 8002af0:	69bb      	ldr	r3, [r7, #24]
 8002af2:	4413      	add	r3, r2
 8002af4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002af8:	461a      	mov	r2, r3
 8002afa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002afe:	6093      	str	r3, [r2, #8]
 8002b00:	e07e      	b.n	8002c00 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002b02:	683a      	ldr	r2, [r7, #0]
 8002b04:	4613      	mov	r3, r2
 8002b06:	00db      	lsls	r3, r3, #3
 8002b08:	4413      	add	r3, r2
 8002b0a:	009b      	lsls	r3, r3, #2
 8002b0c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002b10:	687a      	ldr	r2, [r7, #4]
 8002b12:	4413      	add	r3, r2
 8002b14:	3304      	adds	r3, #4
 8002b16:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	6a1a      	ldr	r2, [r3, #32]
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	0159      	lsls	r1, r3, #5
 8002b20:	69bb      	ldr	r3, [r7, #24]
 8002b22:	440b      	add	r3, r1
 8002b24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002b28:	691b      	ldr	r3, [r3, #16]
 8002b2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b2e:	1ad2      	subs	r2, r2, r3
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d114      	bne.n	8002b64 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	691b      	ldr	r3, [r3, #16]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d109      	bne.n	8002b56 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6818      	ldr	r0, [r3, #0]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002b4c:	461a      	mov	r2, r3
 8002b4e:	2101      	movs	r1, #1
 8002b50:	f003 fe4c 	bl	80067ec <USB_EP0_OutStart>
 8002b54:	e006      	b.n	8002b64 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	68da      	ldr	r2, [r3, #12]
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	695b      	ldr	r3, [r3, #20]
 8002b5e:	441a      	add	r2, r3
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	b2db      	uxtb	r3, r3
 8002b68:	4619      	mov	r1, r3
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f006 f996 	bl	8008e9c <HAL_PCD_DataOutStageCallback>
 8002b70:	e046      	b.n	8002c00 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	4a26      	ldr	r2, [pc, #152]	@ (8002c10 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d124      	bne.n	8002bc4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d00a      	beq.n	8002b9a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	015a      	lsls	r2, r3, #5
 8002b88:	69bb      	ldr	r3, [r7, #24]
 8002b8a:	4413      	add	r3, r2
 8002b8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002b90:	461a      	mov	r2, r3
 8002b92:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002b96:	6093      	str	r3, [r2, #8]
 8002b98:	e032      	b.n	8002c00 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	f003 0320 	and.w	r3, r3, #32
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d008      	beq.n	8002bb6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	015a      	lsls	r2, r3, #5
 8002ba8:	69bb      	ldr	r3, [r7, #24]
 8002baa:	4413      	add	r3, r2
 8002bac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002bb0:	461a      	mov	r2, r3
 8002bb2:	2320      	movs	r3, #32
 8002bb4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	b2db      	uxtb	r3, r3
 8002bba:	4619      	mov	r1, r3
 8002bbc:	6878      	ldr	r0, [r7, #4]
 8002bbe:	f006 f96d 	bl	8008e9c <HAL_PCD_DataOutStageCallback>
 8002bc2:	e01d      	b.n	8002c00 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d114      	bne.n	8002bf4 <PCD_EP_OutXfrComplete_int+0x1b0>
 8002bca:	6879      	ldr	r1, [r7, #4]
 8002bcc:	683a      	ldr	r2, [r7, #0]
 8002bce:	4613      	mov	r3, r2
 8002bd0:	00db      	lsls	r3, r3, #3
 8002bd2:	4413      	add	r3, r2
 8002bd4:	009b      	lsls	r3, r3, #2
 8002bd6:	440b      	add	r3, r1
 8002bd8:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d108      	bne.n	8002bf4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6818      	ldr	r0, [r3, #0]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002bec:	461a      	mov	r2, r3
 8002bee:	2100      	movs	r1, #0
 8002bf0:	f003 fdfc 	bl	80067ec <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	b2db      	uxtb	r3, r3
 8002bf8:	4619      	mov	r1, r3
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	f006 f94e 	bl	8008e9c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002c00:	2300      	movs	r3, #0
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	3720      	adds	r7, #32
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	4f54300a 	.word	0x4f54300a
 8002c10:	4f54310a 	.word	0x4f54310a

08002c14 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b086      	sub	sp, #24
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
 8002c1c:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	333c      	adds	r3, #60	@ 0x3c
 8002c2c:	3304      	adds	r3, #4
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	015a      	lsls	r2, r3, #5
 8002c36:	693b      	ldr	r3, [r7, #16]
 8002c38:	4413      	add	r3, r2
 8002c3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	4a15      	ldr	r2, [pc, #84]	@ (8002c9c <PCD_EP_OutSetupPacket_int+0x88>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d90e      	bls.n	8002c68 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d009      	beq.n	8002c68 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	015a      	lsls	r2, r3, #5
 8002c58:	693b      	ldr	r3, [r7, #16]
 8002c5a:	4413      	add	r3, r2
 8002c5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002c60:	461a      	mov	r2, r3
 8002c62:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002c66:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002c68:	6878      	ldr	r0, [r7, #4]
 8002c6a:	f006 f905 	bl	8008e78 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	4a0a      	ldr	r2, [pc, #40]	@ (8002c9c <PCD_EP_OutSetupPacket_int+0x88>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d90c      	bls.n	8002c90 <PCD_EP_OutSetupPacket_int+0x7c>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	799b      	ldrb	r3, [r3, #6]
 8002c7a:	2b01      	cmp	r3, #1
 8002c7c:	d108      	bne.n	8002c90 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6818      	ldr	r0, [r3, #0]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002c88:	461a      	mov	r2, r3
 8002c8a:	2101      	movs	r1, #1
 8002c8c:	f003 fdae 	bl	80067ec <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002c90:	2300      	movs	r3, #0
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	3718      	adds	r7, #24
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}
 8002c9a:	bf00      	nop
 8002c9c:	4f54300a 	.word	0x4f54300a

08002ca0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b085      	sub	sp, #20
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
 8002ca8:	460b      	mov	r3, r1
 8002caa:	70fb      	strb	r3, [r7, #3]
 8002cac:	4613      	mov	r3, r2
 8002cae:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cb6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002cb8:	78fb      	ldrb	r3, [r7, #3]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d107      	bne.n	8002cce <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002cbe:	883b      	ldrh	r3, [r7, #0]
 8002cc0:	0419      	lsls	r1, r3, #16
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	68ba      	ldr	r2, [r7, #8]
 8002cc8:	430a      	orrs	r2, r1
 8002cca:	629a      	str	r2, [r3, #40]	@ 0x28
 8002ccc:	e028      	b.n	8002d20 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cd4:	0c1b      	lsrs	r3, r3, #16
 8002cd6:	68ba      	ldr	r2, [r7, #8]
 8002cd8:	4413      	add	r3, r2
 8002cda:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002cdc:	2300      	movs	r3, #0
 8002cde:	73fb      	strb	r3, [r7, #15]
 8002ce0:	e00d      	b.n	8002cfe <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	7bfb      	ldrb	r3, [r7, #15]
 8002ce8:	3340      	adds	r3, #64	@ 0x40
 8002cea:	009b      	lsls	r3, r3, #2
 8002cec:	4413      	add	r3, r2
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	0c1b      	lsrs	r3, r3, #16
 8002cf2:	68ba      	ldr	r2, [r7, #8]
 8002cf4:	4413      	add	r3, r2
 8002cf6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002cf8:	7bfb      	ldrb	r3, [r7, #15]
 8002cfa:	3301      	adds	r3, #1
 8002cfc:	73fb      	strb	r3, [r7, #15]
 8002cfe:	7bfa      	ldrb	r2, [r7, #15]
 8002d00:	78fb      	ldrb	r3, [r7, #3]
 8002d02:	3b01      	subs	r3, #1
 8002d04:	429a      	cmp	r2, r3
 8002d06:	d3ec      	bcc.n	8002ce2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002d08:	883b      	ldrh	r3, [r7, #0]
 8002d0a:	0418      	lsls	r0, r3, #16
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6819      	ldr	r1, [r3, #0]
 8002d10:	78fb      	ldrb	r3, [r7, #3]
 8002d12:	3b01      	subs	r3, #1
 8002d14:	68ba      	ldr	r2, [r7, #8]
 8002d16:	4302      	orrs	r2, r0
 8002d18:	3340      	adds	r3, #64	@ 0x40
 8002d1a:	009b      	lsls	r3, r3, #2
 8002d1c:	440b      	add	r3, r1
 8002d1e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002d20:	2300      	movs	r3, #0
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	3714      	adds	r7, #20
 8002d26:	46bd      	mov	sp, r7
 8002d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2c:	4770      	bx	lr

08002d2e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002d2e:	b480      	push	{r7}
 8002d30:	b083      	sub	sp, #12
 8002d32:	af00      	add	r7, sp, #0
 8002d34:	6078      	str	r0, [r7, #4]
 8002d36:	460b      	mov	r3, r1
 8002d38:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	887a      	ldrh	r2, [r7, #2]
 8002d40:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002d42:	2300      	movs	r3, #0
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	370c      	adds	r7, #12
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4e:	4770      	bx	lr

08002d50 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b085      	sub	sp, #20
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2201      	movs	r2, #1
 8002d62:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	699b      	ldr	r3, [r3, #24]
 8002d72:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d7e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d82:	f043 0303 	orr.w	r3, r3, #3
 8002d86:	68fa      	ldr	r2, [r7, #12]
 8002d88:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8002d8a:	2300      	movs	r3, #0
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	3714      	adds	r7, #20
 8002d90:	46bd      	mov	sp, r7
 8002d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d96:	4770      	bx	lr

08002d98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b084      	sub	sp, #16
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
 8002da0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d101      	bne.n	8002dac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002da8:	2301      	movs	r3, #1
 8002daa:	e0cc      	b.n	8002f46 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002dac:	4b68      	ldr	r3, [pc, #416]	@ (8002f50 <HAL_RCC_ClockConfig+0x1b8>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f003 030f 	and.w	r3, r3, #15
 8002db4:	683a      	ldr	r2, [r7, #0]
 8002db6:	429a      	cmp	r2, r3
 8002db8:	d90c      	bls.n	8002dd4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dba:	4b65      	ldr	r3, [pc, #404]	@ (8002f50 <HAL_RCC_ClockConfig+0x1b8>)
 8002dbc:	683a      	ldr	r2, [r7, #0]
 8002dbe:	b2d2      	uxtb	r2, r2
 8002dc0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dc2:	4b63      	ldr	r3, [pc, #396]	@ (8002f50 <HAL_RCC_ClockConfig+0x1b8>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f003 030f 	and.w	r3, r3, #15
 8002dca:	683a      	ldr	r2, [r7, #0]
 8002dcc:	429a      	cmp	r2, r3
 8002dce:	d001      	beq.n	8002dd4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	e0b8      	b.n	8002f46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f003 0302 	and.w	r3, r3, #2
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d020      	beq.n	8002e22 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f003 0304 	and.w	r3, r3, #4
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d005      	beq.n	8002df8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002dec:	4b59      	ldr	r3, [pc, #356]	@ (8002f54 <HAL_RCC_ClockConfig+0x1bc>)
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	4a58      	ldr	r2, [pc, #352]	@ (8002f54 <HAL_RCC_ClockConfig+0x1bc>)
 8002df2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002df6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f003 0308 	and.w	r3, r3, #8
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d005      	beq.n	8002e10 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e04:	4b53      	ldr	r3, [pc, #332]	@ (8002f54 <HAL_RCC_ClockConfig+0x1bc>)
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	4a52      	ldr	r2, [pc, #328]	@ (8002f54 <HAL_RCC_ClockConfig+0x1bc>)
 8002e0a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002e0e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e10:	4b50      	ldr	r3, [pc, #320]	@ (8002f54 <HAL_RCC_ClockConfig+0x1bc>)
 8002e12:	689b      	ldr	r3, [r3, #8]
 8002e14:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	494d      	ldr	r1, [pc, #308]	@ (8002f54 <HAL_RCC_ClockConfig+0x1bc>)
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 0301 	and.w	r3, r3, #1
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d044      	beq.n	8002eb8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	2b01      	cmp	r3, #1
 8002e34:	d107      	bne.n	8002e46 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e36:	4b47      	ldr	r3, [pc, #284]	@ (8002f54 <HAL_RCC_ClockConfig+0x1bc>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d119      	bne.n	8002e76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	e07f      	b.n	8002f46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	2b02      	cmp	r3, #2
 8002e4c:	d003      	beq.n	8002e56 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e52:	2b03      	cmp	r3, #3
 8002e54:	d107      	bne.n	8002e66 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e56:	4b3f      	ldr	r3, [pc, #252]	@ (8002f54 <HAL_RCC_ClockConfig+0x1bc>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d109      	bne.n	8002e76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e06f      	b.n	8002f46 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e66:	4b3b      	ldr	r3, [pc, #236]	@ (8002f54 <HAL_RCC_ClockConfig+0x1bc>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f003 0302 	and.w	r3, r3, #2
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d101      	bne.n	8002e76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	e067      	b.n	8002f46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e76:	4b37      	ldr	r3, [pc, #220]	@ (8002f54 <HAL_RCC_ClockConfig+0x1bc>)
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	f023 0203 	bic.w	r2, r3, #3
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	4934      	ldr	r1, [pc, #208]	@ (8002f54 <HAL_RCC_ClockConfig+0x1bc>)
 8002e84:	4313      	orrs	r3, r2
 8002e86:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e88:	f7fe f9e0 	bl	800124c <HAL_GetTick>
 8002e8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e8e:	e00a      	b.n	8002ea6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e90:	f7fe f9dc 	bl	800124c <HAL_GetTick>
 8002e94:	4602      	mov	r2, r0
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	1ad3      	subs	r3, r2, r3
 8002e9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d901      	bls.n	8002ea6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ea2:	2303      	movs	r3, #3
 8002ea4:	e04f      	b.n	8002f46 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ea6:	4b2b      	ldr	r3, [pc, #172]	@ (8002f54 <HAL_RCC_ClockConfig+0x1bc>)
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	f003 020c 	and.w	r2, r3, #12
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	d1eb      	bne.n	8002e90 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002eb8:	4b25      	ldr	r3, [pc, #148]	@ (8002f50 <HAL_RCC_ClockConfig+0x1b8>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f003 030f 	and.w	r3, r3, #15
 8002ec0:	683a      	ldr	r2, [r7, #0]
 8002ec2:	429a      	cmp	r2, r3
 8002ec4:	d20c      	bcs.n	8002ee0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ec6:	4b22      	ldr	r3, [pc, #136]	@ (8002f50 <HAL_RCC_ClockConfig+0x1b8>)
 8002ec8:	683a      	ldr	r2, [r7, #0]
 8002eca:	b2d2      	uxtb	r2, r2
 8002ecc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ece:	4b20      	ldr	r3, [pc, #128]	@ (8002f50 <HAL_RCC_ClockConfig+0x1b8>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 030f 	and.w	r3, r3, #15
 8002ed6:	683a      	ldr	r2, [r7, #0]
 8002ed8:	429a      	cmp	r2, r3
 8002eda:	d001      	beq.n	8002ee0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002edc:	2301      	movs	r3, #1
 8002ede:	e032      	b.n	8002f46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f003 0304 	and.w	r3, r3, #4
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d008      	beq.n	8002efe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002eec:	4b19      	ldr	r3, [pc, #100]	@ (8002f54 <HAL_RCC_ClockConfig+0x1bc>)
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	68db      	ldr	r3, [r3, #12]
 8002ef8:	4916      	ldr	r1, [pc, #88]	@ (8002f54 <HAL_RCC_ClockConfig+0x1bc>)
 8002efa:	4313      	orrs	r3, r2
 8002efc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f003 0308 	and.w	r3, r3, #8
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d009      	beq.n	8002f1e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f0a:	4b12      	ldr	r3, [pc, #72]	@ (8002f54 <HAL_RCC_ClockConfig+0x1bc>)
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	691b      	ldr	r3, [r3, #16]
 8002f16:	00db      	lsls	r3, r3, #3
 8002f18:	490e      	ldr	r1, [pc, #56]	@ (8002f54 <HAL_RCC_ClockConfig+0x1bc>)
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002f1e:	f000 fb7f 	bl	8003620 <HAL_RCC_GetSysClockFreq>
 8002f22:	4602      	mov	r2, r0
 8002f24:	4b0b      	ldr	r3, [pc, #44]	@ (8002f54 <HAL_RCC_ClockConfig+0x1bc>)
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	091b      	lsrs	r3, r3, #4
 8002f2a:	f003 030f 	and.w	r3, r3, #15
 8002f2e:	490a      	ldr	r1, [pc, #40]	@ (8002f58 <HAL_RCC_ClockConfig+0x1c0>)
 8002f30:	5ccb      	ldrb	r3, [r1, r3]
 8002f32:	fa22 f303 	lsr.w	r3, r2, r3
 8002f36:	4a09      	ldr	r2, [pc, #36]	@ (8002f5c <HAL_RCC_ClockConfig+0x1c4>)
 8002f38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002f3a:	4b09      	ldr	r3, [pc, #36]	@ (8002f60 <HAL_RCC_ClockConfig+0x1c8>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f7fe f940 	bl	80011c4 <HAL_InitTick>

  return HAL_OK;
 8002f44:	2300      	movs	r3, #0
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	3710      	adds	r7, #16
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}
 8002f4e:	bf00      	nop
 8002f50:	40023c00 	.word	0x40023c00
 8002f54:	40023800 	.word	0x40023800
 8002f58:	0800954c 	.word	0x0800954c
 8002f5c:	20000010 	.word	0x20000010
 8002f60:	20000014 	.word	0x20000014

08002f64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f64:	b480      	push	{r7}
 8002f66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f68:	4b03      	ldr	r3, [pc, #12]	@ (8002f78 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f74:	4770      	bx	lr
 8002f76:	bf00      	nop
 8002f78:	20000010 	.word	0x20000010

08002f7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002f80:	f7ff fff0 	bl	8002f64 <HAL_RCC_GetHCLKFreq>
 8002f84:	4602      	mov	r2, r0
 8002f86:	4b05      	ldr	r3, [pc, #20]	@ (8002f9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f88:	689b      	ldr	r3, [r3, #8]
 8002f8a:	0a9b      	lsrs	r3, r3, #10
 8002f8c:	f003 0307 	and.w	r3, r3, #7
 8002f90:	4903      	ldr	r1, [pc, #12]	@ (8002fa0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f92:	5ccb      	ldrb	r3, [r1, r3]
 8002f94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f98:	4618      	mov	r0, r3
 8002f9a:	bd80      	pop	{r7, pc}
 8002f9c:	40023800 	.word	0x40023800
 8002fa0:	0800955c 	.word	0x0800955c

08002fa4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002fa8:	f7ff ffdc 	bl	8002f64 <HAL_RCC_GetHCLKFreq>
 8002fac:	4602      	mov	r2, r0
 8002fae:	4b05      	ldr	r3, [pc, #20]	@ (8002fc4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	0b5b      	lsrs	r3, r3, #13
 8002fb4:	f003 0307 	and.w	r3, r3, #7
 8002fb8:	4903      	ldr	r1, [pc, #12]	@ (8002fc8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002fba:	5ccb      	ldrb	r3, [r1, r3]
 8002fbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	bd80      	pop	{r7, pc}
 8002fc4:	40023800 	.word	0x40023800
 8002fc8:	0800955c 	.word	0x0800955c

08002fcc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b08c      	sub	sp, #48	@ 0x30
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmpreg1 = 0U;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8002fec:	2300      	movs	r3, #0
 8002fee:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t pllsaiused = 0U;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f003 0301 	and.w	r3, r3, #1
 8003000:	2b00      	cmp	r3, #0
 8003002:	d010      	beq.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8003004:	4b6f      	ldr	r3, [pc, #444]	@ (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003006:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800300a:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003012:	496c      	ldr	r1, [pc, #432]	@ (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003014:	4313      	orrs	r3, r2
 8003016:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800301e:	2b00      	cmp	r3, #0
 8003020:	d101      	bne.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8003022:	2301      	movs	r3, #1
 8003024:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f003 0302 	and.w	r3, r3, #2
 800302e:	2b00      	cmp	r3, #0
 8003030:	d010      	beq.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8003032:	4b64      	ldr	r3, [pc, #400]	@ (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003034:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003038:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003040:	4960      	ldr	r1, [pc, #384]	@ (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003042:	4313      	orrs	r3, r2
 8003044:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800304c:	2b00      	cmp	r3, #0
 800304e:	d101      	bne.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8003050:	2301      	movs	r3, #1
 8003052:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f003 0304 	and.w	r3, r3, #4
 800305c:	2b00      	cmp	r3, #0
 800305e:	d017      	beq.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003060:	4b58      	ldr	r3, [pc, #352]	@ (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003062:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003066:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800306e:	4955      	ldr	r1, [pc, #340]	@ (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003070:	4313      	orrs	r3, r2
 8003072:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800307a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800307e:	d101      	bne.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8003080:	2301      	movs	r3, #1
 8003082:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003088:	2b00      	cmp	r3, #0
 800308a:	d101      	bne.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 800308c:	2301      	movs	r3, #1
 800308e:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f003 0308 	and.w	r3, r3, #8
 8003098:	2b00      	cmp	r3, #0
 800309a:	d017      	beq.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800309c:	4b49      	ldr	r3, [pc, #292]	@ (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800309e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80030a2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030aa:	4946      	ldr	r1, [pc, #280]	@ (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80030ac:	4313      	orrs	r3, r2
 80030ae:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030b6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80030ba:	d101      	bne.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 80030bc:	2301      	movs	r3, #1
 80030be:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d101      	bne.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 80030c8:	2301      	movs	r3, #1
 80030ca:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 0320 	and.w	r3, r3, #32
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	f000 808a 	beq.w	80031ee <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80030da:	2300      	movs	r3, #0
 80030dc:	60bb      	str	r3, [r7, #8]
 80030de:	4b39      	ldr	r3, [pc, #228]	@ (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80030e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030e2:	4a38      	ldr	r2, [pc, #224]	@ (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80030e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80030e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80030ea:	4b36      	ldr	r3, [pc, #216]	@ (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80030ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030f2:	60bb      	str	r3, [r7, #8]
 80030f4:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80030f6:	4b34      	ldr	r3, [pc, #208]	@ (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a33      	ldr	r2, [pc, #204]	@ (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80030fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003100:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003102:	f7fe f8a3 	bl	800124c <HAL_GetTick>
 8003106:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8003108:	e008      	b.n	800311c <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800310a:	f7fe f89f 	bl	800124c <HAL_GetTick>
 800310e:	4602      	mov	r2, r0
 8003110:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003112:	1ad3      	subs	r3, r2, r3
 8003114:	2b02      	cmp	r3, #2
 8003116:	d901      	bls.n	800311c <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8003118:	2303      	movs	r3, #3
 800311a:	e278      	b.n	800360e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800311c:	4b2a      	ldr	r3, [pc, #168]	@ (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003124:	2b00      	cmp	r3, #0
 8003126:	d0f0      	beq.n	800310a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003128:	4b26      	ldr	r3, [pc, #152]	@ (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800312a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800312c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003130:	623b      	str	r3, [r7, #32]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003132:	6a3b      	ldr	r3, [r7, #32]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d02f      	beq.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800313c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003140:	6a3a      	ldr	r2, [r7, #32]
 8003142:	429a      	cmp	r2, r3
 8003144:	d028      	beq.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003146:	4b1f      	ldr	r3, [pc, #124]	@ (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003148:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800314a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800314e:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003150:	4b1e      	ldr	r3, [pc, #120]	@ (80031cc <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8003152:	2201      	movs	r2, #1
 8003154:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003156:	4b1d      	ldr	r3, [pc, #116]	@ (80031cc <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8003158:	2200      	movs	r2, #0
 800315a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800315c:	4a19      	ldr	r2, [pc, #100]	@ (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800315e:	6a3b      	ldr	r3, [r7, #32]
 8003160:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003162:	4b18      	ldr	r3, [pc, #96]	@ (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003164:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003166:	f003 0301 	and.w	r3, r3, #1
 800316a:	2b01      	cmp	r3, #1
 800316c:	d114      	bne.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800316e:	f7fe f86d 	bl	800124c <HAL_GetTick>
 8003172:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003174:	e00a      	b.n	800318c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003176:	f7fe f869 	bl	800124c <HAL_GetTick>
 800317a:	4602      	mov	r2, r0
 800317c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800317e:	1ad3      	subs	r3, r2, r3
 8003180:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003184:	4293      	cmp	r3, r2
 8003186:	d901      	bls.n	800318c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8003188:	2303      	movs	r3, #3
 800318a:	e240      	b.n	800360e <HAL_RCCEx_PeriphCLKConfig+0x642>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800318c:	4b0d      	ldr	r3, [pc, #52]	@ (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800318e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003190:	f003 0302 	and.w	r3, r3, #2
 8003194:	2b00      	cmp	r3, #0
 8003196:	d0ee      	beq.n	8003176 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800319c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80031a0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80031a4:	d114      	bne.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x204>
 80031a6:	4b07      	ldr	r3, [pc, #28]	@ (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80031a8:	689b      	ldr	r3, [r3, #8]
 80031aa:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031b2:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80031b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80031ba:	4902      	ldr	r1, [pc, #8]	@ (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80031bc:	4313      	orrs	r3, r2
 80031be:	608b      	str	r3, [r1, #8]
 80031c0:	e00c      	b.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0x210>
 80031c2:	bf00      	nop
 80031c4:	40023800 	.word	0x40023800
 80031c8:	40007000 	.word	0x40007000
 80031cc:	42470e40 	.word	0x42470e40
 80031d0:	4b4a      	ldr	r3, [pc, #296]	@ (80032fc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	4a49      	ldr	r2, [pc, #292]	@ (80032fc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80031d6:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80031da:	6093      	str	r3, [r2, #8]
 80031dc:	4b47      	ldr	r3, [pc, #284]	@ (80032fc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80031de:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031e8:	4944      	ldr	r1, [pc, #272]	@ (80032fc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80031ea:	4313      	orrs	r3, r2
 80031ec:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 0310 	and.w	r3, r3, #16
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d004      	beq.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8003200:	4b3f      	ldr	r3, [pc, #252]	@ (8003300 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8003202:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800320c:	2b00      	cmp	r3, #0
 800320e:	d00a      	beq.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8003210:	4b3a      	ldr	r3, [pc, #232]	@ (80032fc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003212:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003216:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800321e:	4937      	ldr	r1, [pc, #220]	@ (80032fc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003220:	4313      	orrs	r3, r2
 8003222:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800322e:	2b00      	cmp	r3, #0
 8003230:	d00a      	beq.n	8003248 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003232:	4b32      	ldr	r3, [pc, #200]	@ (80032fc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003234:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003238:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003240:	492e      	ldr	r1, [pc, #184]	@ (80032fc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003242:	4313      	orrs	r3, r2
 8003244:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003250:	2b00      	cmp	r3, #0
 8003252:	d011      	beq.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003254:	4b29      	ldr	r3, [pc, #164]	@ (80032fc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003256:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800325a:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003262:	4926      	ldr	r1, [pc, #152]	@ (80032fc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003264:	4313      	orrs	r3, r2
 8003266:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800326e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003272:	d101      	bne.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8003274:	2301      	movs	r3, #1
 8003276:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003280:	2b00      	cmp	r3, #0
 8003282:	d00a      	beq.n	800329a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8003284:	4b1d      	ldr	r3, [pc, #116]	@ (80032fc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003286:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800328a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003292:	491a      	ldr	r1, [pc, #104]	@ (80032fc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003294:	4313      	orrs	r3, r2
 8003296:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d011      	beq.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 80032a6:	4b15      	ldr	r3, [pc, #84]	@ (80032fc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80032a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80032ac:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032b4:	4911      	ldr	r1, [pc, #68]	@ (80032fc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80032b6:	4313      	orrs	r3, r2
 80032b8:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032c0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80032c4:	d101      	bne.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 80032c6:	2301      	movs	r3, #1
 80032c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if ((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80032ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d005      	beq.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0x310>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80032d8:	f040 80ff 	bne.w	80034da <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80032dc:	4b09      	ldr	r3, [pc, #36]	@ (8003304 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80032de:	2200      	movs	r2, #0
 80032e0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80032e2:	f7fd ffb3 	bl	800124c <HAL_GetTick>
 80032e6:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80032e8:	e00e      	b.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80032ea:	f7fd ffaf 	bl	800124c <HAL_GetTick>
 80032ee:	4602      	mov	r2, r0
 80032f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032f2:	1ad3      	subs	r3, r2, r3
 80032f4:	2b02      	cmp	r3, #2
 80032f6:	d907      	bls.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80032f8:	2303      	movs	r3, #3
 80032fa:	e188      	b.n	800360e <HAL_RCCEx_PeriphCLKConfig+0x642>
 80032fc:	40023800 	.word	0x40023800
 8003300:	424711e0 	.word	0x424711e0
 8003304:	42470068 	.word	0x42470068
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003308:	4b7e      	ldr	r3, [pc, #504]	@ (8003504 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003310:	2b00      	cmp	r3, #0
 8003312:	d1ea      	bne.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f003 0301 	and.w	r3, r3, #1
 800331c:	2b00      	cmp	r3, #0
 800331e:	d003      	beq.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x35c>
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003324:	2b00      	cmp	r3, #0
 8003326:	d009      	beq.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x370>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f003 0302 	and.w	r3, r3, #2
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003330:	2b00      	cmp	r3, #0
 8003332:	d028      	beq.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003338:	2b00      	cmp	r3, #0
 800333a:	d124      	bne.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800333c:	4b71      	ldr	r3, [pc, #452]	@ (8003504 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800333e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003342:	0c1b      	lsrs	r3, r3, #16
 8003344:	f003 0303 	and.w	r3, r3, #3
 8003348:	3301      	adds	r3, #1
 800334a:	005b      	lsls	r3, r3, #1
 800334c:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800334e:	4b6d      	ldr	r3, [pc, #436]	@ (8003504 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003350:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003354:	0e1b      	lsrs	r3, r3, #24
 8003356:	f003 030f 	and.w	r3, r3, #15
 800335a:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp, plli2sq,
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	685a      	ldr	r2, [r3, #4]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	019b      	lsls	r3, r3, #6
 8003366:	431a      	orrs	r2, r3
 8003368:	69fb      	ldr	r3, [r7, #28]
 800336a:	085b      	lsrs	r3, r3, #1
 800336c:	3b01      	subs	r3, #1
 800336e:	041b      	lsls	r3, r3, #16
 8003370:	431a      	orrs	r2, r3
 8003372:	69bb      	ldr	r3, [r7, #24]
 8003374:	061b      	lsls	r3, r3, #24
 8003376:	431a      	orrs	r2, r3
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	695b      	ldr	r3, [r3, #20]
 800337c:	071b      	lsls	r3, r3, #28
 800337e:	4961      	ldr	r1, [pc, #388]	@ (8003504 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003380:	4313      	orrs	r3, r2
 8003382:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 0304 	and.w	r3, r3, #4
 800338e:	2b00      	cmp	r3, #0
 8003390:	d004      	beq.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003396:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800339a:	d00a      	beq.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d035      	beq.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x448>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033ac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80033b0:	d130      	bne.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80033b2:	4b54      	ldr	r3, [pc, #336]	@ (8003504 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80033b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80033b8:	0c1b      	lsrs	r3, r3, #16
 80033ba:	f003 0303 	and.w	r3, r3, #3
 80033be:	3301      	adds	r3, #1
 80033c0:	005b      	lsls	r3, r3, #1
 80033c2:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80033c4:	4b4f      	ldr	r3, [pc, #316]	@ (8003504 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80033c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80033ca:	0f1b      	lsrs	r3, r3, #28
 80033cc:	f003 0307 	and.w	r3, r3, #7
 80033d0:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp,
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	685a      	ldr	r2, [r3, #4]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	019b      	lsls	r3, r3, #6
 80033dc:	431a      	orrs	r2, r3
 80033de:	69fb      	ldr	r3, [r7, #28]
 80033e0:	085b      	lsrs	r3, r3, #1
 80033e2:	3b01      	subs	r3, #1
 80033e4:	041b      	lsls	r3, r3, #16
 80033e6:	431a      	orrs	r2, r3
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	691b      	ldr	r3, [r3, #16]
 80033ec:	061b      	lsls	r3, r3, #24
 80033ee:	431a      	orrs	r2, r3
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	071b      	lsls	r3, r3, #28
 80033f4:	4943      	ldr	r1, [pc, #268]	@ (8003504 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80033f6:	4313      	orrs	r3, r2
 80033f8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80033fc:	4b41      	ldr	r3, [pc, #260]	@ (8003504 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80033fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003402:	f023 021f 	bic.w	r2, r3, #31
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800340a:	3b01      	subs	r3, #1
 800340c:	493d      	ldr	r1, [pc, #244]	@ (8003504 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800340e:	4313      	orrs	r3, r2
 8003410:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800341c:	2b00      	cmp	r3, #0
 800341e:	d029      	beq.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
        && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003424:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003428:	d124      	bne.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800342a:	4b36      	ldr	r3, [pc, #216]	@ (8003504 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800342c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003430:	0c1b      	lsrs	r3, r3, #16
 8003432:	f003 0303 	and.w	r3, r3, #3
 8003436:	3301      	adds	r3, #1
 8003438:	005b      	lsls	r3, r3, #1
 800343a:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800343c:	4b31      	ldr	r3, [pc, #196]	@ (8003504 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800343e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003442:	0f1b      	lsrs	r3, r3, #28
 8003444:	f003 0307 	and.w	r3, r3, #7
 8003448:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	685a      	ldr	r2, [r3, #4]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	689b      	ldr	r3, [r3, #8]
 8003452:	019b      	lsls	r3, r3, #6
 8003454:	431a      	orrs	r2, r3
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	68db      	ldr	r3, [r3, #12]
 800345a:	085b      	lsrs	r3, r3, #1
 800345c:	3b01      	subs	r3, #1
 800345e:	041b      	lsls	r3, r3, #16
 8003460:	431a      	orrs	r2, r3
 8003462:	69bb      	ldr	r3, [r7, #24]
 8003464:	061b      	lsls	r3, r3, #24
 8003466:	431a      	orrs	r2, r3
 8003468:	697b      	ldr	r3, [r7, #20]
 800346a:	071b      	lsls	r3, r3, #28
 800346c:	4925      	ldr	r1, [pc, #148]	@ (8003504 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800346e:	4313      	orrs	r3, r2
 8003470:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              plli2sq, plli2sr);
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800347c:	2b00      	cmp	r3, #0
 800347e:	d016      	beq.n	80034ae <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	685a      	ldr	r2, [r3, #4]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	689b      	ldr	r3, [r3, #8]
 8003488:	019b      	lsls	r3, r3, #6
 800348a:	431a      	orrs	r2, r3
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	68db      	ldr	r3, [r3, #12]
 8003490:	085b      	lsrs	r3, r3, #1
 8003492:	3b01      	subs	r3, #1
 8003494:	041b      	lsls	r3, r3, #16
 8003496:	431a      	orrs	r2, r3
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	691b      	ldr	r3, [r3, #16]
 800349c:	061b      	lsls	r3, r3, #24
 800349e:	431a      	orrs	r2, r3
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	695b      	ldr	r3, [r3, #20]
 80034a4:	071b      	lsls	r3, r3, #28
 80034a6:	4917      	ldr	r1, [pc, #92]	@ (8003504 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80034a8:	4313      	orrs	r3, r2
 80034aa:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80034ae:	4b16      	ldr	r3, [pc, #88]	@ (8003508 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 80034b0:	2201      	movs	r2, #1
 80034b2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80034b4:	f7fd feca 	bl	800124c <HAL_GetTick>
 80034b8:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80034ba:	e008      	b.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80034bc:	f7fd fec6 	bl	800124c <HAL_GetTick>
 80034c0:	4602      	mov	r2, r0
 80034c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034c4:	1ad3      	subs	r3, r2, r3
 80034c6:	2b02      	cmp	r3, #2
 80034c8:	d901      	bls.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80034ca:	2303      	movs	r3, #3
 80034cc:	e09f      	b.n	800360e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80034ce:	4b0d      	ldr	r3, [pc, #52]	@ (8003504 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d0f0      	beq.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if (pllsaiused == 1U)
 80034da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034dc:	2b01      	cmp	r3, #1
 80034de:	f040 8095 	bne.w	800360c <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80034e2:	4b0a      	ldr	r3, [pc, #40]	@ (800350c <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80034e4:	2200      	movs	r2, #0
 80034e6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80034e8:	f7fd feb0 	bl	800124c <HAL_GetTick>
 80034ec:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80034ee:	e00f      	b.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80034f0:	f7fd feac 	bl	800124c <HAL_GetTick>
 80034f4:	4602      	mov	r2, r0
 80034f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034f8:	1ad3      	subs	r3, r2, r3
 80034fa:	2b02      	cmp	r3, #2
 80034fc:	d908      	bls.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80034fe:	2303      	movs	r3, #3
 8003500:	e085      	b.n	800360e <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003502:	bf00      	nop
 8003504:	40023800 	.word	0x40023800
 8003508:	42470068 	.word	0x42470068
 800350c:	42470070 	.word	0x42470070
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003510:	4b41      	ldr	r3, [pc, #260]	@ (8003618 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003518:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800351c:	d0e8      	beq.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f003 0304 	and.w	r3, r3, #4
 8003526:	2b00      	cmp	r3, #0
 8003528:	d003      	beq.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x566>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800352e:	2b00      	cmp	r3, #0
 8003530:	d009      	beq.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0x57a>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800353a:	2b00      	cmp	r3, #0
 800353c:	d02b      	beq.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003542:	2b00      	cmp	r3, #0
 8003544:	d127      	bne.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8003546:	4b34      	ldr	r3, [pc, #208]	@ (8003618 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003548:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800354c:	0c1b      	lsrs	r3, r3, #16
 800354e:	f003 0303 	and.w	r3, r3, #3
 8003552:	3301      	adds	r3, #1
 8003554:	005b      	lsls	r3, r3, #1
 8003556:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, pllsaip,
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	699a      	ldr	r2, [r3, #24]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	69db      	ldr	r3, [r3, #28]
 8003560:	019b      	lsls	r3, r3, #6
 8003562:	431a      	orrs	r2, r3
 8003564:	693b      	ldr	r3, [r7, #16]
 8003566:	085b      	lsrs	r3, r3, #1
 8003568:	3b01      	subs	r3, #1
 800356a:	041b      	lsls	r3, r3, #16
 800356c:	431a      	orrs	r2, r3
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003572:	061b      	lsls	r3, r3, #24
 8003574:	4928      	ldr	r1, [pc, #160]	@ (8003618 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003576:	4313      	orrs	r3, r2
 8003578:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              PeriphClkInit->PLLSAI.PLLSAIQ, 0U);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800357c:	4b26      	ldr	r3, [pc, #152]	@ (8003618 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800357e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003582:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800358a:	3b01      	subs	r3, #1
 800358c:	021b      	lsls	r3, r3, #8
 800358e:	4922      	ldr	r1, [pc, #136]	@ (8003618 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003590:	4313      	orrs	r3, r2
 8003592:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d01d      	beq.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x612>
        && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035a6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80035aa:	d118      	bne.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80035ac:	4b1a      	ldr	r3, [pc, #104]	@ (8003618 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80035ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035b2:	0e1b      	lsrs	r3, r3, #24
 80035b4:	f003 030f 	and.w	r3, r3, #15
 80035b8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP,
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	699a      	ldr	r2, [r3, #24]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	69db      	ldr	r3, [r3, #28]
 80035c2:	019b      	lsls	r3, r3, #6
 80035c4:	431a      	orrs	r2, r3
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6a1b      	ldr	r3, [r3, #32]
 80035ca:	085b      	lsrs	r3, r3, #1
 80035cc:	3b01      	subs	r3, #1
 80035ce:	041b      	lsls	r3, r3, #16
 80035d0:	431a      	orrs	r2, r3
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	061b      	lsls	r3, r3, #24
 80035d6:	4910      	ldr	r1, [pc, #64]	@ (8003618 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80035d8:	4313      	orrs	r3, r2
 80035da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              pllsaiq, 0U);
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80035de:	4b0f      	ldr	r3, [pc, #60]	@ (800361c <HAL_RCCEx_PeriphCLKConfig+0x650>)
 80035e0:	2201      	movs	r2, #1
 80035e2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80035e4:	f7fd fe32 	bl	800124c <HAL_GetTick>
 80035e8:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80035ea:	e008      	b.n	80035fe <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80035ec:	f7fd fe2e 	bl	800124c <HAL_GetTick>
 80035f0:	4602      	mov	r2, r0
 80035f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035f4:	1ad3      	subs	r3, r2, r3
 80035f6:	2b02      	cmp	r3, #2
 80035f8:	d901      	bls.n	80035fe <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80035fa:	2303      	movs	r3, #3
 80035fc:	e007      	b.n	800360e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80035fe:	4b06      	ldr	r3, [pc, #24]	@ (8003618 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003606:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800360a:	d1ef      	bne.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 800360c:	2300      	movs	r3, #0
}
 800360e:	4618      	mov	r0, r3
 8003610:	3730      	adds	r7, #48	@ 0x30
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}
 8003616:	bf00      	nop
 8003618:	40023800 	.word	0x40023800
 800361c:	42470070 	.word	0x42470070

08003620 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003620:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003624:	b0ae      	sub	sp, #184	@ 0xb8
 8003626:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003628:	2300      	movs	r3, #0
 800362a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800362e:	2300      	movs	r3, #0
 8003630:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8003634:	2300      	movs	r3, #0
 8003636:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800363a:	2300      	movs	r3, #0
 800363c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8003640:	2300      	movs	r3, #0
 8003642:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003646:	4bcb      	ldr	r3, [pc, #812]	@ (8003974 <HAL_RCC_GetSysClockFreq+0x354>)
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	f003 030c 	and.w	r3, r3, #12
 800364e:	2b0c      	cmp	r3, #12
 8003650:	f200 8206 	bhi.w	8003a60 <HAL_RCC_GetSysClockFreq+0x440>
 8003654:	a201      	add	r2, pc, #4	@ (adr r2, 800365c <HAL_RCC_GetSysClockFreq+0x3c>)
 8003656:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800365a:	bf00      	nop
 800365c:	08003691 	.word	0x08003691
 8003660:	08003a61 	.word	0x08003a61
 8003664:	08003a61 	.word	0x08003a61
 8003668:	08003a61 	.word	0x08003a61
 800366c:	08003699 	.word	0x08003699
 8003670:	08003a61 	.word	0x08003a61
 8003674:	08003a61 	.word	0x08003a61
 8003678:	08003a61 	.word	0x08003a61
 800367c:	080036a1 	.word	0x080036a1
 8003680:	08003a61 	.word	0x08003a61
 8003684:	08003a61 	.word	0x08003a61
 8003688:	08003a61 	.word	0x08003a61
 800368c:	08003891 	.word	0x08003891
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003690:	4bb9      	ldr	r3, [pc, #740]	@ (8003978 <HAL_RCC_GetSysClockFreq+0x358>)
 8003692:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003696:	e1e7      	b.n	8003a68 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003698:	4bb8      	ldr	r3, [pc, #736]	@ (800397c <HAL_RCC_GetSysClockFreq+0x35c>)
 800369a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800369e:	e1e3      	b.n	8003a68 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80036a0:	4bb4      	ldr	r3, [pc, #720]	@ (8003974 <HAL_RCC_GetSysClockFreq+0x354>)
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80036a8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80036ac:	4bb1      	ldr	r3, [pc, #708]	@ (8003974 <HAL_RCC_GetSysClockFreq+0x354>)
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d071      	beq.n	800379c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036b8:	4bae      	ldr	r3, [pc, #696]	@ (8003974 <HAL_RCC_GetSysClockFreq+0x354>)
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	099b      	lsrs	r3, r3, #6
 80036be:	2200      	movs	r2, #0
 80036c0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80036c4:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80036c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80036cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036d0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80036d4:	2300      	movs	r3, #0
 80036d6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80036da:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80036de:	4622      	mov	r2, r4
 80036e0:	462b      	mov	r3, r5
 80036e2:	f04f 0000 	mov.w	r0, #0
 80036e6:	f04f 0100 	mov.w	r1, #0
 80036ea:	0159      	lsls	r1, r3, #5
 80036ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80036f0:	0150      	lsls	r0, r2, #5
 80036f2:	4602      	mov	r2, r0
 80036f4:	460b      	mov	r3, r1
 80036f6:	4621      	mov	r1, r4
 80036f8:	1a51      	subs	r1, r2, r1
 80036fa:	6439      	str	r1, [r7, #64]	@ 0x40
 80036fc:	4629      	mov	r1, r5
 80036fe:	eb63 0301 	sbc.w	r3, r3, r1
 8003702:	647b      	str	r3, [r7, #68]	@ 0x44
 8003704:	f04f 0200 	mov.w	r2, #0
 8003708:	f04f 0300 	mov.w	r3, #0
 800370c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8003710:	4649      	mov	r1, r9
 8003712:	018b      	lsls	r3, r1, #6
 8003714:	4641      	mov	r1, r8
 8003716:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800371a:	4641      	mov	r1, r8
 800371c:	018a      	lsls	r2, r1, #6
 800371e:	4641      	mov	r1, r8
 8003720:	1a51      	subs	r1, r2, r1
 8003722:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003724:	4649      	mov	r1, r9
 8003726:	eb63 0301 	sbc.w	r3, r3, r1
 800372a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800372c:	f04f 0200 	mov.w	r2, #0
 8003730:	f04f 0300 	mov.w	r3, #0
 8003734:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8003738:	4649      	mov	r1, r9
 800373a:	00cb      	lsls	r3, r1, #3
 800373c:	4641      	mov	r1, r8
 800373e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003742:	4641      	mov	r1, r8
 8003744:	00ca      	lsls	r2, r1, #3
 8003746:	4610      	mov	r0, r2
 8003748:	4619      	mov	r1, r3
 800374a:	4603      	mov	r3, r0
 800374c:	4622      	mov	r2, r4
 800374e:	189b      	adds	r3, r3, r2
 8003750:	633b      	str	r3, [r7, #48]	@ 0x30
 8003752:	462b      	mov	r3, r5
 8003754:	460a      	mov	r2, r1
 8003756:	eb42 0303 	adc.w	r3, r2, r3
 800375a:	637b      	str	r3, [r7, #52]	@ 0x34
 800375c:	f04f 0200 	mov.w	r2, #0
 8003760:	f04f 0300 	mov.w	r3, #0
 8003764:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003768:	4629      	mov	r1, r5
 800376a:	024b      	lsls	r3, r1, #9
 800376c:	4621      	mov	r1, r4
 800376e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003772:	4621      	mov	r1, r4
 8003774:	024a      	lsls	r2, r1, #9
 8003776:	4610      	mov	r0, r2
 8003778:	4619      	mov	r1, r3
 800377a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800377e:	2200      	movs	r2, #0
 8003780:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003784:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003788:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800378c:	f7fc fd3a 	bl	8000204 <__aeabi_uldivmod>
 8003790:	4602      	mov	r2, r0
 8003792:	460b      	mov	r3, r1
 8003794:	4613      	mov	r3, r2
 8003796:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800379a:	e067      	b.n	800386c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800379c:	4b75      	ldr	r3, [pc, #468]	@ (8003974 <HAL_RCC_GetSysClockFreq+0x354>)
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	099b      	lsrs	r3, r3, #6
 80037a2:	2200      	movs	r2, #0
 80037a4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80037a8:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80037ac:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80037b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037b4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80037b6:	2300      	movs	r3, #0
 80037b8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80037ba:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80037be:	4622      	mov	r2, r4
 80037c0:	462b      	mov	r3, r5
 80037c2:	f04f 0000 	mov.w	r0, #0
 80037c6:	f04f 0100 	mov.w	r1, #0
 80037ca:	0159      	lsls	r1, r3, #5
 80037cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80037d0:	0150      	lsls	r0, r2, #5
 80037d2:	4602      	mov	r2, r0
 80037d4:	460b      	mov	r3, r1
 80037d6:	4621      	mov	r1, r4
 80037d8:	1a51      	subs	r1, r2, r1
 80037da:	62b9      	str	r1, [r7, #40]	@ 0x28
 80037dc:	4629      	mov	r1, r5
 80037de:	eb63 0301 	sbc.w	r3, r3, r1
 80037e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80037e4:	f04f 0200 	mov.w	r2, #0
 80037e8:	f04f 0300 	mov.w	r3, #0
 80037ec:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80037f0:	4649      	mov	r1, r9
 80037f2:	018b      	lsls	r3, r1, #6
 80037f4:	4641      	mov	r1, r8
 80037f6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80037fa:	4641      	mov	r1, r8
 80037fc:	018a      	lsls	r2, r1, #6
 80037fe:	4641      	mov	r1, r8
 8003800:	ebb2 0a01 	subs.w	sl, r2, r1
 8003804:	4649      	mov	r1, r9
 8003806:	eb63 0b01 	sbc.w	fp, r3, r1
 800380a:	f04f 0200 	mov.w	r2, #0
 800380e:	f04f 0300 	mov.w	r3, #0
 8003812:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003816:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800381a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800381e:	4692      	mov	sl, r2
 8003820:	469b      	mov	fp, r3
 8003822:	4623      	mov	r3, r4
 8003824:	eb1a 0303 	adds.w	r3, sl, r3
 8003828:	623b      	str	r3, [r7, #32]
 800382a:	462b      	mov	r3, r5
 800382c:	eb4b 0303 	adc.w	r3, fp, r3
 8003830:	627b      	str	r3, [r7, #36]	@ 0x24
 8003832:	f04f 0200 	mov.w	r2, #0
 8003836:	f04f 0300 	mov.w	r3, #0
 800383a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800383e:	4629      	mov	r1, r5
 8003840:	028b      	lsls	r3, r1, #10
 8003842:	4621      	mov	r1, r4
 8003844:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003848:	4621      	mov	r1, r4
 800384a:	028a      	lsls	r2, r1, #10
 800384c:	4610      	mov	r0, r2
 800384e:	4619      	mov	r1, r3
 8003850:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003854:	2200      	movs	r2, #0
 8003856:	673b      	str	r3, [r7, #112]	@ 0x70
 8003858:	677a      	str	r2, [r7, #116]	@ 0x74
 800385a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800385e:	f7fc fcd1 	bl	8000204 <__aeabi_uldivmod>
 8003862:	4602      	mov	r2, r0
 8003864:	460b      	mov	r3, r1
 8003866:	4613      	mov	r3, r2
 8003868:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800386c:	4b41      	ldr	r3, [pc, #260]	@ (8003974 <HAL_RCC_GetSysClockFreq+0x354>)
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	0c1b      	lsrs	r3, r3, #16
 8003872:	f003 0303 	and.w	r3, r3, #3
 8003876:	3301      	adds	r3, #1
 8003878:	005b      	lsls	r3, r3, #1
 800387a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 800387e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003882:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003886:	fbb2 f3f3 	udiv	r3, r2, r3
 800388a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800388e:	e0eb      	b.n	8003a68 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003890:	4b38      	ldr	r3, [pc, #224]	@ (8003974 <HAL_RCC_GetSysClockFreq+0x354>)
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003898:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800389c:	4b35      	ldr	r3, [pc, #212]	@ (8003974 <HAL_RCC_GetSysClockFreq+0x354>)
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d06b      	beq.n	8003980 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038a8:	4b32      	ldr	r3, [pc, #200]	@ (8003974 <HAL_RCC_GetSysClockFreq+0x354>)
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	099b      	lsrs	r3, r3, #6
 80038ae:	2200      	movs	r2, #0
 80038b0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80038b2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80038b4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80038b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038ba:	663b      	str	r3, [r7, #96]	@ 0x60
 80038bc:	2300      	movs	r3, #0
 80038be:	667b      	str	r3, [r7, #100]	@ 0x64
 80038c0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80038c4:	4622      	mov	r2, r4
 80038c6:	462b      	mov	r3, r5
 80038c8:	f04f 0000 	mov.w	r0, #0
 80038cc:	f04f 0100 	mov.w	r1, #0
 80038d0:	0159      	lsls	r1, r3, #5
 80038d2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80038d6:	0150      	lsls	r0, r2, #5
 80038d8:	4602      	mov	r2, r0
 80038da:	460b      	mov	r3, r1
 80038dc:	4621      	mov	r1, r4
 80038de:	1a51      	subs	r1, r2, r1
 80038e0:	61b9      	str	r1, [r7, #24]
 80038e2:	4629      	mov	r1, r5
 80038e4:	eb63 0301 	sbc.w	r3, r3, r1
 80038e8:	61fb      	str	r3, [r7, #28]
 80038ea:	f04f 0200 	mov.w	r2, #0
 80038ee:	f04f 0300 	mov.w	r3, #0
 80038f2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80038f6:	4659      	mov	r1, fp
 80038f8:	018b      	lsls	r3, r1, #6
 80038fa:	4651      	mov	r1, sl
 80038fc:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003900:	4651      	mov	r1, sl
 8003902:	018a      	lsls	r2, r1, #6
 8003904:	4651      	mov	r1, sl
 8003906:	ebb2 0801 	subs.w	r8, r2, r1
 800390a:	4659      	mov	r1, fp
 800390c:	eb63 0901 	sbc.w	r9, r3, r1
 8003910:	f04f 0200 	mov.w	r2, #0
 8003914:	f04f 0300 	mov.w	r3, #0
 8003918:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800391c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003920:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003924:	4690      	mov	r8, r2
 8003926:	4699      	mov	r9, r3
 8003928:	4623      	mov	r3, r4
 800392a:	eb18 0303 	adds.w	r3, r8, r3
 800392e:	613b      	str	r3, [r7, #16]
 8003930:	462b      	mov	r3, r5
 8003932:	eb49 0303 	adc.w	r3, r9, r3
 8003936:	617b      	str	r3, [r7, #20]
 8003938:	f04f 0200 	mov.w	r2, #0
 800393c:	f04f 0300 	mov.w	r3, #0
 8003940:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003944:	4629      	mov	r1, r5
 8003946:	024b      	lsls	r3, r1, #9
 8003948:	4621      	mov	r1, r4
 800394a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800394e:	4621      	mov	r1, r4
 8003950:	024a      	lsls	r2, r1, #9
 8003952:	4610      	mov	r0, r2
 8003954:	4619      	mov	r1, r3
 8003956:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800395a:	2200      	movs	r2, #0
 800395c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800395e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003960:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003964:	f7fc fc4e 	bl	8000204 <__aeabi_uldivmod>
 8003968:	4602      	mov	r2, r0
 800396a:	460b      	mov	r3, r1
 800396c:	4613      	mov	r3, r2
 800396e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003972:	e065      	b.n	8003a40 <HAL_RCC_GetSysClockFreq+0x420>
 8003974:	40023800 	.word	0x40023800
 8003978:	00f42400 	.word	0x00f42400
 800397c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003980:	4b3d      	ldr	r3, [pc, #244]	@ (8003a78 <HAL_RCC_GetSysClockFreq+0x458>)
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	099b      	lsrs	r3, r3, #6
 8003986:	2200      	movs	r2, #0
 8003988:	4618      	mov	r0, r3
 800398a:	4611      	mov	r1, r2
 800398c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003990:	653b      	str	r3, [r7, #80]	@ 0x50
 8003992:	2300      	movs	r3, #0
 8003994:	657b      	str	r3, [r7, #84]	@ 0x54
 8003996:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800399a:	4642      	mov	r2, r8
 800399c:	464b      	mov	r3, r9
 800399e:	f04f 0000 	mov.w	r0, #0
 80039a2:	f04f 0100 	mov.w	r1, #0
 80039a6:	0159      	lsls	r1, r3, #5
 80039a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80039ac:	0150      	lsls	r0, r2, #5
 80039ae:	4602      	mov	r2, r0
 80039b0:	460b      	mov	r3, r1
 80039b2:	4641      	mov	r1, r8
 80039b4:	1a51      	subs	r1, r2, r1
 80039b6:	60b9      	str	r1, [r7, #8]
 80039b8:	4649      	mov	r1, r9
 80039ba:	eb63 0301 	sbc.w	r3, r3, r1
 80039be:	60fb      	str	r3, [r7, #12]
 80039c0:	f04f 0200 	mov.w	r2, #0
 80039c4:	f04f 0300 	mov.w	r3, #0
 80039c8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80039cc:	4659      	mov	r1, fp
 80039ce:	018b      	lsls	r3, r1, #6
 80039d0:	4651      	mov	r1, sl
 80039d2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80039d6:	4651      	mov	r1, sl
 80039d8:	018a      	lsls	r2, r1, #6
 80039da:	4651      	mov	r1, sl
 80039dc:	1a54      	subs	r4, r2, r1
 80039de:	4659      	mov	r1, fp
 80039e0:	eb63 0501 	sbc.w	r5, r3, r1
 80039e4:	f04f 0200 	mov.w	r2, #0
 80039e8:	f04f 0300 	mov.w	r3, #0
 80039ec:	00eb      	lsls	r3, r5, #3
 80039ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80039f2:	00e2      	lsls	r2, r4, #3
 80039f4:	4614      	mov	r4, r2
 80039f6:	461d      	mov	r5, r3
 80039f8:	4643      	mov	r3, r8
 80039fa:	18e3      	adds	r3, r4, r3
 80039fc:	603b      	str	r3, [r7, #0]
 80039fe:	464b      	mov	r3, r9
 8003a00:	eb45 0303 	adc.w	r3, r5, r3
 8003a04:	607b      	str	r3, [r7, #4]
 8003a06:	f04f 0200 	mov.w	r2, #0
 8003a0a:	f04f 0300 	mov.w	r3, #0
 8003a0e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003a12:	4629      	mov	r1, r5
 8003a14:	028b      	lsls	r3, r1, #10
 8003a16:	4621      	mov	r1, r4
 8003a18:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003a1c:	4621      	mov	r1, r4
 8003a1e:	028a      	lsls	r2, r1, #10
 8003a20:	4610      	mov	r0, r2
 8003a22:	4619      	mov	r1, r3
 8003a24:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003a28:	2200      	movs	r2, #0
 8003a2a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003a2c:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003a2e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003a32:	f7fc fbe7 	bl	8000204 <__aeabi_uldivmod>
 8003a36:	4602      	mov	r2, r0
 8003a38:	460b      	mov	r3, r1
 8003a3a:	4613      	mov	r3, r2
 8003a3c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003a40:	4b0d      	ldr	r3, [pc, #52]	@ (8003a78 <HAL_RCC_GetSysClockFreq+0x458>)
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	0f1b      	lsrs	r3, r3, #28
 8003a46:	f003 0307 	and.w	r3, r3, #7
 8003a4a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8003a4e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003a52:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003a56:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a5a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003a5e:	e003      	b.n	8003a68 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003a60:	4b06      	ldr	r3, [pc, #24]	@ (8003a7c <HAL_RCC_GetSysClockFreq+0x45c>)
 8003a62:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003a66:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a68:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	37b8      	adds	r7, #184	@ 0xb8
 8003a70:	46bd      	mov	sp, r7
 8003a72:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a76:	bf00      	nop
 8003a78:	40023800 	.word	0x40023800
 8003a7c:	00f42400 	.word	0x00f42400

08003a80 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b086      	sub	sp, #24
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d101      	bne.n	8003a92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	e28d      	b.n	8003fae <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f003 0301 	and.w	r3, r3, #1
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	f000 8083 	beq.w	8003ba6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003aa0:	4b94      	ldr	r3, [pc, #592]	@ (8003cf4 <HAL_RCC_OscConfig+0x274>)
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	f003 030c 	and.w	r3, r3, #12
 8003aa8:	2b04      	cmp	r3, #4
 8003aaa:	d019      	beq.n	8003ae0 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003aac:	4b91      	ldr	r3, [pc, #580]	@ (8003cf4 <HAL_RCC_OscConfig+0x274>)
 8003aae:	689b      	ldr	r3, [r3, #8]
 8003ab0:	f003 030c 	and.w	r3, r3, #12
        || \
 8003ab4:	2b08      	cmp	r3, #8
 8003ab6:	d106      	bne.n	8003ac6 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003ab8:	4b8e      	ldr	r3, [pc, #568]	@ (8003cf4 <HAL_RCC_OscConfig+0x274>)
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ac0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003ac4:	d00c      	beq.n	8003ae0 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ac6:	4b8b      	ldr	r3, [pc, #556]	@ (8003cf4 <HAL_RCC_OscConfig+0x274>)
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003ace:	2b0c      	cmp	r3, #12
 8003ad0:	d112      	bne.n	8003af8 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ad2:	4b88      	ldr	r3, [pc, #544]	@ (8003cf4 <HAL_RCC_OscConfig+0x274>)
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ada:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003ade:	d10b      	bne.n	8003af8 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ae0:	4b84      	ldr	r3, [pc, #528]	@ (8003cf4 <HAL_RCC_OscConfig+0x274>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d05b      	beq.n	8003ba4 <HAL_RCC_OscConfig+0x124>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d157      	bne.n	8003ba4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003af4:	2301      	movs	r3, #1
 8003af6:	e25a      	b.n	8003fae <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b00:	d106      	bne.n	8003b10 <HAL_RCC_OscConfig+0x90>
 8003b02:	4b7c      	ldr	r3, [pc, #496]	@ (8003cf4 <HAL_RCC_OscConfig+0x274>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a7b      	ldr	r2, [pc, #492]	@ (8003cf4 <HAL_RCC_OscConfig+0x274>)
 8003b08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b0c:	6013      	str	r3, [r2, #0]
 8003b0e:	e01d      	b.n	8003b4c <HAL_RCC_OscConfig+0xcc>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003b18:	d10c      	bne.n	8003b34 <HAL_RCC_OscConfig+0xb4>
 8003b1a:	4b76      	ldr	r3, [pc, #472]	@ (8003cf4 <HAL_RCC_OscConfig+0x274>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a75      	ldr	r2, [pc, #468]	@ (8003cf4 <HAL_RCC_OscConfig+0x274>)
 8003b20:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003b24:	6013      	str	r3, [r2, #0]
 8003b26:	4b73      	ldr	r3, [pc, #460]	@ (8003cf4 <HAL_RCC_OscConfig+0x274>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a72      	ldr	r2, [pc, #456]	@ (8003cf4 <HAL_RCC_OscConfig+0x274>)
 8003b2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b30:	6013      	str	r3, [r2, #0]
 8003b32:	e00b      	b.n	8003b4c <HAL_RCC_OscConfig+0xcc>
 8003b34:	4b6f      	ldr	r3, [pc, #444]	@ (8003cf4 <HAL_RCC_OscConfig+0x274>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a6e      	ldr	r2, [pc, #440]	@ (8003cf4 <HAL_RCC_OscConfig+0x274>)
 8003b3a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b3e:	6013      	str	r3, [r2, #0]
 8003b40:	4b6c      	ldr	r3, [pc, #432]	@ (8003cf4 <HAL_RCC_OscConfig+0x274>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a6b      	ldr	r2, [pc, #428]	@ (8003cf4 <HAL_RCC_OscConfig+0x274>)
 8003b46:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003b4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d013      	beq.n	8003b7c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b54:	f7fd fb7a 	bl	800124c <HAL_GetTick>
 8003b58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b5a:	e008      	b.n	8003b6e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b5c:	f7fd fb76 	bl	800124c <HAL_GetTick>
 8003b60:	4602      	mov	r2, r0
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	1ad3      	subs	r3, r2, r3
 8003b66:	2b64      	cmp	r3, #100	@ 0x64
 8003b68:	d901      	bls.n	8003b6e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003b6a:	2303      	movs	r3, #3
 8003b6c:	e21f      	b.n	8003fae <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b6e:	4b61      	ldr	r3, [pc, #388]	@ (8003cf4 <HAL_RCC_OscConfig+0x274>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d0f0      	beq.n	8003b5c <HAL_RCC_OscConfig+0xdc>
 8003b7a:	e014      	b.n	8003ba6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b7c:	f7fd fb66 	bl	800124c <HAL_GetTick>
 8003b80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b82:	e008      	b.n	8003b96 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b84:	f7fd fb62 	bl	800124c <HAL_GetTick>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	693b      	ldr	r3, [r7, #16]
 8003b8c:	1ad3      	subs	r3, r2, r3
 8003b8e:	2b64      	cmp	r3, #100	@ 0x64
 8003b90:	d901      	bls.n	8003b96 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003b92:	2303      	movs	r3, #3
 8003b94:	e20b      	b.n	8003fae <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b96:	4b57      	ldr	r3, [pc, #348]	@ (8003cf4 <HAL_RCC_OscConfig+0x274>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d1f0      	bne.n	8003b84 <HAL_RCC_OscConfig+0x104>
 8003ba2:	e000      	b.n	8003ba6 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ba4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f003 0302 	and.w	r3, r3, #2
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d06f      	beq.n	8003c92 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003bb2:	4b50      	ldr	r3, [pc, #320]	@ (8003cf4 <HAL_RCC_OscConfig+0x274>)
 8003bb4:	689b      	ldr	r3, [r3, #8]
 8003bb6:	f003 030c 	and.w	r3, r3, #12
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d017      	beq.n	8003bee <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003bbe:	4b4d      	ldr	r3, [pc, #308]	@ (8003cf4 <HAL_RCC_OscConfig+0x274>)
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	f003 030c 	and.w	r3, r3, #12
        || \
 8003bc6:	2b08      	cmp	r3, #8
 8003bc8:	d105      	bne.n	8003bd6 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003bca:	4b4a      	ldr	r3, [pc, #296]	@ (8003cf4 <HAL_RCC_OscConfig+0x274>)
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d00b      	beq.n	8003bee <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003bd6:	4b47      	ldr	r3, [pc, #284]	@ (8003cf4 <HAL_RCC_OscConfig+0x274>)
 8003bd8:	689b      	ldr	r3, [r3, #8]
 8003bda:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003bde:	2b0c      	cmp	r3, #12
 8003be0:	d11c      	bne.n	8003c1c <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003be2:	4b44      	ldr	r3, [pc, #272]	@ (8003cf4 <HAL_RCC_OscConfig+0x274>)
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d116      	bne.n	8003c1c <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bee:	4b41      	ldr	r3, [pc, #260]	@ (8003cf4 <HAL_RCC_OscConfig+0x274>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f003 0302 	and.w	r3, r3, #2
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d005      	beq.n	8003c06 <HAL_RCC_OscConfig+0x186>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	68db      	ldr	r3, [r3, #12]
 8003bfe:	2b01      	cmp	r3, #1
 8003c00:	d001      	beq.n	8003c06 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	e1d3      	b.n	8003fae <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c06:	4b3b      	ldr	r3, [pc, #236]	@ (8003cf4 <HAL_RCC_OscConfig+0x274>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	691b      	ldr	r3, [r3, #16]
 8003c12:	00db      	lsls	r3, r3, #3
 8003c14:	4937      	ldr	r1, [pc, #220]	@ (8003cf4 <HAL_RCC_OscConfig+0x274>)
 8003c16:	4313      	orrs	r3, r2
 8003c18:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c1a:	e03a      	b.n	8003c92 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	68db      	ldr	r3, [r3, #12]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d020      	beq.n	8003c66 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c24:	4b34      	ldr	r3, [pc, #208]	@ (8003cf8 <HAL_RCC_OscConfig+0x278>)
 8003c26:	2201      	movs	r2, #1
 8003c28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c2a:	f7fd fb0f 	bl	800124c <HAL_GetTick>
 8003c2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c30:	e008      	b.n	8003c44 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c32:	f7fd fb0b 	bl	800124c <HAL_GetTick>
 8003c36:	4602      	mov	r2, r0
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	1ad3      	subs	r3, r2, r3
 8003c3c:	2b02      	cmp	r3, #2
 8003c3e:	d901      	bls.n	8003c44 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003c40:	2303      	movs	r3, #3
 8003c42:	e1b4      	b.n	8003fae <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c44:	4b2b      	ldr	r3, [pc, #172]	@ (8003cf4 <HAL_RCC_OscConfig+0x274>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f003 0302 	and.w	r3, r3, #2
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d0f0      	beq.n	8003c32 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c50:	4b28      	ldr	r3, [pc, #160]	@ (8003cf4 <HAL_RCC_OscConfig+0x274>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	691b      	ldr	r3, [r3, #16]
 8003c5c:	00db      	lsls	r3, r3, #3
 8003c5e:	4925      	ldr	r1, [pc, #148]	@ (8003cf4 <HAL_RCC_OscConfig+0x274>)
 8003c60:	4313      	orrs	r3, r2
 8003c62:	600b      	str	r3, [r1, #0]
 8003c64:	e015      	b.n	8003c92 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c66:	4b24      	ldr	r3, [pc, #144]	@ (8003cf8 <HAL_RCC_OscConfig+0x278>)
 8003c68:	2200      	movs	r2, #0
 8003c6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c6c:	f7fd faee 	bl	800124c <HAL_GetTick>
 8003c70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c72:	e008      	b.n	8003c86 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c74:	f7fd faea 	bl	800124c <HAL_GetTick>
 8003c78:	4602      	mov	r2, r0
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	1ad3      	subs	r3, r2, r3
 8003c7e:	2b02      	cmp	r3, #2
 8003c80:	d901      	bls.n	8003c86 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003c82:	2303      	movs	r3, #3
 8003c84:	e193      	b.n	8003fae <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c86:	4b1b      	ldr	r3, [pc, #108]	@ (8003cf4 <HAL_RCC_OscConfig+0x274>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f003 0302 	and.w	r3, r3, #2
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d1f0      	bne.n	8003c74 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f003 0308 	and.w	r3, r3, #8
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d036      	beq.n	8003d0c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	695b      	ldr	r3, [r3, #20]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d016      	beq.n	8003cd4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ca6:	4b15      	ldr	r3, [pc, #84]	@ (8003cfc <HAL_RCC_OscConfig+0x27c>)
 8003ca8:	2201      	movs	r2, #1
 8003caa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cac:	f7fd face 	bl	800124c <HAL_GetTick>
 8003cb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cb2:	e008      	b.n	8003cc6 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cb4:	f7fd faca 	bl	800124c <HAL_GetTick>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	1ad3      	subs	r3, r2, r3
 8003cbe:	2b02      	cmp	r3, #2
 8003cc0:	d901      	bls.n	8003cc6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003cc2:	2303      	movs	r3, #3
 8003cc4:	e173      	b.n	8003fae <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cc6:	4b0b      	ldr	r3, [pc, #44]	@ (8003cf4 <HAL_RCC_OscConfig+0x274>)
 8003cc8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003cca:	f003 0302 	and.w	r3, r3, #2
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d0f0      	beq.n	8003cb4 <HAL_RCC_OscConfig+0x234>
 8003cd2:	e01b      	b.n	8003d0c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003cd4:	4b09      	ldr	r3, [pc, #36]	@ (8003cfc <HAL_RCC_OscConfig+0x27c>)
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cda:	f7fd fab7 	bl	800124c <HAL_GetTick>
 8003cde:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ce0:	e00e      	b.n	8003d00 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ce2:	f7fd fab3 	bl	800124c <HAL_GetTick>
 8003ce6:	4602      	mov	r2, r0
 8003ce8:	693b      	ldr	r3, [r7, #16]
 8003cea:	1ad3      	subs	r3, r2, r3
 8003cec:	2b02      	cmp	r3, #2
 8003cee:	d907      	bls.n	8003d00 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003cf0:	2303      	movs	r3, #3
 8003cf2:	e15c      	b.n	8003fae <HAL_RCC_OscConfig+0x52e>
 8003cf4:	40023800 	.word	0x40023800
 8003cf8:	42470000 	.word	0x42470000
 8003cfc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d00:	4b8a      	ldr	r3, [pc, #552]	@ (8003f2c <HAL_RCC_OscConfig+0x4ac>)
 8003d02:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d04:	f003 0302 	and.w	r3, r3, #2
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d1ea      	bne.n	8003ce2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f003 0304 	and.w	r3, r3, #4
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	f000 8097 	beq.w	8003e48 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d1e:	4b83      	ldr	r3, [pc, #524]	@ (8003f2c <HAL_RCC_OscConfig+0x4ac>)
 8003d20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d10f      	bne.n	8003d4a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	60bb      	str	r3, [r7, #8]
 8003d2e:	4b7f      	ldr	r3, [pc, #508]	@ (8003f2c <HAL_RCC_OscConfig+0x4ac>)
 8003d30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d32:	4a7e      	ldr	r2, [pc, #504]	@ (8003f2c <HAL_RCC_OscConfig+0x4ac>)
 8003d34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d38:	6413      	str	r3, [r2, #64]	@ 0x40
 8003d3a:	4b7c      	ldr	r3, [pc, #496]	@ (8003f2c <HAL_RCC_OscConfig+0x4ac>)
 8003d3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d42:	60bb      	str	r3, [r7, #8]
 8003d44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d46:	2301      	movs	r3, #1
 8003d48:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d4a:	4b79      	ldr	r3, [pc, #484]	@ (8003f30 <HAL_RCC_OscConfig+0x4b0>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d118      	bne.n	8003d88 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d56:	4b76      	ldr	r3, [pc, #472]	@ (8003f30 <HAL_RCC_OscConfig+0x4b0>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a75      	ldr	r2, [pc, #468]	@ (8003f30 <HAL_RCC_OscConfig+0x4b0>)
 8003d5c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d62:	f7fd fa73 	bl	800124c <HAL_GetTick>
 8003d66:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d68:	e008      	b.n	8003d7c <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d6a:	f7fd fa6f 	bl	800124c <HAL_GetTick>
 8003d6e:	4602      	mov	r2, r0
 8003d70:	693b      	ldr	r3, [r7, #16]
 8003d72:	1ad3      	subs	r3, r2, r3
 8003d74:	2b02      	cmp	r3, #2
 8003d76:	d901      	bls.n	8003d7c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003d78:	2303      	movs	r3, #3
 8003d7a:	e118      	b.n	8003fae <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d7c:	4b6c      	ldr	r3, [pc, #432]	@ (8003f30 <HAL_RCC_OscConfig+0x4b0>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d0f0      	beq.n	8003d6a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	2b01      	cmp	r3, #1
 8003d8e:	d106      	bne.n	8003d9e <HAL_RCC_OscConfig+0x31e>
 8003d90:	4b66      	ldr	r3, [pc, #408]	@ (8003f2c <HAL_RCC_OscConfig+0x4ac>)
 8003d92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d94:	4a65      	ldr	r2, [pc, #404]	@ (8003f2c <HAL_RCC_OscConfig+0x4ac>)
 8003d96:	f043 0301 	orr.w	r3, r3, #1
 8003d9a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d9c:	e01c      	b.n	8003dd8 <HAL_RCC_OscConfig+0x358>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	689b      	ldr	r3, [r3, #8]
 8003da2:	2b05      	cmp	r3, #5
 8003da4:	d10c      	bne.n	8003dc0 <HAL_RCC_OscConfig+0x340>
 8003da6:	4b61      	ldr	r3, [pc, #388]	@ (8003f2c <HAL_RCC_OscConfig+0x4ac>)
 8003da8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003daa:	4a60      	ldr	r2, [pc, #384]	@ (8003f2c <HAL_RCC_OscConfig+0x4ac>)
 8003dac:	f043 0304 	orr.w	r3, r3, #4
 8003db0:	6713      	str	r3, [r2, #112]	@ 0x70
 8003db2:	4b5e      	ldr	r3, [pc, #376]	@ (8003f2c <HAL_RCC_OscConfig+0x4ac>)
 8003db4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003db6:	4a5d      	ldr	r2, [pc, #372]	@ (8003f2c <HAL_RCC_OscConfig+0x4ac>)
 8003db8:	f043 0301 	orr.w	r3, r3, #1
 8003dbc:	6713      	str	r3, [r2, #112]	@ 0x70
 8003dbe:	e00b      	b.n	8003dd8 <HAL_RCC_OscConfig+0x358>
 8003dc0:	4b5a      	ldr	r3, [pc, #360]	@ (8003f2c <HAL_RCC_OscConfig+0x4ac>)
 8003dc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dc4:	4a59      	ldr	r2, [pc, #356]	@ (8003f2c <HAL_RCC_OscConfig+0x4ac>)
 8003dc6:	f023 0301 	bic.w	r3, r3, #1
 8003dca:	6713      	str	r3, [r2, #112]	@ 0x70
 8003dcc:	4b57      	ldr	r3, [pc, #348]	@ (8003f2c <HAL_RCC_OscConfig+0x4ac>)
 8003dce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dd0:	4a56      	ldr	r2, [pc, #344]	@ (8003f2c <HAL_RCC_OscConfig+0x4ac>)
 8003dd2:	f023 0304 	bic.w	r3, r3, #4
 8003dd6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d015      	beq.n	8003e0c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003de0:	f7fd fa34 	bl	800124c <HAL_GetTick>
 8003de4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003de6:	e00a      	b.n	8003dfe <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003de8:	f7fd fa30 	bl	800124c <HAL_GetTick>
 8003dec:	4602      	mov	r2, r0
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	1ad3      	subs	r3, r2, r3
 8003df2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d901      	bls.n	8003dfe <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003dfa:	2303      	movs	r3, #3
 8003dfc:	e0d7      	b.n	8003fae <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dfe:	4b4b      	ldr	r3, [pc, #300]	@ (8003f2c <HAL_RCC_OscConfig+0x4ac>)
 8003e00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e02:	f003 0302 	and.w	r3, r3, #2
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d0ee      	beq.n	8003de8 <HAL_RCC_OscConfig+0x368>
 8003e0a:	e014      	b.n	8003e36 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e0c:	f7fd fa1e 	bl	800124c <HAL_GetTick>
 8003e10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e12:	e00a      	b.n	8003e2a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e14:	f7fd fa1a 	bl	800124c <HAL_GetTick>
 8003e18:	4602      	mov	r2, r0
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	1ad3      	subs	r3, r2, r3
 8003e1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d901      	bls.n	8003e2a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003e26:	2303      	movs	r3, #3
 8003e28:	e0c1      	b.n	8003fae <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e2a:	4b40      	ldr	r3, [pc, #256]	@ (8003f2c <HAL_RCC_OscConfig+0x4ac>)
 8003e2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e2e:	f003 0302 	and.w	r3, r3, #2
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d1ee      	bne.n	8003e14 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003e36:	7dfb      	ldrb	r3, [r7, #23]
 8003e38:	2b01      	cmp	r3, #1
 8003e3a:	d105      	bne.n	8003e48 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e3c:	4b3b      	ldr	r3, [pc, #236]	@ (8003f2c <HAL_RCC_OscConfig+0x4ac>)
 8003e3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e40:	4a3a      	ldr	r2, [pc, #232]	@ (8003f2c <HAL_RCC_OscConfig+0x4ac>)
 8003e42:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003e46:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	699b      	ldr	r3, [r3, #24]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	f000 80ad 	beq.w	8003fac <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003e52:	4b36      	ldr	r3, [pc, #216]	@ (8003f2c <HAL_RCC_OscConfig+0x4ac>)
 8003e54:	689b      	ldr	r3, [r3, #8]
 8003e56:	f003 030c 	and.w	r3, r3, #12
 8003e5a:	2b08      	cmp	r3, #8
 8003e5c:	d060      	beq.n	8003f20 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	699b      	ldr	r3, [r3, #24]
 8003e62:	2b02      	cmp	r3, #2
 8003e64:	d145      	bne.n	8003ef2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e66:	4b33      	ldr	r3, [pc, #204]	@ (8003f34 <HAL_RCC_OscConfig+0x4b4>)
 8003e68:	2200      	movs	r2, #0
 8003e6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e6c:	f7fd f9ee 	bl	800124c <HAL_GetTick>
 8003e70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e72:	e008      	b.n	8003e86 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e74:	f7fd f9ea 	bl	800124c <HAL_GetTick>
 8003e78:	4602      	mov	r2, r0
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	1ad3      	subs	r3, r2, r3
 8003e7e:	2b02      	cmp	r3, #2
 8003e80:	d901      	bls.n	8003e86 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003e82:	2303      	movs	r3, #3
 8003e84:	e093      	b.n	8003fae <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e86:	4b29      	ldr	r3, [pc, #164]	@ (8003f2c <HAL_RCC_OscConfig+0x4ac>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d1f0      	bne.n	8003e74 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	69da      	ldr	r2, [r3, #28]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6a1b      	ldr	r3, [r3, #32]
 8003e9a:	431a      	orrs	r2, r3
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ea0:	019b      	lsls	r3, r3, #6
 8003ea2:	431a      	orrs	r2, r3
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ea8:	085b      	lsrs	r3, r3, #1
 8003eaa:	3b01      	subs	r3, #1
 8003eac:	041b      	lsls	r3, r3, #16
 8003eae:	431a      	orrs	r2, r3
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003eb4:	061b      	lsls	r3, r3, #24
 8003eb6:	431a      	orrs	r2, r3
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ebc:	071b      	lsls	r3, r3, #28
 8003ebe:	491b      	ldr	r1, [pc, #108]	@ (8003f2c <HAL_RCC_OscConfig+0x4ac>)
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ec4:	4b1b      	ldr	r3, [pc, #108]	@ (8003f34 <HAL_RCC_OscConfig+0x4b4>)
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eca:	f7fd f9bf 	bl	800124c <HAL_GetTick>
 8003ece:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ed0:	e008      	b.n	8003ee4 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ed2:	f7fd f9bb 	bl	800124c <HAL_GetTick>
 8003ed6:	4602      	mov	r2, r0
 8003ed8:	693b      	ldr	r3, [r7, #16]
 8003eda:	1ad3      	subs	r3, r2, r3
 8003edc:	2b02      	cmp	r3, #2
 8003ede:	d901      	bls.n	8003ee4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003ee0:	2303      	movs	r3, #3
 8003ee2:	e064      	b.n	8003fae <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ee4:	4b11      	ldr	r3, [pc, #68]	@ (8003f2c <HAL_RCC_OscConfig+0x4ac>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d0f0      	beq.n	8003ed2 <HAL_RCC_OscConfig+0x452>
 8003ef0:	e05c      	b.n	8003fac <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ef2:	4b10      	ldr	r3, [pc, #64]	@ (8003f34 <HAL_RCC_OscConfig+0x4b4>)
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ef8:	f7fd f9a8 	bl	800124c <HAL_GetTick>
 8003efc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003efe:	e008      	b.n	8003f12 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f00:	f7fd f9a4 	bl	800124c <HAL_GetTick>
 8003f04:	4602      	mov	r2, r0
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	1ad3      	subs	r3, r2, r3
 8003f0a:	2b02      	cmp	r3, #2
 8003f0c:	d901      	bls.n	8003f12 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003f0e:	2303      	movs	r3, #3
 8003f10:	e04d      	b.n	8003fae <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f12:	4b06      	ldr	r3, [pc, #24]	@ (8003f2c <HAL_RCC_OscConfig+0x4ac>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d1f0      	bne.n	8003f00 <HAL_RCC_OscConfig+0x480>
 8003f1e:	e045      	b.n	8003fac <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	699b      	ldr	r3, [r3, #24]
 8003f24:	2b01      	cmp	r3, #1
 8003f26:	d107      	bne.n	8003f38 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003f28:	2301      	movs	r3, #1
 8003f2a:	e040      	b.n	8003fae <HAL_RCC_OscConfig+0x52e>
 8003f2c:	40023800 	.word	0x40023800
 8003f30:	40007000 	.word	0x40007000
 8003f34:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003f38:	4b1f      	ldr	r3, [pc, #124]	@ (8003fb8 <HAL_RCC_OscConfig+0x538>)
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	699b      	ldr	r3, [r3, #24]
 8003f42:	2b01      	cmp	r3, #1
 8003f44:	d030      	beq.n	8003fa8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f50:	429a      	cmp	r2, r3
 8003f52:	d129      	bne.n	8003fa8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f5e:	429a      	cmp	r2, r3
 8003f60:	d122      	bne.n	8003fa8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f62:	68fa      	ldr	r2, [r7, #12]
 8003f64:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003f68:	4013      	ands	r3, r2
 8003f6a:	687a      	ldr	r2, [r7, #4]
 8003f6c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003f6e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d119      	bne.n	8003fa8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f7e:	085b      	lsrs	r3, r3, #1
 8003f80:	3b01      	subs	r3, #1
 8003f82:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f84:	429a      	cmp	r2, r3
 8003f86:	d10f      	bne.n	8003fa8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f92:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f94:	429a      	cmp	r2, r3
 8003f96:	d107      	bne.n	8003fa8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fa2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	d001      	beq.n	8003fac <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	e000      	b.n	8003fae <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003fac:	2300      	movs	r3, #0
}
 8003fae:	4618      	mov	r0, r3
 8003fb0:	3718      	adds	r7, #24
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bd80      	pop	{r7, pc}
 8003fb6:	bf00      	nop
 8003fb8:	40023800 	.word	0x40023800

08003fbc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b082      	sub	sp, #8
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d101      	bne.n	8003fce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	e041      	b.n	8004052 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003fd4:	b2db      	uxtb	r3, r3
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d106      	bne.n	8003fe8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003fe2:	6878      	ldr	r0, [r7, #4]
 8003fe4:	f7fc ff1a 	bl	8000e1c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2202      	movs	r2, #2
 8003fec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681a      	ldr	r2, [r3, #0]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	3304      	adds	r3, #4
 8003ff8:	4619      	mov	r1, r3
 8003ffa:	4610      	mov	r0, r2
 8003ffc:	f000 faca 	bl	8004594 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2201      	movs	r2, #1
 8004004:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2201      	movs	r2, #1
 800400c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2201      	movs	r2, #1
 8004014:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2201      	movs	r2, #1
 800401c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2201      	movs	r2, #1
 8004024:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2201      	movs	r2, #1
 800402c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2201      	movs	r2, #1
 8004034:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2201      	movs	r2, #1
 800403c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2201      	movs	r2, #1
 8004044:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2201      	movs	r2, #1
 800404c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004050:	2300      	movs	r3, #0
}
 8004052:	4618      	mov	r0, r3
 8004054:	3708      	adds	r7, #8
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}
	...

0800405c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800405c:	b480      	push	{r7}
 800405e:	b085      	sub	sp, #20
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800406a:	b2db      	uxtb	r3, r3
 800406c:	2b01      	cmp	r3, #1
 800406e:	d001      	beq.n	8004074 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004070:	2301      	movs	r3, #1
 8004072:	e04e      	b.n	8004112 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2202      	movs	r2, #2
 8004078:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	68da      	ldr	r2, [r3, #12]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f042 0201 	orr.w	r2, r2, #1
 800408a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a23      	ldr	r2, [pc, #140]	@ (8004120 <HAL_TIM_Base_Start_IT+0xc4>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d022      	beq.n	80040dc <HAL_TIM_Base_Start_IT+0x80>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800409e:	d01d      	beq.n	80040dc <HAL_TIM_Base_Start_IT+0x80>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a1f      	ldr	r2, [pc, #124]	@ (8004124 <HAL_TIM_Base_Start_IT+0xc8>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d018      	beq.n	80040dc <HAL_TIM_Base_Start_IT+0x80>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a1e      	ldr	r2, [pc, #120]	@ (8004128 <HAL_TIM_Base_Start_IT+0xcc>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d013      	beq.n	80040dc <HAL_TIM_Base_Start_IT+0x80>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a1c      	ldr	r2, [pc, #112]	@ (800412c <HAL_TIM_Base_Start_IT+0xd0>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d00e      	beq.n	80040dc <HAL_TIM_Base_Start_IT+0x80>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a1b      	ldr	r2, [pc, #108]	@ (8004130 <HAL_TIM_Base_Start_IT+0xd4>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d009      	beq.n	80040dc <HAL_TIM_Base_Start_IT+0x80>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a19      	ldr	r2, [pc, #100]	@ (8004134 <HAL_TIM_Base_Start_IT+0xd8>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d004      	beq.n	80040dc <HAL_TIM_Base_Start_IT+0x80>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a18      	ldr	r2, [pc, #96]	@ (8004138 <HAL_TIM_Base_Start_IT+0xdc>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d111      	bne.n	8004100 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	689b      	ldr	r3, [r3, #8]
 80040e2:	f003 0307 	and.w	r3, r3, #7
 80040e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2b06      	cmp	r3, #6
 80040ec:	d010      	beq.n	8004110 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	681a      	ldr	r2, [r3, #0]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f042 0201 	orr.w	r2, r2, #1
 80040fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040fe:	e007      	b.n	8004110 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	681a      	ldr	r2, [r3, #0]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f042 0201 	orr.w	r2, r2, #1
 800410e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004110:	2300      	movs	r3, #0
}
 8004112:	4618      	mov	r0, r3
 8004114:	3714      	adds	r7, #20
 8004116:	46bd      	mov	sp, r7
 8004118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411c:	4770      	bx	lr
 800411e:	bf00      	nop
 8004120:	40010000 	.word	0x40010000
 8004124:	40000400 	.word	0x40000400
 8004128:	40000800 	.word	0x40000800
 800412c:	40000c00 	.word	0x40000c00
 8004130:	40010400 	.word	0x40010400
 8004134:	40014000 	.word	0x40014000
 8004138:	40001800 	.word	0x40001800

0800413c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b084      	sub	sp, #16
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	68db      	ldr	r3, [r3, #12]
 800414a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	691b      	ldr	r3, [r3, #16]
 8004152:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	f003 0302 	and.w	r3, r3, #2
 800415a:	2b00      	cmp	r3, #0
 800415c:	d020      	beq.n	80041a0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	f003 0302 	and.w	r3, r3, #2
 8004164:	2b00      	cmp	r3, #0
 8004166:	d01b      	beq.n	80041a0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f06f 0202 	mvn.w	r2, #2
 8004170:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2201      	movs	r2, #1
 8004176:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	699b      	ldr	r3, [r3, #24]
 800417e:	f003 0303 	and.w	r3, r3, #3
 8004182:	2b00      	cmp	r3, #0
 8004184:	d003      	beq.n	800418e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004186:	6878      	ldr	r0, [r7, #4]
 8004188:	f000 f9e5 	bl	8004556 <HAL_TIM_IC_CaptureCallback>
 800418c:	e005      	b.n	800419a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800418e:	6878      	ldr	r0, [r7, #4]
 8004190:	f000 f9d7 	bl	8004542 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004194:	6878      	ldr	r0, [r7, #4]
 8004196:	f000 f9e8 	bl	800456a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2200      	movs	r2, #0
 800419e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	f003 0304 	and.w	r3, r3, #4
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d020      	beq.n	80041ec <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	f003 0304 	and.w	r3, r3, #4
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d01b      	beq.n	80041ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f06f 0204 	mvn.w	r2, #4
 80041bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2202      	movs	r2, #2
 80041c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	699b      	ldr	r3, [r3, #24]
 80041ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d003      	beq.n	80041da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041d2:	6878      	ldr	r0, [r7, #4]
 80041d4:	f000 f9bf 	bl	8004556 <HAL_TIM_IC_CaptureCallback>
 80041d8:	e005      	b.n	80041e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041da:	6878      	ldr	r0, [r7, #4]
 80041dc:	f000 f9b1 	bl	8004542 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041e0:	6878      	ldr	r0, [r7, #4]
 80041e2:	f000 f9c2 	bl	800456a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2200      	movs	r2, #0
 80041ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	f003 0308 	and.w	r3, r3, #8
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d020      	beq.n	8004238 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	f003 0308 	and.w	r3, r3, #8
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d01b      	beq.n	8004238 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f06f 0208 	mvn.w	r2, #8
 8004208:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2204      	movs	r2, #4
 800420e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	69db      	ldr	r3, [r3, #28]
 8004216:	f003 0303 	and.w	r3, r3, #3
 800421a:	2b00      	cmp	r3, #0
 800421c:	d003      	beq.n	8004226 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800421e:	6878      	ldr	r0, [r7, #4]
 8004220:	f000 f999 	bl	8004556 <HAL_TIM_IC_CaptureCallback>
 8004224:	e005      	b.n	8004232 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004226:	6878      	ldr	r0, [r7, #4]
 8004228:	f000 f98b 	bl	8004542 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800422c:	6878      	ldr	r0, [r7, #4]
 800422e:	f000 f99c 	bl	800456a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2200      	movs	r2, #0
 8004236:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	f003 0310 	and.w	r3, r3, #16
 800423e:	2b00      	cmp	r3, #0
 8004240:	d020      	beq.n	8004284 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	f003 0310 	and.w	r3, r3, #16
 8004248:	2b00      	cmp	r3, #0
 800424a:	d01b      	beq.n	8004284 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f06f 0210 	mvn.w	r2, #16
 8004254:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2208      	movs	r2, #8
 800425a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	69db      	ldr	r3, [r3, #28]
 8004262:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004266:	2b00      	cmp	r3, #0
 8004268:	d003      	beq.n	8004272 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800426a:	6878      	ldr	r0, [r7, #4]
 800426c:	f000 f973 	bl	8004556 <HAL_TIM_IC_CaptureCallback>
 8004270:	e005      	b.n	800427e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004272:	6878      	ldr	r0, [r7, #4]
 8004274:	f000 f965 	bl	8004542 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004278:	6878      	ldr	r0, [r7, #4]
 800427a:	f000 f976 	bl	800456a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2200      	movs	r2, #0
 8004282:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	f003 0301 	and.w	r3, r3, #1
 800428a:	2b00      	cmp	r3, #0
 800428c:	d00c      	beq.n	80042a8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	f003 0301 	and.w	r3, r3, #1
 8004294:	2b00      	cmp	r3, #0
 8004296:	d007      	beq.n	80042a8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f06f 0201 	mvn.w	r2, #1
 80042a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80042a2:	6878      	ldr	r0, [r7, #4]
 80042a4:	f000 f943 	bl	800452e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d00c      	beq.n	80042cc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d007      	beq.n	80042cc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80042c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80042c6:	6878      	ldr	r0, [r7, #4]
 80042c8:	f000 fbbc 	bl	8004a44 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d00c      	beq.n	80042f0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d007      	beq.n	80042f0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80042e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80042ea:	6878      	ldr	r0, [r7, #4]
 80042ec:	f000 f947 	bl	800457e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	f003 0320 	and.w	r3, r3, #32
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d00c      	beq.n	8004314 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	f003 0320 	and.w	r3, r3, #32
 8004300:	2b00      	cmp	r3, #0
 8004302:	d007      	beq.n	8004314 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f06f 0220 	mvn.w	r2, #32
 800430c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800430e:	6878      	ldr	r0, [r7, #4]
 8004310:	f000 fb8e 	bl	8004a30 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004314:	bf00      	nop
 8004316:	3710      	adds	r7, #16
 8004318:	46bd      	mov	sp, r7
 800431a:	bd80      	pop	{r7, pc}

0800431c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b084      	sub	sp, #16
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
 8004324:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004326:	2300      	movs	r3, #0
 8004328:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004330:	2b01      	cmp	r3, #1
 8004332:	d101      	bne.n	8004338 <HAL_TIM_ConfigClockSource+0x1c>
 8004334:	2302      	movs	r3, #2
 8004336:	e0b4      	b.n	80044a2 <HAL_TIM_ConfigClockSource+0x186>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2201      	movs	r2, #1
 800433c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2202      	movs	r2, #2
 8004344:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004356:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800435e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	68ba      	ldr	r2, [r7, #8]
 8004366:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004370:	d03e      	beq.n	80043f0 <HAL_TIM_ConfigClockSource+0xd4>
 8004372:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004376:	f200 8087 	bhi.w	8004488 <HAL_TIM_ConfigClockSource+0x16c>
 800437a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800437e:	f000 8086 	beq.w	800448e <HAL_TIM_ConfigClockSource+0x172>
 8004382:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004386:	d87f      	bhi.n	8004488 <HAL_TIM_ConfigClockSource+0x16c>
 8004388:	2b70      	cmp	r3, #112	@ 0x70
 800438a:	d01a      	beq.n	80043c2 <HAL_TIM_ConfigClockSource+0xa6>
 800438c:	2b70      	cmp	r3, #112	@ 0x70
 800438e:	d87b      	bhi.n	8004488 <HAL_TIM_ConfigClockSource+0x16c>
 8004390:	2b60      	cmp	r3, #96	@ 0x60
 8004392:	d050      	beq.n	8004436 <HAL_TIM_ConfigClockSource+0x11a>
 8004394:	2b60      	cmp	r3, #96	@ 0x60
 8004396:	d877      	bhi.n	8004488 <HAL_TIM_ConfigClockSource+0x16c>
 8004398:	2b50      	cmp	r3, #80	@ 0x50
 800439a:	d03c      	beq.n	8004416 <HAL_TIM_ConfigClockSource+0xfa>
 800439c:	2b50      	cmp	r3, #80	@ 0x50
 800439e:	d873      	bhi.n	8004488 <HAL_TIM_ConfigClockSource+0x16c>
 80043a0:	2b40      	cmp	r3, #64	@ 0x40
 80043a2:	d058      	beq.n	8004456 <HAL_TIM_ConfigClockSource+0x13a>
 80043a4:	2b40      	cmp	r3, #64	@ 0x40
 80043a6:	d86f      	bhi.n	8004488 <HAL_TIM_ConfigClockSource+0x16c>
 80043a8:	2b30      	cmp	r3, #48	@ 0x30
 80043aa:	d064      	beq.n	8004476 <HAL_TIM_ConfigClockSource+0x15a>
 80043ac:	2b30      	cmp	r3, #48	@ 0x30
 80043ae:	d86b      	bhi.n	8004488 <HAL_TIM_ConfigClockSource+0x16c>
 80043b0:	2b20      	cmp	r3, #32
 80043b2:	d060      	beq.n	8004476 <HAL_TIM_ConfigClockSource+0x15a>
 80043b4:	2b20      	cmp	r3, #32
 80043b6:	d867      	bhi.n	8004488 <HAL_TIM_ConfigClockSource+0x16c>
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d05c      	beq.n	8004476 <HAL_TIM_ConfigClockSource+0x15a>
 80043bc:	2b10      	cmp	r3, #16
 80043be:	d05a      	beq.n	8004476 <HAL_TIM_ConfigClockSource+0x15a>
 80043c0:	e062      	b.n	8004488 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80043d2:	f000 fa90 	bl	80048f6 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	689b      	ldr	r3, [r3, #8]
 80043dc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80043e4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	68ba      	ldr	r2, [r7, #8]
 80043ec:	609a      	str	r2, [r3, #8]
      break;
 80043ee:	e04f      	b.n	8004490 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004400:	f000 fa79 	bl	80048f6 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	689a      	ldr	r2, [r3, #8]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004412:	609a      	str	r2, [r3, #8]
      break;
 8004414:	e03c      	b.n	8004490 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004422:	461a      	mov	r2, r3
 8004424:	f000 f9ed 	bl	8004802 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	2150      	movs	r1, #80	@ 0x50
 800442e:	4618      	mov	r0, r3
 8004430:	f000 fa46 	bl	80048c0 <TIM_ITRx_SetConfig>
      break;
 8004434:	e02c      	b.n	8004490 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004442:	461a      	mov	r2, r3
 8004444:	f000 fa0c 	bl	8004860 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	2160      	movs	r1, #96	@ 0x60
 800444e:	4618      	mov	r0, r3
 8004450:	f000 fa36 	bl	80048c0 <TIM_ITRx_SetConfig>
      break;
 8004454:	e01c      	b.n	8004490 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004462:	461a      	mov	r2, r3
 8004464:	f000 f9cd 	bl	8004802 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	2140      	movs	r1, #64	@ 0x40
 800446e:	4618      	mov	r0, r3
 8004470:	f000 fa26 	bl	80048c0 <TIM_ITRx_SetConfig>
      break;
 8004474:	e00c      	b.n	8004490 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681a      	ldr	r2, [r3, #0]
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4619      	mov	r1, r3
 8004480:	4610      	mov	r0, r2
 8004482:	f000 fa1d 	bl	80048c0 <TIM_ITRx_SetConfig>
      break;
 8004486:	e003      	b.n	8004490 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004488:	2301      	movs	r3, #1
 800448a:	73fb      	strb	r3, [r7, #15]
      break;
 800448c:	e000      	b.n	8004490 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800448e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2201      	movs	r2, #1
 8004494:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2200      	movs	r2, #0
 800449c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80044a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80044a2:	4618      	mov	r0, r3
 80044a4:	3710      	adds	r7, #16
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bd80      	pop	{r7, pc}

080044aa <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80044aa:	b580      	push	{r7, lr}
 80044ac:	b082      	sub	sp, #8
 80044ae:	af00      	add	r7, sp, #0
 80044b0:	6078      	str	r0, [r7, #4]
 80044b2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80044ba:	2b01      	cmp	r3, #1
 80044bc:	d101      	bne.n	80044c2 <HAL_TIM_SlaveConfigSynchro+0x18>
 80044be:	2302      	movs	r3, #2
 80044c0:	e031      	b.n	8004526 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2201      	movs	r2, #1
 80044c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2202      	movs	r2, #2
 80044ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80044d2:	6839      	ldr	r1, [r7, #0]
 80044d4:	6878      	ldr	r0, [r7, #4]
 80044d6:	f000 f903 	bl	80046e0 <TIM_SlaveTimer_SetConfig>
 80044da:	4603      	mov	r3, r0
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d009      	beq.n	80044f4 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2201      	movs	r2, #1
 80044e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2200      	movs	r2, #0
 80044ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 80044f0:	2301      	movs	r3, #1
 80044f2:	e018      	b.n	8004526 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	68da      	ldr	r2, [r3, #12]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004502:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	68da      	ldr	r2, [r3, #12]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004512:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2201      	movs	r2, #1
 8004518:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2200      	movs	r2, #0
 8004520:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004524:	2300      	movs	r3, #0
}
 8004526:	4618      	mov	r0, r3
 8004528:	3708      	adds	r7, #8
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}

0800452e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800452e:	b480      	push	{r7}
 8004530:	b083      	sub	sp, #12
 8004532:	af00      	add	r7, sp, #0
 8004534:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004536:	bf00      	nop
 8004538:	370c      	adds	r7, #12
 800453a:	46bd      	mov	sp, r7
 800453c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004540:	4770      	bx	lr

08004542 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004542:	b480      	push	{r7}
 8004544:	b083      	sub	sp, #12
 8004546:	af00      	add	r7, sp, #0
 8004548:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800454a:	bf00      	nop
 800454c:	370c      	adds	r7, #12
 800454e:	46bd      	mov	sp, r7
 8004550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004554:	4770      	bx	lr

08004556 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004556:	b480      	push	{r7}
 8004558:	b083      	sub	sp, #12
 800455a:	af00      	add	r7, sp, #0
 800455c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800455e:	bf00      	nop
 8004560:	370c      	adds	r7, #12
 8004562:	46bd      	mov	sp, r7
 8004564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004568:	4770      	bx	lr

0800456a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800456a:	b480      	push	{r7}
 800456c:	b083      	sub	sp, #12
 800456e:	af00      	add	r7, sp, #0
 8004570:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004572:	bf00      	nop
 8004574:	370c      	adds	r7, #12
 8004576:	46bd      	mov	sp, r7
 8004578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457c:	4770      	bx	lr

0800457e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800457e:	b480      	push	{r7}
 8004580:	b083      	sub	sp, #12
 8004582:	af00      	add	r7, sp, #0
 8004584:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004586:	bf00      	nop
 8004588:	370c      	adds	r7, #12
 800458a:	46bd      	mov	sp, r7
 800458c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004590:	4770      	bx	lr
	...

08004594 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004594:	b480      	push	{r7}
 8004596:	b085      	sub	sp, #20
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
 800459c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	4a43      	ldr	r2, [pc, #268]	@ (80046b4 <TIM_Base_SetConfig+0x120>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d013      	beq.n	80045d4 <TIM_Base_SetConfig+0x40>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045b2:	d00f      	beq.n	80045d4 <TIM_Base_SetConfig+0x40>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	4a40      	ldr	r2, [pc, #256]	@ (80046b8 <TIM_Base_SetConfig+0x124>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d00b      	beq.n	80045d4 <TIM_Base_SetConfig+0x40>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	4a3f      	ldr	r2, [pc, #252]	@ (80046bc <TIM_Base_SetConfig+0x128>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d007      	beq.n	80045d4 <TIM_Base_SetConfig+0x40>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	4a3e      	ldr	r2, [pc, #248]	@ (80046c0 <TIM_Base_SetConfig+0x12c>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d003      	beq.n	80045d4 <TIM_Base_SetConfig+0x40>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	4a3d      	ldr	r2, [pc, #244]	@ (80046c4 <TIM_Base_SetConfig+0x130>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d108      	bne.n	80045e6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	68fa      	ldr	r2, [r7, #12]
 80045e2:	4313      	orrs	r3, r2
 80045e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	4a32      	ldr	r2, [pc, #200]	@ (80046b4 <TIM_Base_SetConfig+0x120>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d02b      	beq.n	8004646 <TIM_Base_SetConfig+0xb2>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045f4:	d027      	beq.n	8004646 <TIM_Base_SetConfig+0xb2>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	4a2f      	ldr	r2, [pc, #188]	@ (80046b8 <TIM_Base_SetConfig+0x124>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d023      	beq.n	8004646 <TIM_Base_SetConfig+0xb2>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	4a2e      	ldr	r2, [pc, #184]	@ (80046bc <TIM_Base_SetConfig+0x128>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d01f      	beq.n	8004646 <TIM_Base_SetConfig+0xb2>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	4a2d      	ldr	r2, [pc, #180]	@ (80046c0 <TIM_Base_SetConfig+0x12c>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d01b      	beq.n	8004646 <TIM_Base_SetConfig+0xb2>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	4a2c      	ldr	r2, [pc, #176]	@ (80046c4 <TIM_Base_SetConfig+0x130>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d017      	beq.n	8004646 <TIM_Base_SetConfig+0xb2>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	4a2b      	ldr	r2, [pc, #172]	@ (80046c8 <TIM_Base_SetConfig+0x134>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d013      	beq.n	8004646 <TIM_Base_SetConfig+0xb2>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	4a2a      	ldr	r2, [pc, #168]	@ (80046cc <TIM_Base_SetConfig+0x138>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d00f      	beq.n	8004646 <TIM_Base_SetConfig+0xb2>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	4a29      	ldr	r2, [pc, #164]	@ (80046d0 <TIM_Base_SetConfig+0x13c>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d00b      	beq.n	8004646 <TIM_Base_SetConfig+0xb2>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	4a28      	ldr	r2, [pc, #160]	@ (80046d4 <TIM_Base_SetConfig+0x140>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d007      	beq.n	8004646 <TIM_Base_SetConfig+0xb2>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	4a27      	ldr	r2, [pc, #156]	@ (80046d8 <TIM_Base_SetConfig+0x144>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d003      	beq.n	8004646 <TIM_Base_SetConfig+0xb2>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	4a26      	ldr	r2, [pc, #152]	@ (80046dc <TIM_Base_SetConfig+0x148>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d108      	bne.n	8004658 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800464c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	68db      	ldr	r3, [r3, #12]
 8004652:	68fa      	ldr	r2, [r7, #12]
 8004654:	4313      	orrs	r3, r2
 8004656:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	695b      	ldr	r3, [r3, #20]
 8004662:	4313      	orrs	r3, r2
 8004664:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	689a      	ldr	r2, [r3, #8]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	681a      	ldr	r2, [r3, #0]
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	4a0e      	ldr	r2, [pc, #56]	@ (80046b4 <TIM_Base_SetConfig+0x120>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d003      	beq.n	8004686 <TIM_Base_SetConfig+0xf2>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	4a10      	ldr	r2, [pc, #64]	@ (80046c4 <TIM_Base_SetConfig+0x130>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d103      	bne.n	800468e <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	691a      	ldr	r2, [r3, #16]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f043 0204 	orr.w	r2, r3, #4
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2201      	movs	r2, #1
 800469e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	68fa      	ldr	r2, [r7, #12]
 80046a4:	601a      	str	r2, [r3, #0]
}
 80046a6:	bf00      	nop
 80046a8:	3714      	adds	r7, #20
 80046aa:	46bd      	mov	sp, r7
 80046ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b0:	4770      	bx	lr
 80046b2:	bf00      	nop
 80046b4:	40010000 	.word	0x40010000
 80046b8:	40000400 	.word	0x40000400
 80046bc:	40000800 	.word	0x40000800
 80046c0:	40000c00 	.word	0x40000c00
 80046c4:	40010400 	.word	0x40010400
 80046c8:	40014000 	.word	0x40014000
 80046cc:	40014400 	.word	0x40014400
 80046d0:	40014800 	.word	0x40014800
 80046d4:	40001800 	.word	0x40001800
 80046d8:	40001c00 	.word	0x40001c00
 80046dc:	40002000 	.word	0x40002000

080046e0 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b086      	sub	sp, #24
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
 80046e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80046ea:	2300      	movs	r3, #0
 80046ec:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	689b      	ldr	r3, [r3, #8]
 80046f4:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80046f6:	693b      	ldr	r3, [r7, #16]
 80046f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046fc:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	693a      	ldr	r2, [r7, #16]
 8004704:	4313      	orrs	r3, r2
 8004706:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8004708:	693b      	ldr	r3, [r7, #16]
 800470a:	f023 0307 	bic.w	r3, r3, #7
 800470e:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	693a      	ldr	r2, [r7, #16]
 8004716:	4313      	orrs	r3, r2
 8004718:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	693a      	ldr	r2, [r7, #16]
 8004720:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	2b70      	cmp	r3, #112	@ 0x70
 8004728:	d01a      	beq.n	8004760 <TIM_SlaveTimer_SetConfig+0x80>
 800472a:	2b70      	cmp	r3, #112	@ 0x70
 800472c:	d860      	bhi.n	80047f0 <TIM_SlaveTimer_SetConfig+0x110>
 800472e:	2b60      	cmp	r3, #96	@ 0x60
 8004730:	d054      	beq.n	80047dc <TIM_SlaveTimer_SetConfig+0xfc>
 8004732:	2b60      	cmp	r3, #96	@ 0x60
 8004734:	d85c      	bhi.n	80047f0 <TIM_SlaveTimer_SetConfig+0x110>
 8004736:	2b50      	cmp	r3, #80	@ 0x50
 8004738:	d046      	beq.n	80047c8 <TIM_SlaveTimer_SetConfig+0xe8>
 800473a:	2b50      	cmp	r3, #80	@ 0x50
 800473c:	d858      	bhi.n	80047f0 <TIM_SlaveTimer_SetConfig+0x110>
 800473e:	2b40      	cmp	r3, #64	@ 0x40
 8004740:	d019      	beq.n	8004776 <TIM_SlaveTimer_SetConfig+0x96>
 8004742:	2b40      	cmp	r3, #64	@ 0x40
 8004744:	d854      	bhi.n	80047f0 <TIM_SlaveTimer_SetConfig+0x110>
 8004746:	2b30      	cmp	r3, #48	@ 0x30
 8004748:	d055      	beq.n	80047f6 <TIM_SlaveTimer_SetConfig+0x116>
 800474a:	2b30      	cmp	r3, #48	@ 0x30
 800474c:	d850      	bhi.n	80047f0 <TIM_SlaveTimer_SetConfig+0x110>
 800474e:	2b20      	cmp	r3, #32
 8004750:	d051      	beq.n	80047f6 <TIM_SlaveTimer_SetConfig+0x116>
 8004752:	2b20      	cmp	r3, #32
 8004754:	d84c      	bhi.n	80047f0 <TIM_SlaveTimer_SetConfig+0x110>
 8004756:	2b00      	cmp	r3, #0
 8004758:	d04d      	beq.n	80047f6 <TIM_SlaveTimer_SetConfig+0x116>
 800475a:	2b10      	cmp	r3, #16
 800475c:	d04b      	beq.n	80047f6 <TIM_SlaveTimer_SetConfig+0x116>
 800475e:	e047      	b.n	80047f0 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8004770:	f000 f8c1 	bl	80048f6 <TIM_ETR_SetConfig>
      break;
 8004774:	e040      	b.n	80047f8 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	2b05      	cmp	r3, #5
 800477c:	d101      	bne.n	8004782 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 800477e:	2301      	movs	r3, #1
 8004780:	e03b      	b.n	80047fa <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	6a1b      	ldr	r3, [r3, #32]
 8004788:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	6a1a      	ldr	r2, [r3, #32]
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f022 0201 	bic.w	r2, r2, #1
 8004798:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	699b      	ldr	r3, [r3, #24]
 80047a0:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80047a8:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	691b      	ldr	r3, [r3, #16]
 80047ae:	011b      	lsls	r3, r3, #4
 80047b0:	68ba      	ldr	r2, [r7, #8]
 80047b2:	4313      	orrs	r3, r2
 80047b4:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	68ba      	ldr	r2, [r7, #8]
 80047bc:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	68fa      	ldr	r2, [r7, #12]
 80047c4:	621a      	str	r2, [r3, #32]
      break;
 80047c6:	e017      	b.n	80047f8 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80047d4:	461a      	mov	r2, r3
 80047d6:	f000 f814 	bl	8004802 <TIM_TI1_ConfigInputStage>
      break;
 80047da:	e00d      	b.n	80047f8 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80047e8:	461a      	mov	r2, r3
 80047ea:	f000 f839 	bl	8004860 <TIM_TI2_ConfigInputStage>
      break;
 80047ee:	e003      	b.n	80047f8 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 80047f0:	2301      	movs	r3, #1
 80047f2:	75fb      	strb	r3, [r7, #23]
      break;
 80047f4:	e000      	b.n	80047f8 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 80047f6:	bf00      	nop
  }

  return status;
 80047f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80047fa:	4618      	mov	r0, r3
 80047fc:	3718      	adds	r7, #24
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}

08004802 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004802:	b480      	push	{r7}
 8004804:	b087      	sub	sp, #28
 8004806:	af00      	add	r7, sp, #0
 8004808:	60f8      	str	r0, [r7, #12]
 800480a:	60b9      	str	r1, [r7, #8]
 800480c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	6a1b      	ldr	r3, [r3, #32]
 8004812:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	6a1b      	ldr	r3, [r3, #32]
 8004818:	f023 0201 	bic.w	r2, r3, #1
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	699b      	ldr	r3, [r3, #24]
 8004824:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004826:	693b      	ldr	r3, [r7, #16]
 8004828:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800482c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	011b      	lsls	r3, r3, #4
 8004832:	693a      	ldr	r2, [r7, #16]
 8004834:	4313      	orrs	r3, r2
 8004836:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004838:	697b      	ldr	r3, [r7, #20]
 800483a:	f023 030a 	bic.w	r3, r3, #10
 800483e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004840:	697a      	ldr	r2, [r7, #20]
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	4313      	orrs	r3, r2
 8004846:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	693a      	ldr	r2, [r7, #16]
 800484c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	697a      	ldr	r2, [r7, #20]
 8004852:	621a      	str	r2, [r3, #32]
}
 8004854:	bf00      	nop
 8004856:	371c      	adds	r7, #28
 8004858:	46bd      	mov	sp, r7
 800485a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485e:	4770      	bx	lr

08004860 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004860:	b480      	push	{r7}
 8004862:	b087      	sub	sp, #28
 8004864:	af00      	add	r7, sp, #0
 8004866:	60f8      	str	r0, [r7, #12]
 8004868:	60b9      	str	r1, [r7, #8]
 800486a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	6a1b      	ldr	r3, [r3, #32]
 8004870:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	6a1b      	ldr	r3, [r3, #32]
 8004876:	f023 0210 	bic.w	r2, r3, #16
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	699b      	ldr	r3, [r3, #24]
 8004882:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004884:	693b      	ldr	r3, [r7, #16]
 8004886:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800488a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	031b      	lsls	r3, r3, #12
 8004890:	693a      	ldr	r2, [r7, #16]
 8004892:	4313      	orrs	r3, r2
 8004894:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004896:	697b      	ldr	r3, [r7, #20]
 8004898:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800489c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	011b      	lsls	r3, r3, #4
 80048a2:	697a      	ldr	r2, [r7, #20]
 80048a4:	4313      	orrs	r3, r2
 80048a6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	693a      	ldr	r2, [r7, #16]
 80048ac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	697a      	ldr	r2, [r7, #20]
 80048b2:	621a      	str	r2, [r3, #32]
}
 80048b4:	bf00      	nop
 80048b6:	371c      	adds	r7, #28
 80048b8:	46bd      	mov	sp, r7
 80048ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048be:	4770      	bx	lr

080048c0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b085      	sub	sp, #20
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
 80048c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	689b      	ldr	r3, [r3, #8]
 80048ce:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048d6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80048d8:	683a      	ldr	r2, [r7, #0]
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	4313      	orrs	r3, r2
 80048de:	f043 0307 	orr.w	r3, r3, #7
 80048e2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	68fa      	ldr	r2, [r7, #12]
 80048e8:	609a      	str	r2, [r3, #8]
}
 80048ea:	bf00      	nop
 80048ec:	3714      	adds	r7, #20
 80048ee:	46bd      	mov	sp, r7
 80048f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f4:	4770      	bx	lr

080048f6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80048f6:	b480      	push	{r7}
 80048f8:	b087      	sub	sp, #28
 80048fa:	af00      	add	r7, sp, #0
 80048fc:	60f8      	str	r0, [r7, #12]
 80048fe:	60b9      	str	r1, [r7, #8]
 8004900:	607a      	str	r2, [r7, #4]
 8004902:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	689b      	ldr	r3, [r3, #8]
 8004908:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800490a:	697b      	ldr	r3, [r7, #20]
 800490c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004910:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	021a      	lsls	r2, r3, #8
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	431a      	orrs	r2, r3
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	4313      	orrs	r3, r2
 800491e:	697a      	ldr	r2, [r7, #20]
 8004920:	4313      	orrs	r3, r2
 8004922:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	697a      	ldr	r2, [r7, #20]
 8004928:	609a      	str	r2, [r3, #8]
}
 800492a:	bf00      	nop
 800492c:	371c      	adds	r7, #28
 800492e:	46bd      	mov	sp, r7
 8004930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004934:	4770      	bx	lr
	...

08004938 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004938:	b480      	push	{r7}
 800493a:	b085      	sub	sp, #20
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
 8004940:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004948:	2b01      	cmp	r3, #1
 800494a:	d101      	bne.n	8004950 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800494c:	2302      	movs	r3, #2
 800494e:	e05a      	b.n	8004a06 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2201      	movs	r2, #1
 8004954:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2202      	movs	r2, #2
 800495c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	685b      	ldr	r3, [r3, #4]
 8004966:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	689b      	ldr	r3, [r3, #8]
 800496e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004976:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	68fa      	ldr	r2, [r7, #12]
 800497e:	4313      	orrs	r3, r2
 8004980:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	68fa      	ldr	r2, [r7, #12]
 8004988:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4a21      	ldr	r2, [pc, #132]	@ (8004a14 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d022      	beq.n	80049da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800499c:	d01d      	beq.n	80049da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4a1d      	ldr	r2, [pc, #116]	@ (8004a18 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d018      	beq.n	80049da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4a1b      	ldr	r2, [pc, #108]	@ (8004a1c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d013      	beq.n	80049da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4a1a      	ldr	r2, [pc, #104]	@ (8004a20 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d00e      	beq.n	80049da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a18      	ldr	r2, [pc, #96]	@ (8004a24 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d009      	beq.n	80049da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4a17      	ldr	r2, [pc, #92]	@ (8004a28 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d004      	beq.n	80049da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4a15      	ldr	r2, [pc, #84]	@ (8004a2c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d10c      	bne.n	80049f4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80049e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	68ba      	ldr	r2, [r7, #8]
 80049e8:	4313      	orrs	r3, r2
 80049ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	68ba      	ldr	r2, [r7, #8]
 80049f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2201      	movs	r2, #1
 80049f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2200      	movs	r2, #0
 8004a00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004a04:	2300      	movs	r3, #0
}
 8004a06:	4618      	mov	r0, r3
 8004a08:	3714      	adds	r7, #20
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a10:	4770      	bx	lr
 8004a12:	bf00      	nop
 8004a14:	40010000 	.word	0x40010000
 8004a18:	40000400 	.word	0x40000400
 8004a1c:	40000800 	.word	0x40000800
 8004a20:	40000c00 	.word	0x40000c00
 8004a24:	40010400 	.word	0x40010400
 8004a28:	40014000 	.word	0x40014000
 8004a2c:	40001800 	.word	0x40001800

08004a30 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004a30:	b480      	push	{r7}
 8004a32:	b083      	sub	sp, #12
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004a38:	bf00      	nop
 8004a3a:	370c      	adds	r7, #12
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a42:	4770      	bx	lr

08004a44 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004a44:	b480      	push	{r7}
 8004a46:	b083      	sub	sp, #12
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004a4c:	bf00      	nop
 8004a4e:	370c      	adds	r7, #12
 8004a50:	46bd      	mov	sp, r7
 8004a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a56:	4770      	bx	lr

08004a58 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b082      	sub	sp, #8
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d101      	bne.n	8004a6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a66:	2301      	movs	r3, #1
 8004a68:	e042      	b.n	8004af0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a70:	b2db      	uxtb	r3, r3
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d106      	bne.n	8004a84 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a7e:	6878      	ldr	r0, [r7, #4]
 8004a80:	f7fc f9f4 	bl	8000e6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2224      	movs	r2, #36	@ 0x24
 8004a88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	68da      	ldr	r2, [r3, #12]
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004a9a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004a9c:	6878      	ldr	r0, [r7, #4]
 8004a9e:	f000 f97f 	bl	8004da0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	691a      	ldr	r2, [r3, #16]
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004ab0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	695a      	ldr	r2, [r3, #20]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004ac0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	68da      	ldr	r2, [r3, #12]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004ad0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2220      	movs	r2, #32
 8004adc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2220      	movs	r2, #32
 8004ae4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2200      	movs	r2, #0
 8004aec:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004aee:	2300      	movs	r3, #0
}
 8004af0:	4618      	mov	r0, r3
 8004af2:	3708      	adds	r7, #8
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bd80      	pop	{r7, pc}

08004af8 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b08a      	sub	sp, #40	@ 0x28
 8004afc:	af02      	add	r7, sp, #8
 8004afe:	60f8      	str	r0, [r7, #12]
 8004b00:	60b9      	str	r1, [r7, #8]
 8004b02:	603b      	str	r3, [r7, #0]
 8004b04:	4613      	mov	r3, r2
 8004b06:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004b08:	2300      	movs	r3, #0
 8004b0a:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004b12:	b2db      	uxtb	r3, r3
 8004b14:	2b20      	cmp	r3, #32
 8004b16:	f040 8081 	bne.w	8004c1c <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d002      	beq.n	8004b26 <HAL_UART_Receive+0x2e>
 8004b20:	88fb      	ldrh	r3, [r7, #6]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d101      	bne.n	8004b2a <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8004b26:	2301      	movs	r3, #1
 8004b28:	e079      	b.n	8004c1e <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	2222      	movs	r2, #34	@ 0x22
 8004b34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004b3e:	f7fc fb85 	bl	800124c <HAL_GetTick>
 8004b42:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	88fa      	ldrh	r2, [r7, #6]
 8004b48:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	88fa      	ldrh	r2, [r7, #6]
 8004b4e:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	689b      	ldr	r3, [r3, #8]
 8004b54:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b58:	d108      	bne.n	8004b6c <HAL_UART_Receive+0x74>
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	691b      	ldr	r3, [r3, #16]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d104      	bne.n	8004b6c <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8004b62:	2300      	movs	r3, #0
 8004b64:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	61bb      	str	r3, [r7, #24]
 8004b6a:	e003      	b.n	8004b74 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004b70:	2300      	movs	r3, #0
 8004b72:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8004b74:	e047      	b.n	8004c06 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	9300      	str	r3, [sp, #0]
 8004b7a:	697b      	ldr	r3, [r7, #20]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	2120      	movs	r1, #32
 8004b80:	68f8      	ldr	r0, [r7, #12]
 8004b82:	f000 f850 	bl	8004c26 <UART_WaitOnFlagUntilTimeout>
 8004b86:	4603      	mov	r3, r0
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d005      	beq.n	8004b98 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	2220      	movs	r2, #32
 8004b90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8004b94:	2303      	movs	r3, #3
 8004b96:	e042      	b.n	8004c1e <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8004b98:	69fb      	ldr	r3, [r7, #28]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d10c      	bne.n	8004bb8 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	b29b      	uxth	r3, r3
 8004ba6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004baa:	b29a      	uxth	r2, r3
 8004bac:	69bb      	ldr	r3, [r7, #24]
 8004bae:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004bb0:	69bb      	ldr	r3, [r7, #24]
 8004bb2:	3302      	adds	r3, #2
 8004bb4:	61bb      	str	r3, [r7, #24]
 8004bb6:	e01f      	b.n	8004bf8 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	689b      	ldr	r3, [r3, #8]
 8004bbc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004bc0:	d007      	beq.n	8004bd2 <HAL_UART_Receive+0xda>
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	689b      	ldr	r3, [r3, #8]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d10a      	bne.n	8004be0 <HAL_UART_Receive+0xe8>
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	691b      	ldr	r3, [r3, #16]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d106      	bne.n	8004be0 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	b2da      	uxtb	r2, r3
 8004bda:	69fb      	ldr	r3, [r7, #28]
 8004bdc:	701a      	strb	r2, [r3, #0]
 8004bde:	e008      	b.n	8004bf2 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	b2db      	uxtb	r3, r3
 8004be8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004bec:	b2da      	uxtb	r2, r3
 8004bee:	69fb      	ldr	r3, [r7, #28]
 8004bf0:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8004bf2:	69fb      	ldr	r3, [r7, #28]
 8004bf4:	3301      	adds	r3, #1
 8004bf6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004bfc:	b29b      	uxth	r3, r3
 8004bfe:	3b01      	subs	r3, #1
 8004c00:	b29a      	uxth	r2, r3
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004c0a:	b29b      	uxth	r3, r3
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d1b2      	bne.n	8004b76 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	2220      	movs	r2, #32
 8004c14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8004c18:	2300      	movs	r3, #0
 8004c1a:	e000      	b.n	8004c1e <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8004c1c:	2302      	movs	r3, #2
  }
}
 8004c1e:	4618      	mov	r0, r3
 8004c20:	3720      	adds	r7, #32
 8004c22:	46bd      	mov	sp, r7
 8004c24:	bd80      	pop	{r7, pc}

08004c26 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004c26:	b580      	push	{r7, lr}
 8004c28:	b086      	sub	sp, #24
 8004c2a:	af00      	add	r7, sp, #0
 8004c2c:	60f8      	str	r0, [r7, #12]
 8004c2e:	60b9      	str	r1, [r7, #8]
 8004c30:	603b      	str	r3, [r7, #0]
 8004c32:	4613      	mov	r3, r2
 8004c34:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c36:	e03b      	b.n	8004cb0 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c38:	6a3b      	ldr	r3, [r7, #32]
 8004c3a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004c3e:	d037      	beq.n	8004cb0 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c40:	f7fc fb04 	bl	800124c <HAL_GetTick>
 8004c44:	4602      	mov	r2, r0
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	1ad3      	subs	r3, r2, r3
 8004c4a:	6a3a      	ldr	r2, [r7, #32]
 8004c4c:	429a      	cmp	r2, r3
 8004c4e:	d302      	bcc.n	8004c56 <UART_WaitOnFlagUntilTimeout+0x30>
 8004c50:	6a3b      	ldr	r3, [r7, #32]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d101      	bne.n	8004c5a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004c56:	2303      	movs	r3, #3
 8004c58:	e03a      	b.n	8004cd0 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	68db      	ldr	r3, [r3, #12]
 8004c60:	f003 0304 	and.w	r3, r3, #4
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d023      	beq.n	8004cb0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	2b80      	cmp	r3, #128	@ 0x80
 8004c6c:	d020      	beq.n	8004cb0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	2b40      	cmp	r3, #64	@ 0x40
 8004c72:	d01d      	beq.n	8004cb0 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f003 0308 	and.w	r3, r3, #8
 8004c7e:	2b08      	cmp	r3, #8
 8004c80:	d116      	bne.n	8004cb0 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004c82:	2300      	movs	r3, #0
 8004c84:	617b      	str	r3, [r7, #20]
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	617b      	str	r3, [r7, #20]
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	685b      	ldr	r3, [r3, #4]
 8004c94:	617b      	str	r3, [r7, #20]
 8004c96:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004c98:	68f8      	ldr	r0, [r7, #12]
 8004c9a:	f000 f81d 	bl	8004cd8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	2208      	movs	r2, #8
 8004ca2:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004cac:	2301      	movs	r3, #1
 8004cae:	e00f      	b.n	8004cd0 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	681a      	ldr	r2, [r3, #0]
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	4013      	ands	r3, r2
 8004cba:	68ba      	ldr	r2, [r7, #8]
 8004cbc:	429a      	cmp	r2, r3
 8004cbe:	bf0c      	ite	eq
 8004cc0:	2301      	moveq	r3, #1
 8004cc2:	2300      	movne	r3, #0
 8004cc4:	b2db      	uxtb	r3, r3
 8004cc6:	461a      	mov	r2, r3
 8004cc8:	79fb      	ldrb	r3, [r7, #7]
 8004cca:	429a      	cmp	r2, r3
 8004ccc:	d0b4      	beq.n	8004c38 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004cce:	2300      	movs	r3, #0
}
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	3718      	adds	r7, #24
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	bd80      	pop	{r7, pc}

08004cd8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	b095      	sub	sp, #84	@ 0x54
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	330c      	adds	r3, #12
 8004ce6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ce8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004cea:	e853 3f00 	ldrex	r3, [r3]
 8004cee:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004cf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cf2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004cf6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	330c      	adds	r3, #12
 8004cfe:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004d00:	643a      	str	r2, [r7, #64]	@ 0x40
 8004d02:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d04:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004d06:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004d08:	e841 2300 	strex	r3, r2, [r1]
 8004d0c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004d0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d1e5      	bne.n	8004ce0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	3314      	adds	r3, #20
 8004d1a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d1c:	6a3b      	ldr	r3, [r7, #32]
 8004d1e:	e853 3f00 	ldrex	r3, [r3]
 8004d22:	61fb      	str	r3, [r7, #28]
   return(result);
 8004d24:	69fb      	ldr	r3, [r7, #28]
 8004d26:	f023 0301 	bic.w	r3, r3, #1
 8004d2a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	3314      	adds	r3, #20
 8004d32:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004d34:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004d36:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d38:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004d3a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004d3c:	e841 2300 	strex	r3, r2, [r1]
 8004d40:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004d42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d1e5      	bne.n	8004d14 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d4c:	2b01      	cmp	r3, #1
 8004d4e:	d119      	bne.n	8004d84 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	330c      	adds	r3, #12
 8004d56:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	e853 3f00 	ldrex	r3, [r3]
 8004d5e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	f023 0310 	bic.w	r3, r3, #16
 8004d66:	647b      	str	r3, [r7, #68]	@ 0x44
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	330c      	adds	r3, #12
 8004d6e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004d70:	61ba      	str	r2, [r7, #24]
 8004d72:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d74:	6979      	ldr	r1, [r7, #20]
 8004d76:	69ba      	ldr	r2, [r7, #24]
 8004d78:	e841 2300 	strex	r3, r2, [r1]
 8004d7c:	613b      	str	r3, [r7, #16]
   return(result);
 8004d7e:	693b      	ldr	r3, [r7, #16]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d1e5      	bne.n	8004d50 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2220      	movs	r2, #32
 8004d88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004d92:	bf00      	nop
 8004d94:	3754      	adds	r7, #84	@ 0x54
 8004d96:	46bd      	mov	sp, r7
 8004d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9c:	4770      	bx	lr
	...

08004da0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004da0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004da4:	b0c0      	sub	sp, #256	@ 0x100
 8004da6:	af00      	add	r7, sp, #0
 8004da8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004dac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	691b      	ldr	r3, [r3, #16]
 8004db4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004db8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dbc:	68d9      	ldr	r1, [r3, #12]
 8004dbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dc2:	681a      	ldr	r2, [r3, #0]
 8004dc4:	ea40 0301 	orr.w	r3, r0, r1
 8004dc8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004dca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dce:	689a      	ldr	r2, [r3, #8]
 8004dd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dd4:	691b      	ldr	r3, [r3, #16]
 8004dd6:	431a      	orrs	r2, r3
 8004dd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ddc:	695b      	ldr	r3, [r3, #20]
 8004dde:	431a      	orrs	r2, r3
 8004de0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004de4:	69db      	ldr	r3, [r3, #28]
 8004de6:	4313      	orrs	r3, r2
 8004de8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004dec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	68db      	ldr	r3, [r3, #12]
 8004df4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004df8:	f021 010c 	bic.w	r1, r1, #12
 8004dfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e00:	681a      	ldr	r2, [r3, #0]
 8004e02:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004e06:	430b      	orrs	r3, r1
 8004e08:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004e0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	695b      	ldr	r3, [r3, #20]
 8004e12:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004e16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e1a:	6999      	ldr	r1, [r3, #24]
 8004e1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e20:	681a      	ldr	r2, [r3, #0]
 8004e22:	ea40 0301 	orr.w	r3, r0, r1
 8004e26:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004e28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e2c:	681a      	ldr	r2, [r3, #0]
 8004e2e:	4b8f      	ldr	r3, [pc, #572]	@ (800506c <UART_SetConfig+0x2cc>)
 8004e30:	429a      	cmp	r2, r3
 8004e32:	d005      	beq.n	8004e40 <UART_SetConfig+0xa0>
 8004e34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e38:	681a      	ldr	r2, [r3, #0]
 8004e3a:	4b8d      	ldr	r3, [pc, #564]	@ (8005070 <UART_SetConfig+0x2d0>)
 8004e3c:	429a      	cmp	r2, r3
 8004e3e:	d104      	bne.n	8004e4a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004e40:	f7fe f8b0 	bl	8002fa4 <HAL_RCC_GetPCLK2Freq>
 8004e44:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004e48:	e003      	b.n	8004e52 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004e4a:	f7fe f897 	bl	8002f7c <HAL_RCC_GetPCLK1Freq>
 8004e4e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e56:	69db      	ldr	r3, [r3, #28]
 8004e58:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004e5c:	f040 810c 	bne.w	8005078 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004e60:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e64:	2200      	movs	r2, #0
 8004e66:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004e6a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004e6e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004e72:	4622      	mov	r2, r4
 8004e74:	462b      	mov	r3, r5
 8004e76:	1891      	adds	r1, r2, r2
 8004e78:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004e7a:	415b      	adcs	r3, r3
 8004e7c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004e7e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004e82:	4621      	mov	r1, r4
 8004e84:	eb12 0801 	adds.w	r8, r2, r1
 8004e88:	4629      	mov	r1, r5
 8004e8a:	eb43 0901 	adc.w	r9, r3, r1
 8004e8e:	f04f 0200 	mov.w	r2, #0
 8004e92:	f04f 0300 	mov.w	r3, #0
 8004e96:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004e9a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004e9e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004ea2:	4690      	mov	r8, r2
 8004ea4:	4699      	mov	r9, r3
 8004ea6:	4623      	mov	r3, r4
 8004ea8:	eb18 0303 	adds.w	r3, r8, r3
 8004eac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004eb0:	462b      	mov	r3, r5
 8004eb2:	eb49 0303 	adc.w	r3, r9, r3
 8004eb6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004eba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004ec6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004eca:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004ece:	460b      	mov	r3, r1
 8004ed0:	18db      	adds	r3, r3, r3
 8004ed2:	653b      	str	r3, [r7, #80]	@ 0x50
 8004ed4:	4613      	mov	r3, r2
 8004ed6:	eb42 0303 	adc.w	r3, r2, r3
 8004eda:	657b      	str	r3, [r7, #84]	@ 0x54
 8004edc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004ee0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004ee4:	f7fb f98e 	bl	8000204 <__aeabi_uldivmod>
 8004ee8:	4602      	mov	r2, r0
 8004eea:	460b      	mov	r3, r1
 8004eec:	4b61      	ldr	r3, [pc, #388]	@ (8005074 <UART_SetConfig+0x2d4>)
 8004eee:	fba3 2302 	umull	r2, r3, r3, r2
 8004ef2:	095b      	lsrs	r3, r3, #5
 8004ef4:	011c      	lsls	r4, r3, #4
 8004ef6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004efa:	2200      	movs	r2, #0
 8004efc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004f00:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004f04:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004f08:	4642      	mov	r2, r8
 8004f0a:	464b      	mov	r3, r9
 8004f0c:	1891      	adds	r1, r2, r2
 8004f0e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004f10:	415b      	adcs	r3, r3
 8004f12:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004f14:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004f18:	4641      	mov	r1, r8
 8004f1a:	eb12 0a01 	adds.w	sl, r2, r1
 8004f1e:	4649      	mov	r1, r9
 8004f20:	eb43 0b01 	adc.w	fp, r3, r1
 8004f24:	f04f 0200 	mov.w	r2, #0
 8004f28:	f04f 0300 	mov.w	r3, #0
 8004f2c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004f30:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004f34:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004f38:	4692      	mov	sl, r2
 8004f3a:	469b      	mov	fp, r3
 8004f3c:	4643      	mov	r3, r8
 8004f3e:	eb1a 0303 	adds.w	r3, sl, r3
 8004f42:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004f46:	464b      	mov	r3, r9
 8004f48:	eb4b 0303 	adc.w	r3, fp, r3
 8004f4c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004f50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f54:	685b      	ldr	r3, [r3, #4]
 8004f56:	2200      	movs	r2, #0
 8004f58:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004f5c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004f60:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004f64:	460b      	mov	r3, r1
 8004f66:	18db      	adds	r3, r3, r3
 8004f68:	643b      	str	r3, [r7, #64]	@ 0x40
 8004f6a:	4613      	mov	r3, r2
 8004f6c:	eb42 0303 	adc.w	r3, r2, r3
 8004f70:	647b      	str	r3, [r7, #68]	@ 0x44
 8004f72:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004f76:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004f7a:	f7fb f943 	bl	8000204 <__aeabi_uldivmod>
 8004f7e:	4602      	mov	r2, r0
 8004f80:	460b      	mov	r3, r1
 8004f82:	4611      	mov	r1, r2
 8004f84:	4b3b      	ldr	r3, [pc, #236]	@ (8005074 <UART_SetConfig+0x2d4>)
 8004f86:	fba3 2301 	umull	r2, r3, r3, r1
 8004f8a:	095b      	lsrs	r3, r3, #5
 8004f8c:	2264      	movs	r2, #100	@ 0x64
 8004f8e:	fb02 f303 	mul.w	r3, r2, r3
 8004f92:	1acb      	subs	r3, r1, r3
 8004f94:	00db      	lsls	r3, r3, #3
 8004f96:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004f9a:	4b36      	ldr	r3, [pc, #216]	@ (8005074 <UART_SetConfig+0x2d4>)
 8004f9c:	fba3 2302 	umull	r2, r3, r3, r2
 8004fa0:	095b      	lsrs	r3, r3, #5
 8004fa2:	005b      	lsls	r3, r3, #1
 8004fa4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004fa8:	441c      	add	r4, r3
 8004faa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004fae:	2200      	movs	r2, #0
 8004fb0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004fb4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004fb8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004fbc:	4642      	mov	r2, r8
 8004fbe:	464b      	mov	r3, r9
 8004fc0:	1891      	adds	r1, r2, r2
 8004fc2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004fc4:	415b      	adcs	r3, r3
 8004fc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004fc8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004fcc:	4641      	mov	r1, r8
 8004fce:	1851      	adds	r1, r2, r1
 8004fd0:	6339      	str	r1, [r7, #48]	@ 0x30
 8004fd2:	4649      	mov	r1, r9
 8004fd4:	414b      	adcs	r3, r1
 8004fd6:	637b      	str	r3, [r7, #52]	@ 0x34
 8004fd8:	f04f 0200 	mov.w	r2, #0
 8004fdc:	f04f 0300 	mov.w	r3, #0
 8004fe0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004fe4:	4659      	mov	r1, fp
 8004fe6:	00cb      	lsls	r3, r1, #3
 8004fe8:	4651      	mov	r1, sl
 8004fea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004fee:	4651      	mov	r1, sl
 8004ff0:	00ca      	lsls	r2, r1, #3
 8004ff2:	4610      	mov	r0, r2
 8004ff4:	4619      	mov	r1, r3
 8004ff6:	4603      	mov	r3, r0
 8004ff8:	4642      	mov	r2, r8
 8004ffa:	189b      	adds	r3, r3, r2
 8004ffc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005000:	464b      	mov	r3, r9
 8005002:	460a      	mov	r2, r1
 8005004:	eb42 0303 	adc.w	r3, r2, r3
 8005008:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800500c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005010:	685b      	ldr	r3, [r3, #4]
 8005012:	2200      	movs	r2, #0
 8005014:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005018:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800501c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005020:	460b      	mov	r3, r1
 8005022:	18db      	adds	r3, r3, r3
 8005024:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005026:	4613      	mov	r3, r2
 8005028:	eb42 0303 	adc.w	r3, r2, r3
 800502c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800502e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005032:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005036:	f7fb f8e5 	bl	8000204 <__aeabi_uldivmod>
 800503a:	4602      	mov	r2, r0
 800503c:	460b      	mov	r3, r1
 800503e:	4b0d      	ldr	r3, [pc, #52]	@ (8005074 <UART_SetConfig+0x2d4>)
 8005040:	fba3 1302 	umull	r1, r3, r3, r2
 8005044:	095b      	lsrs	r3, r3, #5
 8005046:	2164      	movs	r1, #100	@ 0x64
 8005048:	fb01 f303 	mul.w	r3, r1, r3
 800504c:	1ad3      	subs	r3, r2, r3
 800504e:	00db      	lsls	r3, r3, #3
 8005050:	3332      	adds	r3, #50	@ 0x32
 8005052:	4a08      	ldr	r2, [pc, #32]	@ (8005074 <UART_SetConfig+0x2d4>)
 8005054:	fba2 2303 	umull	r2, r3, r2, r3
 8005058:	095b      	lsrs	r3, r3, #5
 800505a:	f003 0207 	and.w	r2, r3, #7
 800505e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4422      	add	r2, r4
 8005066:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005068:	e106      	b.n	8005278 <UART_SetConfig+0x4d8>
 800506a:	bf00      	nop
 800506c:	40011000 	.word	0x40011000
 8005070:	40011400 	.word	0x40011400
 8005074:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005078:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800507c:	2200      	movs	r2, #0
 800507e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005082:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005086:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800508a:	4642      	mov	r2, r8
 800508c:	464b      	mov	r3, r9
 800508e:	1891      	adds	r1, r2, r2
 8005090:	6239      	str	r1, [r7, #32]
 8005092:	415b      	adcs	r3, r3
 8005094:	627b      	str	r3, [r7, #36]	@ 0x24
 8005096:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800509a:	4641      	mov	r1, r8
 800509c:	1854      	adds	r4, r2, r1
 800509e:	4649      	mov	r1, r9
 80050a0:	eb43 0501 	adc.w	r5, r3, r1
 80050a4:	f04f 0200 	mov.w	r2, #0
 80050a8:	f04f 0300 	mov.w	r3, #0
 80050ac:	00eb      	lsls	r3, r5, #3
 80050ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80050b2:	00e2      	lsls	r2, r4, #3
 80050b4:	4614      	mov	r4, r2
 80050b6:	461d      	mov	r5, r3
 80050b8:	4643      	mov	r3, r8
 80050ba:	18e3      	adds	r3, r4, r3
 80050bc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80050c0:	464b      	mov	r3, r9
 80050c2:	eb45 0303 	adc.w	r3, r5, r3
 80050c6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80050ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	2200      	movs	r2, #0
 80050d2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80050d6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80050da:	f04f 0200 	mov.w	r2, #0
 80050de:	f04f 0300 	mov.w	r3, #0
 80050e2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80050e6:	4629      	mov	r1, r5
 80050e8:	008b      	lsls	r3, r1, #2
 80050ea:	4621      	mov	r1, r4
 80050ec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80050f0:	4621      	mov	r1, r4
 80050f2:	008a      	lsls	r2, r1, #2
 80050f4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80050f8:	f7fb f884 	bl	8000204 <__aeabi_uldivmod>
 80050fc:	4602      	mov	r2, r0
 80050fe:	460b      	mov	r3, r1
 8005100:	4b60      	ldr	r3, [pc, #384]	@ (8005284 <UART_SetConfig+0x4e4>)
 8005102:	fba3 2302 	umull	r2, r3, r3, r2
 8005106:	095b      	lsrs	r3, r3, #5
 8005108:	011c      	lsls	r4, r3, #4
 800510a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800510e:	2200      	movs	r2, #0
 8005110:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005114:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005118:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800511c:	4642      	mov	r2, r8
 800511e:	464b      	mov	r3, r9
 8005120:	1891      	adds	r1, r2, r2
 8005122:	61b9      	str	r1, [r7, #24]
 8005124:	415b      	adcs	r3, r3
 8005126:	61fb      	str	r3, [r7, #28]
 8005128:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800512c:	4641      	mov	r1, r8
 800512e:	1851      	adds	r1, r2, r1
 8005130:	6139      	str	r1, [r7, #16]
 8005132:	4649      	mov	r1, r9
 8005134:	414b      	adcs	r3, r1
 8005136:	617b      	str	r3, [r7, #20]
 8005138:	f04f 0200 	mov.w	r2, #0
 800513c:	f04f 0300 	mov.w	r3, #0
 8005140:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005144:	4659      	mov	r1, fp
 8005146:	00cb      	lsls	r3, r1, #3
 8005148:	4651      	mov	r1, sl
 800514a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800514e:	4651      	mov	r1, sl
 8005150:	00ca      	lsls	r2, r1, #3
 8005152:	4610      	mov	r0, r2
 8005154:	4619      	mov	r1, r3
 8005156:	4603      	mov	r3, r0
 8005158:	4642      	mov	r2, r8
 800515a:	189b      	adds	r3, r3, r2
 800515c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005160:	464b      	mov	r3, r9
 8005162:	460a      	mov	r2, r1
 8005164:	eb42 0303 	adc.w	r3, r2, r3
 8005168:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800516c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005170:	685b      	ldr	r3, [r3, #4]
 8005172:	2200      	movs	r2, #0
 8005174:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005176:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005178:	f04f 0200 	mov.w	r2, #0
 800517c:	f04f 0300 	mov.w	r3, #0
 8005180:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005184:	4649      	mov	r1, r9
 8005186:	008b      	lsls	r3, r1, #2
 8005188:	4641      	mov	r1, r8
 800518a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800518e:	4641      	mov	r1, r8
 8005190:	008a      	lsls	r2, r1, #2
 8005192:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005196:	f7fb f835 	bl	8000204 <__aeabi_uldivmod>
 800519a:	4602      	mov	r2, r0
 800519c:	460b      	mov	r3, r1
 800519e:	4611      	mov	r1, r2
 80051a0:	4b38      	ldr	r3, [pc, #224]	@ (8005284 <UART_SetConfig+0x4e4>)
 80051a2:	fba3 2301 	umull	r2, r3, r3, r1
 80051a6:	095b      	lsrs	r3, r3, #5
 80051a8:	2264      	movs	r2, #100	@ 0x64
 80051aa:	fb02 f303 	mul.w	r3, r2, r3
 80051ae:	1acb      	subs	r3, r1, r3
 80051b0:	011b      	lsls	r3, r3, #4
 80051b2:	3332      	adds	r3, #50	@ 0x32
 80051b4:	4a33      	ldr	r2, [pc, #204]	@ (8005284 <UART_SetConfig+0x4e4>)
 80051b6:	fba2 2303 	umull	r2, r3, r2, r3
 80051ba:	095b      	lsrs	r3, r3, #5
 80051bc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80051c0:	441c      	add	r4, r3
 80051c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80051c6:	2200      	movs	r2, #0
 80051c8:	673b      	str	r3, [r7, #112]	@ 0x70
 80051ca:	677a      	str	r2, [r7, #116]	@ 0x74
 80051cc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80051d0:	4642      	mov	r2, r8
 80051d2:	464b      	mov	r3, r9
 80051d4:	1891      	adds	r1, r2, r2
 80051d6:	60b9      	str	r1, [r7, #8]
 80051d8:	415b      	adcs	r3, r3
 80051da:	60fb      	str	r3, [r7, #12]
 80051dc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80051e0:	4641      	mov	r1, r8
 80051e2:	1851      	adds	r1, r2, r1
 80051e4:	6039      	str	r1, [r7, #0]
 80051e6:	4649      	mov	r1, r9
 80051e8:	414b      	adcs	r3, r1
 80051ea:	607b      	str	r3, [r7, #4]
 80051ec:	f04f 0200 	mov.w	r2, #0
 80051f0:	f04f 0300 	mov.w	r3, #0
 80051f4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80051f8:	4659      	mov	r1, fp
 80051fa:	00cb      	lsls	r3, r1, #3
 80051fc:	4651      	mov	r1, sl
 80051fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005202:	4651      	mov	r1, sl
 8005204:	00ca      	lsls	r2, r1, #3
 8005206:	4610      	mov	r0, r2
 8005208:	4619      	mov	r1, r3
 800520a:	4603      	mov	r3, r0
 800520c:	4642      	mov	r2, r8
 800520e:	189b      	adds	r3, r3, r2
 8005210:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005212:	464b      	mov	r3, r9
 8005214:	460a      	mov	r2, r1
 8005216:	eb42 0303 	adc.w	r3, r2, r3
 800521a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800521c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005220:	685b      	ldr	r3, [r3, #4]
 8005222:	2200      	movs	r2, #0
 8005224:	663b      	str	r3, [r7, #96]	@ 0x60
 8005226:	667a      	str	r2, [r7, #100]	@ 0x64
 8005228:	f04f 0200 	mov.w	r2, #0
 800522c:	f04f 0300 	mov.w	r3, #0
 8005230:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005234:	4649      	mov	r1, r9
 8005236:	008b      	lsls	r3, r1, #2
 8005238:	4641      	mov	r1, r8
 800523a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800523e:	4641      	mov	r1, r8
 8005240:	008a      	lsls	r2, r1, #2
 8005242:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005246:	f7fa ffdd 	bl	8000204 <__aeabi_uldivmod>
 800524a:	4602      	mov	r2, r0
 800524c:	460b      	mov	r3, r1
 800524e:	4b0d      	ldr	r3, [pc, #52]	@ (8005284 <UART_SetConfig+0x4e4>)
 8005250:	fba3 1302 	umull	r1, r3, r3, r2
 8005254:	095b      	lsrs	r3, r3, #5
 8005256:	2164      	movs	r1, #100	@ 0x64
 8005258:	fb01 f303 	mul.w	r3, r1, r3
 800525c:	1ad3      	subs	r3, r2, r3
 800525e:	011b      	lsls	r3, r3, #4
 8005260:	3332      	adds	r3, #50	@ 0x32
 8005262:	4a08      	ldr	r2, [pc, #32]	@ (8005284 <UART_SetConfig+0x4e4>)
 8005264:	fba2 2303 	umull	r2, r3, r2, r3
 8005268:	095b      	lsrs	r3, r3, #5
 800526a:	f003 020f 	and.w	r2, r3, #15
 800526e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4422      	add	r2, r4
 8005276:	609a      	str	r2, [r3, #8]
}
 8005278:	bf00      	nop
 800527a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800527e:	46bd      	mov	sp, r7
 8005280:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005284:	51eb851f 	.word	0x51eb851f

08005288 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005288:	b084      	sub	sp, #16
 800528a:	b580      	push	{r7, lr}
 800528c:	b084      	sub	sp, #16
 800528e:	af00      	add	r7, sp, #0
 8005290:	6078      	str	r0, [r7, #4]
 8005292:	f107 001c 	add.w	r0, r7, #28
 8005296:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800529a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800529e:	2b01      	cmp	r3, #1
 80052a0:	d123      	bne.n	80052ea <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052a6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	68db      	ldr	r3, [r3, #12]
 80052b2:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80052b6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80052ba:	687a      	ldr	r2, [r7, #4]
 80052bc:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	68db      	ldr	r3, [r3, #12]
 80052c2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80052ca:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80052ce:	2b01      	cmp	r3, #1
 80052d0:	d105      	bne.n	80052de <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	68db      	ldr	r3, [r3, #12]
 80052d6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80052de:	6878      	ldr	r0, [r7, #4]
 80052e0:	f001 fae2 	bl	80068a8 <USB_CoreReset>
 80052e4:	4603      	mov	r3, r0
 80052e6:	73fb      	strb	r3, [r7, #15]
 80052e8:	e01b      	b.n	8005322 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	68db      	ldr	r3, [r3, #12]
 80052ee:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80052f6:	6878      	ldr	r0, [r7, #4]
 80052f8:	f001 fad6 	bl	80068a8 <USB_CoreReset>
 80052fc:	4603      	mov	r3, r0
 80052fe:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005300:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005304:	2b00      	cmp	r3, #0
 8005306:	d106      	bne.n	8005316 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800530c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	639a      	str	r2, [r3, #56]	@ 0x38
 8005314:	e005      	b.n	8005322 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800531a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005322:	7fbb      	ldrb	r3, [r7, #30]
 8005324:	2b01      	cmp	r3, #1
 8005326:	d10b      	bne.n	8005340 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	689b      	ldr	r3, [r3, #8]
 800532c:	f043 0206 	orr.w	r2, r3, #6
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	689b      	ldr	r3, [r3, #8]
 8005338:	f043 0220 	orr.w	r2, r3, #32
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005340:	7bfb      	ldrb	r3, [r7, #15]
}
 8005342:	4618      	mov	r0, r3
 8005344:	3710      	adds	r7, #16
 8005346:	46bd      	mov	sp, r7
 8005348:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800534c:	b004      	add	sp, #16
 800534e:	4770      	bx	lr

08005350 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005350:	b480      	push	{r7}
 8005352:	b087      	sub	sp, #28
 8005354:	af00      	add	r7, sp, #0
 8005356:	60f8      	str	r0, [r7, #12]
 8005358:	60b9      	str	r1, [r7, #8]
 800535a:	4613      	mov	r3, r2
 800535c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800535e:	79fb      	ldrb	r3, [r7, #7]
 8005360:	2b02      	cmp	r3, #2
 8005362:	d165      	bne.n	8005430 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	4a41      	ldr	r2, [pc, #260]	@ (800546c <USB_SetTurnaroundTime+0x11c>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d906      	bls.n	800537a <USB_SetTurnaroundTime+0x2a>
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	4a40      	ldr	r2, [pc, #256]	@ (8005470 <USB_SetTurnaroundTime+0x120>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d202      	bcs.n	800537a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005374:	230f      	movs	r3, #15
 8005376:	617b      	str	r3, [r7, #20]
 8005378:	e062      	b.n	8005440 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800537a:	68bb      	ldr	r3, [r7, #8]
 800537c:	4a3c      	ldr	r2, [pc, #240]	@ (8005470 <USB_SetTurnaroundTime+0x120>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d306      	bcc.n	8005390 <USB_SetTurnaroundTime+0x40>
 8005382:	68bb      	ldr	r3, [r7, #8]
 8005384:	4a3b      	ldr	r2, [pc, #236]	@ (8005474 <USB_SetTurnaroundTime+0x124>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d202      	bcs.n	8005390 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800538a:	230e      	movs	r3, #14
 800538c:	617b      	str	r3, [r7, #20]
 800538e:	e057      	b.n	8005440 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	4a38      	ldr	r2, [pc, #224]	@ (8005474 <USB_SetTurnaroundTime+0x124>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d306      	bcc.n	80053a6 <USB_SetTurnaroundTime+0x56>
 8005398:	68bb      	ldr	r3, [r7, #8]
 800539a:	4a37      	ldr	r2, [pc, #220]	@ (8005478 <USB_SetTurnaroundTime+0x128>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d202      	bcs.n	80053a6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80053a0:	230d      	movs	r3, #13
 80053a2:	617b      	str	r3, [r7, #20]
 80053a4:	e04c      	b.n	8005440 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80053a6:	68bb      	ldr	r3, [r7, #8]
 80053a8:	4a33      	ldr	r2, [pc, #204]	@ (8005478 <USB_SetTurnaroundTime+0x128>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d306      	bcc.n	80053bc <USB_SetTurnaroundTime+0x6c>
 80053ae:	68bb      	ldr	r3, [r7, #8]
 80053b0:	4a32      	ldr	r2, [pc, #200]	@ (800547c <USB_SetTurnaroundTime+0x12c>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d802      	bhi.n	80053bc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80053b6:	230c      	movs	r3, #12
 80053b8:	617b      	str	r3, [r7, #20]
 80053ba:	e041      	b.n	8005440 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	4a2f      	ldr	r2, [pc, #188]	@ (800547c <USB_SetTurnaroundTime+0x12c>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d906      	bls.n	80053d2 <USB_SetTurnaroundTime+0x82>
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	4a2e      	ldr	r2, [pc, #184]	@ (8005480 <USB_SetTurnaroundTime+0x130>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d802      	bhi.n	80053d2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80053cc:	230b      	movs	r3, #11
 80053ce:	617b      	str	r3, [r7, #20]
 80053d0:	e036      	b.n	8005440 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80053d2:	68bb      	ldr	r3, [r7, #8]
 80053d4:	4a2a      	ldr	r2, [pc, #168]	@ (8005480 <USB_SetTurnaroundTime+0x130>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d906      	bls.n	80053e8 <USB_SetTurnaroundTime+0x98>
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	4a29      	ldr	r2, [pc, #164]	@ (8005484 <USB_SetTurnaroundTime+0x134>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d802      	bhi.n	80053e8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80053e2:	230a      	movs	r3, #10
 80053e4:	617b      	str	r3, [r7, #20]
 80053e6:	e02b      	b.n	8005440 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	4a26      	ldr	r2, [pc, #152]	@ (8005484 <USB_SetTurnaroundTime+0x134>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d906      	bls.n	80053fe <USB_SetTurnaroundTime+0xae>
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	4a25      	ldr	r2, [pc, #148]	@ (8005488 <USB_SetTurnaroundTime+0x138>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d202      	bcs.n	80053fe <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80053f8:	2309      	movs	r3, #9
 80053fa:	617b      	str	r3, [r7, #20]
 80053fc:	e020      	b.n	8005440 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	4a21      	ldr	r2, [pc, #132]	@ (8005488 <USB_SetTurnaroundTime+0x138>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d306      	bcc.n	8005414 <USB_SetTurnaroundTime+0xc4>
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	4a20      	ldr	r2, [pc, #128]	@ (800548c <USB_SetTurnaroundTime+0x13c>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d802      	bhi.n	8005414 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800540e:	2308      	movs	r3, #8
 8005410:	617b      	str	r3, [r7, #20]
 8005412:	e015      	b.n	8005440 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	4a1d      	ldr	r2, [pc, #116]	@ (800548c <USB_SetTurnaroundTime+0x13c>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d906      	bls.n	800542a <USB_SetTurnaroundTime+0xda>
 800541c:	68bb      	ldr	r3, [r7, #8]
 800541e:	4a1c      	ldr	r2, [pc, #112]	@ (8005490 <USB_SetTurnaroundTime+0x140>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d202      	bcs.n	800542a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005424:	2307      	movs	r3, #7
 8005426:	617b      	str	r3, [r7, #20]
 8005428:	e00a      	b.n	8005440 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800542a:	2306      	movs	r3, #6
 800542c:	617b      	str	r3, [r7, #20]
 800542e:	e007      	b.n	8005440 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005430:	79fb      	ldrb	r3, [r7, #7]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d102      	bne.n	800543c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005436:	2309      	movs	r3, #9
 8005438:	617b      	str	r3, [r7, #20]
 800543a:	e001      	b.n	8005440 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800543c:	2309      	movs	r3, #9
 800543e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	68db      	ldr	r3, [r3, #12]
 8005444:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	68da      	ldr	r2, [r3, #12]
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	029b      	lsls	r3, r3, #10
 8005454:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8005458:	431a      	orrs	r2, r3
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800545e:	2300      	movs	r3, #0
}
 8005460:	4618      	mov	r0, r3
 8005462:	371c      	adds	r7, #28
 8005464:	46bd      	mov	sp, r7
 8005466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546a:	4770      	bx	lr
 800546c:	00d8acbf 	.word	0x00d8acbf
 8005470:	00e4e1c0 	.word	0x00e4e1c0
 8005474:	00f42400 	.word	0x00f42400
 8005478:	01067380 	.word	0x01067380
 800547c:	011a499f 	.word	0x011a499f
 8005480:	01312cff 	.word	0x01312cff
 8005484:	014ca43f 	.word	0x014ca43f
 8005488:	016e3600 	.word	0x016e3600
 800548c:	01a6ab1f 	.word	0x01a6ab1f
 8005490:	01e84800 	.word	0x01e84800

08005494 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005494:	b480      	push	{r7}
 8005496:	b083      	sub	sp, #12
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	689b      	ldr	r3, [r3, #8]
 80054a0:	f043 0201 	orr.w	r2, r3, #1
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80054a8:	2300      	movs	r3, #0
}
 80054aa:	4618      	mov	r0, r3
 80054ac:	370c      	adds	r7, #12
 80054ae:	46bd      	mov	sp, r7
 80054b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b4:	4770      	bx	lr

080054b6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80054b6:	b480      	push	{r7}
 80054b8:	b083      	sub	sp, #12
 80054ba:	af00      	add	r7, sp, #0
 80054bc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	689b      	ldr	r3, [r3, #8]
 80054c2:	f023 0201 	bic.w	r2, r3, #1
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80054ca:	2300      	movs	r3, #0
}
 80054cc:	4618      	mov	r0, r3
 80054ce:	370c      	adds	r7, #12
 80054d0:	46bd      	mov	sp, r7
 80054d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d6:	4770      	bx	lr

080054d8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b084      	sub	sp, #16
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
 80054e0:	460b      	mov	r3, r1
 80054e2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80054e4:	2300      	movs	r3, #0
 80054e6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	68db      	ldr	r3, [r3, #12]
 80054ec:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80054f4:	78fb      	ldrb	r3, [r7, #3]
 80054f6:	2b01      	cmp	r3, #1
 80054f8:	d115      	bne.n	8005526 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	68db      	ldr	r3, [r3, #12]
 80054fe:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005506:	200a      	movs	r0, #10
 8005508:	f7fb feac 	bl	8001264 <HAL_Delay>
      ms += 10U;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	330a      	adds	r3, #10
 8005510:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005512:	6878      	ldr	r0, [r7, #4]
 8005514:	f001 f939 	bl	800678a <USB_GetMode>
 8005518:	4603      	mov	r3, r0
 800551a:	2b01      	cmp	r3, #1
 800551c:	d01e      	beq.n	800555c <USB_SetCurrentMode+0x84>
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	2bc7      	cmp	r3, #199	@ 0xc7
 8005522:	d9f0      	bls.n	8005506 <USB_SetCurrentMode+0x2e>
 8005524:	e01a      	b.n	800555c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005526:	78fb      	ldrb	r3, [r7, #3]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d115      	bne.n	8005558 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	68db      	ldr	r3, [r3, #12]
 8005530:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005538:	200a      	movs	r0, #10
 800553a:	f7fb fe93 	bl	8001264 <HAL_Delay>
      ms += 10U;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	330a      	adds	r3, #10
 8005542:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005544:	6878      	ldr	r0, [r7, #4]
 8005546:	f001 f920 	bl	800678a <USB_GetMode>
 800554a:	4603      	mov	r3, r0
 800554c:	2b00      	cmp	r3, #0
 800554e:	d005      	beq.n	800555c <USB_SetCurrentMode+0x84>
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	2bc7      	cmp	r3, #199	@ 0xc7
 8005554:	d9f0      	bls.n	8005538 <USB_SetCurrentMode+0x60>
 8005556:	e001      	b.n	800555c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005558:	2301      	movs	r3, #1
 800555a:	e005      	b.n	8005568 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	2bc8      	cmp	r3, #200	@ 0xc8
 8005560:	d101      	bne.n	8005566 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005562:	2301      	movs	r3, #1
 8005564:	e000      	b.n	8005568 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005566:	2300      	movs	r3, #0
}
 8005568:	4618      	mov	r0, r3
 800556a:	3710      	adds	r7, #16
 800556c:	46bd      	mov	sp, r7
 800556e:	bd80      	pop	{r7, pc}

08005570 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005570:	b084      	sub	sp, #16
 8005572:	b580      	push	{r7, lr}
 8005574:	b086      	sub	sp, #24
 8005576:	af00      	add	r7, sp, #0
 8005578:	6078      	str	r0, [r7, #4]
 800557a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800557e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005582:	2300      	movs	r3, #0
 8005584:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800558a:	2300      	movs	r3, #0
 800558c:	613b      	str	r3, [r7, #16]
 800558e:	e009      	b.n	80055a4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005590:	687a      	ldr	r2, [r7, #4]
 8005592:	693b      	ldr	r3, [r7, #16]
 8005594:	3340      	adds	r3, #64	@ 0x40
 8005596:	009b      	lsls	r3, r3, #2
 8005598:	4413      	add	r3, r2
 800559a:	2200      	movs	r2, #0
 800559c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800559e:	693b      	ldr	r3, [r7, #16]
 80055a0:	3301      	adds	r3, #1
 80055a2:	613b      	str	r3, [r7, #16]
 80055a4:	693b      	ldr	r3, [r7, #16]
 80055a6:	2b0e      	cmp	r3, #14
 80055a8:	d9f2      	bls.n	8005590 <USB_DevInit+0x20>

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80055aa:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d11c      	bne.n	80055ec <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055b8:	685b      	ldr	r3, [r3, #4]
 80055ba:	68fa      	ldr	r2, [r7, #12]
 80055bc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80055c0:	f043 0302 	orr.w	r3, r3, #2
 80055c4:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055ca:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	601a      	str	r2, [r3, #0]
 80055ea:	e005      	b.n	80055f8 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055f0:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80055fe:	461a      	mov	r2, r3
 8005600:	2300      	movs	r3, #0
 8005602:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005604:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8005608:	2b01      	cmp	r3, #1
 800560a:	d10d      	bne.n	8005628 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800560c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005610:	2b00      	cmp	r3, #0
 8005612:	d104      	bne.n	800561e <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005614:	2100      	movs	r1, #0
 8005616:	6878      	ldr	r0, [r7, #4]
 8005618:	f000 f968 	bl	80058ec <USB_SetDevSpeed>
 800561c:	e008      	b.n	8005630 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800561e:	2101      	movs	r1, #1
 8005620:	6878      	ldr	r0, [r7, #4]
 8005622:	f000 f963 	bl	80058ec <USB_SetDevSpeed>
 8005626:	e003      	b.n	8005630 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005628:	2103      	movs	r1, #3
 800562a:	6878      	ldr	r0, [r7, #4]
 800562c:	f000 f95e 	bl	80058ec <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005630:	2110      	movs	r1, #16
 8005632:	6878      	ldr	r0, [r7, #4]
 8005634:	f000 f8fa 	bl	800582c <USB_FlushTxFifo>
 8005638:	4603      	mov	r3, r0
 800563a:	2b00      	cmp	r3, #0
 800563c:	d001      	beq.n	8005642 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800563e:	2301      	movs	r3, #1
 8005640:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	f000 f924 	bl	8005890 <USB_FlushRxFifo>
 8005648:	4603      	mov	r3, r0
 800564a:	2b00      	cmp	r3, #0
 800564c:	d001      	beq.n	8005652 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800564e:	2301      	movs	r3, #1
 8005650:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005658:	461a      	mov	r2, r3
 800565a:	2300      	movs	r3, #0
 800565c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005664:	461a      	mov	r2, r3
 8005666:	2300      	movs	r3, #0
 8005668:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005670:	461a      	mov	r2, r3
 8005672:	2300      	movs	r3, #0
 8005674:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005676:	2300      	movs	r3, #0
 8005678:	613b      	str	r3, [r7, #16]
 800567a:	e043      	b.n	8005704 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800567c:	693b      	ldr	r3, [r7, #16]
 800567e:	015a      	lsls	r2, r3, #5
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	4413      	add	r3, r2
 8005684:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800568e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005692:	d118      	bne.n	80056c6 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8005694:	693b      	ldr	r3, [r7, #16]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d10a      	bne.n	80056b0 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800569a:	693b      	ldr	r3, [r7, #16]
 800569c:	015a      	lsls	r2, r3, #5
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	4413      	add	r3, r2
 80056a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80056a6:	461a      	mov	r2, r3
 80056a8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80056ac:	6013      	str	r3, [r2, #0]
 80056ae:	e013      	b.n	80056d8 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80056b0:	693b      	ldr	r3, [r7, #16]
 80056b2:	015a      	lsls	r2, r3, #5
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	4413      	add	r3, r2
 80056b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80056bc:	461a      	mov	r2, r3
 80056be:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80056c2:	6013      	str	r3, [r2, #0]
 80056c4:	e008      	b.n	80056d8 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80056c6:	693b      	ldr	r3, [r7, #16]
 80056c8:	015a      	lsls	r2, r3, #5
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	4413      	add	r3, r2
 80056ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80056d2:	461a      	mov	r2, r3
 80056d4:	2300      	movs	r3, #0
 80056d6:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80056d8:	693b      	ldr	r3, [r7, #16]
 80056da:	015a      	lsls	r2, r3, #5
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	4413      	add	r3, r2
 80056e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80056e4:	461a      	mov	r2, r3
 80056e6:	2300      	movs	r3, #0
 80056e8:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80056ea:	693b      	ldr	r3, [r7, #16]
 80056ec:	015a      	lsls	r2, r3, #5
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	4413      	add	r3, r2
 80056f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80056f6:	461a      	mov	r2, r3
 80056f8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80056fc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80056fe:	693b      	ldr	r3, [r7, #16]
 8005700:	3301      	adds	r3, #1
 8005702:	613b      	str	r3, [r7, #16]
 8005704:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005708:	461a      	mov	r2, r3
 800570a:	693b      	ldr	r3, [r7, #16]
 800570c:	4293      	cmp	r3, r2
 800570e:	d3b5      	bcc.n	800567c <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005710:	2300      	movs	r3, #0
 8005712:	613b      	str	r3, [r7, #16]
 8005714:	e043      	b.n	800579e <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005716:	693b      	ldr	r3, [r7, #16]
 8005718:	015a      	lsls	r2, r3, #5
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	4413      	add	r3, r2
 800571e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005728:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800572c:	d118      	bne.n	8005760 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800572e:	693b      	ldr	r3, [r7, #16]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d10a      	bne.n	800574a <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005734:	693b      	ldr	r3, [r7, #16]
 8005736:	015a      	lsls	r2, r3, #5
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	4413      	add	r3, r2
 800573c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005740:	461a      	mov	r2, r3
 8005742:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005746:	6013      	str	r3, [r2, #0]
 8005748:	e013      	b.n	8005772 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800574a:	693b      	ldr	r3, [r7, #16]
 800574c:	015a      	lsls	r2, r3, #5
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	4413      	add	r3, r2
 8005752:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005756:	461a      	mov	r2, r3
 8005758:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800575c:	6013      	str	r3, [r2, #0]
 800575e:	e008      	b.n	8005772 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005760:	693b      	ldr	r3, [r7, #16]
 8005762:	015a      	lsls	r2, r3, #5
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	4413      	add	r3, r2
 8005768:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800576c:	461a      	mov	r2, r3
 800576e:	2300      	movs	r3, #0
 8005770:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005772:	693b      	ldr	r3, [r7, #16]
 8005774:	015a      	lsls	r2, r3, #5
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	4413      	add	r3, r2
 800577a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800577e:	461a      	mov	r2, r3
 8005780:	2300      	movs	r3, #0
 8005782:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005784:	693b      	ldr	r3, [r7, #16]
 8005786:	015a      	lsls	r2, r3, #5
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	4413      	add	r3, r2
 800578c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005790:	461a      	mov	r2, r3
 8005792:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005796:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005798:	693b      	ldr	r3, [r7, #16]
 800579a:	3301      	adds	r3, #1
 800579c:	613b      	str	r3, [r7, #16]
 800579e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80057a2:	461a      	mov	r2, r3
 80057a4:	693b      	ldr	r3, [r7, #16]
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d3b5      	bcc.n	8005716 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80057b0:	691b      	ldr	r3, [r3, #16]
 80057b2:	68fa      	ldr	r2, [r7, #12]
 80057b4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80057b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80057bc:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2200      	movs	r2, #0
 80057c2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80057ca:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80057cc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d105      	bne.n	80057e0 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	699b      	ldr	r3, [r3, #24]
 80057d8:	f043 0210 	orr.w	r2, r3, #16
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	699a      	ldr	r2, [r3, #24]
 80057e4:	4b10      	ldr	r3, [pc, #64]	@ (8005828 <USB_DevInit+0x2b8>)
 80057e6:	4313      	orrs	r3, r2
 80057e8:	687a      	ldr	r2, [r7, #4]
 80057ea:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80057ec:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d005      	beq.n	8005800 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	699b      	ldr	r3, [r3, #24]
 80057f8:	f043 0208 	orr.w	r2, r3, #8
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005800:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005804:	2b01      	cmp	r3, #1
 8005806:	d107      	bne.n	8005818 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	699b      	ldr	r3, [r3, #24]
 800580c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005810:	f043 0304 	orr.w	r3, r3, #4
 8005814:	687a      	ldr	r2, [r7, #4]
 8005816:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005818:	7dfb      	ldrb	r3, [r7, #23]
}
 800581a:	4618      	mov	r0, r3
 800581c:	3718      	adds	r7, #24
 800581e:	46bd      	mov	sp, r7
 8005820:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005824:	b004      	add	sp, #16
 8005826:	4770      	bx	lr
 8005828:	803c3800 	.word	0x803c3800

0800582c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800582c:	b480      	push	{r7}
 800582e:	b085      	sub	sp, #20
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
 8005834:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005836:	2300      	movs	r3, #0
 8005838:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	3301      	adds	r3, #1
 800583e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005846:	d901      	bls.n	800584c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005848:	2303      	movs	r3, #3
 800584a:	e01b      	b.n	8005884 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	691b      	ldr	r3, [r3, #16]
 8005850:	2b00      	cmp	r3, #0
 8005852:	daf2      	bge.n	800583a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005854:	2300      	movs	r3, #0
 8005856:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	019b      	lsls	r3, r3, #6
 800585c:	f043 0220 	orr.w	r2, r3, #32
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	3301      	adds	r3, #1
 8005868:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005870:	d901      	bls.n	8005876 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005872:	2303      	movs	r3, #3
 8005874:	e006      	b.n	8005884 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	691b      	ldr	r3, [r3, #16]
 800587a:	f003 0320 	and.w	r3, r3, #32
 800587e:	2b20      	cmp	r3, #32
 8005880:	d0f0      	beq.n	8005864 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005882:	2300      	movs	r3, #0
}
 8005884:	4618      	mov	r0, r3
 8005886:	3714      	adds	r7, #20
 8005888:	46bd      	mov	sp, r7
 800588a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588e:	4770      	bx	lr

08005890 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005890:	b480      	push	{r7}
 8005892:	b085      	sub	sp, #20
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005898:	2300      	movs	r3, #0
 800589a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	3301      	adds	r3, #1
 80058a0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80058a8:	d901      	bls.n	80058ae <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80058aa:	2303      	movs	r3, #3
 80058ac:	e018      	b.n	80058e0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	691b      	ldr	r3, [r3, #16]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	daf2      	bge.n	800589c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80058b6:	2300      	movs	r3, #0
 80058b8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2210      	movs	r2, #16
 80058be:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	3301      	adds	r3, #1
 80058c4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80058cc:	d901      	bls.n	80058d2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80058ce:	2303      	movs	r3, #3
 80058d0:	e006      	b.n	80058e0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	691b      	ldr	r3, [r3, #16]
 80058d6:	f003 0310 	and.w	r3, r3, #16
 80058da:	2b10      	cmp	r3, #16
 80058dc:	d0f0      	beq.n	80058c0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80058de:	2300      	movs	r3, #0
}
 80058e0:	4618      	mov	r0, r3
 80058e2:	3714      	adds	r7, #20
 80058e4:	46bd      	mov	sp, r7
 80058e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ea:	4770      	bx	lr

080058ec <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80058ec:	b480      	push	{r7}
 80058ee:	b085      	sub	sp, #20
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
 80058f4:	460b      	mov	r3, r1
 80058f6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005902:	681a      	ldr	r2, [r3, #0]
 8005904:	78fb      	ldrb	r3, [r7, #3]
 8005906:	68f9      	ldr	r1, [r7, #12]
 8005908:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800590c:	4313      	orrs	r3, r2
 800590e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005910:	2300      	movs	r3, #0
}
 8005912:	4618      	mov	r0, r3
 8005914:	3714      	adds	r7, #20
 8005916:	46bd      	mov	sp, r7
 8005918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591c:	4770      	bx	lr

0800591e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800591e:	b480      	push	{r7}
 8005920:	b087      	sub	sp, #28
 8005922:	af00      	add	r7, sp, #0
 8005924:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800592a:	693b      	ldr	r3, [r7, #16]
 800592c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005930:	689b      	ldr	r3, [r3, #8]
 8005932:	f003 0306 	and.w	r3, r3, #6
 8005936:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d102      	bne.n	8005944 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800593e:	2300      	movs	r3, #0
 8005940:	75fb      	strb	r3, [r7, #23]
 8005942:	e00a      	b.n	800595a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	2b02      	cmp	r3, #2
 8005948:	d002      	beq.n	8005950 <USB_GetDevSpeed+0x32>
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	2b06      	cmp	r3, #6
 800594e:	d102      	bne.n	8005956 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005950:	2302      	movs	r3, #2
 8005952:	75fb      	strb	r3, [r7, #23]
 8005954:	e001      	b.n	800595a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005956:	230f      	movs	r3, #15
 8005958:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800595a:	7dfb      	ldrb	r3, [r7, #23]
}
 800595c:	4618      	mov	r0, r3
 800595e:	371c      	adds	r7, #28
 8005960:	46bd      	mov	sp, r7
 8005962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005966:	4770      	bx	lr

08005968 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005968:	b480      	push	{r7}
 800596a:	b085      	sub	sp, #20
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
 8005970:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	781b      	ldrb	r3, [r3, #0]
 800597a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	785b      	ldrb	r3, [r3, #1]
 8005980:	2b01      	cmp	r3, #1
 8005982:	d13a      	bne.n	80059fa <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800598a:	69da      	ldr	r2, [r3, #28]
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	781b      	ldrb	r3, [r3, #0]
 8005990:	f003 030f 	and.w	r3, r3, #15
 8005994:	2101      	movs	r1, #1
 8005996:	fa01 f303 	lsl.w	r3, r1, r3
 800599a:	b29b      	uxth	r3, r3
 800599c:	68f9      	ldr	r1, [r7, #12]
 800599e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80059a2:	4313      	orrs	r3, r2
 80059a4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	015a      	lsls	r2, r3, #5
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	4413      	add	r3, r2
 80059ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d155      	bne.n	8005a68 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	015a      	lsls	r2, r3, #5
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	4413      	add	r3, r2
 80059c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80059c8:	681a      	ldr	r2, [r3, #0]
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	689b      	ldr	r3, [r3, #8]
 80059ce:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	791b      	ldrb	r3, [r3, #4]
 80059d6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80059d8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	059b      	lsls	r3, r3, #22
 80059de:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80059e0:	4313      	orrs	r3, r2
 80059e2:	68ba      	ldr	r2, [r7, #8]
 80059e4:	0151      	lsls	r1, r2, #5
 80059e6:	68fa      	ldr	r2, [r7, #12]
 80059e8:	440a      	add	r2, r1
 80059ea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80059ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80059f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80059f6:	6013      	str	r3, [r2, #0]
 80059f8:	e036      	b.n	8005a68 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a00:	69da      	ldr	r2, [r3, #28]
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	781b      	ldrb	r3, [r3, #0]
 8005a06:	f003 030f 	and.w	r3, r3, #15
 8005a0a:	2101      	movs	r1, #1
 8005a0c:	fa01 f303 	lsl.w	r3, r1, r3
 8005a10:	041b      	lsls	r3, r3, #16
 8005a12:	68f9      	ldr	r1, [r7, #12]
 8005a14:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005a18:	4313      	orrs	r3, r2
 8005a1a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005a1c:	68bb      	ldr	r3, [r7, #8]
 8005a1e:	015a      	lsls	r2, r3, #5
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	4413      	add	r3, r2
 8005a24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d11a      	bne.n	8005a68 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005a32:	68bb      	ldr	r3, [r7, #8]
 8005a34:	015a      	lsls	r2, r3, #5
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	4413      	add	r3, r2
 8005a3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a3e:	681a      	ldr	r2, [r3, #0]
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	689b      	ldr	r3, [r3, #8]
 8005a44:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	791b      	ldrb	r3, [r3, #4]
 8005a4c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005a4e:	430b      	orrs	r3, r1
 8005a50:	4313      	orrs	r3, r2
 8005a52:	68ba      	ldr	r2, [r7, #8]
 8005a54:	0151      	lsls	r1, r2, #5
 8005a56:	68fa      	ldr	r2, [r7, #12]
 8005a58:	440a      	add	r2, r1
 8005a5a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005a5e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005a62:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005a66:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005a68:	2300      	movs	r3, #0
}
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	3714      	adds	r7, #20
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a74:	4770      	bx	lr
	...

08005a78 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b085      	sub	sp, #20
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
 8005a80:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	781b      	ldrb	r3, [r3, #0]
 8005a8a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	785b      	ldrb	r3, [r3, #1]
 8005a90:	2b01      	cmp	r3, #1
 8005a92:	d161      	bne.n	8005b58 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	015a      	lsls	r2, r3, #5
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	4413      	add	r3, r2
 8005a9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005aa6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005aaa:	d11f      	bne.n	8005aec <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005aac:	68bb      	ldr	r3, [r7, #8]
 8005aae:	015a      	lsls	r2, r3, #5
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	4413      	add	r3, r2
 8005ab4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	68ba      	ldr	r2, [r7, #8]
 8005abc:	0151      	lsls	r1, r2, #5
 8005abe:	68fa      	ldr	r2, [r7, #12]
 8005ac0:	440a      	add	r2, r1
 8005ac2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005ac6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005aca:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	015a      	lsls	r2, r3, #5
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	4413      	add	r3, r2
 8005ad4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	68ba      	ldr	r2, [r7, #8]
 8005adc:	0151      	lsls	r1, r2, #5
 8005ade:	68fa      	ldr	r2, [r7, #12]
 8005ae0:	440a      	add	r2, r1
 8005ae2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005ae6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005aea:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005af2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	781b      	ldrb	r3, [r3, #0]
 8005af8:	f003 030f 	and.w	r3, r3, #15
 8005afc:	2101      	movs	r1, #1
 8005afe:	fa01 f303 	lsl.w	r3, r1, r3
 8005b02:	b29b      	uxth	r3, r3
 8005b04:	43db      	mvns	r3, r3
 8005b06:	68f9      	ldr	r1, [r7, #12]
 8005b08:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005b0c:	4013      	ands	r3, r2
 8005b0e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b16:	69da      	ldr	r2, [r3, #28]
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	781b      	ldrb	r3, [r3, #0]
 8005b1c:	f003 030f 	and.w	r3, r3, #15
 8005b20:	2101      	movs	r1, #1
 8005b22:	fa01 f303 	lsl.w	r3, r1, r3
 8005b26:	b29b      	uxth	r3, r3
 8005b28:	43db      	mvns	r3, r3
 8005b2a:	68f9      	ldr	r1, [r7, #12]
 8005b2c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005b30:	4013      	ands	r3, r2
 8005b32:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	015a      	lsls	r2, r3, #5
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	4413      	add	r3, r2
 8005b3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b40:	681a      	ldr	r2, [r3, #0]
 8005b42:	68bb      	ldr	r3, [r7, #8]
 8005b44:	0159      	lsls	r1, r3, #5
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	440b      	add	r3, r1
 8005b4a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b4e:	4619      	mov	r1, r3
 8005b50:	4b35      	ldr	r3, [pc, #212]	@ (8005c28 <USB_DeactivateEndpoint+0x1b0>)
 8005b52:	4013      	ands	r3, r2
 8005b54:	600b      	str	r3, [r1, #0]
 8005b56:	e060      	b.n	8005c1a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	015a      	lsls	r2, r3, #5
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	4413      	add	r3, r2
 8005b60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005b6a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005b6e:	d11f      	bne.n	8005bb0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	015a      	lsls	r2, r3, #5
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	4413      	add	r3, r2
 8005b78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	68ba      	ldr	r2, [r7, #8]
 8005b80:	0151      	lsls	r1, r2, #5
 8005b82:	68fa      	ldr	r2, [r7, #12]
 8005b84:	440a      	add	r2, r1
 8005b86:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005b8a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005b8e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005b90:	68bb      	ldr	r3, [r7, #8]
 8005b92:	015a      	lsls	r2, r3, #5
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	4413      	add	r3, r2
 8005b98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	68ba      	ldr	r2, [r7, #8]
 8005ba0:	0151      	lsls	r1, r2, #5
 8005ba2:	68fa      	ldr	r2, [r7, #12]
 8005ba4:	440a      	add	r2, r1
 8005ba6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005baa:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005bae:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005bb6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	781b      	ldrb	r3, [r3, #0]
 8005bbc:	f003 030f 	and.w	r3, r3, #15
 8005bc0:	2101      	movs	r1, #1
 8005bc2:	fa01 f303 	lsl.w	r3, r1, r3
 8005bc6:	041b      	lsls	r3, r3, #16
 8005bc8:	43db      	mvns	r3, r3
 8005bca:	68f9      	ldr	r1, [r7, #12]
 8005bcc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005bd0:	4013      	ands	r3, r2
 8005bd2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005bda:	69da      	ldr	r2, [r3, #28]
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	781b      	ldrb	r3, [r3, #0]
 8005be0:	f003 030f 	and.w	r3, r3, #15
 8005be4:	2101      	movs	r1, #1
 8005be6:	fa01 f303 	lsl.w	r3, r1, r3
 8005bea:	041b      	lsls	r3, r3, #16
 8005bec:	43db      	mvns	r3, r3
 8005bee:	68f9      	ldr	r1, [r7, #12]
 8005bf0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005bf4:	4013      	ands	r3, r2
 8005bf6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	015a      	lsls	r2, r3, #5
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	4413      	add	r3, r2
 8005c00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c04:	681a      	ldr	r2, [r3, #0]
 8005c06:	68bb      	ldr	r3, [r7, #8]
 8005c08:	0159      	lsls	r1, r3, #5
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	440b      	add	r3, r1
 8005c0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c12:	4619      	mov	r1, r3
 8005c14:	4b05      	ldr	r3, [pc, #20]	@ (8005c2c <USB_DeactivateEndpoint+0x1b4>)
 8005c16:	4013      	ands	r3, r2
 8005c18:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005c1a:	2300      	movs	r3, #0
}
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	3714      	adds	r7, #20
 8005c20:	46bd      	mov	sp, r7
 8005c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c26:	4770      	bx	lr
 8005c28:	ec337800 	.word	0xec337800
 8005c2c:	eff37800 	.word	0xeff37800

08005c30 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b08a      	sub	sp, #40	@ 0x28
 8005c34:	af02      	add	r7, sp, #8
 8005c36:	60f8      	str	r0, [r7, #12]
 8005c38:	60b9      	str	r1, [r7, #8]
 8005c3a:	4613      	mov	r3, r2
 8005c3c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	781b      	ldrb	r3, [r3, #0]
 8005c46:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	785b      	ldrb	r3, [r3, #1]
 8005c4c:	2b01      	cmp	r3, #1
 8005c4e:	f040 817f 	bne.w	8005f50 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005c52:	68bb      	ldr	r3, [r7, #8]
 8005c54:	691b      	ldr	r3, [r3, #16]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d132      	bne.n	8005cc0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005c5a:	69bb      	ldr	r3, [r7, #24]
 8005c5c:	015a      	lsls	r2, r3, #5
 8005c5e:	69fb      	ldr	r3, [r7, #28]
 8005c60:	4413      	add	r3, r2
 8005c62:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c66:	691b      	ldr	r3, [r3, #16]
 8005c68:	69ba      	ldr	r2, [r7, #24]
 8005c6a:	0151      	lsls	r1, r2, #5
 8005c6c:	69fa      	ldr	r2, [r7, #28]
 8005c6e:	440a      	add	r2, r1
 8005c70:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005c74:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005c78:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005c7c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005c7e:	69bb      	ldr	r3, [r7, #24]
 8005c80:	015a      	lsls	r2, r3, #5
 8005c82:	69fb      	ldr	r3, [r7, #28]
 8005c84:	4413      	add	r3, r2
 8005c86:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c8a:	691b      	ldr	r3, [r3, #16]
 8005c8c:	69ba      	ldr	r2, [r7, #24]
 8005c8e:	0151      	lsls	r1, r2, #5
 8005c90:	69fa      	ldr	r2, [r7, #28]
 8005c92:	440a      	add	r2, r1
 8005c94:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005c98:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005c9c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005c9e:	69bb      	ldr	r3, [r7, #24]
 8005ca0:	015a      	lsls	r2, r3, #5
 8005ca2:	69fb      	ldr	r3, [r7, #28]
 8005ca4:	4413      	add	r3, r2
 8005ca6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005caa:	691b      	ldr	r3, [r3, #16]
 8005cac:	69ba      	ldr	r2, [r7, #24]
 8005cae:	0151      	lsls	r1, r2, #5
 8005cb0:	69fa      	ldr	r2, [r7, #28]
 8005cb2:	440a      	add	r2, r1
 8005cb4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005cb8:	0cdb      	lsrs	r3, r3, #19
 8005cba:	04db      	lsls	r3, r3, #19
 8005cbc:	6113      	str	r3, [r2, #16]
 8005cbe:	e097      	b.n	8005df0 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005cc0:	69bb      	ldr	r3, [r7, #24]
 8005cc2:	015a      	lsls	r2, r3, #5
 8005cc4:	69fb      	ldr	r3, [r7, #28]
 8005cc6:	4413      	add	r3, r2
 8005cc8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ccc:	691b      	ldr	r3, [r3, #16]
 8005cce:	69ba      	ldr	r2, [r7, #24]
 8005cd0:	0151      	lsls	r1, r2, #5
 8005cd2:	69fa      	ldr	r2, [r7, #28]
 8005cd4:	440a      	add	r2, r1
 8005cd6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005cda:	0cdb      	lsrs	r3, r3, #19
 8005cdc:	04db      	lsls	r3, r3, #19
 8005cde:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005ce0:	69bb      	ldr	r3, [r7, #24]
 8005ce2:	015a      	lsls	r2, r3, #5
 8005ce4:	69fb      	ldr	r3, [r7, #28]
 8005ce6:	4413      	add	r3, r2
 8005ce8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005cec:	691b      	ldr	r3, [r3, #16]
 8005cee:	69ba      	ldr	r2, [r7, #24]
 8005cf0:	0151      	lsls	r1, r2, #5
 8005cf2:	69fa      	ldr	r2, [r7, #28]
 8005cf4:	440a      	add	r2, r1
 8005cf6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005cfa:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005cfe:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005d02:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8005d04:	69bb      	ldr	r3, [r7, #24]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d11a      	bne.n	8005d40 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8005d0a:	68bb      	ldr	r3, [r7, #8]
 8005d0c:	691a      	ldr	r2, [r3, #16]
 8005d0e:	68bb      	ldr	r3, [r7, #8]
 8005d10:	689b      	ldr	r3, [r3, #8]
 8005d12:	429a      	cmp	r2, r3
 8005d14:	d903      	bls.n	8005d1e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	689a      	ldr	r2, [r3, #8]
 8005d1a:	68bb      	ldr	r3, [r7, #8]
 8005d1c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005d1e:	69bb      	ldr	r3, [r7, #24]
 8005d20:	015a      	lsls	r2, r3, #5
 8005d22:	69fb      	ldr	r3, [r7, #28]
 8005d24:	4413      	add	r3, r2
 8005d26:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d2a:	691b      	ldr	r3, [r3, #16]
 8005d2c:	69ba      	ldr	r2, [r7, #24]
 8005d2e:	0151      	lsls	r1, r2, #5
 8005d30:	69fa      	ldr	r2, [r7, #28]
 8005d32:	440a      	add	r2, r1
 8005d34:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005d38:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005d3c:	6113      	str	r3, [r2, #16]
 8005d3e:	e044      	b.n	8005dca <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005d40:	68bb      	ldr	r3, [r7, #8]
 8005d42:	691a      	ldr	r2, [r3, #16]
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	689b      	ldr	r3, [r3, #8]
 8005d48:	4413      	add	r3, r2
 8005d4a:	1e5a      	subs	r2, r3, #1
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	689b      	ldr	r3, [r3, #8]
 8005d50:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d54:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 8005d56:	69bb      	ldr	r3, [r7, #24]
 8005d58:	015a      	lsls	r2, r3, #5
 8005d5a:	69fb      	ldr	r3, [r7, #28]
 8005d5c:	4413      	add	r3, r2
 8005d5e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d62:	691a      	ldr	r2, [r3, #16]
 8005d64:	8afb      	ldrh	r3, [r7, #22]
 8005d66:	04d9      	lsls	r1, r3, #19
 8005d68:	4ba4      	ldr	r3, [pc, #656]	@ (8005ffc <USB_EPStartXfer+0x3cc>)
 8005d6a:	400b      	ands	r3, r1
 8005d6c:	69b9      	ldr	r1, [r7, #24]
 8005d6e:	0148      	lsls	r0, r1, #5
 8005d70:	69f9      	ldr	r1, [r7, #28]
 8005d72:	4401      	add	r1, r0
 8005d74:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005d78:	4313      	orrs	r3, r2
 8005d7a:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8005d7c:	68bb      	ldr	r3, [r7, #8]
 8005d7e:	791b      	ldrb	r3, [r3, #4]
 8005d80:	2b01      	cmp	r3, #1
 8005d82:	d122      	bne.n	8005dca <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005d84:	69bb      	ldr	r3, [r7, #24]
 8005d86:	015a      	lsls	r2, r3, #5
 8005d88:	69fb      	ldr	r3, [r7, #28]
 8005d8a:	4413      	add	r3, r2
 8005d8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d90:	691b      	ldr	r3, [r3, #16]
 8005d92:	69ba      	ldr	r2, [r7, #24]
 8005d94:	0151      	lsls	r1, r2, #5
 8005d96:	69fa      	ldr	r2, [r7, #28]
 8005d98:	440a      	add	r2, r1
 8005d9a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005d9e:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8005da2:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 8005da4:	69bb      	ldr	r3, [r7, #24]
 8005da6:	015a      	lsls	r2, r3, #5
 8005da8:	69fb      	ldr	r3, [r7, #28]
 8005daa:	4413      	add	r3, r2
 8005dac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005db0:	691a      	ldr	r2, [r3, #16]
 8005db2:	8afb      	ldrh	r3, [r7, #22]
 8005db4:	075b      	lsls	r3, r3, #29
 8005db6:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8005dba:	69b9      	ldr	r1, [r7, #24]
 8005dbc:	0148      	lsls	r0, r1, #5
 8005dbe:	69f9      	ldr	r1, [r7, #28]
 8005dc0:	4401      	add	r1, r0
 8005dc2:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005dc6:	4313      	orrs	r3, r2
 8005dc8:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005dca:	69bb      	ldr	r3, [r7, #24]
 8005dcc:	015a      	lsls	r2, r3, #5
 8005dce:	69fb      	ldr	r3, [r7, #28]
 8005dd0:	4413      	add	r3, r2
 8005dd2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005dd6:	691a      	ldr	r2, [r3, #16]
 8005dd8:	68bb      	ldr	r3, [r7, #8]
 8005dda:	691b      	ldr	r3, [r3, #16]
 8005ddc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005de0:	69b9      	ldr	r1, [r7, #24]
 8005de2:	0148      	lsls	r0, r1, #5
 8005de4:	69f9      	ldr	r1, [r7, #28]
 8005de6:	4401      	add	r1, r0
 8005de8:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005dec:	4313      	orrs	r3, r2
 8005dee:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005df0:	79fb      	ldrb	r3, [r7, #7]
 8005df2:	2b01      	cmp	r3, #1
 8005df4:	d14b      	bne.n	8005e8e <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	69db      	ldr	r3, [r3, #28]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d009      	beq.n	8005e12 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005dfe:	69bb      	ldr	r3, [r7, #24]
 8005e00:	015a      	lsls	r2, r3, #5
 8005e02:	69fb      	ldr	r3, [r7, #28]
 8005e04:	4413      	add	r3, r2
 8005e06:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e0a:	461a      	mov	r2, r3
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	69db      	ldr	r3, [r3, #28]
 8005e10:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005e12:	68bb      	ldr	r3, [r7, #8]
 8005e14:	791b      	ldrb	r3, [r3, #4]
 8005e16:	2b01      	cmp	r3, #1
 8005e18:	d128      	bne.n	8005e6c <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005e1a:	69fb      	ldr	r3, [r7, #28]
 8005e1c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e20:	689b      	ldr	r3, [r3, #8]
 8005e22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d110      	bne.n	8005e4c <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005e2a:	69bb      	ldr	r3, [r7, #24]
 8005e2c:	015a      	lsls	r2, r3, #5
 8005e2e:	69fb      	ldr	r3, [r7, #28]
 8005e30:	4413      	add	r3, r2
 8005e32:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	69ba      	ldr	r2, [r7, #24]
 8005e3a:	0151      	lsls	r1, r2, #5
 8005e3c:	69fa      	ldr	r2, [r7, #28]
 8005e3e:	440a      	add	r2, r1
 8005e40:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005e44:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005e48:	6013      	str	r3, [r2, #0]
 8005e4a:	e00f      	b.n	8005e6c <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005e4c:	69bb      	ldr	r3, [r7, #24]
 8005e4e:	015a      	lsls	r2, r3, #5
 8005e50:	69fb      	ldr	r3, [r7, #28]
 8005e52:	4413      	add	r3, r2
 8005e54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	69ba      	ldr	r2, [r7, #24]
 8005e5c:	0151      	lsls	r1, r2, #5
 8005e5e:	69fa      	ldr	r2, [r7, #28]
 8005e60:	440a      	add	r2, r1
 8005e62:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005e66:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005e6a:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005e6c:	69bb      	ldr	r3, [r7, #24]
 8005e6e:	015a      	lsls	r2, r3, #5
 8005e70:	69fb      	ldr	r3, [r7, #28]
 8005e72:	4413      	add	r3, r2
 8005e74:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	69ba      	ldr	r2, [r7, #24]
 8005e7c:	0151      	lsls	r1, r2, #5
 8005e7e:	69fa      	ldr	r2, [r7, #28]
 8005e80:	440a      	add	r2, r1
 8005e82:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005e86:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005e8a:	6013      	str	r3, [r2, #0]
 8005e8c:	e166      	b.n	800615c <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005e8e:	69bb      	ldr	r3, [r7, #24]
 8005e90:	015a      	lsls	r2, r3, #5
 8005e92:	69fb      	ldr	r3, [r7, #28]
 8005e94:	4413      	add	r3, r2
 8005e96:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	69ba      	ldr	r2, [r7, #24]
 8005e9e:	0151      	lsls	r1, r2, #5
 8005ea0:	69fa      	ldr	r2, [r7, #28]
 8005ea2:	440a      	add	r2, r1
 8005ea4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005ea8:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005eac:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005eae:	68bb      	ldr	r3, [r7, #8]
 8005eb0:	791b      	ldrb	r3, [r3, #4]
 8005eb2:	2b01      	cmp	r3, #1
 8005eb4:	d015      	beq.n	8005ee2 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005eb6:	68bb      	ldr	r3, [r7, #8]
 8005eb8:	691b      	ldr	r3, [r3, #16]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	f000 814e 	beq.w	800615c <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005ec0:	69fb      	ldr	r3, [r7, #28]
 8005ec2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ec6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	781b      	ldrb	r3, [r3, #0]
 8005ecc:	f003 030f 	and.w	r3, r3, #15
 8005ed0:	2101      	movs	r1, #1
 8005ed2:	fa01 f303 	lsl.w	r3, r1, r3
 8005ed6:	69f9      	ldr	r1, [r7, #28]
 8005ed8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005edc:	4313      	orrs	r3, r2
 8005ede:	634b      	str	r3, [r1, #52]	@ 0x34
 8005ee0:	e13c      	b.n	800615c <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005ee2:	69fb      	ldr	r3, [r7, #28]
 8005ee4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ee8:	689b      	ldr	r3, [r3, #8]
 8005eea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d110      	bne.n	8005f14 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005ef2:	69bb      	ldr	r3, [r7, #24]
 8005ef4:	015a      	lsls	r2, r3, #5
 8005ef6:	69fb      	ldr	r3, [r7, #28]
 8005ef8:	4413      	add	r3, r2
 8005efa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	69ba      	ldr	r2, [r7, #24]
 8005f02:	0151      	lsls	r1, r2, #5
 8005f04:	69fa      	ldr	r2, [r7, #28]
 8005f06:	440a      	add	r2, r1
 8005f08:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005f0c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005f10:	6013      	str	r3, [r2, #0]
 8005f12:	e00f      	b.n	8005f34 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005f14:	69bb      	ldr	r3, [r7, #24]
 8005f16:	015a      	lsls	r2, r3, #5
 8005f18:	69fb      	ldr	r3, [r7, #28]
 8005f1a:	4413      	add	r3, r2
 8005f1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	69ba      	ldr	r2, [r7, #24]
 8005f24:	0151      	lsls	r1, r2, #5
 8005f26:	69fa      	ldr	r2, [r7, #28]
 8005f28:	440a      	add	r2, r1
 8005f2a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005f2e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005f32:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005f34:	68bb      	ldr	r3, [r7, #8]
 8005f36:	68d9      	ldr	r1, [r3, #12]
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	781a      	ldrb	r2, [r3, #0]
 8005f3c:	68bb      	ldr	r3, [r7, #8]
 8005f3e:	691b      	ldr	r3, [r3, #16]
 8005f40:	b298      	uxth	r0, r3
 8005f42:	79fb      	ldrb	r3, [r7, #7]
 8005f44:	9300      	str	r3, [sp, #0]
 8005f46:	4603      	mov	r3, r0
 8005f48:	68f8      	ldr	r0, [r7, #12]
 8005f4a:	f000 f9b9 	bl	80062c0 <USB_WritePacket>
 8005f4e:	e105      	b.n	800615c <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005f50:	69bb      	ldr	r3, [r7, #24]
 8005f52:	015a      	lsls	r2, r3, #5
 8005f54:	69fb      	ldr	r3, [r7, #28]
 8005f56:	4413      	add	r3, r2
 8005f58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f5c:	691b      	ldr	r3, [r3, #16]
 8005f5e:	69ba      	ldr	r2, [r7, #24]
 8005f60:	0151      	lsls	r1, r2, #5
 8005f62:	69fa      	ldr	r2, [r7, #28]
 8005f64:	440a      	add	r2, r1
 8005f66:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005f6a:	0cdb      	lsrs	r3, r3, #19
 8005f6c:	04db      	lsls	r3, r3, #19
 8005f6e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005f70:	69bb      	ldr	r3, [r7, #24]
 8005f72:	015a      	lsls	r2, r3, #5
 8005f74:	69fb      	ldr	r3, [r7, #28]
 8005f76:	4413      	add	r3, r2
 8005f78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f7c:	691b      	ldr	r3, [r3, #16]
 8005f7e:	69ba      	ldr	r2, [r7, #24]
 8005f80:	0151      	lsls	r1, r2, #5
 8005f82:	69fa      	ldr	r2, [r7, #28]
 8005f84:	440a      	add	r2, r1
 8005f86:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005f8a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005f8e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005f92:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8005f94:	69bb      	ldr	r3, [r7, #24]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d132      	bne.n	8006000 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8005f9a:	68bb      	ldr	r3, [r7, #8]
 8005f9c:	691b      	ldr	r3, [r3, #16]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d003      	beq.n	8005faa <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8005fa2:	68bb      	ldr	r3, [r7, #8]
 8005fa4:	689a      	ldr	r2, [r3, #8]
 8005fa6:	68bb      	ldr	r3, [r7, #8]
 8005fa8:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8005faa:	68bb      	ldr	r3, [r7, #8]
 8005fac:	689a      	ldr	r2, [r3, #8]
 8005fae:	68bb      	ldr	r3, [r7, #8]
 8005fb0:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005fb2:	69bb      	ldr	r3, [r7, #24]
 8005fb4:	015a      	lsls	r2, r3, #5
 8005fb6:	69fb      	ldr	r3, [r7, #28]
 8005fb8:	4413      	add	r3, r2
 8005fba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005fbe:	691a      	ldr	r2, [r3, #16]
 8005fc0:	68bb      	ldr	r3, [r7, #8]
 8005fc2:	6a1b      	ldr	r3, [r3, #32]
 8005fc4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005fc8:	69b9      	ldr	r1, [r7, #24]
 8005fca:	0148      	lsls	r0, r1, #5
 8005fcc:	69f9      	ldr	r1, [r7, #28]
 8005fce:	4401      	add	r1, r0
 8005fd0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005fd4:	4313      	orrs	r3, r2
 8005fd6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005fd8:	69bb      	ldr	r3, [r7, #24]
 8005fda:	015a      	lsls	r2, r3, #5
 8005fdc:	69fb      	ldr	r3, [r7, #28]
 8005fde:	4413      	add	r3, r2
 8005fe0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005fe4:	691b      	ldr	r3, [r3, #16]
 8005fe6:	69ba      	ldr	r2, [r7, #24]
 8005fe8:	0151      	lsls	r1, r2, #5
 8005fea:	69fa      	ldr	r2, [r7, #28]
 8005fec:	440a      	add	r2, r1
 8005fee:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005ff2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005ff6:	6113      	str	r3, [r2, #16]
 8005ff8:	e062      	b.n	80060c0 <USB_EPStartXfer+0x490>
 8005ffa:	bf00      	nop
 8005ffc:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	691b      	ldr	r3, [r3, #16]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d123      	bne.n	8006050 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006008:	69bb      	ldr	r3, [r7, #24]
 800600a:	015a      	lsls	r2, r3, #5
 800600c:	69fb      	ldr	r3, [r7, #28]
 800600e:	4413      	add	r3, r2
 8006010:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006014:	691a      	ldr	r2, [r3, #16]
 8006016:	68bb      	ldr	r3, [r7, #8]
 8006018:	689b      	ldr	r3, [r3, #8]
 800601a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800601e:	69b9      	ldr	r1, [r7, #24]
 8006020:	0148      	lsls	r0, r1, #5
 8006022:	69f9      	ldr	r1, [r7, #28]
 8006024:	4401      	add	r1, r0
 8006026:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800602a:	4313      	orrs	r3, r2
 800602c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800602e:	69bb      	ldr	r3, [r7, #24]
 8006030:	015a      	lsls	r2, r3, #5
 8006032:	69fb      	ldr	r3, [r7, #28]
 8006034:	4413      	add	r3, r2
 8006036:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800603a:	691b      	ldr	r3, [r3, #16]
 800603c:	69ba      	ldr	r2, [r7, #24]
 800603e:	0151      	lsls	r1, r2, #5
 8006040:	69fa      	ldr	r2, [r7, #28]
 8006042:	440a      	add	r2, r1
 8006044:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006048:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800604c:	6113      	str	r3, [r2, #16]
 800604e:	e037      	b.n	80060c0 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	691a      	ldr	r2, [r3, #16]
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	689b      	ldr	r3, [r3, #8]
 8006058:	4413      	add	r3, r2
 800605a:	1e5a      	subs	r2, r3, #1
 800605c:	68bb      	ldr	r3, [r7, #8]
 800605e:	689b      	ldr	r3, [r3, #8]
 8006060:	fbb2 f3f3 	udiv	r3, r2, r3
 8006064:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8006066:	68bb      	ldr	r3, [r7, #8]
 8006068:	689b      	ldr	r3, [r3, #8]
 800606a:	8afa      	ldrh	r2, [r7, #22]
 800606c:	fb03 f202 	mul.w	r2, r3, r2
 8006070:	68bb      	ldr	r3, [r7, #8]
 8006072:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006074:	69bb      	ldr	r3, [r7, #24]
 8006076:	015a      	lsls	r2, r3, #5
 8006078:	69fb      	ldr	r3, [r7, #28]
 800607a:	4413      	add	r3, r2
 800607c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006080:	691a      	ldr	r2, [r3, #16]
 8006082:	8afb      	ldrh	r3, [r7, #22]
 8006084:	04d9      	lsls	r1, r3, #19
 8006086:	4b38      	ldr	r3, [pc, #224]	@ (8006168 <USB_EPStartXfer+0x538>)
 8006088:	400b      	ands	r3, r1
 800608a:	69b9      	ldr	r1, [r7, #24]
 800608c:	0148      	lsls	r0, r1, #5
 800608e:	69f9      	ldr	r1, [r7, #28]
 8006090:	4401      	add	r1, r0
 8006092:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006096:	4313      	orrs	r3, r2
 8006098:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800609a:	69bb      	ldr	r3, [r7, #24]
 800609c:	015a      	lsls	r2, r3, #5
 800609e:	69fb      	ldr	r3, [r7, #28]
 80060a0:	4413      	add	r3, r2
 80060a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060a6:	691a      	ldr	r2, [r3, #16]
 80060a8:	68bb      	ldr	r3, [r7, #8]
 80060aa:	6a1b      	ldr	r3, [r3, #32]
 80060ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80060b0:	69b9      	ldr	r1, [r7, #24]
 80060b2:	0148      	lsls	r0, r1, #5
 80060b4:	69f9      	ldr	r1, [r7, #28]
 80060b6:	4401      	add	r1, r0
 80060b8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80060bc:	4313      	orrs	r3, r2
 80060be:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80060c0:	79fb      	ldrb	r3, [r7, #7]
 80060c2:	2b01      	cmp	r3, #1
 80060c4:	d10d      	bne.n	80060e2 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80060c6:	68bb      	ldr	r3, [r7, #8]
 80060c8:	68db      	ldr	r3, [r3, #12]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d009      	beq.n	80060e2 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80060ce:	68bb      	ldr	r3, [r7, #8]
 80060d0:	68d9      	ldr	r1, [r3, #12]
 80060d2:	69bb      	ldr	r3, [r7, #24]
 80060d4:	015a      	lsls	r2, r3, #5
 80060d6:	69fb      	ldr	r3, [r7, #28]
 80060d8:	4413      	add	r3, r2
 80060da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060de:	460a      	mov	r2, r1
 80060e0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80060e2:	68bb      	ldr	r3, [r7, #8]
 80060e4:	791b      	ldrb	r3, [r3, #4]
 80060e6:	2b01      	cmp	r3, #1
 80060e8:	d128      	bne.n	800613c <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80060ea:	69fb      	ldr	r3, [r7, #28]
 80060ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80060f0:	689b      	ldr	r3, [r3, #8]
 80060f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d110      	bne.n	800611c <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80060fa:	69bb      	ldr	r3, [r7, #24]
 80060fc:	015a      	lsls	r2, r3, #5
 80060fe:	69fb      	ldr	r3, [r7, #28]
 8006100:	4413      	add	r3, r2
 8006102:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	69ba      	ldr	r2, [r7, #24]
 800610a:	0151      	lsls	r1, r2, #5
 800610c:	69fa      	ldr	r2, [r7, #28]
 800610e:	440a      	add	r2, r1
 8006110:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006114:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006118:	6013      	str	r3, [r2, #0]
 800611a:	e00f      	b.n	800613c <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800611c:	69bb      	ldr	r3, [r7, #24]
 800611e:	015a      	lsls	r2, r3, #5
 8006120:	69fb      	ldr	r3, [r7, #28]
 8006122:	4413      	add	r3, r2
 8006124:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	69ba      	ldr	r2, [r7, #24]
 800612c:	0151      	lsls	r1, r2, #5
 800612e:	69fa      	ldr	r2, [r7, #28]
 8006130:	440a      	add	r2, r1
 8006132:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006136:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800613a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800613c:	69bb      	ldr	r3, [r7, #24]
 800613e:	015a      	lsls	r2, r3, #5
 8006140:	69fb      	ldr	r3, [r7, #28]
 8006142:	4413      	add	r3, r2
 8006144:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	69ba      	ldr	r2, [r7, #24]
 800614c:	0151      	lsls	r1, r2, #5
 800614e:	69fa      	ldr	r2, [r7, #28]
 8006150:	440a      	add	r2, r1
 8006152:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006156:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800615a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800615c:	2300      	movs	r3, #0
}
 800615e:	4618      	mov	r0, r3
 8006160:	3720      	adds	r7, #32
 8006162:	46bd      	mov	sp, r7
 8006164:	bd80      	pop	{r7, pc}
 8006166:	bf00      	nop
 8006168:	1ff80000 	.word	0x1ff80000

0800616c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800616c:	b480      	push	{r7}
 800616e:	b087      	sub	sp, #28
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
 8006174:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006176:	2300      	movs	r3, #0
 8006178:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800617a:	2300      	movs	r3, #0
 800617c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	785b      	ldrb	r3, [r3, #1]
 8006186:	2b01      	cmp	r3, #1
 8006188:	d14a      	bne.n	8006220 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	781b      	ldrb	r3, [r3, #0]
 800618e:	015a      	lsls	r2, r3, #5
 8006190:	693b      	ldr	r3, [r7, #16]
 8006192:	4413      	add	r3, r2
 8006194:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800619e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80061a2:	f040 8086 	bne.w	80062b2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	781b      	ldrb	r3, [r3, #0]
 80061aa:	015a      	lsls	r2, r3, #5
 80061ac:	693b      	ldr	r3, [r7, #16]
 80061ae:	4413      	add	r3, r2
 80061b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	683a      	ldr	r2, [r7, #0]
 80061b8:	7812      	ldrb	r2, [r2, #0]
 80061ba:	0151      	lsls	r1, r2, #5
 80061bc:	693a      	ldr	r2, [r7, #16]
 80061be:	440a      	add	r2, r1
 80061c0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80061c4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80061c8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	781b      	ldrb	r3, [r3, #0]
 80061ce:	015a      	lsls	r2, r3, #5
 80061d0:	693b      	ldr	r3, [r7, #16]
 80061d2:	4413      	add	r3, r2
 80061d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	683a      	ldr	r2, [r7, #0]
 80061dc:	7812      	ldrb	r2, [r2, #0]
 80061de:	0151      	lsls	r1, r2, #5
 80061e0:	693a      	ldr	r2, [r7, #16]
 80061e2:	440a      	add	r2, r1
 80061e4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80061e8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80061ec:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	3301      	adds	r3, #1
 80061f2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	f242 7210 	movw	r2, #10000	@ 0x2710
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d902      	bls.n	8006204 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80061fe:	2301      	movs	r3, #1
 8006200:	75fb      	strb	r3, [r7, #23]
          break;
 8006202:	e056      	b.n	80062b2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	781b      	ldrb	r3, [r3, #0]
 8006208:	015a      	lsls	r2, r3, #5
 800620a:	693b      	ldr	r3, [r7, #16]
 800620c:	4413      	add	r3, r2
 800620e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006218:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800621c:	d0e7      	beq.n	80061ee <USB_EPStopXfer+0x82>
 800621e:	e048      	b.n	80062b2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	781b      	ldrb	r3, [r3, #0]
 8006224:	015a      	lsls	r2, r3, #5
 8006226:	693b      	ldr	r3, [r7, #16]
 8006228:	4413      	add	r3, r2
 800622a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006234:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006238:	d13b      	bne.n	80062b2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	781b      	ldrb	r3, [r3, #0]
 800623e:	015a      	lsls	r2, r3, #5
 8006240:	693b      	ldr	r3, [r7, #16]
 8006242:	4413      	add	r3, r2
 8006244:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	683a      	ldr	r2, [r7, #0]
 800624c:	7812      	ldrb	r2, [r2, #0]
 800624e:	0151      	lsls	r1, r2, #5
 8006250:	693a      	ldr	r2, [r7, #16]
 8006252:	440a      	add	r2, r1
 8006254:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006258:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800625c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	781b      	ldrb	r3, [r3, #0]
 8006262:	015a      	lsls	r2, r3, #5
 8006264:	693b      	ldr	r3, [r7, #16]
 8006266:	4413      	add	r3, r2
 8006268:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	683a      	ldr	r2, [r7, #0]
 8006270:	7812      	ldrb	r2, [r2, #0]
 8006272:	0151      	lsls	r1, r2, #5
 8006274:	693a      	ldr	r2, [r7, #16]
 8006276:	440a      	add	r2, r1
 8006278:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800627c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006280:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	3301      	adds	r3, #1
 8006286:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800628e:	4293      	cmp	r3, r2
 8006290:	d902      	bls.n	8006298 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8006292:	2301      	movs	r3, #1
 8006294:	75fb      	strb	r3, [r7, #23]
          break;
 8006296:	e00c      	b.n	80062b2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	781b      	ldrb	r3, [r3, #0]
 800629c:	015a      	lsls	r2, r3, #5
 800629e:	693b      	ldr	r3, [r7, #16]
 80062a0:	4413      	add	r3, r2
 80062a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80062ac:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80062b0:	d0e7      	beq.n	8006282 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80062b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80062b4:	4618      	mov	r0, r3
 80062b6:	371c      	adds	r7, #28
 80062b8:	46bd      	mov	sp, r7
 80062ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062be:	4770      	bx	lr

080062c0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80062c0:	b480      	push	{r7}
 80062c2:	b089      	sub	sp, #36	@ 0x24
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	60f8      	str	r0, [r7, #12]
 80062c8:	60b9      	str	r1, [r7, #8]
 80062ca:	4611      	mov	r1, r2
 80062cc:	461a      	mov	r2, r3
 80062ce:	460b      	mov	r3, r1
 80062d0:	71fb      	strb	r3, [r7, #7]
 80062d2:	4613      	mov	r3, r2
 80062d4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80062de:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d123      	bne.n	800632e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80062e6:	88bb      	ldrh	r3, [r7, #4]
 80062e8:	3303      	adds	r3, #3
 80062ea:	089b      	lsrs	r3, r3, #2
 80062ec:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80062ee:	2300      	movs	r3, #0
 80062f0:	61bb      	str	r3, [r7, #24]
 80062f2:	e018      	b.n	8006326 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80062f4:	79fb      	ldrb	r3, [r7, #7]
 80062f6:	031a      	lsls	r2, r3, #12
 80062f8:	697b      	ldr	r3, [r7, #20]
 80062fa:	4413      	add	r3, r2
 80062fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006300:	461a      	mov	r2, r3
 8006302:	69fb      	ldr	r3, [r7, #28]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006308:	69fb      	ldr	r3, [r7, #28]
 800630a:	3301      	adds	r3, #1
 800630c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800630e:	69fb      	ldr	r3, [r7, #28]
 8006310:	3301      	adds	r3, #1
 8006312:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006314:	69fb      	ldr	r3, [r7, #28]
 8006316:	3301      	adds	r3, #1
 8006318:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800631a:	69fb      	ldr	r3, [r7, #28]
 800631c:	3301      	adds	r3, #1
 800631e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006320:	69bb      	ldr	r3, [r7, #24]
 8006322:	3301      	adds	r3, #1
 8006324:	61bb      	str	r3, [r7, #24]
 8006326:	69ba      	ldr	r2, [r7, #24]
 8006328:	693b      	ldr	r3, [r7, #16]
 800632a:	429a      	cmp	r2, r3
 800632c:	d3e2      	bcc.n	80062f4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800632e:	2300      	movs	r3, #0
}
 8006330:	4618      	mov	r0, r3
 8006332:	3724      	adds	r7, #36	@ 0x24
 8006334:	46bd      	mov	sp, r7
 8006336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633a:	4770      	bx	lr

0800633c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800633c:	b480      	push	{r7}
 800633e:	b08b      	sub	sp, #44	@ 0x2c
 8006340:	af00      	add	r7, sp, #0
 8006342:	60f8      	str	r0, [r7, #12]
 8006344:	60b9      	str	r1, [r7, #8]
 8006346:	4613      	mov	r3, r2
 8006348:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800634e:	68bb      	ldr	r3, [r7, #8]
 8006350:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006352:	88fb      	ldrh	r3, [r7, #6]
 8006354:	089b      	lsrs	r3, r3, #2
 8006356:	b29b      	uxth	r3, r3
 8006358:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800635a:	88fb      	ldrh	r3, [r7, #6]
 800635c:	f003 0303 	and.w	r3, r3, #3
 8006360:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006362:	2300      	movs	r3, #0
 8006364:	623b      	str	r3, [r7, #32]
 8006366:	e014      	b.n	8006392 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006368:	69bb      	ldr	r3, [r7, #24]
 800636a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800636e:	681a      	ldr	r2, [r3, #0]
 8006370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006372:	601a      	str	r2, [r3, #0]
    pDest++;
 8006374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006376:	3301      	adds	r3, #1
 8006378:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800637a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800637c:	3301      	adds	r3, #1
 800637e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006380:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006382:	3301      	adds	r3, #1
 8006384:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006388:	3301      	adds	r3, #1
 800638a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800638c:	6a3b      	ldr	r3, [r7, #32]
 800638e:	3301      	adds	r3, #1
 8006390:	623b      	str	r3, [r7, #32]
 8006392:	6a3a      	ldr	r2, [r7, #32]
 8006394:	697b      	ldr	r3, [r7, #20]
 8006396:	429a      	cmp	r2, r3
 8006398:	d3e6      	bcc.n	8006368 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800639a:	8bfb      	ldrh	r3, [r7, #30]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d01e      	beq.n	80063de <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80063a0:	2300      	movs	r3, #0
 80063a2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80063a4:	69bb      	ldr	r3, [r7, #24]
 80063a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80063aa:	461a      	mov	r2, r3
 80063ac:	f107 0310 	add.w	r3, r7, #16
 80063b0:	6812      	ldr	r2, [r2, #0]
 80063b2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80063b4:	693a      	ldr	r2, [r7, #16]
 80063b6:	6a3b      	ldr	r3, [r7, #32]
 80063b8:	b2db      	uxtb	r3, r3
 80063ba:	00db      	lsls	r3, r3, #3
 80063bc:	fa22 f303 	lsr.w	r3, r2, r3
 80063c0:	b2da      	uxtb	r2, r3
 80063c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063c4:	701a      	strb	r2, [r3, #0]
      i++;
 80063c6:	6a3b      	ldr	r3, [r7, #32]
 80063c8:	3301      	adds	r3, #1
 80063ca:	623b      	str	r3, [r7, #32]
      pDest++;
 80063cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063ce:	3301      	adds	r3, #1
 80063d0:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80063d2:	8bfb      	ldrh	r3, [r7, #30]
 80063d4:	3b01      	subs	r3, #1
 80063d6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80063d8:	8bfb      	ldrh	r3, [r7, #30]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d1ea      	bne.n	80063b4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80063de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80063e0:	4618      	mov	r0, r3
 80063e2:	372c      	adds	r7, #44	@ 0x2c
 80063e4:	46bd      	mov	sp, r7
 80063e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ea:	4770      	bx	lr

080063ec <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80063ec:	b480      	push	{r7}
 80063ee:	b085      	sub	sp, #20
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
 80063f4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	781b      	ldrb	r3, [r3, #0]
 80063fe:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	785b      	ldrb	r3, [r3, #1]
 8006404:	2b01      	cmp	r3, #1
 8006406:	d12c      	bne.n	8006462 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006408:	68bb      	ldr	r3, [r7, #8]
 800640a:	015a      	lsls	r2, r3, #5
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	4413      	add	r3, r2
 8006410:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	2b00      	cmp	r3, #0
 8006418:	db12      	blt.n	8006440 <USB_EPSetStall+0x54>
 800641a:	68bb      	ldr	r3, [r7, #8]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d00f      	beq.n	8006440 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006420:	68bb      	ldr	r3, [r7, #8]
 8006422:	015a      	lsls	r2, r3, #5
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	4413      	add	r3, r2
 8006428:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	68ba      	ldr	r2, [r7, #8]
 8006430:	0151      	lsls	r1, r2, #5
 8006432:	68fa      	ldr	r2, [r7, #12]
 8006434:	440a      	add	r2, r1
 8006436:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800643a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800643e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006440:	68bb      	ldr	r3, [r7, #8]
 8006442:	015a      	lsls	r2, r3, #5
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	4413      	add	r3, r2
 8006448:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	68ba      	ldr	r2, [r7, #8]
 8006450:	0151      	lsls	r1, r2, #5
 8006452:	68fa      	ldr	r2, [r7, #12]
 8006454:	440a      	add	r2, r1
 8006456:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800645a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800645e:	6013      	str	r3, [r2, #0]
 8006460:	e02b      	b.n	80064ba <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006462:	68bb      	ldr	r3, [r7, #8]
 8006464:	015a      	lsls	r2, r3, #5
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	4413      	add	r3, r2
 800646a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	2b00      	cmp	r3, #0
 8006472:	db12      	blt.n	800649a <USB_EPSetStall+0xae>
 8006474:	68bb      	ldr	r3, [r7, #8]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d00f      	beq.n	800649a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800647a:	68bb      	ldr	r3, [r7, #8]
 800647c:	015a      	lsls	r2, r3, #5
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	4413      	add	r3, r2
 8006482:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	68ba      	ldr	r2, [r7, #8]
 800648a:	0151      	lsls	r1, r2, #5
 800648c:	68fa      	ldr	r2, [r7, #12]
 800648e:	440a      	add	r2, r1
 8006490:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006494:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006498:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800649a:	68bb      	ldr	r3, [r7, #8]
 800649c:	015a      	lsls	r2, r3, #5
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	4413      	add	r3, r2
 80064a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	68ba      	ldr	r2, [r7, #8]
 80064aa:	0151      	lsls	r1, r2, #5
 80064ac:	68fa      	ldr	r2, [r7, #12]
 80064ae:	440a      	add	r2, r1
 80064b0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80064b4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80064b8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80064ba:	2300      	movs	r3, #0
}
 80064bc:	4618      	mov	r0, r3
 80064be:	3714      	adds	r7, #20
 80064c0:	46bd      	mov	sp, r7
 80064c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c6:	4770      	bx	lr

080064c8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80064c8:	b480      	push	{r7}
 80064ca:	b085      	sub	sp, #20
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
 80064d0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	781b      	ldrb	r3, [r3, #0]
 80064da:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	785b      	ldrb	r3, [r3, #1]
 80064e0:	2b01      	cmp	r3, #1
 80064e2:	d128      	bne.n	8006536 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80064e4:	68bb      	ldr	r3, [r7, #8]
 80064e6:	015a      	lsls	r2, r3, #5
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	4413      	add	r3, r2
 80064ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	68ba      	ldr	r2, [r7, #8]
 80064f4:	0151      	lsls	r1, r2, #5
 80064f6:	68fa      	ldr	r2, [r7, #12]
 80064f8:	440a      	add	r2, r1
 80064fa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80064fe:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006502:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	791b      	ldrb	r3, [r3, #4]
 8006508:	2b03      	cmp	r3, #3
 800650a:	d003      	beq.n	8006514 <USB_EPClearStall+0x4c>
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	791b      	ldrb	r3, [r3, #4]
 8006510:	2b02      	cmp	r3, #2
 8006512:	d138      	bne.n	8006586 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006514:	68bb      	ldr	r3, [r7, #8]
 8006516:	015a      	lsls	r2, r3, #5
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	4413      	add	r3, r2
 800651c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	68ba      	ldr	r2, [r7, #8]
 8006524:	0151      	lsls	r1, r2, #5
 8006526:	68fa      	ldr	r2, [r7, #12]
 8006528:	440a      	add	r2, r1
 800652a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800652e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006532:	6013      	str	r3, [r2, #0]
 8006534:	e027      	b.n	8006586 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006536:	68bb      	ldr	r3, [r7, #8]
 8006538:	015a      	lsls	r2, r3, #5
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	4413      	add	r3, r2
 800653e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	68ba      	ldr	r2, [r7, #8]
 8006546:	0151      	lsls	r1, r2, #5
 8006548:	68fa      	ldr	r2, [r7, #12]
 800654a:	440a      	add	r2, r1
 800654c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006550:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006554:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	791b      	ldrb	r3, [r3, #4]
 800655a:	2b03      	cmp	r3, #3
 800655c:	d003      	beq.n	8006566 <USB_EPClearStall+0x9e>
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	791b      	ldrb	r3, [r3, #4]
 8006562:	2b02      	cmp	r3, #2
 8006564:	d10f      	bne.n	8006586 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006566:	68bb      	ldr	r3, [r7, #8]
 8006568:	015a      	lsls	r2, r3, #5
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	4413      	add	r3, r2
 800656e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	68ba      	ldr	r2, [r7, #8]
 8006576:	0151      	lsls	r1, r2, #5
 8006578:	68fa      	ldr	r2, [r7, #12]
 800657a:	440a      	add	r2, r1
 800657c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006580:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006584:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006586:	2300      	movs	r3, #0
}
 8006588:	4618      	mov	r0, r3
 800658a:	3714      	adds	r7, #20
 800658c:	46bd      	mov	sp, r7
 800658e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006592:	4770      	bx	lr

08006594 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006594:	b480      	push	{r7}
 8006596:	b085      	sub	sp, #20
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
 800659c:	460b      	mov	r3, r1
 800659e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	68fa      	ldr	r2, [r7, #12]
 80065ae:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80065b2:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80065b6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80065be:	681a      	ldr	r2, [r3, #0]
 80065c0:	78fb      	ldrb	r3, [r7, #3]
 80065c2:	011b      	lsls	r3, r3, #4
 80065c4:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80065c8:	68f9      	ldr	r1, [r7, #12]
 80065ca:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80065ce:	4313      	orrs	r3, r2
 80065d0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80065d2:	2300      	movs	r3, #0
}
 80065d4:	4618      	mov	r0, r3
 80065d6:	3714      	adds	r7, #20
 80065d8:	46bd      	mov	sp, r7
 80065da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065de:	4770      	bx	lr

080065e0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80065e0:	b480      	push	{r7}
 80065e2:	b085      	sub	sp, #20
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	68fa      	ldr	r2, [r7, #12]
 80065f6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80065fa:	f023 0303 	bic.w	r3, r3, #3
 80065fe:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006606:	685b      	ldr	r3, [r3, #4]
 8006608:	68fa      	ldr	r2, [r7, #12]
 800660a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800660e:	f023 0302 	bic.w	r3, r3, #2
 8006612:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006614:	2300      	movs	r3, #0
}
 8006616:	4618      	mov	r0, r3
 8006618:	3714      	adds	r7, #20
 800661a:	46bd      	mov	sp, r7
 800661c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006620:	4770      	bx	lr

08006622 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006622:	b480      	push	{r7}
 8006624:	b085      	sub	sp, #20
 8006626:	af00      	add	r7, sp, #0
 8006628:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	68fa      	ldr	r2, [r7, #12]
 8006638:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800663c:	f023 0303 	bic.w	r3, r3, #3
 8006640:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006648:	685b      	ldr	r3, [r3, #4]
 800664a:	68fa      	ldr	r2, [r7, #12]
 800664c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006650:	f043 0302 	orr.w	r3, r3, #2
 8006654:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006656:	2300      	movs	r3, #0
}
 8006658:	4618      	mov	r0, r3
 800665a:	3714      	adds	r7, #20
 800665c:	46bd      	mov	sp, r7
 800665e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006662:	4770      	bx	lr

08006664 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8006664:	b480      	push	{r7}
 8006666:	b085      	sub	sp, #20
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	695b      	ldr	r3, [r3, #20]
 8006670:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	699b      	ldr	r3, [r3, #24]
 8006676:	68fa      	ldr	r2, [r7, #12]
 8006678:	4013      	ands	r3, r2
 800667a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800667c:	68fb      	ldr	r3, [r7, #12]
}
 800667e:	4618      	mov	r0, r3
 8006680:	3714      	adds	r7, #20
 8006682:	46bd      	mov	sp, r7
 8006684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006688:	4770      	bx	lr

0800668a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800668a:	b480      	push	{r7}
 800668c:	b085      	sub	sp, #20
 800668e:	af00      	add	r7, sp, #0
 8006690:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800669c:	699b      	ldr	r3, [r3, #24]
 800669e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80066a6:	69db      	ldr	r3, [r3, #28]
 80066a8:	68ba      	ldr	r2, [r7, #8]
 80066aa:	4013      	ands	r3, r2
 80066ac:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80066ae:	68bb      	ldr	r3, [r7, #8]
 80066b0:	0c1b      	lsrs	r3, r3, #16
}
 80066b2:	4618      	mov	r0, r3
 80066b4:	3714      	adds	r7, #20
 80066b6:	46bd      	mov	sp, r7
 80066b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066bc:	4770      	bx	lr

080066be <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80066be:	b480      	push	{r7}
 80066c0:	b085      	sub	sp, #20
 80066c2:	af00      	add	r7, sp, #0
 80066c4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80066d0:	699b      	ldr	r3, [r3, #24]
 80066d2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80066da:	69db      	ldr	r3, [r3, #28]
 80066dc:	68ba      	ldr	r2, [r7, #8]
 80066de:	4013      	ands	r3, r2
 80066e0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80066e2:	68bb      	ldr	r3, [r7, #8]
 80066e4:	b29b      	uxth	r3, r3
}
 80066e6:	4618      	mov	r0, r3
 80066e8:	3714      	adds	r7, #20
 80066ea:	46bd      	mov	sp, r7
 80066ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f0:	4770      	bx	lr

080066f2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80066f2:	b480      	push	{r7}
 80066f4:	b085      	sub	sp, #20
 80066f6:	af00      	add	r7, sp, #0
 80066f8:	6078      	str	r0, [r7, #4]
 80066fa:	460b      	mov	r3, r1
 80066fc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006702:	78fb      	ldrb	r3, [r7, #3]
 8006704:	015a      	lsls	r2, r3, #5
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	4413      	add	r3, r2
 800670a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800670e:	689b      	ldr	r3, [r3, #8]
 8006710:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006718:	695b      	ldr	r3, [r3, #20]
 800671a:	68ba      	ldr	r2, [r7, #8]
 800671c:	4013      	ands	r3, r2
 800671e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006720:	68bb      	ldr	r3, [r7, #8]
}
 8006722:	4618      	mov	r0, r3
 8006724:	3714      	adds	r7, #20
 8006726:	46bd      	mov	sp, r7
 8006728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672c:	4770      	bx	lr

0800672e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800672e:	b480      	push	{r7}
 8006730:	b087      	sub	sp, #28
 8006732:	af00      	add	r7, sp, #0
 8006734:	6078      	str	r0, [r7, #4]
 8006736:	460b      	mov	r3, r1
 8006738:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800673e:	697b      	ldr	r3, [r7, #20]
 8006740:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006744:	691b      	ldr	r3, [r3, #16]
 8006746:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006748:	697b      	ldr	r3, [r7, #20]
 800674a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800674e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006750:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006752:	78fb      	ldrb	r3, [r7, #3]
 8006754:	f003 030f 	and.w	r3, r3, #15
 8006758:	68fa      	ldr	r2, [r7, #12]
 800675a:	fa22 f303 	lsr.w	r3, r2, r3
 800675e:	01db      	lsls	r3, r3, #7
 8006760:	b2db      	uxtb	r3, r3
 8006762:	693a      	ldr	r2, [r7, #16]
 8006764:	4313      	orrs	r3, r2
 8006766:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006768:	78fb      	ldrb	r3, [r7, #3]
 800676a:	015a      	lsls	r2, r3, #5
 800676c:	697b      	ldr	r3, [r7, #20]
 800676e:	4413      	add	r3, r2
 8006770:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006774:	689b      	ldr	r3, [r3, #8]
 8006776:	693a      	ldr	r2, [r7, #16]
 8006778:	4013      	ands	r3, r2
 800677a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800677c:	68bb      	ldr	r3, [r7, #8]
}
 800677e:	4618      	mov	r0, r3
 8006780:	371c      	adds	r7, #28
 8006782:	46bd      	mov	sp, r7
 8006784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006788:	4770      	bx	lr

0800678a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800678a:	b480      	push	{r7}
 800678c:	b083      	sub	sp, #12
 800678e:	af00      	add	r7, sp, #0
 8006790:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	695b      	ldr	r3, [r3, #20]
 8006796:	f003 0301 	and.w	r3, r3, #1
}
 800679a:	4618      	mov	r0, r3
 800679c:	370c      	adds	r7, #12
 800679e:	46bd      	mov	sp, r7
 80067a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a4:	4770      	bx	lr

080067a6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80067a6:	b480      	push	{r7}
 80067a8:	b085      	sub	sp, #20
 80067aa:	af00      	add	r7, sp, #0
 80067ac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	68fa      	ldr	r2, [r7, #12]
 80067bc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80067c0:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80067c4:	f023 0307 	bic.w	r3, r3, #7
 80067c8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80067d0:	685b      	ldr	r3, [r3, #4]
 80067d2:	68fa      	ldr	r2, [r7, #12]
 80067d4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80067d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80067dc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80067de:	2300      	movs	r3, #0
}
 80067e0:	4618      	mov	r0, r3
 80067e2:	3714      	adds	r7, #20
 80067e4:	46bd      	mov	sp, r7
 80067e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ea:	4770      	bx	lr

080067ec <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80067ec:	b480      	push	{r7}
 80067ee:	b087      	sub	sp, #28
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	60f8      	str	r0, [r7, #12]
 80067f4:	460b      	mov	r3, r1
 80067f6:	607a      	str	r2, [r7, #4]
 80067f8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	333c      	adds	r3, #60	@ 0x3c
 8006802:	3304      	adds	r3, #4
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006808:	693b      	ldr	r3, [r7, #16]
 800680a:	4a26      	ldr	r2, [pc, #152]	@ (80068a4 <USB_EP0_OutStart+0xb8>)
 800680c:	4293      	cmp	r3, r2
 800680e:	d90a      	bls.n	8006826 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006810:	697b      	ldr	r3, [r7, #20]
 8006812:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800681c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006820:	d101      	bne.n	8006826 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006822:	2300      	movs	r3, #0
 8006824:	e037      	b.n	8006896 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006826:	697b      	ldr	r3, [r7, #20]
 8006828:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800682c:	461a      	mov	r2, r3
 800682e:	2300      	movs	r3, #0
 8006830:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006832:	697b      	ldr	r3, [r7, #20]
 8006834:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006838:	691b      	ldr	r3, [r3, #16]
 800683a:	697a      	ldr	r2, [r7, #20]
 800683c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006840:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006844:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006846:	697b      	ldr	r3, [r7, #20]
 8006848:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800684c:	691b      	ldr	r3, [r3, #16]
 800684e:	697a      	ldr	r2, [r7, #20]
 8006850:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006854:	f043 0318 	orr.w	r3, r3, #24
 8006858:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800685a:	697b      	ldr	r3, [r7, #20]
 800685c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006860:	691b      	ldr	r3, [r3, #16]
 8006862:	697a      	ldr	r2, [r7, #20]
 8006864:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006868:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800686c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800686e:	7afb      	ldrb	r3, [r7, #11]
 8006870:	2b01      	cmp	r3, #1
 8006872:	d10f      	bne.n	8006894 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006874:	697b      	ldr	r3, [r7, #20]
 8006876:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800687a:	461a      	mov	r2, r3
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006880:	697b      	ldr	r3, [r7, #20]
 8006882:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	697a      	ldr	r2, [r7, #20]
 800688a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800688e:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8006892:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006894:	2300      	movs	r3, #0
}
 8006896:	4618      	mov	r0, r3
 8006898:	371c      	adds	r7, #28
 800689a:	46bd      	mov	sp, r7
 800689c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a0:	4770      	bx	lr
 80068a2:	bf00      	nop
 80068a4:	4f54300a 	.word	0x4f54300a

080068a8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80068a8:	b480      	push	{r7}
 80068aa:	b085      	sub	sp, #20
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80068b0:	2300      	movs	r3, #0
 80068b2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	3301      	adds	r3, #1
 80068b8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80068c0:	d901      	bls.n	80068c6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80068c2:	2303      	movs	r3, #3
 80068c4:	e022      	b.n	800690c <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	691b      	ldr	r3, [r3, #16]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	daf2      	bge.n	80068b4 <USB_CoreReset+0xc>

  count = 10U;
 80068ce:	230a      	movs	r3, #10
 80068d0:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 80068d2:	e002      	b.n	80068da <USB_CoreReset+0x32>
  {
    count--;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	3b01      	subs	r3, #1
 80068d8:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d1f9      	bne.n	80068d4 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	691b      	ldr	r3, [r3, #16]
 80068e4:	f043 0201 	orr.w	r2, r3, #1
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	3301      	adds	r3, #1
 80068f0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80068f8:	d901      	bls.n	80068fe <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 80068fa:	2303      	movs	r3, #3
 80068fc:	e006      	b.n	800690c <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	691b      	ldr	r3, [r3, #16]
 8006902:	f003 0301 	and.w	r3, r3, #1
 8006906:	2b01      	cmp	r3, #1
 8006908:	d0f0      	beq.n	80068ec <USB_CoreReset+0x44>

  return HAL_OK;
 800690a:	2300      	movs	r3, #0
}
 800690c:	4618      	mov	r0, r3
 800690e:	3714      	adds	r7, #20
 8006910:	46bd      	mov	sp, r7
 8006912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006916:	4770      	bx	lr

08006918 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006918:	b580      	push	{r7, lr}
 800691a:	b084      	sub	sp, #16
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
 8006920:	460b      	mov	r3, r1
 8006922:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006924:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8006928:	f002 fd70 	bl	800940c <USBD_static_malloc>
 800692c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d109      	bne.n	8006948 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	32b0      	adds	r2, #176	@ 0xb0
 800693e:	2100      	movs	r1, #0
 8006940:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006944:	2302      	movs	r3, #2
 8006946:	e0d4      	b.n	8006af2 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006948:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800694c:	2100      	movs	r1, #0
 800694e:	68f8      	ldr	r0, [r7, #12]
 8006950:	f002 fda0 	bl	8009494 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	32b0      	adds	r2, #176	@ 0xb0
 800695e:	68f9      	ldr	r1, [r7, #12]
 8006960:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	32b0      	adds	r2, #176	@ 0xb0
 800696e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	7c1b      	ldrb	r3, [r3, #16]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d138      	bne.n	80069f2 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006980:	4b5e      	ldr	r3, [pc, #376]	@ (8006afc <USBD_CDC_Init+0x1e4>)
 8006982:	7819      	ldrb	r1, [r3, #0]
 8006984:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006988:	2202      	movs	r2, #2
 800698a:	6878      	ldr	r0, [r7, #4]
 800698c:	f002 fbcd 	bl	800912a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006990:	4b5a      	ldr	r3, [pc, #360]	@ (8006afc <USBD_CDC_Init+0x1e4>)
 8006992:	781b      	ldrb	r3, [r3, #0]
 8006994:	f003 020f 	and.w	r2, r3, #15
 8006998:	6879      	ldr	r1, [r7, #4]
 800699a:	4613      	mov	r3, r2
 800699c:	009b      	lsls	r3, r3, #2
 800699e:	4413      	add	r3, r2
 80069a0:	009b      	lsls	r3, r3, #2
 80069a2:	440b      	add	r3, r1
 80069a4:	3323      	adds	r3, #35	@ 0x23
 80069a6:	2201      	movs	r2, #1
 80069a8:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80069aa:	4b55      	ldr	r3, [pc, #340]	@ (8006b00 <USBD_CDC_Init+0x1e8>)
 80069ac:	7819      	ldrb	r1, [r3, #0]
 80069ae:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80069b2:	2202      	movs	r2, #2
 80069b4:	6878      	ldr	r0, [r7, #4]
 80069b6:	f002 fbb8 	bl	800912a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80069ba:	4b51      	ldr	r3, [pc, #324]	@ (8006b00 <USBD_CDC_Init+0x1e8>)
 80069bc:	781b      	ldrb	r3, [r3, #0]
 80069be:	f003 020f 	and.w	r2, r3, #15
 80069c2:	6879      	ldr	r1, [r7, #4]
 80069c4:	4613      	mov	r3, r2
 80069c6:	009b      	lsls	r3, r3, #2
 80069c8:	4413      	add	r3, r2
 80069ca:	009b      	lsls	r3, r3, #2
 80069cc:	440b      	add	r3, r1
 80069ce:	f203 1363 	addw	r3, r3, #355	@ 0x163
 80069d2:	2201      	movs	r2, #1
 80069d4:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80069d6:	4b4b      	ldr	r3, [pc, #300]	@ (8006b04 <USBD_CDC_Init+0x1ec>)
 80069d8:	781b      	ldrb	r3, [r3, #0]
 80069da:	f003 020f 	and.w	r2, r3, #15
 80069de:	6879      	ldr	r1, [r7, #4]
 80069e0:	4613      	mov	r3, r2
 80069e2:	009b      	lsls	r3, r3, #2
 80069e4:	4413      	add	r3, r2
 80069e6:	009b      	lsls	r3, r3, #2
 80069e8:	440b      	add	r3, r1
 80069ea:	331c      	adds	r3, #28
 80069ec:	2210      	movs	r2, #16
 80069ee:	601a      	str	r2, [r3, #0]
 80069f0:	e035      	b.n	8006a5e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80069f2:	4b42      	ldr	r3, [pc, #264]	@ (8006afc <USBD_CDC_Init+0x1e4>)
 80069f4:	7819      	ldrb	r1, [r3, #0]
 80069f6:	2340      	movs	r3, #64	@ 0x40
 80069f8:	2202      	movs	r2, #2
 80069fa:	6878      	ldr	r0, [r7, #4]
 80069fc:	f002 fb95 	bl	800912a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006a00:	4b3e      	ldr	r3, [pc, #248]	@ (8006afc <USBD_CDC_Init+0x1e4>)
 8006a02:	781b      	ldrb	r3, [r3, #0]
 8006a04:	f003 020f 	and.w	r2, r3, #15
 8006a08:	6879      	ldr	r1, [r7, #4]
 8006a0a:	4613      	mov	r3, r2
 8006a0c:	009b      	lsls	r3, r3, #2
 8006a0e:	4413      	add	r3, r2
 8006a10:	009b      	lsls	r3, r3, #2
 8006a12:	440b      	add	r3, r1
 8006a14:	3323      	adds	r3, #35	@ 0x23
 8006a16:	2201      	movs	r2, #1
 8006a18:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006a1a:	4b39      	ldr	r3, [pc, #228]	@ (8006b00 <USBD_CDC_Init+0x1e8>)
 8006a1c:	7819      	ldrb	r1, [r3, #0]
 8006a1e:	2340      	movs	r3, #64	@ 0x40
 8006a20:	2202      	movs	r2, #2
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	f002 fb81 	bl	800912a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006a28:	4b35      	ldr	r3, [pc, #212]	@ (8006b00 <USBD_CDC_Init+0x1e8>)
 8006a2a:	781b      	ldrb	r3, [r3, #0]
 8006a2c:	f003 020f 	and.w	r2, r3, #15
 8006a30:	6879      	ldr	r1, [r7, #4]
 8006a32:	4613      	mov	r3, r2
 8006a34:	009b      	lsls	r3, r3, #2
 8006a36:	4413      	add	r3, r2
 8006a38:	009b      	lsls	r3, r3, #2
 8006a3a:	440b      	add	r3, r1
 8006a3c:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8006a40:	2201      	movs	r2, #1
 8006a42:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006a44:	4b2f      	ldr	r3, [pc, #188]	@ (8006b04 <USBD_CDC_Init+0x1ec>)
 8006a46:	781b      	ldrb	r3, [r3, #0]
 8006a48:	f003 020f 	and.w	r2, r3, #15
 8006a4c:	6879      	ldr	r1, [r7, #4]
 8006a4e:	4613      	mov	r3, r2
 8006a50:	009b      	lsls	r3, r3, #2
 8006a52:	4413      	add	r3, r2
 8006a54:	009b      	lsls	r3, r3, #2
 8006a56:	440b      	add	r3, r1
 8006a58:	331c      	adds	r3, #28
 8006a5a:	2210      	movs	r2, #16
 8006a5c:	601a      	str	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006a5e:	4b29      	ldr	r3, [pc, #164]	@ (8006b04 <USBD_CDC_Init+0x1ec>)
 8006a60:	7819      	ldrb	r1, [r3, #0]
 8006a62:	2308      	movs	r3, #8
 8006a64:	2203      	movs	r2, #3
 8006a66:	6878      	ldr	r0, [r7, #4]
 8006a68:	f002 fb5f 	bl	800912a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006a6c:	4b25      	ldr	r3, [pc, #148]	@ (8006b04 <USBD_CDC_Init+0x1ec>)
 8006a6e:	781b      	ldrb	r3, [r3, #0]
 8006a70:	f003 020f 	and.w	r2, r3, #15
 8006a74:	6879      	ldr	r1, [r7, #4]
 8006a76:	4613      	mov	r3, r2
 8006a78:	009b      	lsls	r3, r3, #2
 8006a7a:	4413      	add	r3, r2
 8006a7c:	009b      	lsls	r3, r3, #2
 8006a7e:	440b      	add	r3, r1
 8006a80:	3323      	adds	r3, #35	@ 0x23
 8006a82:	2201      	movs	r2, #1
 8006a84:	701a      	strb	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	2200      	movs	r2, #0
 8006a8a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006a94:	687a      	ldr	r2, [r7, #4]
 8006a96:	33b0      	adds	r3, #176	@ 0xb0
 8006a98:	009b      	lsls	r3, r3, #2
 8006a9a:	4413      	add	r3, r2
 8006a9c:	685b      	ldr	r3, [r3, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	2200      	movs	r2, #0
 8006aae:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d101      	bne.n	8006ac0 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006abc:	2302      	movs	r3, #2
 8006abe:	e018      	b.n	8006af2 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	7c1b      	ldrb	r3, [r3, #16]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d10a      	bne.n	8006ade <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006ac8:	4b0d      	ldr	r3, [pc, #52]	@ (8006b00 <USBD_CDC_Init+0x1e8>)
 8006aca:	7819      	ldrb	r1, [r3, #0]
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006ad2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006ad6:	6878      	ldr	r0, [r7, #4]
 8006ad8:	f002 fc16 	bl	8009308 <USBD_LL_PrepareReceive>
 8006adc:	e008      	b.n	8006af0 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006ade:	4b08      	ldr	r3, [pc, #32]	@ (8006b00 <USBD_CDC_Init+0x1e8>)
 8006ae0:	7819      	ldrb	r1, [r3, #0]
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006ae8:	2340      	movs	r3, #64	@ 0x40
 8006aea:	6878      	ldr	r0, [r7, #4]
 8006aec:	f002 fc0c 	bl	8009308 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006af0:	2300      	movs	r3, #0
}
 8006af2:	4618      	mov	r0, r3
 8006af4:	3710      	adds	r7, #16
 8006af6:	46bd      	mov	sp, r7
 8006af8:	bd80      	pop	{r7, pc}
 8006afa:	bf00      	nop
 8006afc:	200000a3 	.word	0x200000a3
 8006b00:	200000a4 	.word	0x200000a4
 8006b04:	200000a5 	.word	0x200000a5

08006b08 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b082      	sub	sp, #8
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
 8006b10:	460b      	mov	r3, r1
 8006b12:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006b14:	4b3a      	ldr	r3, [pc, #232]	@ (8006c00 <USBD_CDC_DeInit+0xf8>)
 8006b16:	781b      	ldrb	r3, [r3, #0]
 8006b18:	4619      	mov	r1, r3
 8006b1a:	6878      	ldr	r0, [r7, #4]
 8006b1c:	f002 fb2b 	bl	8009176 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006b20:	4b37      	ldr	r3, [pc, #220]	@ (8006c00 <USBD_CDC_DeInit+0xf8>)
 8006b22:	781b      	ldrb	r3, [r3, #0]
 8006b24:	f003 020f 	and.w	r2, r3, #15
 8006b28:	6879      	ldr	r1, [r7, #4]
 8006b2a:	4613      	mov	r3, r2
 8006b2c:	009b      	lsls	r3, r3, #2
 8006b2e:	4413      	add	r3, r2
 8006b30:	009b      	lsls	r3, r3, #2
 8006b32:	440b      	add	r3, r1
 8006b34:	3323      	adds	r3, #35	@ 0x23
 8006b36:	2200      	movs	r2, #0
 8006b38:	701a      	strb	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8006b3a:	4b32      	ldr	r3, [pc, #200]	@ (8006c04 <USBD_CDC_DeInit+0xfc>)
 8006b3c:	781b      	ldrb	r3, [r3, #0]
 8006b3e:	4619      	mov	r1, r3
 8006b40:	6878      	ldr	r0, [r7, #4]
 8006b42:	f002 fb18 	bl	8009176 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8006b46:	4b2f      	ldr	r3, [pc, #188]	@ (8006c04 <USBD_CDC_DeInit+0xfc>)
 8006b48:	781b      	ldrb	r3, [r3, #0]
 8006b4a:	f003 020f 	and.w	r2, r3, #15
 8006b4e:	6879      	ldr	r1, [r7, #4]
 8006b50:	4613      	mov	r3, r2
 8006b52:	009b      	lsls	r3, r3, #2
 8006b54:	4413      	add	r3, r2
 8006b56:	009b      	lsls	r3, r3, #2
 8006b58:	440b      	add	r3, r1
 8006b5a:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8006b5e:	2200      	movs	r2, #0
 8006b60:	701a      	strb	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8006b62:	4b29      	ldr	r3, [pc, #164]	@ (8006c08 <USBD_CDC_DeInit+0x100>)
 8006b64:	781b      	ldrb	r3, [r3, #0]
 8006b66:	4619      	mov	r1, r3
 8006b68:	6878      	ldr	r0, [r7, #4]
 8006b6a:	f002 fb04 	bl	8009176 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8006b6e:	4b26      	ldr	r3, [pc, #152]	@ (8006c08 <USBD_CDC_DeInit+0x100>)
 8006b70:	781b      	ldrb	r3, [r3, #0]
 8006b72:	f003 020f 	and.w	r2, r3, #15
 8006b76:	6879      	ldr	r1, [r7, #4]
 8006b78:	4613      	mov	r3, r2
 8006b7a:	009b      	lsls	r3, r3, #2
 8006b7c:	4413      	add	r3, r2
 8006b7e:	009b      	lsls	r3, r3, #2
 8006b80:	440b      	add	r3, r1
 8006b82:	3323      	adds	r3, #35	@ 0x23
 8006b84:	2200      	movs	r2, #0
 8006b86:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006b88:	4b1f      	ldr	r3, [pc, #124]	@ (8006c08 <USBD_CDC_DeInit+0x100>)
 8006b8a:	781b      	ldrb	r3, [r3, #0]
 8006b8c:	f003 020f 	and.w	r2, r3, #15
 8006b90:	6879      	ldr	r1, [r7, #4]
 8006b92:	4613      	mov	r3, r2
 8006b94:	009b      	lsls	r3, r3, #2
 8006b96:	4413      	add	r3, r2
 8006b98:	009b      	lsls	r3, r3, #2
 8006b9a:	440b      	add	r3, r1
 8006b9c:	331c      	adds	r3, #28
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	601a      	str	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	32b0      	adds	r2, #176	@ 0xb0
 8006bac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d01f      	beq.n	8006bf4 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006bba:	687a      	ldr	r2, [r7, #4]
 8006bbc:	33b0      	adds	r3, #176	@ 0xb0
 8006bbe:	009b      	lsls	r3, r3, #2
 8006bc0:	4413      	add	r3, r2
 8006bc2:	685b      	ldr	r3, [r3, #4]
 8006bc4:	685b      	ldr	r3, [r3, #4]
 8006bc6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	32b0      	adds	r2, #176	@ 0xb0
 8006bd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	f002 fc26 	bl	8009428 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	32b0      	adds	r2, #176	@ 0xb0
 8006be6:	2100      	movs	r1, #0
 8006be8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2200      	movs	r2, #0
 8006bf0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006bf4:	2300      	movs	r3, #0
}
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	3708      	adds	r7, #8
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	bd80      	pop	{r7, pc}
 8006bfe:	bf00      	nop
 8006c00:	200000a3 	.word	0x200000a3
 8006c04:	200000a4 	.word	0x200000a4
 8006c08:	200000a5 	.word	0x200000a5

08006c0c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b086      	sub	sp, #24
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
 8006c14:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	32b0      	adds	r2, #176	@ 0xb0
 8006c20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c24:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006c26:	2300      	movs	r3, #0
 8006c28:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006c2e:	2300      	movs	r3, #0
 8006c30:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006c32:	693b      	ldr	r3, [r7, #16]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d101      	bne.n	8006c3c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006c38:	2303      	movs	r3, #3
 8006c3a:	e0bf      	b.n	8006dbc <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	781b      	ldrb	r3, [r3, #0]
 8006c40:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d050      	beq.n	8006cea <USBD_CDC_Setup+0xde>
 8006c48:	2b20      	cmp	r3, #32
 8006c4a:	f040 80af 	bne.w	8006dac <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	88db      	ldrh	r3, [r3, #6]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d03a      	beq.n	8006ccc <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	781b      	ldrb	r3, [r3, #0]
 8006c5a:	b25b      	sxtb	r3, r3
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	da1b      	bge.n	8006c98 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006c66:	687a      	ldr	r2, [r7, #4]
 8006c68:	33b0      	adds	r3, #176	@ 0xb0
 8006c6a:	009b      	lsls	r3, r3, #2
 8006c6c:	4413      	add	r3, r2
 8006c6e:	685b      	ldr	r3, [r3, #4]
 8006c70:	689b      	ldr	r3, [r3, #8]
 8006c72:	683a      	ldr	r2, [r7, #0]
 8006c74:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8006c76:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006c78:	683a      	ldr	r2, [r7, #0]
 8006c7a:	88d2      	ldrh	r2, [r2, #6]
 8006c7c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	88db      	ldrh	r3, [r3, #6]
 8006c82:	2b07      	cmp	r3, #7
 8006c84:	bf28      	it	cs
 8006c86:	2307      	movcs	r3, #7
 8006c88:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006c8a:	693b      	ldr	r3, [r7, #16]
 8006c8c:	89fa      	ldrh	r2, [r7, #14]
 8006c8e:	4619      	mov	r1, r3
 8006c90:	6878      	ldr	r0, [r7, #4]
 8006c92:	f001 fdd1 	bl	8008838 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8006c96:	e090      	b.n	8006dba <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	785a      	ldrb	r2, [r3, #1]
 8006c9c:	693b      	ldr	r3, [r7, #16]
 8006c9e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	88db      	ldrh	r3, [r3, #6]
 8006ca6:	2b3f      	cmp	r3, #63	@ 0x3f
 8006ca8:	d803      	bhi.n	8006cb2 <USBD_CDC_Setup+0xa6>
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	88db      	ldrh	r3, [r3, #6]
 8006cae:	b2da      	uxtb	r2, r3
 8006cb0:	e000      	b.n	8006cb4 <USBD_CDC_Setup+0xa8>
 8006cb2:	2240      	movs	r2, #64	@ 0x40
 8006cb4:	693b      	ldr	r3, [r7, #16]
 8006cb6:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8006cba:	6939      	ldr	r1, [r7, #16]
 8006cbc:	693b      	ldr	r3, [r7, #16]
 8006cbe:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8006cc2:	461a      	mov	r2, r3
 8006cc4:	6878      	ldr	r0, [r7, #4]
 8006cc6:	f001 fde6 	bl	8008896 <USBD_CtlPrepareRx>
      break;
 8006cca:	e076      	b.n	8006dba <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006cd2:	687a      	ldr	r2, [r7, #4]
 8006cd4:	33b0      	adds	r3, #176	@ 0xb0
 8006cd6:	009b      	lsls	r3, r3, #2
 8006cd8:	4413      	add	r3, r2
 8006cda:	685b      	ldr	r3, [r3, #4]
 8006cdc:	689b      	ldr	r3, [r3, #8]
 8006cde:	683a      	ldr	r2, [r7, #0]
 8006ce0:	7850      	ldrb	r0, [r2, #1]
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	6839      	ldr	r1, [r7, #0]
 8006ce6:	4798      	blx	r3
      break;
 8006ce8:	e067      	b.n	8006dba <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	785b      	ldrb	r3, [r3, #1]
 8006cee:	2b0b      	cmp	r3, #11
 8006cf0:	d851      	bhi.n	8006d96 <USBD_CDC_Setup+0x18a>
 8006cf2:	a201      	add	r2, pc, #4	@ (adr r2, 8006cf8 <USBD_CDC_Setup+0xec>)
 8006cf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cf8:	08006d29 	.word	0x08006d29
 8006cfc:	08006da5 	.word	0x08006da5
 8006d00:	08006d97 	.word	0x08006d97
 8006d04:	08006d97 	.word	0x08006d97
 8006d08:	08006d97 	.word	0x08006d97
 8006d0c:	08006d97 	.word	0x08006d97
 8006d10:	08006d97 	.word	0x08006d97
 8006d14:	08006d97 	.word	0x08006d97
 8006d18:	08006d97 	.word	0x08006d97
 8006d1c:	08006d97 	.word	0x08006d97
 8006d20:	08006d53 	.word	0x08006d53
 8006d24:	08006d7d 	.word	0x08006d7d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006d2e:	b2db      	uxtb	r3, r3
 8006d30:	2b03      	cmp	r3, #3
 8006d32:	d107      	bne.n	8006d44 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006d34:	f107 030a 	add.w	r3, r7, #10
 8006d38:	2202      	movs	r2, #2
 8006d3a:	4619      	mov	r1, r3
 8006d3c:	6878      	ldr	r0, [r7, #4]
 8006d3e:	f001 fd7b 	bl	8008838 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006d42:	e032      	b.n	8006daa <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006d44:	6839      	ldr	r1, [r7, #0]
 8006d46:	6878      	ldr	r0, [r7, #4]
 8006d48:	f001 fcf9 	bl	800873e <USBD_CtlError>
            ret = USBD_FAIL;
 8006d4c:	2303      	movs	r3, #3
 8006d4e:	75fb      	strb	r3, [r7, #23]
          break;
 8006d50:	e02b      	b.n	8006daa <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006d58:	b2db      	uxtb	r3, r3
 8006d5a:	2b03      	cmp	r3, #3
 8006d5c:	d107      	bne.n	8006d6e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006d5e:	f107 030d 	add.w	r3, r7, #13
 8006d62:	2201      	movs	r2, #1
 8006d64:	4619      	mov	r1, r3
 8006d66:	6878      	ldr	r0, [r7, #4]
 8006d68:	f001 fd66 	bl	8008838 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006d6c:	e01d      	b.n	8006daa <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006d6e:	6839      	ldr	r1, [r7, #0]
 8006d70:	6878      	ldr	r0, [r7, #4]
 8006d72:	f001 fce4 	bl	800873e <USBD_CtlError>
            ret = USBD_FAIL;
 8006d76:	2303      	movs	r3, #3
 8006d78:	75fb      	strb	r3, [r7, #23]
          break;
 8006d7a:	e016      	b.n	8006daa <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006d82:	b2db      	uxtb	r3, r3
 8006d84:	2b03      	cmp	r3, #3
 8006d86:	d00f      	beq.n	8006da8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006d88:	6839      	ldr	r1, [r7, #0]
 8006d8a:	6878      	ldr	r0, [r7, #4]
 8006d8c:	f001 fcd7 	bl	800873e <USBD_CtlError>
            ret = USBD_FAIL;
 8006d90:	2303      	movs	r3, #3
 8006d92:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006d94:	e008      	b.n	8006da8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006d96:	6839      	ldr	r1, [r7, #0]
 8006d98:	6878      	ldr	r0, [r7, #4]
 8006d9a:	f001 fcd0 	bl	800873e <USBD_CtlError>
          ret = USBD_FAIL;
 8006d9e:	2303      	movs	r3, #3
 8006da0:	75fb      	strb	r3, [r7, #23]
          break;
 8006da2:	e002      	b.n	8006daa <USBD_CDC_Setup+0x19e>
          break;
 8006da4:	bf00      	nop
 8006da6:	e008      	b.n	8006dba <USBD_CDC_Setup+0x1ae>
          break;
 8006da8:	bf00      	nop
      }
      break;
 8006daa:	e006      	b.n	8006dba <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006dac:	6839      	ldr	r1, [r7, #0]
 8006dae:	6878      	ldr	r0, [r7, #4]
 8006db0:	f001 fcc5 	bl	800873e <USBD_CtlError>
      ret = USBD_FAIL;
 8006db4:	2303      	movs	r3, #3
 8006db6:	75fb      	strb	r3, [r7, #23]
      break;
 8006db8:	bf00      	nop
  }

  return (uint8_t)ret;
 8006dba:	7dfb      	ldrb	r3, [r7, #23]
}
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	3718      	adds	r7, #24
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	bd80      	pop	{r7, pc}

08006dc4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	b084      	sub	sp, #16
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
 8006dcc:	460b      	mov	r3, r1
 8006dce:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006dd6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	32b0      	adds	r2, #176	@ 0xb0
 8006de2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d101      	bne.n	8006dee <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8006dea:	2303      	movs	r3, #3
 8006dec:	e065      	b.n	8006eba <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	32b0      	adds	r2, #176	@ 0xb0
 8006df8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006dfc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006dfe:	78fb      	ldrb	r3, [r7, #3]
 8006e00:	f003 020f 	and.w	r2, r3, #15
 8006e04:	6879      	ldr	r1, [r7, #4]
 8006e06:	4613      	mov	r3, r2
 8006e08:	009b      	lsls	r3, r3, #2
 8006e0a:	4413      	add	r3, r2
 8006e0c:	009b      	lsls	r3, r3, #2
 8006e0e:	440b      	add	r3, r1
 8006e10:	3314      	adds	r3, #20
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d02f      	beq.n	8006e78 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006e18:	78fb      	ldrb	r3, [r7, #3]
 8006e1a:	f003 020f 	and.w	r2, r3, #15
 8006e1e:	6879      	ldr	r1, [r7, #4]
 8006e20:	4613      	mov	r3, r2
 8006e22:	009b      	lsls	r3, r3, #2
 8006e24:	4413      	add	r3, r2
 8006e26:	009b      	lsls	r3, r3, #2
 8006e28:	440b      	add	r3, r1
 8006e2a:	3314      	adds	r3, #20
 8006e2c:	681a      	ldr	r2, [r3, #0]
 8006e2e:	78fb      	ldrb	r3, [r7, #3]
 8006e30:	f003 010f 	and.w	r1, r3, #15
 8006e34:	68f8      	ldr	r0, [r7, #12]
 8006e36:	460b      	mov	r3, r1
 8006e38:	00db      	lsls	r3, r3, #3
 8006e3a:	440b      	add	r3, r1
 8006e3c:	009b      	lsls	r3, r3, #2
 8006e3e:	4403      	add	r3, r0
 8006e40:	331c      	adds	r3, #28
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	fbb2 f1f3 	udiv	r1, r2, r3
 8006e48:	fb01 f303 	mul.w	r3, r1, r3
 8006e4c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d112      	bne.n	8006e78 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8006e52:	78fb      	ldrb	r3, [r7, #3]
 8006e54:	f003 020f 	and.w	r2, r3, #15
 8006e58:	6879      	ldr	r1, [r7, #4]
 8006e5a:	4613      	mov	r3, r2
 8006e5c:	009b      	lsls	r3, r3, #2
 8006e5e:	4413      	add	r3, r2
 8006e60:	009b      	lsls	r3, r3, #2
 8006e62:	440b      	add	r3, r1
 8006e64:	3314      	adds	r3, #20
 8006e66:	2200      	movs	r2, #0
 8006e68:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006e6a:	78f9      	ldrb	r1, [r7, #3]
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	2200      	movs	r2, #0
 8006e70:	6878      	ldr	r0, [r7, #4]
 8006e72:	f002 fa28 	bl	80092c6 <USBD_LL_Transmit>
 8006e76:	e01f      	b.n	8006eb8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006e78:	68bb      	ldr	r3, [r7, #8]
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006e86:	687a      	ldr	r2, [r7, #4]
 8006e88:	33b0      	adds	r3, #176	@ 0xb0
 8006e8a:	009b      	lsls	r3, r3, #2
 8006e8c:	4413      	add	r3, r2
 8006e8e:	685b      	ldr	r3, [r3, #4]
 8006e90:	691b      	ldr	r3, [r3, #16]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d010      	beq.n	8006eb8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006e9c:	687a      	ldr	r2, [r7, #4]
 8006e9e:	33b0      	adds	r3, #176	@ 0xb0
 8006ea0:	009b      	lsls	r3, r3, #2
 8006ea2:	4413      	add	r3, r2
 8006ea4:	685b      	ldr	r3, [r3, #4]
 8006ea6:	691b      	ldr	r3, [r3, #16]
 8006ea8:	68ba      	ldr	r2, [r7, #8]
 8006eaa:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8006eae:	68ba      	ldr	r2, [r7, #8]
 8006eb0:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8006eb4:	78fa      	ldrb	r2, [r7, #3]
 8006eb6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006eb8:	2300      	movs	r3, #0
}
 8006eba:	4618      	mov	r0, r3
 8006ebc:	3710      	adds	r7, #16
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	bd80      	pop	{r7, pc}

08006ec2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006ec2:	b580      	push	{r7, lr}
 8006ec4:	b084      	sub	sp, #16
 8006ec6:	af00      	add	r7, sp, #0
 8006ec8:	6078      	str	r0, [r7, #4]
 8006eca:	460b      	mov	r3, r1
 8006ecc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	32b0      	adds	r2, #176	@ 0xb0
 8006ed8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006edc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	32b0      	adds	r2, #176	@ 0xb0
 8006ee8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d101      	bne.n	8006ef4 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006ef0:	2303      	movs	r3, #3
 8006ef2:	e01a      	b.n	8006f2a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006ef4:	78fb      	ldrb	r3, [r7, #3]
 8006ef6:	4619      	mov	r1, r3
 8006ef8:	6878      	ldr	r0, [r7, #4]
 8006efa:	f002 fa26 	bl	800934a <USBD_LL_GetRxDataSize>
 8006efe:	4602      	mov	r2, r0
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006f0c:	687a      	ldr	r2, [r7, #4]
 8006f0e:	33b0      	adds	r3, #176	@ 0xb0
 8006f10:	009b      	lsls	r3, r3, #2
 8006f12:	4413      	add	r3, r2
 8006f14:	685b      	ldr	r3, [r3, #4]
 8006f16:	68db      	ldr	r3, [r3, #12]
 8006f18:	68fa      	ldr	r2, [r7, #12]
 8006f1a:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8006f1e:	68fa      	ldr	r2, [r7, #12]
 8006f20:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8006f24:	4611      	mov	r1, r2
 8006f26:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006f28:	2300      	movs	r3, #0
}
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	3710      	adds	r7, #16
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	bd80      	pop	{r7, pc}

08006f32 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006f32:	b580      	push	{r7, lr}
 8006f34:	b084      	sub	sp, #16
 8006f36:	af00      	add	r7, sp, #0
 8006f38:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	32b0      	adds	r2, #176	@ 0xb0
 8006f44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f48:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d101      	bne.n	8006f54 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006f50:	2303      	movs	r3, #3
 8006f52:	e024      	b.n	8006f9e <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006f5a:	687a      	ldr	r2, [r7, #4]
 8006f5c:	33b0      	adds	r3, #176	@ 0xb0
 8006f5e:	009b      	lsls	r3, r3, #2
 8006f60:	4413      	add	r3, r2
 8006f62:	685b      	ldr	r3, [r3, #4]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d019      	beq.n	8006f9c <USBD_CDC_EP0_RxReady+0x6a>
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8006f6e:	2bff      	cmp	r3, #255	@ 0xff
 8006f70:	d014      	beq.n	8006f9c <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006f78:	687a      	ldr	r2, [r7, #4]
 8006f7a:	33b0      	adds	r3, #176	@ 0xb0
 8006f7c:	009b      	lsls	r3, r3, #2
 8006f7e:	4413      	add	r3, r2
 8006f80:	685b      	ldr	r3, [r3, #4]
 8006f82:	689b      	ldr	r3, [r3, #8]
 8006f84:	68fa      	ldr	r2, [r7, #12]
 8006f86:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8006f8a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8006f8c:	68fa      	ldr	r2, [r7, #12]
 8006f8e:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006f92:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	22ff      	movs	r2, #255	@ 0xff
 8006f98:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8006f9c:	2300      	movs	r3, #0
}
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	3710      	adds	r7, #16
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	bd80      	pop	{r7, pc}
	...

08006fa8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b086      	sub	sp, #24
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006fb0:	2182      	movs	r1, #130	@ 0x82
 8006fb2:	4818      	ldr	r0, [pc, #96]	@ (8007014 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006fb4:	f000 fd62 	bl	8007a7c <USBD_GetEpDesc>
 8006fb8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006fba:	2101      	movs	r1, #1
 8006fbc:	4815      	ldr	r0, [pc, #84]	@ (8007014 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006fbe:	f000 fd5d 	bl	8007a7c <USBD_GetEpDesc>
 8006fc2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006fc4:	2181      	movs	r1, #129	@ 0x81
 8006fc6:	4813      	ldr	r0, [pc, #76]	@ (8007014 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006fc8:	f000 fd58 	bl	8007a7c <USBD_GetEpDesc>
 8006fcc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006fce:	697b      	ldr	r3, [r7, #20]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d002      	beq.n	8006fda <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006fd4:	697b      	ldr	r3, [r7, #20]
 8006fd6:	2210      	movs	r2, #16
 8006fd8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006fda:	693b      	ldr	r3, [r7, #16]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d006      	beq.n	8006fee <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006fe0:	693b      	ldr	r3, [r7, #16]
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006fe8:	711a      	strb	r2, [r3, #4]
 8006fea:	2200      	movs	r2, #0
 8006fec:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d006      	beq.n	8007002 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006ffc:	711a      	strb	r2, [r3, #4]
 8006ffe:	2200      	movs	r2, #0
 8007000:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	2243      	movs	r2, #67	@ 0x43
 8007006:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007008:	4b02      	ldr	r3, [pc, #8]	@ (8007014 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800700a:	4618      	mov	r0, r3
 800700c:	3718      	adds	r7, #24
 800700e:	46bd      	mov	sp, r7
 8007010:	bd80      	pop	{r7, pc}
 8007012:	bf00      	nop
 8007014:	20000060 	.word	0x20000060

08007018 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007018:	b580      	push	{r7, lr}
 800701a:	b086      	sub	sp, #24
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007020:	2182      	movs	r1, #130	@ 0x82
 8007022:	4818      	ldr	r0, [pc, #96]	@ (8007084 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007024:	f000 fd2a 	bl	8007a7c <USBD_GetEpDesc>
 8007028:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800702a:	2101      	movs	r1, #1
 800702c:	4815      	ldr	r0, [pc, #84]	@ (8007084 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800702e:	f000 fd25 	bl	8007a7c <USBD_GetEpDesc>
 8007032:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007034:	2181      	movs	r1, #129	@ 0x81
 8007036:	4813      	ldr	r0, [pc, #76]	@ (8007084 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007038:	f000 fd20 	bl	8007a7c <USBD_GetEpDesc>
 800703c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800703e:	697b      	ldr	r3, [r7, #20]
 8007040:	2b00      	cmp	r3, #0
 8007042:	d002      	beq.n	800704a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8007044:	697b      	ldr	r3, [r7, #20]
 8007046:	2210      	movs	r2, #16
 8007048:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800704a:	693b      	ldr	r3, [r7, #16]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d006      	beq.n	800705e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007050:	693b      	ldr	r3, [r7, #16]
 8007052:	2200      	movs	r2, #0
 8007054:	711a      	strb	r2, [r3, #4]
 8007056:	2200      	movs	r2, #0
 8007058:	f042 0202 	orr.w	r2, r2, #2
 800705c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d006      	beq.n	8007072 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	2200      	movs	r2, #0
 8007068:	711a      	strb	r2, [r3, #4]
 800706a:	2200      	movs	r2, #0
 800706c:	f042 0202 	orr.w	r2, r2, #2
 8007070:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2243      	movs	r2, #67	@ 0x43
 8007076:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007078:	4b02      	ldr	r3, [pc, #8]	@ (8007084 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800707a:	4618      	mov	r0, r3
 800707c:	3718      	adds	r7, #24
 800707e:	46bd      	mov	sp, r7
 8007080:	bd80      	pop	{r7, pc}
 8007082:	bf00      	nop
 8007084:	20000060 	.word	0x20000060

08007088 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007088:	b580      	push	{r7, lr}
 800708a:	b086      	sub	sp, #24
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007090:	2182      	movs	r1, #130	@ 0x82
 8007092:	4818      	ldr	r0, [pc, #96]	@ (80070f4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007094:	f000 fcf2 	bl	8007a7c <USBD_GetEpDesc>
 8007098:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800709a:	2101      	movs	r1, #1
 800709c:	4815      	ldr	r0, [pc, #84]	@ (80070f4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800709e:	f000 fced 	bl	8007a7c <USBD_GetEpDesc>
 80070a2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80070a4:	2181      	movs	r1, #129	@ 0x81
 80070a6:	4813      	ldr	r0, [pc, #76]	@ (80070f4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80070a8:	f000 fce8 	bl	8007a7c <USBD_GetEpDesc>
 80070ac:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80070ae:	697b      	ldr	r3, [r7, #20]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d002      	beq.n	80070ba <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80070b4:	697b      	ldr	r3, [r7, #20]
 80070b6:	2210      	movs	r2, #16
 80070b8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80070ba:	693b      	ldr	r3, [r7, #16]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d006      	beq.n	80070ce <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80070c0:	693b      	ldr	r3, [r7, #16]
 80070c2:	2200      	movs	r2, #0
 80070c4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80070c8:	711a      	strb	r2, [r3, #4]
 80070ca:	2200      	movs	r2, #0
 80070cc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d006      	beq.n	80070e2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	2200      	movs	r2, #0
 80070d8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80070dc:	711a      	strb	r2, [r3, #4]
 80070de:	2200      	movs	r2, #0
 80070e0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2243      	movs	r2, #67	@ 0x43
 80070e6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80070e8:	4b02      	ldr	r3, [pc, #8]	@ (80070f4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80070ea:	4618      	mov	r0, r3
 80070ec:	3718      	adds	r7, #24
 80070ee:	46bd      	mov	sp, r7
 80070f0:	bd80      	pop	{r7, pc}
 80070f2:	bf00      	nop
 80070f4:	20000060 	.word	0x20000060

080070f8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80070f8:	b480      	push	{r7}
 80070fa:	b083      	sub	sp, #12
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	220a      	movs	r2, #10
 8007104:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007106:	4b03      	ldr	r3, [pc, #12]	@ (8007114 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007108:	4618      	mov	r0, r3
 800710a:	370c      	adds	r7, #12
 800710c:	46bd      	mov	sp, r7
 800710e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007112:	4770      	bx	lr
 8007114:	2000001c 	.word	0x2000001c

08007118 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007118:	b480      	push	{r7}
 800711a:	b083      	sub	sp, #12
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
 8007120:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d101      	bne.n	800712c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007128:	2303      	movs	r3, #3
 800712a:	e009      	b.n	8007140 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007132:	687a      	ldr	r2, [r7, #4]
 8007134:	33b0      	adds	r3, #176	@ 0xb0
 8007136:	009b      	lsls	r3, r3, #2
 8007138:	4413      	add	r3, r2
 800713a:	683a      	ldr	r2, [r7, #0]
 800713c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800713e:	2300      	movs	r3, #0
}
 8007140:	4618      	mov	r0, r3
 8007142:	370c      	adds	r7, #12
 8007144:	46bd      	mov	sp, r7
 8007146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714a:	4770      	bx	lr

0800714c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800714c:	b480      	push	{r7}
 800714e:	b087      	sub	sp, #28
 8007150:	af00      	add	r7, sp, #0
 8007152:	60f8      	str	r0, [r7, #12]
 8007154:	60b9      	str	r1, [r7, #8]
 8007156:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	32b0      	adds	r2, #176	@ 0xb0
 8007162:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007166:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8007168:	697b      	ldr	r3, [r7, #20]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d101      	bne.n	8007172 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800716e:	2303      	movs	r3, #3
 8007170:	e008      	b.n	8007184 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8007172:	697b      	ldr	r3, [r7, #20]
 8007174:	68ba      	ldr	r2, [r7, #8]
 8007176:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800717a:	697b      	ldr	r3, [r7, #20]
 800717c:	687a      	ldr	r2, [r7, #4]
 800717e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8007182:	2300      	movs	r3, #0
}
 8007184:	4618      	mov	r0, r3
 8007186:	371c      	adds	r7, #28
 8007188:	46bd      	mov	sp, r7
 800718a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718e:	4770      	bx	lr

08007190 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007190:	b480      	push	{r7}
 8007192:	b085      	sub	sp, #20
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
 8007198:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	32b0      	adds	r2, #176	@ 0xb0
 80071a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071a8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d101      	bne.n	80071b4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80071b0:	2303      	movs	r3, #3
 80071b2:	e004      	b.n	80071be <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	683a      	ldr	r2, [r7, #0]
 80071b8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 80071bc:	2300      	movs	r3, #0
}
 80071be:	4618      	mov	r0, r3
 80071c0:	3714      	adds	r7, #20
 80071c2:	46bd      	mov	sp, r7
 80071c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c8:	4770      	bx	lr
	...

080071cc <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b084      	sub	sp, #16
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	32b0      	adds	r2, #176	@ 0xb0
 80071de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071e2:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 80071e4:	2301      	movs	r3, #1
 80071e6:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80071e8:	68bb      	ldr	r3, [r7, #8]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d101      	bne.n	80071f2 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80071ee:	2303      	movs	r3, #3
 80071f0:	e025      	b.n	800723e <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 80071f2:	68bb      	ldr	r3, [r7, #8]
 80071f4:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d11f      	bne.n	800723c <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80071fc:	68bb      	ldr	r3, [r7, #8]
 80071fe:	2201      	movs	r2, #1
 8007200:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8007204:	4b10      	ldr	r3, [pc, #64]	@ (8007248 <USBD_CDC_TransmitPacket+0x7c>)
 8007206:	781b      	ldrb	r3, [r3, #0]
 8007208:	f003 020f 	and.w	r2, r3, #15
 800720c:	68bb      	ldr	r3, [r7, #8]
 800720e:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8007212:	6878      	ldr	r0, [r7, #4]
 8007214:	4613      	mov	r3, r2
 8007216:	009b      	lsls	r3, r3, #2
 8007218:	4413      	add	r3, r2
 800721a:	009b      	lsls	r3, r3, #2
 800721c:	4403      	add	r3, r0
 800721e:	3314      	adds	r3, #20
 8007220:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8007222:	4b09      	ldr	r3, [pc, #36]	@ (8007248 <USBD_CDC_TransmitPacket+0x7c>)
 8007224:	7819      	ldrb	r1, [r3, #0]
 8007226:	68bb      	ldr	r3, [r7, #8]
 8007228:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800722c:	68bb      	ldr	r3, [r7, #8]
 800722e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8007232:	6878      	ldr	r0, [r7, #4]
 8007234:	f002 f847 	bl	80092c6 <USBD_LL_Transmit>

    ret = USBD_OK;
 8007238:	2300      	movs	r3, #0
 800723a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800723c:	7bfb      	ldrb	r3, [r7, #15]
}
 800723e:	4618      	mov	r0, r3
 8007240:	3710      	adds	r7, #16
 8007242:	46bd      	mov	sp, r7
 8007244:	bd80      	pop	{r7, pc}
 8007246:	bf00      	nop
 8007248:	200000a3 	.word	0x200000a3

0800724c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800724c:	b580      	push	{r7, lr}
 800724e:	b084      	sub	sp, #16
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	32b0      	adds	r2, #176	@ 0xb0
 800725e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007262:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	32b0      	adds	r2, #176	@ 0xb0
 800726e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d101      	bne.n	800727a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8007276:	2303      	movs	r3, #3
 8007278:	e018      	b.n	80072ac <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	7c1b      	ldrb	r3, [r3, #16]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d10a      	bne.n	8007298 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007282:	4b0c      	ldr	r3, [pc, #48]	@ (80072b4 <USBD_CDC_ReceivePacket+0x68>)
 8007284:	7819      	ldrb	r1, [r3, #0]
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800728c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007290:	6878      	ldr	r0, [r7, #4]
 8007292:	f002 f839 	bl	8009308 <USBD_LL_PrepareReceive>
 8007296:	e008      	b.n	80072aa <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007298:	4b06      	ldr	r3, [pc, #24]	@ (80072b4 <USBD_CDC_ReceivePacket+0x68>)
 800729a:	7819      	ldrb	r1, [r3, #0]
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80072a2:	2340      	movs	r3, #64	@ 0x40
 80072a4:	6878      	ldr	r0, [r7, #4]
 80072a6:	f002 f82f 	bl	8009308 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80072aa:	2300      	movs	r3, #0
}
 80072ac:	4618      	mov	r0, r3
 80072ae:	3710      	adds	r7, #16
 80072b0:	46bd      	mov	sp, r7
 80072b2:	bd80      	pop	{r7, pc}
 80072b4:	200000a4 	.word	0x200000a4

080072b8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b086      	sub	sp, #24
 80072bc:	af00      	add	r7, sp, #0
 80072be:	60f8      	str	r0, [r7, #12]
 80072c0:	60b9      	str	r1, [r7, #8]
 80072c2:	4613      	mov	r3, r2
 80072c4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d101      	bne.n	80072d0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80072cc:	2303      	movs	r3, #3
 80072ce:	e01f      	b.n	8007310 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	2200      	movs	r2, #0
 80072d4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	2200      	movs	r2, #0
 80072dc:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	2200      	movs	r2, #0
 80072e4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80072e8:	68bb      	ldr	r3, [r7, #8]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d003      	beq.n	80072f6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	68ba      	ldr	r2, [r7, #8]
 80072f2:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	2201      	movs	r2, #1
 80072fa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	79fa      	ldrb	r2, [r7, #7]
 8007302:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007304:	68f8      	ldr	r0, [r7, #12]
 8007306:	f001 fea9 	bl	800905c <USBD_LL_Init>
 800730a:	4603      	mov	r3, r0
 800730c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800730e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007310:	4618      	mov	r0, r3
 8007312:	3718      	adds	r7, #24
 8007314:	46bd      	mov	sp, r7
 8007316:	bd80      	pop	{r7, pc}

08007318 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b084      	sub	sp, #16
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
 8007320:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007322:	2300      	movs	r3, #0
 8007324:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d101      	bne.n	8007330 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800732c:	2303      	movs	r3, #3
 800732e:	e025      	b.n	800737c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	683a      	ldr	r2, [r7, #0]
 8007334:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	32ae      	adds	r2, #174	@ 0xae
 8007342:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007346:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007348:	2b00      	cmp	r3, #0
 800734a:	d00f      	beq.n	800736c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	32ae      	adds	r2, #174	@ 0xae
 8007356:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800735a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800735c:	f107 020e 	add.w	r2, r7, #14
 8007360:	4610      	mov	r0, r2
 8007362:	4798      	blx	r3
 8007364:	4602      	mov	r2, r0
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8007372:	1c5a      	adds	r2, r3, #1
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800737a:	2300      	movs	r3, #0
}
 800737c:	4618      	mov	r0, r3
 800737e:	3710      	adds	r7, #16
 8007380:	46bd      	mov	sp, r7
 8007382:	bd80      	pop	{r7, pc}

08007384 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007384:	b580      	push	{r7, lr}
 8007386:	b082      	sub	sp, #8
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800738c:	6878      	ldr	r0, [r7, #4]
 800738e:	f001 feb1 	bl	80090f4 <USBD_LL_Start>
 8007392:	4603      	mov	r3, r0
}
 8007394:	4618      	mov	r0, r3
 8007396:	3708      	adds	r7, #8
 8007398:	46bd      	mov	sp, r7
 800739a:	bd80      	pop	{r7, pc}

0800739c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800739c:	b480      	push	{r7}
 800739e:	b083      	sub	sp, #12
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80073a4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80073a6:	4618      	mov	r0, r3
 80073a8:	370c      	adds	r7, #12
 80073aa:	46bd      	mov	sp, r7
 80073ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b0:	4770      	bx	lr

080073b2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80073b2:	b580      	push	{r7, lr}
 80073b4:	b084      	sub	sp, #16
 80073b6:	af00      	add	r7, sp, #0
 80073b8:	6078      	str	r0, [r7, #4]
 80073ba:	460b      	mov	r3, r1
 80073bc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80073be:	2300      	movs	r3, #0
 80073c0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d009      	beq.n	80073e0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	78fa      	ldrb	r2, [r7, #3]
 80073d6:	4611      	mov	r1, r2
 80073d8:	6878      	ldr	r0, [r7, #4]
 80073da:	4798      	blx	r3
 80073dc:	4603      	mov	r3, r0
 80073de:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80073e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80073e2:	4618      	mov	r0, r3
 80073e4:	3710      	adds	r7, #16
 80073e6:	46bd      	mov	sp, r7
 80073e8:	bd80      	pop	{r7, pc}

080073ea <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80073ea:	b580      	push	{r7, lr}
 80073ec:	b084      	sub	sp, #16
 80073ee:	af00      	add	r7, sp, #0
 80073f0:	6078      	str	r0, [r7, #4]
 80073f2:	460b      	mov	r3, r1
 80073f4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80073f6:	2300      	movs	r3, #0
 80073f8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007400:	685b      	ldr	r3, [r3, #4]
 8007402:	78fa      	ldrb	r2, [r7, #3]
 8007404:	4611      	mov	r1, r2
 8007406:	6878      	ldr	r0, [r7, #4]
 8007408:	4798      	blx	r3
 800740a:	4603      	mov	r3, r0
 800740c:	2b00      	cmp	r3, #0
 800740e:	d001      	beq.n	8007414 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007410:	2303      	movs	r3, #3
 8007412:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007414:	7bfb      	ldrb	r3, [r7, #15]
}
 8007416:	4618      	mov	r0, r3
 8007418:	3710      	adds	r7, #16
 800741a:	46bd      	mov	sp, r7
 800741c:	bd80      	pop	{r7, pc}

0800741e <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800741e:	b580      	push	{r7, lr}
 8007420:	b084      	sub	sp, #16
 8007422:	af00      	add	r7, sp, #0
 8007424:	6078      	str	r0, [r7, #4]
 8007426:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800742e:	6839      	ldr	r1, [r7, #0]
 8007430:	4618      	mov	r0, r3
 8007432:	f001 f94a 	bl	80086ca <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	2201      	movs	r2, #1
 800743a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8007444:	461a      	mov	r2, r3
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007452:	f003 031f 	and.w	r3, r3, #31
 8007456:	2b02      	cmp	r3, #2
 8007458:	d01a      	beq.n	8007490 <USBD_LL_SetupStage+0x72>
 800745a:	2b02      	cmp	r3, #2
 800745c:	d822      	bhi.n	80074a4 <USBD_LL_SetupStage+0x86>
 800745e:	2b00      	cmp	r3, #0
 8007460:	d002      	beq.n	8007468 <USBD_LL_SetupStage+0x4a>
 8007462:	2b01      	cmp	r3, #1
 8007464:	d00a      	beq.n	800747c <USBD_LL_SetupStage+0x5e>
 8007466:	e01d      	b.n	80074a4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800746e:	4619      	mov	r1, r3
 8007470:	6878      	ldr	r0, [r7, #4]
 8007472:	f000 fb75 	bl	8007b60 <USBD_StdDevReq>
 8007476:	4603      	mov	r3, r0
 8007478:	73fb      	strb	r3, [r7, #15]
      break;
 800747a:	e020      	b.n	80074be <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007482:	4619      	mov	r1, r3
 8007484:	6878      	ldr	r0, [r7, #4]
 8007486:	f000 fbdd 	bl	8007c44 <USBD_StdItfReq>
 800748a:	4603      	mov	r3, r0
 800748c:	73fb      	strb	r3, [r7, #15]
      break;
 800748e:	e016      	b.n	80074be <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007496:	4619      	mov	r1, r3
 8007498:	6878      	ldr	r0, [r7, #4]
 800749a:	f000 fc3f 	bl	8007d1c <USBD_StdEPReq>
 800749e:	4603      	mov	r3, r0
 80074a0:	73fb      	strb	r3, [r7, #15]
      break;
 80074a2:	e00c      	b.n	80074be <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80074aa:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80074ae:	b2db      	uxtb	r3, r3
 80074b0:	4619      	mov	r1, r3
 80074b2:	6878      	ldr	r0, [r7, #4]
 80074b4:	f001 fe7e 	bl	80091b4 <USBD_LL_StallEP>
 80074b8:	4603      	mov	r3, r0
 80074ba:	73fb      	strb	r3, [r7, #15]
      break;
 80074bc:	bf00      	nop
  }

  return ret;
 80074be:	7bfb      	ldrb	r3, [r7, #15]
}
 80074c0:	4618      	mov	r0, r3
 80074c2:	3710      	adds	r7, #16
 80074c4:	46bd      	mov	sp, r7
 80074c6:	bd80      	pop	{r7, pc}

080074c8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b086      	sub	sp, #24
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	60f8      	str	r0, [r7, #12]
 80074d0:	460b      	mov	r3, r1
 80074d2:	607a      	str	r2, [r7, #4]
 80074d4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80074d6:	2300      	movs	r3, #0
 80074d8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 80074da:	7afb      	ldrb	r3, [r7, #11]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d177      	bne.n	80075d0 <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80074e6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80074ee:	2b03      	cmp	r3, #3
 80074f0:	f040 80a1 	bne.w	8007636 <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 80074f4:	693b      	ldr	r3, [r7, #16]
 80074f6:	685b      	ldr	r3, [r3, #4]
 80074f8:	693a      	ldr	r2, [r7, #16]
 80074fa:	8992      	ldrh	r2, [r2, #12]
 80074fc:	4293      	cmp	r3, r2
 80074fe:	d91c      	bls.n	800753a <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 8007500:	693b      	ldr	r3, [r7, #16]
 8007502:	685b      	ldr	r3, [r3, #4]
 8007504:	693a      	ldr	r2, [r7, #16]
 8007506:	8992      	ldrh	r2, [r2, #12]
 8007508:	1a9a      	subs	r2, r3, r2
 800750a:	693b      	ldr	r3, [r7, #16]
 800750c:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 800750e:	693b      	ldr	r3, [r7, #16]
 8007510:	691b      	ldr	r3, [r3, #16]
 8007512:	693a      	ldr	r2, [r7, #16]
 8007514:	8992      	ldrh	r2, [r2, #12]
 8007516:	441a      	add	r2, r3
 8007518:	693b      	ldr	r3, [r7, #16]
 800751a:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 800751c:	693b      	ldr	r3, [r7, #16]
 800751e:	6919      	ldr	r1, [r3, #16]
 8007520:	693b      	ldr	r3, [r7, #16]
 8007522:	899b      	ldrh	r3, [r3, #12]
 8007524:	461a      	mov	r2, r3
 8007526:	693b      	ldr	r3, [r7, #16]
 8007528:	685b      	ldr	r3, [r3, #4]
 800752a:	4293      	cmp	r3, r2
 800752c:	bf38      	it	cc
 800752e:	4613      	movcc	r3, r2
 8007530:	461a      	mov	r2, r3
 8007532:	68f8      	ldr	r0, [r7, #12]
 8007534:	f001 f9d0 	bl	80088d8 <USBD_CtlContinueRx>
 8007538:	e07d      	b.n	8007636 <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007540:	f003 031f 	and.w	r3, r3, #31
 8007544:	2b02      	cmp	r3, #2
 8007546:	d014      	beq.n	8007572 <USBD_LL_DataOutStage+0xaa>
 8007548:	2b02      	cmp	r3, #2
 800754a:	d81d      	bhi.n	8007588 <USBD_LL_DataOutStage+0xc0>
 800754c:	2b00      	cmp	r3, #0
 800754e:	d002      	beq.n	8007556 <USBD_LL_DataOutStage+0x8e>
 8007550:	2b01      	cmp	r3, #1
 8007552:	d003      	beq.n	800755c <USBD_LL_DataOutStage+0x94>
 8007554:	e018      	b.n	8007588 <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007556:	2300      	movs	r3, #0
 8007558:	75bb      	strb	r3, [r7, #22]
            break;
 800755a:	e018      	b.n	800758e <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8007562:	b2db      	uxtb	r3, r3
 8007564:	4619      	mov	r1, r3
 8007566:	68f8      	ldr	r0, [r7, #12]
 8007568:	f000 fa6e 	bl	8007a48 <USBD_CoreFindIF>
 800756c:	4603      	mov	r3, r0
 800756e:	75bb      	strb	r3, [r7, #22]
            break;
 8007570:	e00d      	b.n	800758e <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8007578:	b2db      	uxtb	r3, r3
 800757a:	4619      	mov	r1, r3
 800757c:	68f8      	ldr	r0, [r7, #12]
 800757e:	f000 fa70 	bl	8007a62 <USBD_CoreFindEP>
 8007582:	4603      	mov	r3, r0
 8007584:	75bb      	strb	r3, [r7, #22]
            break;
 8007586:	e002      	b.n	800758e <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007588:	2300      	movs	r3, #0
 800758a:	75bb      	strb	r3, [r7, #22]
            break;
 800758c:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800758e:	7dbb      	ldrb	r3, [r7, #22]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d119      	bne.n	80075c8 <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800759a:	b2db      	uxtb	r3, r3
 800759c:	2b03      	cmp	r3, #3
 800759e:	d113      	bne.n	80075c8 <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80075a0:	7dba      	ldrb	r2, [r7, #22]
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	32ae      	adds	r2, #174	@ 0xae
 80075a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075aa:	691b      	ldr	r3, [r3, #16]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d00b      	beq.n	80075c8 <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 80075b0:	7dba      	ldrb	r2, [r7, #22]
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80075b8:	7dba      	ldrb	r2, [r7, #22]
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	32ae      	adds	r2, #174	@ 0xae
 80075be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075c2:	691b      	ldr	r3, [r3, #16]
 80075c4:	68f8      	ldr	r0, [r7, #12]
 80075c6:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80075c8:	68f8      	ldr	r0, [r7, #12]
 80075ca:	f001 f996 	bl	80088fa <USBD_CtlSendStatus>
 80075ce:	e032      	b.n	8007636 <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80075d0:	7afb      	ldrb	r3, [r7, #11]
 80075d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80075d6:	b2db      	uxtb	r3, r3
 80075d8:	4619      	mov	r1, r3
 80075da:	68f8      	ldr	r0, [r7, #12]
 80075dc:	f000 fa41 	bl	8007a62 <USBD_CoreFindEP>
 80075e0:	4603      	mov	r3, r0
 80075e2:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80075e4:	7dbb      	ldrb	r3, [r7, #22]
 80075e6:	2bff      	cmp	r3, #255	@ 0xff
 80075e8:	d025      	beq.n	8007636 <USBD_LL_DataOutStage+0x16e>
 80075ea:	7dbb      	ldrb	r3, [r7, #22]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d122      	bne.n	8007636 <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80075f6:	b2db      	uxtb	r3, r3
 80075f8:	2b03      	cmp	r3, #3
 80075fa:	d117      	bne.n	800762c <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80075fc:	7dba      	ldrb	r2, [r7, #22]
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	32ae      	adds	r2, #174	@ 0xae
 8007602:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007606:	699b      	ldr	r3, [r3, #24]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d00f      	beq.n	800762c <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 800760c:	7dba      	ldrb	r2, [r7, #22]
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007614:	7dba      	ldrb	r2, [r7, #22]
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	32ae      	adds	r2, #174	@ 0xae
 800761a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800761e:	699b      	ldr	r3, [r3, #24]
 8007620:	7afa      	ldrb	r2, [r7, #11]
 8007622:	4611      	mov	r1, r2
 8007624:	68f8      	ldr	r0, [r7, #12]
 8007626:	4798      	blx	r3
 8007628:	4603      	mov	r3, r0
 800762a:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800762c:	7dfb      	ldrb	r3, [r7, #23]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d001      	beq.n	8007636 <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 8007632:	7dfb      	ldrb	r3, [r7, #23]
 8007634:	e000      	b.n	8007638 <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 8007636:	2300      	movs	r3, #0
}
 8007638:	4618      	mov	r0, r3
 800763a:	3718      	adds	r7, #24
 800763c:	46bd      	mov	sp, r7
 800763e:	bd80      	pop	{r7, pc}

08007640 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007640:	b580      	push	{r7, lr}
 8007642:	b086      	sub	sp, #24
 8007644:	af00      	add	r7, sp, #0
 8007646:	60f8      	str	r0, [r7, #12]
 8007648:	460b      	mov	r3, r1
 800764a:	607a      	str	r2, [r7, #4]
 800764c:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 800764e:	7afb      	ldrb	r3, [r7, #11]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d178      	bne.n	8007746 <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	3314      	adds	r3, #20
 8007658:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007660:	2b02      	cmp	r3, #2
 8007662:	d163      	bne.n	800772c <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 8007664:	693b      	ldr	r3, [r7, #16]
 8007666:	685b      	ldr	r3, [r3, #4]
 8007668:	693a      	ldr	r2, [r7, #16]
 800766a:	8992      	ldrh	r2, [r2, #12]
 800766c:	4293      	cmp	r3, r2
 800766e:	d91c      	bls.n	80076aa <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 8007670:	693b      	ldr	r3, [r7, #16]
 8007672:	685b      	ldr	r3, [r3, #4]
 8007674:	693a      	ldr	r2, [r7, #16]
 8007676:	8992      	ldrh	r2, [r2, #12]
 8007678:	1a9a      	subs	r2, r3, r2
 800767a:	693b      	ldr	r3, [r7, #16]
 800767c:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 800767e:	693b      	ldr	r3, [r7, #16]
 8007680:	691b      	ldr	r3, [r3, #16]
 8007682:	693a      	ldr	r2, [r7, #16]
 8007684:	8992      	ldrh	r2, [r2, #12]
 8007686:	441a      	add	r2, r3
 8007688:	693b      	ldr	r3, [r7, #16]
 800768a:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 800768c:	693b      	ldr	r3, [r7, #16]
 800768e:	6919      	ldr	r1, [r3, #16]
 8007690:	693b      	ldr	r3, [r7, #16]
 8007692:	685b      	ldr	r3, [r3, #4]
 8007694:	461a      	mov	r2, r3
 8007696:	68f8      	ldr	r0, [r7, #12]
 8007698:	f001 f8ec 	bl	8008874 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800769c:	2300      	movs	r3, #0
 800769e:	2200      	movs	r2, #0
 80076a0:	2100      	movs	r1, #0
 80076a2:	68f8      	ldr	r0, [r7, #12]
 80076a4:	f001 fe30 	bl	8009308 <USBD_LL_PrepareReceive>
 80076a8:	e040      	b.n	800772c <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80076aa:	693b      	ldr	r3, [r7, #16]
 80076ac:	899b      	ldrh	r3, [r3, #12]
 80076ae:	461a      	mov	r2, r3
 80076b0:	693b      	ldr	r3, [r7, #16]
 80076b2:	685b      	ldr	r3, [r3, #4]
 80076b4:	429a      	cmp	r2, r3
 80076b6:	d11c      	bne.n	80076f2 <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 80076b8:	693b      	ldr	r3, [r7, #16]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	693a      	ldr	r2, [r7, #16]
 80076be:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80076c0:	4293      	cmp	r3, r2
 80076c2:	d316      	bcc.n	80076f2 <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 80076c4:	693b      	ldr	r3, [r7, #16]
 80076c6:	681a      	ldr	r2, [r3, #0]
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80076ce:	429a      	cmp	r2, r3
 80076d0:	d20f      	bcs.n	80076f2 <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80076d2:	2200      	movs	r2, #0
 80076d4:	2100      	movs	r1, #0
 80076d6:	68f8      	ldr	r0, [r7, #12]
 80076d8:	f001 f8cc 	bl	8008874 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	2200      	movs	r2, #0
 80076e0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80076e4:	2300      	movs	r3, #0
 80076e6:	2200      	movs	r2, #0
 80076e8:	2100      	movs	r1, #0
 80076ea:	68f8      	ldr	r0, [r7, #12]
 80076ec:	f001 fe0c 	bl	8009308 <USBD_LL_PrepareReceive>
 80076f0:	e01c      	b.n	800772c <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80076f8:	b2db      	uxtb	r3, r3
 80076fa:	2b03      	cmp	r3, #3
 80076fc:	d10f      	bne.n	800771e <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007704:	68db      	ldr	r3, [r3, #12]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d009      	beq.n	800771e <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	2200      	movs	r2, #0
 800770e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007718:	68db      	ldr	r3, [r3, #12]
 800771a:	68f8      	ldr	r0, [r7, #12]
 800771c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800771e:	2180      	movs	r1, #128	@ 0x80
 8007720:	68f8      	ldr	r0, [r7, #12]
 8007722:	f001 fd47 	bl	80091b4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007726:	68f8      	ldr	r0, [r7, #12]
 8007728:	f001 f8fa 	bl	8008920 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8007732:	2b00      	cmp	r3, #0
 8007734:	d03a      	beq.n	80077ac <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 8007736:	68f8      	ldr	r0, [r7, #12]
 8007738:	f7ff fe30 	bl	800739c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	2200      	movs	r2, #0
 8007740:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8007744:	e032      	b.n	80077ac <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007746:	7afb      	ldrb	r3, [r7, #11]
 8007748:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800774c:	b2db      	uxtb	r3, r3
 800774e:	4619      	mov	r1, r3
 8007750:	68f8      	ldr	r0, [r7, #12]
 8007752:	f000 f986 	bl	8007a62 <USBD_CoreFindEP>
 8007756:	4603      	mov	r3, r0
 8007758:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800775a:	7dfb      	ldrb	r3, [r7, #23]
 800775c:	2bff      	cmp	r3, #255	@ 0xff
 800775e:	d025      	beq.n	80077ac <USBD_LL_DataInStage+0x16c>
 8007760:	7dfb      	ldrb	r3, [r7, #23]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d122      	bne.n	80077ac <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800776c:	b2db      	uxtb	r3, r3
 800776e:	2b03      	cmp	r3, #3
 8007770:	d11c      	bne.n	80077ac <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007772:	7dfa      	ldrb	r2, [r7, #23]
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	32ae      	adds	r2, #174	@ 0xae
 8007778:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800777c:	695b      	ldr	r3, [r3, #20]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d014      	beq.n	80077ac <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 8007782:	7dfa      	ldrb	r2, [r7, #23]
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800778a:	7dfa      	ldrb	r2, [r7, #23]
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	32ae      	adds	r2, #174	@ 0xae
 8007790:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007794:	695b      	ldr	r3, [r3, #20]
 8007796:	7afa      	ldrb	r2, [r7, #11]
 8007798:	4611      	mov	r1, r2
 800779a:	68f8      	ldr	r0, [r7, #12]
 800779c:	4798      	blx	r3
 800779e:	4603      	mov	r3, r0
 80077a0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80077a2:	7dbb      	ldrb	r3, [r7, #22]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d001      	beq.n	80077ac <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 80077a8:	7dbb      	ldrb	r3, [r7, #22]
 80077aa:	e000      	b.n	80077ae <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 80077ac:	2300      	movs	r3, #0
}
 80077ae:	4618      	mov	r0, r3
 80077b0:	3718      	adds	r7, #24
 80077b2:	46bd      	mov	sp, r7
 80077b4:	bd80      	pop	{r7, pc}

080077b6 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80077b6:	b580      	push	{r7, lr}
 80077b8:	b084      	sub	sp, #16
 80077ba:	af00      	add	r7, sp, #0
 80077bc:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80077be:	2300      	movs	r3, #0
 80077c0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	2201      	movs	r2, #1
 80077c6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	2200      	movs	r2, #0
 80077ce:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	2200      	movs	r2, #0
 80077d6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2200      	movs	r2, #0
 80077dc:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2200      	movs	r2, #0
 80077e4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d014      	beq.n	800781c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80077f8:	685b      	ldr	r3, [r3, #4]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d00e      	beq.n	800781c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007804:	685b      	ldr	r3, [r3, #4]
 8007806:	687a      	ldr	r2, [r7, #4]
 8007808:	6852      	ldr	r2, [r2, #4]
 800780a:	b2d2      	uxtb	r2, r2
 800780c:	4611      	mov	r1, r2
 800780e:	6878      	ldr	r0, [r7, #4]
 8007810:	4798      	blx	r3
 8007812:	4603      	mov	r3, r0
 8007814:	2b00      	cmp	r3, #0
 8007816:	d001      	beq.n	800781c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007818:	2303      	movs	r3, #3
 800781a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800781c:	2340      	movs	r3, #64	@ 0x40
 800781e:	2200      	movs	r2, #0
 8007820:	2100      	movs	r1, #0
 8007822:	6878      	ldr	r0, [r7, #4]
 8007824:	f001 fc81 	bl	800912a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2201      	movs	r2, #1
 800782c:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2240      	movs	r2, #64	@ 0x40
 8007834:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007838:	2340      	movs	r3, #64	@ 0x40
 800783a:	2200      	movs	r2, #0
 800783c:	2180      	movs	r1, #128	@ 0x80
 800783e:	6878      	ldr	r0, [r7, #4]
 8007840:	f001 fc73 	bl	800912a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2201      	movs	r2, #1
 8007848:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2240      	movs	r2, #64	@ 0x40
 8007850:	841a      	strh	r2, [r3, #32]

  return ret;
 8007852:	7bfb      	ldrb	r3, [r7, #15]
}
 8007854:	4618      	mov	r0, r3
 8007856:	3710      	adds	r7, #16
 8007858:	46bd      	mov	sp, r7
 800785a:	bd80      	pop	{r7, pc}

0800785c <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800785c:	b480      	push	{r7}
 800785e:	b083      	sub	sp, #12
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
 8007864:	460b      	mov	r3, r1
 8007866:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	78fa      	ldrb	r2, [r7, #3]
 800786c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800786e:	2300      	movs	r3, #0
}
 8007870:	4618      	mov	r0, r3
 8007872:	370c      	adds	r7, #12
 8007874:	46bd      	mov	sp, r7
 8007876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787a:	4770      	bx	lr

0800787c <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800787c:	b480      	push	{r7}
 800787e:	b083      	sub	sp, #12
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800788a:	b2db      	uxtb	r3, r3
 800788c:	2b04      	cmp	r3, #4
 800788e:	d006      	beq.n	800789e <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007896:	b2da      	uxtb	r2, r3
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	2204      	movs	r2, #4
 80078a2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80078a6:	2300      	movs	r3, #0
}
 80078a8:	4618      	mov	r0, r3
 80078aa:	370c      	adds	r7, #12
 80078ac:	46bd      	mov	sp, r7
 80078ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b2:	4770      	bx	lr

080078b4 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80078b4:	b480      	push	{r7}
 80078b6:	b083      	sub	sp, #12
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80078c2:	b2db      	uxtb	r3, r3
 80078c4:	2b04      	cmp	r3, #4
 80078c6:	d106      	bne.n	80078d6 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 80078ce:	b2da      	uxtb	r2, r3
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80078d6:	2300      	movs	r3, #0
}
 80078d8:	4618      	mov	r0, r3
 80078da:	370c      	adds	r7, #12
 80078dc:	46bd      	mov	sp, r7
 80078de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e2:	4770      	bx	lr

080078e4 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b082      	sub	sp, #8
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80078f2:	b2db      	uxtb	r3, r3
 80078f4:	2b03      	cmp	r3, #3
 80078f6:	d110      	bne.n	800791a <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d00b      	beq.n	800791a <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007908:	69db      	ldr	r3, [r3, #28]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d005      	beq.n	800791a <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007914:	69db      	ldr	r3, [r3, #28]
 8007916:	6878      	ldr	r0, [r7, #4]
 8007918:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800791a:	2300      	movs	r3, #0
}
 800791c:	4618      	mov	r0, r3
 800791e:	3708      	adds	r7, #8
 8007920:	46bd      	mov	sp, r7
 8007922:	bd80      	pop	{r7, pc}

08007924 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007924:	b580      	push	{r7, lr}
 8007926:	b082      	sub	sp, #8
 8007928:	af00      	add	r7, sp, #0
 800792a:	6078      	str	r0, [r7, #4]
 800792c:	460b      	mov	r3, r1
 800792e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	32ae      	adds	r2, #174	@ 0xae
 800793a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d101      	bne.n	8007946 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007942:	2303      	movs	r3, #3
 8007944:	e01c      	b.n	8007980 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800794c:	b2db      	uxtb	r3, r3
 800794e:	2b03      	cmp	r3, #3
 8007950:	d115      	bne.n	800797e <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	32ae      	adds	r2, #174	@ 0xae
 800795c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007960:	6a1b      	ldr	r3, [r3, #32]
 8007962:	2b00      	cmp	r3, #0
 8007964:	d00b      	beq.n	800797e <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	32ae      	adds	r2, #174	@ 0xae
 8007970:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007974:	6a1b      	ldr	r3, [r3, #32]
 8007976:	78fa      	ldrb	r2, [r7, #3]
 8007978:	4611      	mov	r1, r2
 800797a:	6878      	ldr	r0, [r7, #4]
 800797c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800797e:	2300      	movs	r3, #0
}
 8007980:	4618      	mov	r0, r3
 8007982:	3708      	adds	r7, #8
 8007984:	46bd      	mov	sp, r7
 8007986:	bd80      	pop	{r7, pc}

08007988 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007988:	b580      	push	{r7, lr}
 800798a:	b082      	sub	sp, #8
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
 8007990:	460b      	mov	r3, r1
 8007992:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	32ae      	adds	r2, #174	@ 0xae
 800799e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d101      	bne.n	80079aa <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80079a6:	2303      	movs	r3, #3
 80079a8:	e01c      	b.n	80079e4 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80079b0:	b2db      	uxtb	r3, r3
 80079b2:	2b03      	cmp	r3, #3
 80079b4:	d115      	bne.n	80079e2 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	32ae      	adds	r2, #174	@ 0xae
 80079c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d00b      	beq.n	80079e2 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	32ae      	adds	r2, #174	@ 0xae
 80079d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079da:	78fa      	ldrb	r2, [r7, #3]
 80079dc:	4611      	mov	r1, r2
 80079de:	6878      	ldr	r0, [r7, #4]
 80079e0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80079e2:	2300      	movs	r3, #0
}
 80079e4:	4618      	mov	r0, r3
 80079e6:	3708      	adds	r7, #8
 80079e8:	46bd      	mov	sp, r7
 80079ea:	bd80      	pop	{r7, pc}

080079ec <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80079ec:	b480      	push	{r7}
 80079ee:	b083      	sub	sp, #12
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80079f4:	2300      	movs	r3, #0
}
 80079f6:	4618      	mov	r0, r3
 80079f8:	370c      	adds	r7, #12
 80079fa:	46bd      	mov	sp, r7
 80079fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a00:	4770      	bx	lr

08007a02 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007a02:	b580      	push	{r7, lr}
 8007a04:	b084      	sub	sp, #16
 8007a06:	af00      	add	r7, sp, #0
 8007a08:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	2201      	movs	r2, #1
 8007a12:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d00e      	beq.n	8007a3e <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007a26:	685b      	ldr	r3, [r3, #4]
 8007a28:	687a      	ldr	r2, [r7, #4]
 8007a2a:	6852      	ldr	r2, [r2, #4]
 8007a2c:	b2d2      	uxtb	r2, r2
 8007a2e:	4611      	mov	r1, r2
 8007a30:	6878      	ldr	r0, [r7, #4]
 8007a32:	4798      	blx	r3
 8007a34:	4603      	mov	r3, r0
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d001      	beq.n	8007a3e <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007a3a:	2303      	movs	r3, #3
 8007a3c:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007a3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a40:	4618      	mov	r0, r3
 8007a42:	3710      	adds	r7, #16
 8007a44:	46bd      	mov	sp, r7
 8007a46:	bd80      	pop	{r7, pc}

08007a48 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007a48:	b480      	push	{r7}
 8007a4a:	b083      	sub	sp, #12
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
 8007a50:	460b      	mov	r3, r1
 8007a52:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007a54:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007a56:	4618      	mov	r0, r3
 8007a58:	370c      	adds	r7, #12
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a60:	4770      	bx	lr

08007a62 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007a62:	b480      	push	{r7}
 8007a64:	b083      	sub	sp, #12
 8007a66:	af00      	add	r7, sp, #0
 8007a68:	6078      	str	r0, [r7, #4]
 8007a6a:	460b      	mov	r3, r1
 8007a6c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007a6e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007a70:	4618      	mov	r0, r3
 8007a72:	370c      	adds	r7, #12
 8007a74:	46bd      	mov	sp, r7
 8007a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7a:	4770      	bx	lr

08007a7c <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b086      	sub	sp, #24
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
 8007a84:	460b      	mov	r3, r1
 8007a86:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007a90:	2300      	movs	r3, #0
 8007a92:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	885b      	ldrh	r3, [r3, #2]
 8007a98:	b29b      	uxth	r3, r3
 8007a9a:	68fa      	ldr	r2, [r7, #12]
 8007a9c:	7812      	ldrb	r2, [r2, #0]
 8007a9e:	4293      	cmp	r3, r2
 8007aa0:	d91f      	bls.n	8007ae2 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	781b      	ldrb	r3, [r3, #0]
 8007aa6:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007aa8:	e013      	b.n	8007ad2 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007aaa:	f107 030a 	add.w	r3, r7, #10
 8007aae:	4619      	mov	r1, r3
 8007ab0:	6978      	ldr	r0, [r7, #20]
 8007ab2:	f000 f81b 	bl	8007aec <USBD_GetNextDesc>
 8007ab6:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007ab8:	697b      	ldr	r3, [r7, #20]
 8007aba:	785b      	ldrb	r3, [r3, #1]
 8007abc:	2b05      	cmp	r3, #5
 8007abe:	d108      	bne.n	8007ad2 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007ac0:	697b      	ldr	r3, [r7, #20]
 8007ac2:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007ac4:	693b      	ldr	r3, [r7, #16]
 8007ac6:	789b      	ldrb	r3, [r3, #2]
 8007ac8:	78fa      	ldrb	r2, [r7, #3]
 8007aca:	429a      	cmp	r2, r3
 8007acc:	d008      	beq.n	8007ae0 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007ace:	2300      	movs	r3, #0
 8007ad0:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	885b      	ldrh	r3, [r3, #2]
 8007ad6:	b29a      	uxth	r2, r3
 8007ad8:	897b      	ldrh	r3, [r7, #10]
 8007ada:	429a      	cmp	r2, r3
 8007adc:	d8e5      	bhi.n	8007aaa <USBD_GetEpDesc+0x2e>
 8007ade:	e000      	b.n	8007ae2 <USBD_GetEpDesc+0x66>
          break;
 8007ae0:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007ae2:	693b      	ldr	r3, [r7, #16]
}
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	3718      	adds	r7, #24
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	bd80      	pop	{r7, pc}

08007aec <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007aec:	b480      	push	{r7}
 8007aee:	b085      	sub	sp, #20
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
 8007af4:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007afa:	683b      	ldr	r3, [r7, #0]
 8007afc:	881b      	ldrh	r3, [r3, #0]
 8007afe:	68fa      	ldr	r2, [r7, #12]
 8007b00:	7812      	ldrb	r2, [r2, #0]
 8007b02:	4413      	add	r3, r2
 8007b04:	b29a      	uxth	r2, r3
 8007b06:	683b      	ldr	r3, [r7, #0]
 8007b08:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	781b      	ldrb	r3, [r3, #0]
 8007b0e:	461a      	mov	r2, r3
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	4413      	add	r3, r2
 8007b14:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007b16:	68fb      	ldr	r3, [r7, #12]
}
 8007b18:	4618      	mov	r0, r3
 8007b1a:	3714      	adds	r7, #20
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b22:	4770      	bx	lr

08007b24 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007b24:	b480      	push	{r7}
 8007b26:	b087      	sub	sp, #28
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007b30:	697b      	ldr	r3, [r7, #20]
 8007b32:	781b      	ldrb	r3, [r3, #0]
 8007b34:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007b36:	697b      	ldr	r3, [r7, #20]
 8007b38:	3301      	adds	r3, #1
 8007b3a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007b3c:	697b      	ldr	r3, [r7, #20]
 8007b3e:	781b      	ldrb	r3, [r3, #0]
 8007b40:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007b42:	8a3b      	ldrh	r3, [r7, #16]
 8007b44:	021b      	lsls	r3, r3, #8
 8007b46:	b21a      	sxth	r2, r3
 8007b48:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007b4c:	4313      	orrs	r3, r2
 8007b4e:	b21b      	sxth	r3, r3
 8007b50:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007b52:	89fb      	ldrh	r3, [r7, #14]
}
 8007b54:	4618      	mov	r0, r3
 8007b56:	371c      	adds	r7, #28
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5e:	4770      	bx	lr

08007b60 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b084      	sub	sp, #16
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
 8007b68:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007b6e:	683b      	ldr	r3, [r7, #0]
 8007b70:	781b      	ldrb	r3, [r3, #0]
 8007b72:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007b76:	2b40      	cmp	r3, #64	@ 0x40
 8007b78:	d005      	beq.n	8007b86 <USBD_StdDevReq+0x26>
 8007b7a:	2b40      	cmp	r3, #64	@ 0x40
 8007b7c:	d857      	bhi.n	8007c2e <USBD_StdDevReq+0xce>
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d00f      	beq.n	8007ba2 <USBD_StdDevReq+0x42>
 8007b82:	2b20      	cmp	r3, #32
 8007b84:	d153      	bne.n	8007c2e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	32ae      	adds	r2, #174	@ 0xae
 8007b90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b94:	689b      	ldr	r3, [r3, #8]
 8007b96:	6839      	ldr	r1, [r7, #0]
 8007b98:	6878      	ldr	r0, [r7, #4]
 8007b9a:	4798      	blx	r3
 8007b9c:	4603      	mov	r3, r0
 8007b9e:	73fb      	strb	r3, [r7, #15]
      break;
 8007ba0:	e04a      	b.n	8007c38 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007ba2:	683b      	ldr	r3, [r7, #0]
 8007ba4:	785b      	ldrb	r3, [r3, #1]
 8007ba6:	2b09      	cmp	r3, #9
 8007ba8:	d83b      	bhi.n	8007c22 <USBD_StdDevReq+0xc2>
 8007baa:	a201      	add	r2, pc, #4	@ (adr r2, 8007bb0 <USBD_StdDevReq+0x50>)
 8007bac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bb0:	08007c05 	.word	0x08007c05
 8007bb4:	08007c19 	.word	0x08007c19
 8007bb8:	08007c23 	.word	0x08007c23
 8007bbc:	08007c0f 	.word	0x08007c0f
 8007bc0:	08007c23 	.word	0x08007c23
 8007bc4:	08007be3 	.word	0x08007be3
 8007bc8:	08007bd9 	.word	0x08007bd9
 8007bcc:	08007c23 	.word	0x08007c23
 8007bd0:	08007bfb 	.word	0x08007bfb
 8007bd4:	08007bed 	.word	0x08007bed
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007bd8:	6839      	ldr	r1, [r7, #0]
 8007bda:	6878      	ldr	r0, [r7, #4]
 8007bdc:	f000 fa3e 	bl	800805c <USBD_GetDescriptor>
          break;
 8007be0:	e024      	b.n	8007c2c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007be2:	6839      	ldr	r1, [r7, #0]
 8007be4:	6878      	ldr	r0, [r7, #4]
 8007be6:	f000 fbcd 	bl	8008384 <USBD_SetAddress>
          break;
 8007bea:	e01f      	b.n	8007c2c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007bec:	6839      	ldr	r1, [r7, #0]
 8007bee:	6878      	ldr	r0, [r7, #4]
 8007bf0:	f000 fc0c 	bl	800840c <USBD_SetConfig>
 8007bf4:	4603      	mov	r3, r0
 8007bf6:	73fb      	strb	r3, [r7, #15]
          break;
 8007bf8:	e018      	b.n	8007c2c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007bfa:	6839      	ldr	r1, [r7, #0]
 8007bfc:	6878      	ldr	r0, [r7, #4]
 8007bfe:	f000 fcaf 	bl	8008560 <USBD_GetConfig>
          break;
 8007c02:	e013      	b.n	8007c2c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007c04:	6839      	ldr	r1, [r7, #0]
 8007c06:	6878      	ldr	r0, [r7, #4]
 8007c08:	f000 fce0 	bl	80085cc <USBD_GetStatus>
          break;
 8007c0c:	e00e      	b.n	8007c2c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007c0e:	6839      	ldr	r1, [r7, #0]
 8007c10:	6878      	ldr	r0, [r7, #4]
 8007c12:	f000 fd0f 	bl	8008634 <USBD_SetFeature>
          break;
 8007c16:	e009      	b.n	8007c2c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007c18:	6839      	ldr	r1, [r7, #0]
 8007c1a:	6878      	ldr	r0, [r7, #4]
 8007c1c:	f000 fd33 	bl	8008686 <USBD_ClrFeature>
          break;
 8007c20:	e004      	b.n	8007c2c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007c22:	6839      	ldr	r1, [r7, #0]
 8007c24:	6878      	ldr	r0, [r7, #4]
 8007c26:	f000 fd8a 	bl	800873e <USBD_CtlError>
          break;
 8007c2a:	bf00      	nop
      }
      break;
 8007c2c:	e004      	b.n	8007c38 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8007c2e:	6839      	ldr	r1, [r7, #0]
 8007c30:	6878      	ldr	r0, [r7, #4]
 8007c32:	f000 fd84 	bl	800873e <USBD_CtlError>
      break;
 8007c36:	bf00      	nop
  }

  return ret;
 8007c38:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	3710      	adds	r7, #16
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	bd80      	pop	{r7, pc}
 8007c42:	bf00      	nop

08007c44 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c44:	b580      	push	{r7, lr}
 8007c46:	b084      	sub	sp, #16
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
 8007c4c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007c4e:	2300      	movs	r3, #0
 8007c50:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007c52:	683b      	ldr	r3, [r7, #0]
 8007c54:	781b      	ldrb	r3, [r3, #0]
 8007c56:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007c5a:	2b40      	cmp	r3, #64	@ 0x40
 8007c5c:	d005      	beq.n	8007c6a <USBD_StdItfReq+0x26>
 8007c5e:	2b40      	cmp	r3, #64	@ 0x40
 8007c60:	d852      	bhi.n	8007d08 <USBD_StdItfReq+0xc4>
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d001      	beq.n	8007c6a <USBD_StdItfReq+0x26>
 8007c66:	2b20      	cmp	r3, #32
 8007c68:	d14e      	bne.n	8007d08 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007c70:	b2db      	uxtb	r3, r3
 8007c72:	3b01      	subs	r3, #1
 8007c74:	2b02      	cmp	r3, #2
 8007c76:	d840      	bhi.n	8007cfa <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	889b      	ldrh	r3, [r3, #4]
 8007c7c:	b2db      	uxtb	r3, r3
 8007c7e:	2b01      	cmp	r3, #1
 8007c80:	d836      	bhi.n	8007cf0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007c82:	683b      	ldr	r3, [r7, #0]
 8007c84:	889b      	ldrh	r3, [r3, #4]
 8007c86:	b2db      	uxtb	r3, r3
 8007c88:	4619      	mov	r1, r3
 8007c8a:	6878      	ldr	r0, [r7, #4]
 8007c8c:	f7ff fedc 	bl	8007a48 <USBD_CoreFindIF>
 8007c90:	4603      	mov	r3, r0
 8007c92:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007c94:	7bbb      	ldrb	r3, [r7, #14]
 8007c96:	2bff      	cmp	r3, #255	@ 0xff
 8007c98:	d01d      	beq.n	8007cd6 <USBD_StdItfReq+0x92>
 8007c9a:	7bbb      	ldrb	r3, [r7, #14]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d11a      	bne.n	8007cd6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007ca0:	7bba      	ldrb	r2, [r7, #14]
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	32ae      	adds	r2, #174	@ 0xae
 8007ca6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007caa:	689b      	ldr	r3, [r3, #8]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d00f      	beq.n	8007cd0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007cb0:	7bba      	ldrb	r2, [r7, #14]
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007cb8:	7bba      	ldrb	r2, [r7, #14]
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	32ae      	adds	r2, #174	@ 0xae
 8007cbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cc2:	689b      	ldr	r3, [r3, #8]
 8007cc4:	6839      	ldr	r1, [r7, #0]
 8007cc6:	6878      	ldr	r0, [r7, #4]
 8007cc8:	4798      	blx	r3
 8007cca:	4603      	mov	r3, r0
 8007ccc:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007cce:	e004      	b.n	8007cda <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007cd0:	2303      	movs	r3, #3
 8007cd2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007cd4:	e001      	b.n	8007cda <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007cd6:	2303      	movs	r3, #3
 8007cd8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007cda:	683b      	ldr	r3, [r7, #0]
 8007cdc:	88db      	ldrh	r3, [r3, #6]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d110      	bne.n	8007d04 <USBD_StdItfReq+0xc0>
 8007ce2:	7bfb      	ldrb	r3, [r7, #15]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d10d      	bne.n	8007d04 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007ce8:	6878      	ldr	r0, [r7, #4]
 8007cea:	f000 fe06 	bl	80088fa <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007cee:	e009      	b.n	8007d04 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007cf0:	6839      	ldr	r1, [r7, #0]
 8007cf2:	6878      	ldr	r0, [r7, #4]
 8007cf4:	f000 fd23 	bl	800873e <USBD_CtlError>
          break;
 8007cf8:	e004      	b.n	8007d04 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007cfa:	6839      	ldr	r1, [r7, #0]
 8007cfc:	6878      	ldr	r0, [r7, #4]
 8007cfe:	f000 fd1e 	bl	800873e <USBD_CtlError>
          break;
 8007d02:	e000      	b.n	8007d06 <USBD_StdItfReq+0xc2>
          break;
 8007d04:	bf00      	nop
      }
      break;
 8007d06:	e004      	b.n	8007d12 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007d08:	6839      	ldr	r1, [r7, #0]
 8007d0a:	6878      	ldr	r0, [r7, #4]
 8007d0c:	f000 fd17 	bl	800873e <USBD_CtlError>
      break;
 8007d10:	bf00      	nop
  }

  return ret;
 8007d12:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d14:	4618      	mov	r0, r3
 8007d16:	3710      	adds	r7, #16
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	bd80      	pop	{r7, pc}

08007d1c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b084      	sub	sp, #16
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
 8007d24:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007d26:	2300      	movs	r3, #0
 8007d28:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	889b      	ldrh	r3, [r3, #4]
 8007d2e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007d30:	683b      	ldr	r3, [r7, #0]
 8007d32:	781b      	ldrb	r3, [r3, #0]
 8007d34:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007d38:	2b40      	cmp	r3, #64	@ 0x40
 8007d3a:	d007      	beq.n	8007d4c <USBD_StdEPReq+0x30>
 8007d3c:	2b40      	cmp	r3, #64	@ 0x40
 8007d3e:	f200 8181 	bhi.w	8008044 <USBD_StdEPReq+0x328>
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d02a      	beq.n	8007d9c <USBD_StdEPReq+0x80>
 8007d46:	2b20      	cmp	r3, #32
 8007d48:	f040 817c 	bne.w	8008044 <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007d4c:	7bbb      	ldrb	r3, [r7, #14]
 8007d4e:	4619      	mov	r1, r3
 8007d50:	6878      	ldr	r0, [r7, #4]
 8007d52:	f7ff fe86 	bl	8007a62 <USBD_CoreFindEP>
 8007d56:	4603      	mov	r3, r0
 8007d58:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007d5a:	7b7b      	ldrb	r3, [r7, #13]
 8007d5c:	2bff      	cmp	r3, #255	@ 0xff
 8007d5e:	f000 8176 	beq.w	800804e <USBD_StdEPReq+0x332>
 8007d62:	7b7b      	ldrb	r3, [r7, #13]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	f040 8172 	bne.w	800804e <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 8007d6a:	7b7a      	ldrb	r2, [r7, #13]
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007d72:	7b7a      	ldrb	r2, [r7, #13]
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	32ae      	adds	r2, #174	@ 0xae
 8007d78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d7c:	689b      	ldr	r3, [r3, #8]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	f000 8165 	beq.w	800804e <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007d84:	7b7a      	ldrb	r2, [r7, #13]
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	32ae      	adds	r2, #174	@ 0xae
 8007d8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d8e:	689b      	ldr	r3, [r3, #8]
 8007d90:	6839      	ldr	r1, [r7, #0]
 8007d92:	6878      	ldr	r0, [r7, #4]
 8007d94:	4798      	blx	r3
 8007d96:	4603      	mov	r3, r0
 8007d98:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007d9a:	e158      	b.n	800804e <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007d9c:	683b      	ldr	r3, [r7, #0]
 8007d9e:	785b      	ldrb	r3, [r3, #1]
 8007da0:	2b03      	cmp	r3, #3
 8007da2:	d008      	beq.n	8007db6 <USBD_StdEPReq+0x9a>
 8007da4:	2b03      	cmp	r3, #3
 8007da6:	f300 8147 	bgt.w	8008038 <USBD_StdEPReq+0x31c>
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	f000 809b 	beq.w	8007ee6 <USBD_StdEPReq+0x1ca>
 8007db0:	2b01      	cmp	r3, #1
 8007db2:	d03c      	beq.n	8007e2e <USBD_StdEPReq+0x112>
 8007db4:	e140      	b.n	8008038 <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007dbc:	b2db      	uxtb	r3, r3
 8007dbe:	2b02      	cmp	r3, #2
 8007dc0:	d002      	beq.n	8007dc8 <USBD_StdEPReq+0xac>
 8007dc2:	2b03      	cmp	r3, #3
 8007dc4:	d016      	beq.n	8007df4 <USBD_StdEPReq+0xd8>
 8007dc6:	e02c      	b.n	8007e22 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007dc8:	7bbb      	ldrb	r3, [r7, #14]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d00d      	beq.n	8007dea <USBD_StdEPReq+0xce>
 8007dce:	7bbb      	ldrb	r3, [r7, #14]
 8007dd0:	2b80      	cmp	r3, #128	@ 0x80
 8007dd2:	d00a      	beq.n	8007dea <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007dd4:	7bbb      	ldrb	r3, [r7, #14]
 8007dd6:	4619      	mov	r1, r3
 8007dd8:	6878      	ldr	r0, [r7, #4]
 8007dda:	f001 f9eb 	bl	80091b4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007dde:	2180      	movs	r1, #128	@ 0x80
 8007de0:	6878      	ldr	r0, [r7, #4]
 8007de2:	f001 f9e7 	bl	80091b4 <USBD_LL_StallEP>
 8007de6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007de8:	e020      	b.n	8007e2c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007dea:	6839      	ldr	r1, [r7, #0]
 8007dec:	6878      	ldr	r0, [r7, #4]
 8007dee:	f000 fca6 	bl	800873e <USBD_CtlError>
              break;
 8007df2:	e01b      	b.n	8007e2c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007df4:	683b      	ldr	r3, [r7, #0]
 8007df6:	885b      	ldrh	r3, [r3, #2]
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d10e      	bne.n	8007e1a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007dfc:	7bbb      	ldrb	r3, [r7, #14]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d00b      	beq.n	8007e1a <USBD_StdEPReq+0xfe>
 8007e02:	7bbb      	ldrb	r3, [r7, #14]
 8007e04:	2b80      	cmp	r3, #128	@ 0x80
 8007e06:	d008      	beq.n	8007e1a <USBD_StdEPReq+0xfe>
 8007e08:	683b      	ldr	r3, [r7, #0]
 8007e0a:	88db      	ldrh	r3, [r3, #6]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d104      	bne.n	8007e1a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007e10:	7bbb      	ldrb	r3, [r7, #14]
 8007e12:	4619      	mov	r1, r3
 8007e14:	6878      	ldr	r0, [r7, #4]
 8007e16:	f001 f9cd 	bl	80091b4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007e1a:	6878      	ldr	r0, [r7, #4]
 8007e1c:	f000 fd6d 	bl	80088fa <USBD_CtlSendStatus>

              break;
 8007e20:	e004      	b.n	8007e2c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007e22:	6839      	ldr	r1, [r7, #0]
 8007e24:	6878      	ldr	r0, [r7, #4]
 8007e26:	f000 fc8a 	bl	800873e <USBD_CtlError>
              break;
 8007e2a:	bf00      	nop
          }
          break;
 8007e2c:	e109      	b.n	8008042 <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007e34:	b2db      	uxtb	r3, r3
 8007e36:	2b02      	cmp	r3, #2
 8007e38:	d002      	beq.n	8007e40 <USBD_StdEPReq+0x124>
 8007e3a:	2b03      	cmp	r3, #3
 8007e3c:	d016      	beq.n	8007e6c <USBD_StdEPReq+0x150>
 8007e3e:	e04b      	b.n	8007ed8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007e40:	7bbb      	ldrb	r3, [r7, #14]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d00d      	beq.n	8007e62 <USBD_StdEPReq+0x146>
 8007e46:	7bbb      	ldrb	r3, [r7, #14]
 8007e48:	2b80      	cmp	r3, #128	@ 0x80
 8007e4a:	d00a      	beq.n	8007e62 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007e4c:	7bbb      	ldrb	r3, [r7, #14]
 8007e4e:	4619      	mov	r1, r3
 8007e50:	6878      	ldr	r0, [r7, #4]
 8007e52:	f001 f9af 	bl	80091b4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007e56:	2180      	movs	r1, #128	@ 0x80
 8007e58:	6878      	ldr	r0, [r7, #4]
 8007e5a:	f001 f9ab 	bl	80091b4 <USBD_LL_StallEP>
 8007e5e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007e60:	e040      	b.n	8007ee4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007e62:	6839      	ldr	r1, [r7, #0]
 8007e64:	6878      	ldr	r0, [r7, #4]
 8007e66:	f000 fc6a 	bl	800873e <USBD_CtlError>
              break;
 8007e6a:	e03b      	b.n	8007ee4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007e6c:	683b      	ldr	r3, [r7, #0]
 8007e6e:	885b      	ldrh	r3, [r3, #2]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d136      	bne.n	8007ee2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007e74:	7bbb      	ldrb	r3, [r7, #14]
 8007e76:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d004      	beq.n	8007e88 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007e7e:	7bbb      	ldrb	r3, [r7, #14]
 8007e80:	4619      	mov	r1, r3
 8007e82:	6878      	ldr	r0, [r7, #4]
 8007e84:	f001 f9b5 	bl	80091f2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007e88:	6878      	ldr	r0, [r7, #4]
 8007e8a:	f000 fd36 	bl	80088fa <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007e8e:	7bbb      	ldrb	r3, [r7, #14]
 8007e90:	4619      	mov	r1, r3
 8007e92:	6878      	ldr	r0, [r7, #4]
 8007e94:	f7ff fde5 	bl	8007a62 <USBD_CoreFindEP>
 8007e98:	4603      	mov	r3, r0
 8007e9a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007e9c:	7b7b      	ldrb	r3, [r7, #13]
 8007e9e:	2bff      	cmp	r3, #255	@ 0xff
 8007ea0:	d01f      	beq.n	8007ee2 <USBD_StdEPReq+0x1c6>
 8007ea2:	7b7b      	ldrb	r3, [r7, #13]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d11c      	bne.n	8007ee2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007ea8:	7b7a      	ldrb	r2, [r7, #13]
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007eb0:	7b7a      	ldrb	r2, [r7, #13]
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	32ae      	adds	r2, #174	@ 0xae
 8007eb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007eba:	689b      	ldr	r3, [r3, #8]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d010      	beq.n	8007ee2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007ec0:	7b7a      	ldrb	r2, [r7, #13]
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	32ae      	adds	r2, #174	@ 0xae
 8007ec6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007eca:	689b      	ldr	r3, [r3, #8]
 8007ecc:	6839      	ldr	r1, [r7, #0]
 8007ece:	6878      	ldr	r0, [r7, #4]
 8007ed0:	4798      	blx	r3
 8007ed2:	4603      	mov	r3, r0
 8007ed4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007ed6:	e004      	b.n	8007ee2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007ed8:	6839      	ldr	r1, [r7, #0]
 8007eda:	6878      	ldr	r0, [r7, #4]
 8007edc:	f000 fc2f 	bl	800873e <USBD_CtlError>
              break;
 8007ee0:	e000      	b.n	8007ee4 <USBD_StdEPReq+0x1c8>
              break;
 8007ee2:	bf00      	nop
          }
          break;
 8007ee4:	e0ad      	b.n	8008042 <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007eec:	b2db      	uxtb	r3, r3
 8007eee:	2b02      	cmp	r3, #2
 8007ef0:	d002      	beq.n	8007ef8 <USBD_StdEPReq+0x1dc>
 8007ef2:	2b03      	cmp	r3, #3
 8007ef4:	d033      	beq.n	8007f5e <USBD_StdEPReq+0x242>
 8007ef6:	e099      	b.n	800802c <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007ef8:	7bbb      	ldrb	r3, [r7, #14]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d007      	beq.n	8007f0e <USBD_StdEPReq+0x1f2>
 8007efe:	7bbb      	ldrb	r3, [r7, #14]
 8007f00:	2b80      	cmp	r3, #128	@ 0x80
 8007f02:	d004      	beq.n	8007f0e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007f04:	6839      	ldr	r1, [r7, #0]
 8007f06:	6878      	ldr	r0, [r7, #4]
 8007f08:	f000 fc19 	bl	800873e <USBD_CtlError>
                break;
 8007f0c:	e093      	b.n	8008036 <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007f0e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	da0b      	bge.n	8007f2e <USBD_StdEPReq+0x212>
 8007f16:	7bbb      	ldrb	r3, [r7, #14]
 8007f18:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007f1c:	4613      	mov	r3, r2
 8007f1e:	009b      	lsls	r3, r3, #2
 8007f20:	4413      	add	r3, r2
 8007f22:	009b      	lsls	r3, r3, #2
 8007f24:	3310      	adds	r3, #16
 8007f26:	687a      	ldr	r2, [r7, #4]
 8007f28:	4413      	add	r3, r2
 8007f2a:	3304      	adds	r3, #4
 8007f2c:	e00b      	b.n	8007f46 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007f2e:	7bbb      	ldrb	r3, [r7, #14]
 8007f30:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007f34:	4613      	mov	r3, r2
 8007f36:	009b      	lsls	r3, r3, #2
 8007f38:	4413      	add	r3, r2
 8007f3a:	009b      	lsls	r3, r3, #2
 8007f3c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007f40:	687a      	ldr	r2, [r7, #4]
 8007f42:	4413      	add	r3, r2
 8007f44:	3304      	adds	r3, #4
 8007f46:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007f48:	68bb      	ldr	r3, [r7, #8]
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007f4e:	68bb      	ldr	r3, [r7, #8]
 8007f50:	330e      	adds	r3, #14
 8007f52:	2202      	movs	r2, #2
 8007f54:	4619      	mov	r1, r3
 8007f56:	6878      	ldr	r0, [r7, #4]
 8007f58:	f000 fc6e 	bl	8008838 <USBD_CtlSendData>
              break;
 8007f5c:	e06b      	b.n	8008036 <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007f5e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	da11      	bge.n	8007f8a <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007f66:	7bbb      	ldrb	r3, [r7, #14]
 8007f68:	f003 020f 	and.w	r2, r3, #15
 8007f6c:	6879      	ldr	r1, [r7, #4]
 8007f6e:	4613      	mov	r3, r2
 8007f70:	009b      	lsls	r3, r3, #2
 8007f72:	4413      	add	r3, r2
 8007f74:	009b      	lsls	r3, r3, #2
 8007f76:	440b      	add	r3, r1
 8007f78:	3323      	adds	r3, #35	@ 0x23
 8007f7a:	781b      	ldrb	r3, [r3, #0]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d117      	bne.n	8007fb0 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 8007f80:	6839      	ldr	r1, [r7, #0]
 8007f82:	6878      	ldr	r0, [r7, #4]
 8007f84:	f000 fbdb 	bl	800873e <USBD_CtlError>
                  break;
 8007f88:	e055      	b.n	8008036 <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007f8a:	7bbb      	ldrb	r3, [r7, #14]
 8007f8c:	f003 020f 	and.w	r2, r3, #15
 8007f90:	6879      	ldr	r1, [r7, #4]
 8007f92:	4613      	mov	r3, r2
 8007f94:	009b      	lsls	r3, r3, #2
 8007f96:	4413      	add	r3, r2
 8007f98:	009b      	lsls	r3, r3, #2
 8007f9a:	440b      	add	r3, r1
 8007f9c:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8007fa0:	781b      	ldrb	r3, [r3, #0]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d104      	bne.n	8007fb0 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 8007fa6:	6839      	ldr	r1, [r7, #0]
 8007fa8:	6878      	ldr	r0, [r7, #4]
 8007faa:	f000 fbc8 	bl	800873e <USBD_CtlError>
                  break;
 8007fae:	e042      	b.n	8008036 <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007fb0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	da0b      	bge.n	8007fd0 <USBD_StdEPReq+0x2b4>
 8007fb8:	7bbb      	ldrb	r3, [r7, #14]
 8007fba:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007fbe:	4613      	mov	r3, r2
 8007fc0:	009b      	lsls	r3, r3, #2
 8007fc2:	4413      	add	r3, r2
 8007fc4:	009b      	lsls	r3, r3, #2
 8007fc6:	3310      	adds	r3, #16
 8007fc8:	687a      	ldr	r2, [r7, #4]
 8007fca:	4413      	add	r3, r2
 8007fcc:	3304      	adds	r3, #4
 8007fce:	e00b      	b.n	8007fe8 <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007fd0:	7bbb      	ldrb	r3, [r7, #14]
 8007fd2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007fd6:	4613      	mov	r3, r2
 8007fd8:	009b      	lsls	r3, r3, #2
 8007fda:	4413      	add	r3, r2
 8007fdc:	009b      	lsls	r3, r3, #2
 8007fde:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007fe2:	687a      	ldr	r2, [r7, #4]
 8007fe4:	4413      	add	r3, r2
 8007fe6:	3304      	adds	r3, #4
 8007fe8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007fea:	7bbb      	ldrb	r3, [r7, #14]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d002      	beq.n	8007ff6 <USBD_StdEPReq+0x2da>
 8007ff0:	7bbb      	ldrb	r3, [r7, #14]
 8007ff2:	2b80      	cmp	r3, #128	@ 0x80
 8007ff4:	d103      	bne.n	8007ffe <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 8007ff6:	68bb      	ldr	r3, [r7, #8]
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	739a      	strb	r2, [r3, #14]
 8007ffc:	e00e      	b.n	800801c <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007ffe:	7bbb      	ldrb	r3, [r7, #14]
 8008000:	4619      	mov	r1, r3
 8008002:	6878      	ldr	r0, [r7, #4]
 8008004:	f001 f914 	bl	8009230 <USBD_LL_IsStallEP>
 8008008:	4603      	mov	r3, r0
 800800a:	2b00      	cmp	r3, #0
 800800c:	d003      	beq.n	8008016 <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 800800e:	68bb      	ldr	r3, [r7, #8]
 8008010:	2201      	movs	r2, #1
 8008012:	739a      	strb	r2, [r3, #14]
 8008014:	e002      	b.n	800801c <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 8008016:	68bb      	ldr	r3, [r7, #8]
 8008018:	2200      	movs	r2, #0
 800801a:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800801c:	68bb      	ldr	r3, [r7, #8]
 800801e:	330e      	adds	r3, #14
 8008020:	2202      	movs	r2, #2
 8008022:	4619      	mov	r1, r3
 8008024:	6878      	ldr	r0, [r7, #4]
 8008026:	f000 fc07 	bl	8008838 <USBD_CtlSendData>
              break;
 800802a:	e004      	b.n	8008036 <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 800802c:	6839      	ldr	r1, [r7, #0]
 800802e:	6878      	ldr	r0, [r7, #4]
 8008030:	f000 fb85 	bl	800873e <USBD_CtlError>
              break;
 8008034:	bf00      	nop
          }
          break;
 8008036:	e004      	b.n	8008042 <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 8008038:	6839      	ldr	r1, [r7, #0]
 800803a:	6878      	ldr	r0, [r7, #4]
 800803c:	f000 fb7f 	bl	800873e <USBD_CtlError>
          break;
 8008040:	bf00      	nop
      }
      break;
 8008042:	e005      	b.n	8008050 <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 8008044:	6839      	ldr	r1, [r7, #0]
 8008046:	6878      	ldr	r0, [r7, #4]
 8008048:	f000 fb79 	bl	800873e <USBD_CtlError>
      break;
 800804c:	e000      	b.n	8008050 <USBD_StdEPReq+0x334>
      break;
 800804e:	bf00      	nop
  }

  return ret;
 8008050:	7bfb      	ldrb	r3, [r7, #15]
}
 8008052:	4618      	mov	r0, r3
 8008054:	3710      	adds	r7, #16
 8008056:	46bd      	mov	sp, r7
 8008058:	bd80      	pop	{r7, pc}
	...

0800805c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800805c:	b580      	push	{r7, lr}
 800805e:	b084      	sub	sp, #16
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
 8008064:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008066:	2300      	movs	r3, #0
 8008068:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800806a:	2300      	movs	r3, #0
 800806c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800806e:	2300      	movs	r3, #0
 8008070:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008072:	683b      	ldr	r3, [r7, #0]
 8008074:	885b      	ldrh	r3, [r3, #2]
 8008076:	0a1b      	lsrs	r3, r3, #8
 8008078:	b29b      	uxth	r3, r3
 800807a:	3b01      	subs	r3, #1
 800807c:	2b0e      	cmp	r3, #14
 800807e:	f200 8152 	bhi.w	8008326 <USBD_GetDescriptor+0x2ca>
 8008082:	a201      	add	r2, pc, #4	@ (adr r2, 8008088 <USBD_GetDescriptor+0x2c>)
 8008084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008088:	080080f9 	.word	0x080080f9
 800808c:	08008111 	.word	0x08008111
 8008090:	08008151 	.word	0x08008151
 8008094:	08008327 	.word	0x08008327
 8008098:	08008327 	.word	0x08008327
 800809c:	080082c7 	.word	0x080082c7
 80080a0:	080082f3 	.word	0x080082f3
 80080a4:	08008327 	.word	0x08008327
 80080a8:	08008327 	.word	0x08008327
 80080ac:	08008327 	.word	0x08008327
 80080b0:	08008327 	.word	0x08008327
 80080b4:	08008327 	.word	0x08008327
 80080b8:	08008327 	.word	0x08008327
 80080bc:	08008327 	.word	0x08008327
 80080c0:	080080c5 	.word	0x080080c5
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80080ca:	69db      	ldr	r3, [r3, #28]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d00b      	beq.n	80080e8 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80080d6:	69db      	ldr	r3, [r3, #28]
 80080d8:	687a      	ldr	r2, [r7, #4]
 80080da:	7c12      	ldrb	r2, [r2, #16]
 80080dc:	f107 0108 	add.w	r1, r7, #8
 80080e0:	4610      	mov	r0, r2
 80080e2:	4798      	blx	r3
 80080e4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80080e6:	e126      	b.n	8008336 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80080e8:	6839      	ldr	r1, [r7, #0]
 80080ea:	6878      	ldr	r0, [r7, #4]
 80080ec:	f000 fb27 	bl	800873e <USBD_CtlError>
        err++;
 80080f0:	7afb      	ldrb	r3, [r7, #11]
 80080f2:	3301      	adds	r3, #1
 80080f4:	72fb      	strb	r3, [r7, #11]
      break;
 80080f6:	e11e      	b.n	8008336 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	687a      	ldr	r2, [r7, #4]
 8008102:	7c12      	ldrb	r2, [r2, #16]
 8008104:	f107 0108 	add.w	r1, r7, #8
 8008108:	4610      	mov	r0, r2
 800810a:	4798      	blx	r3
 800810c:	60f8      	str	r0, [r7, #12]
      break;
 800810e:	e112      	b.n	8008336 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	7c1b      	ldrb	r3, [r3, #16]
 8008114:	2b00      	cmp	r3, #0
 8008116:	d10d      	bne.n	8008134 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800811e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008120:	f107 0208 	add.w	r2, r7, #8
 8008124:	4610      	mov	r0, r2
 8008126:	4798      	blx	r3
 8008128:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	3301      	adds	r3, #1
 800812e:	2202      	movs	r2, #2
 8008130:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008132:	e100      	b.n	8008336 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800813a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800813c:	f107 0208 	add.w	r2, r7, #8
 8008140:	4610      	mov	r0, r2
 8008142:	4798      	blx	r3
 8008144:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	3301      	adds	r3, #1
 800814a:	2202      	movs	r2, #2
 800814c:	701a      	strb	r2, [r3, #0]
      break;
 800814e:	e0f2      	b.n	8008336 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008150:	683b      	ldr	r3, [r7, #0]
 8008152:	885b      	ldrh	r3, [r3, #2]
 8008154:	b2db      	uxtb	r3, r3
 8008156:	2b05      	cmp	r3, #5
 8008158:	f200 80ac 	bhi.w	80082b4 <USBD_GetDescriptor+0x258>
 800815c:	a201      	add	r2, pc, #4	@ (adr r2, 8008164 <USBD_GetDescriptor+0x108>)
 800815e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008162:	bf00      	nop
 8008164:	0800817d 	.word	0x0800817d
 8008168:	080081b1 	.word	0x080081b1
 800816c:	080081e5 	.word	0x080081e5
 8008170:	08008219 	.word	0x08008219
 8008174:	0800824d 	.word	0x0800824d
 8008178:	08008281 	.word	0x08008281
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008182:	685b      	ldr	r3, [r3, #4]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d00b      	beq.n	80081a0 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800818e:	685b      	ldr	r3, [r3, #4]
 8008190:	687a      	ldr	r2, [r7, #4]
 8008192:	7c12      	ldrb	r2, [r2, #16]
 8008194:	f107 0108 	add.w	r1, r7, #8
 8008198:	4610      	mov	r0, r2
 800819a:	4798      	blx	r3
 800819c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800819e:	e091      	b.n	80082c4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80081a0:	6839      	ldr	r1, [r7, #0]
 80081a2:	6878      	ldr	r0, [r7, #4]
 80081a4:	f000 facb 	bl	800873e <USBD_CtlError>
            err++;
 80081a8:	7afb      	ldrb	r3, [r7, #11]
 80081aa:	3301      	adds	r3, #1
 80081ac:	72fb      	strb	r3, [r7, #11]
          break;
 80081ae:	e089      	b.n	80082c4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80081b6:	689b      	ldr	r3, [r3, #8]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d00b      	beq.n	80081d4 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80081c2:	689b      	ldr	r3, [r3, #8]
 80081c4:	687a      	ldr	r2, [r7, #4]
 80081c6:	7c12      	ldrb	r2, [r2, #16]
 80081c8:	f107 0108 	add.w	r1, r7, #8
 80081cc:	4610      	mov	r0, r2
 80081ce:	4798      	blx	r3
 80081d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80081d2:	e077      	b.n	80082c4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80081d4:	6839      	ldr	r1, [r7, #0]
 80081d6:	6878      	ldr	r0, [r7, #4]
 80081d8:	f000 fab1 	bl	800873e <USBD_CtlError>
            err++;
 80081dc:	7afb      	ldrb	r3, [r7, #11]
 80081de:	3301      	adds	r3, #1
 80081e0:	72fb      	strb	r3, [r7, #11]
          break;
 80081e2:	e06f      	b.n	80082c4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80081ea:	68db      	ldr	r3, [r3, #12]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d00b      	beq.n	8008208 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80081f6:	68db      	ldr	r3, [r3, #12]
 80081f8:	687a      	ldr	r2, [r7, #4]
 80081fa:	7c12      	ldrb	r2, [r2, #16]
 80081fc:	f107 0108 	add.w	r1, r7, #8
 8008200:	4610      	mov	r0, r2
 8008202:	4798      	blx	r3
 8008204:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008206:	e05d      	b.n	80082c4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008208:	6839      	ldr	r1, [r7, #0]
 800820a:	6878      	ldr	r0, [r7, #4]
 800820c:	f000 fa97 	bl	800873e <USBD_CtlError>
            err++;
 8008210:	7afb      	ldrb	r3, [r7, #11]
 8008212:	3301      	adds	r3, #1
 8008214:	72fb      	strb	r3, [r7, #11]
          break;
 8008216:	e055      	b.n	80082c4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800821e:	691b      	ldr	r3, [r3, #16]
 8008220:	2b00      	cmp	r3, #0
 8008222:	d00b      	beq.n	800823c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800822a:	691b      	ldr	r3, [r3, #16]
 800822c:	687a      	ldr	r2, [r7, #4]
 800822e:	7c12      	ldrb	r2, [r2, #16]
 8008230:	f107 0108 	add.w	r1, r7, #8
 8008234:	4610      	mov	r0, r2
 8008236:	4798      	blx	r3
 8008238:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800823a:	e043      	b.n	80082c4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800823c:	6839      	ldr	r1, [r7, #0]
 800823e:	6878      	ldr	r0, [r7, #4]
 8008240:	f000 fa7d 	bl	800873e <USBD_CtlError>
            err++;
 8008244:	7afb      	ldrb	r3, [r7, #11]
 8008246:	3301      	adds	r3, #1
 8008248:	72fb      	strb	r3, [r7, #11]
          break;
 800824a:	e03b      	b.n	80082c4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008252:	695b      	ldr	r3, [r3, #20]
 8008254:	2b00      	cmp	r3, #0
 8008256:	d00b      	beq.n	8008270 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800825e:	695b      	ldr	r3, [r3, #20]
 8008260:	687a      	ldr	r2, [r7, #4]
 8008262:	7c12      	ldrb	r2, [r2, #16]
 8008264:	f107 0108 	add.w	r1, r7, #8
 8008268:	4610      	mov	r0, r2
 800826a:	4798      	blx	r3
 800826c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800826e:	e029      	b.n	80082c4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008270:	6839      	ldr	r1, [r7, #0]
 8008272:	6878      	ldr	r0, [r7, #4]
 8008274:	f000 fa63 	bl	800873e <USBD_CtlError>
            err++;
 8008278:	7afb      	ldrb	r3, [r7, #11]
 800827a:	3301      	adds	r3, #1
 800827c:	72fb      	strb	r3, [r7, #11]
          break;
 800827e:	e021      	b.n	80082c4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008286:	699b      	ldr	r3, [r3, #24]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d00b      	beq.n	80082a4 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008292:	699b      	ldr	r3, [r3, #24]
 8008294:	687a      	ldr	r2, [r7, #4]
 8008296:	7c12      	ldrb	r2, [r2, #16]
 8008298:	f107 0108 	add.w	r1, r7, #8
 800829c:	4610      	mov	r0, r2
 800829e:	4798      	blx	r3
 80082a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80082a2:	e00f      	b.n	80082c4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80082a4:	6839      	ldr	r1, [r7, #0]
 80082a6:	6878      	ldr	r0, [r7, #4]
 80082a8:	f000 fa49 	bl	800873e <USBD_CtlError>
            err++;
 80082ac:	7afb      	ldrb	r3, [r7, #11]
 80082ae:	3301      	adds	r3, #1
 80082b0:	72fb      	strb	r3, [r7, #11]
          break;
 80082b2:	e007      	b.n	80082c4 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80082b4:	6839      	ldr	r1, [r7, #0]
 80082b6:	6878      	ldr	r0, [r7, #4]
 80082b8:	f000 fa41 	bl	800873e <USBD_CtlError>
          err++;
 80082bc:	7afb      	ldrb	r3, [r7, #11]
 80082be:	3301      	adds	r3, #1
 80082c0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80082c2:	bf00      	nop
      }
      break;
 80082c4:	e037      	b.n	8008336 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	7c1b      	ldrb	r3, [r3, #16]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d109      	bne.n	80082e2 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80082d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80082d6:	f107 0208 	add.w	r2, r7, #8
 80082da:	4610      	mov	r0, r2
 80082dc:	4798      	blx	r3
 80082de:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80082e0:	e029      	b.n	8008336 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80082e2:	6839      	ldr	r1, [r7, #0]
 80082e4:	6878      	ldr	r0, [r7, #4]
 80082e6:	f000 fa2a 	bl	800873e <USBD_CtlError>
        err++;
 80082ea:	7afb      	ldrb	r3, [r7, #11]
 80082ec:	3301      	adds	r3, #1
 80082ee:	72fb      	strb	r3, [r7, #11]
      break;
 80082f0:	e021      	b.n	8008336 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	7c1b      	ldrb	r3, [r3, #16]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d10d      	bne.n	8008316 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008300:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008302:	f107 0208 	add.w	r2, r7, #8
 8008306:	4610      	mov	r0, r2
 8008308:	4798      	blx	r3
 800830a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	3301      	adds	r3, #1
 8008310:	2207      	movs	r2, #7
 8008312:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008314:	e00f      	b.n	8008336 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008316:	6839      	ldr	r1, [r7, #0]
 8008318:	6878      	ldr	r0, [r7, #4]
 800831a:	f000 fa10 	bl	800873e <USBD_CtlError>
        err++;
 800831e:	7afb      	ldrb	r3, [r7, #11]
 8008320:	3301      	adds	r3, #1
 8008322:	72fb      	strb	r3, [r7, #11]
      break;
 8008324:	e007      	b.n	8008336 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8008326:	6839      	ldr	r1, [r7, #0]
 8008328:	6878      	ldr	r0, [r7, #4]
 800832a:	f000 fa08 	bl	800873e <USBD_CtlError>
      err++;
 800832e:	7afb      	ldrb	r3, [r7, #11]
 8008330:	3301      	adds	r3, #1
 8008332:	72fb      	strb	r3, [r7, #11]
      break;
 8008334:	bf00      	nop
  }

  if (err != 0U)
 8008336:	7afb      	ldrb	r3, [r7, #11]
 8008338:	2b00      	cmp	r3, #0
 800833a:	d11e      	bne.n	800837a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800833c:	683b      	ldr	r3, [r7, #0]
 800833e:	88db      	ldrh	r3, [r3, #6]
 8008340:	2b00      	cmp	r3, #0
 8008342:	d016      	beq.n	8008372 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8008344:	893b      	ldrh	r3, [r7, #8]
 8008346:	2b00      	cmp	r3, #0
 8008348:	d00e      	beq.n	8008368 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800834a:	683b      	ldr	r3, [r7, #0]
 800834c:	88da      	ldrh	r2, [r3, #6]
 800834e:	893b      	ldrh	r3, [r7, #8]
 8008350:	4293      	cmp	r3, r2
 8008352:	bf28      	it	cs
 8008354:	4613      	movcs	r3, r2
 8008356:	b29b      	uxth	r3, r3
 8008358:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800835a:	893b      	ldrh	r3, [r7, #8]
 800835c:	461a      	mov	r2, r3
 800835e:	68f9      	ldr	r1, [r7, #12]
 8008360:	6878      	ldr	r0, [r7, #4]
 8008362:	f000 fa69 	bl	8008838 <USBD_CtlSendData>
 8008366:	e009      	b.n	800837c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008368:	6839      	ldr	r1, [r7, #0]
 800836a:	6878      	ldr	r0, [r7, #4]
 800836c:	f000 f9e7 	bl	800873e <USBD_CtlError>
 8008370:	e004      	b.n	800837c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008372:	6878      	ldr	r0, [r7, #4]
 8008374:	f000 fac1 	bl	80088fa <USBD_CtlSendStatus>
 8008378:	e000      	b.n	800837c <USBD_GetDescriptor+0x320>
    return;
 800837a:	bf00      	nop
  }
}
 800837c:	3710      	adds	r7, #16
 800837e:	46bd      	mov	sp, r7
 8008380:	bd80      	pop	{r7, pc}
 8008382:	bf00      	nop

08008384 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008384:	b580      	push	{r7, lr}
 8008386:	b084      	sub	sp, #16
 8008388:	af00      	add	r7, sp, #0
 800838a:	6078      	str	r0, [r7, #4]
 800838c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800838e:	683b      	ldr	r3, [r7, #0]
 8008390:	889b      	ldrh	r3, [r3, #4]
 8008392:	2b00      	cmp	r3, #0
 8008394:	d131      	bne.n	80083fa <USBD_SetAddress+0x76>
 8008396:	683b      	ldr	r3, [r7, #0]
 8008398:	88db      	ldrh	r3, [r3, #6]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d12d      	bne.n	80083fa <USBD_SetAddress+0x76>
 800839e:	683b      	ldr	r3, [r7, #0]
 80083a0:	885b      	ldrh	r3, [r3, #2]
 80083a2:	2b7f      	cmp	r3, #127	@ 0x7f
 80083a4:	d829      	bhi.n	80083fa <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80083a6:	683b      	ldr	r3, [r7, #0]
 80083a8:	885b      	ldrh	r3, [r3, #2]
 80083aa:	b2db      	uxtb	r3, r3
 80083ac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80083b0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80083b8:	b2db      	uxtb	r3, r3
 80083ba:	2b03      	cmp	r3, #3
 80083bc:	d104      	bne.n	80083c8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80083be:	6839      	ldr	r1, [r7, #0]
 80083c0:	6878      	ldr	r0, [r7, #4]
 80083c2:	f000 f9bc 	bl	800873e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083c6:	e01d      	b.n	8008404 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	7bfa      	ldrb	r2, [r7, #15]
 80083cc:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80083d0:	7bfb      	ldrb	r3, [r7, #15]
 80083d2:	4619      	mov	r1, r3
 80083d4:	6878      	ldr	r0, [r7, #4]
 80083d6:	f000 ff57 	bl	8009288 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80083da:	6878      	ldr	r0, [r7, #4]
 80083dc:	f000 fa8d 	bl	80088fa <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80083e0:	7bfb      	ldrb	r3, [r7, #15]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d004      	beq.n	80083f0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	2202      	movs	r2, #2
 80083ea:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083ee:	e009      	b.n	8008404 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	2201      	movs	r2, #1
 80083f4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083f8:	e004      	b.n	8008404 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80083fa:	6839      	ldr	r1, [r7, #0]
 80083fc:	6878      	ldr	r0, [r7, #4]
 80083fe:	f000 f99e 	bl	800873e <USBD_CtlError>
  }
}
 8008402:	bf00      	nop
 8008404:	bf00      	nop
 8008406:	3710      	adds	r7, #16
 8008408:	46bd      	mov	sp, r7
 800840a:	bd80      	pop	{r7, pc}

0800840c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800840c:	b580      	push	{r7, lr}
 800840e:	b084      	sub	sp, #16
 8008410:	af00      	add	r7, sp, #0
 8008412:	6078      	str	r0, [r7, #4]
 8008414:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008416:	2300      	movs	r3, #0
 8008418:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800841a:	683b      	ldr	r3, [r7, #0]
 800841c:	885b      	ldrh	r3, [r3, #2]
 800841e:	b2da      	uxtb	r2, r3
 8008420:	4b4e      	ldr	r3, [pc, #312]	@ (800855c <USBD_SetConfig+0x150>)
 8008422:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008424:	4b4d      	ldr	r3, [pc, #308]	@ (800855c <USBD_SetConfig+0x150>)
 8008426:	781b      	ldrb	r3, [r3, #0]
 8008428:	2b01      	cmp	r3, #1
 800842a:	d905      	bls.n	8008438 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800842c:	6839      	ldr	r1, [r7, #0]
 800842e:	6878      	ldr	r0, [r7, #4]
 8008430:	f000 f985 	bl	800873e <USBD_CtlError>
    return USBD_FAIL;
 8008434:	2303      	movs	r3, #3
 8008436:	e08c      	b.n	8008552 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800843e:	b2db      	uxtb	r3, r3
 8008440:	2b02      	cmp	r3, #2
 8008442:	d002      	beq.n	800844a <USBD_SetConfig+0x3e>
 8008444:	2b03      	cmp	r3, #3
 8008446:	d029      	beq.n	800849c <USBD_SetConfig+0x90>
 8008448:	e075      	b.n	8008536 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800844a:	4b44      	ldr	r3, [pc, #272]	@ (800855c <USBD_SetConfig+0x150>)
 800844c:	781b      	ldrb	r3, [r3, #0]
 800844e:	2b00      	cmp	r3, #0
 8008450:	d020      	beq.n	8008494 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8008452:	4b42      	ldr	r3, [pc, #264]	@ (800855c <USBD_SetConfig+0x150>)
 8008454:	781b      	ldrb	r3, [r3, #0]
 8008456:	461a      	mov	r2, r3
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800845c:	4b3f      	ldr	r3, [pc, #252]	@ (800855c <USBD_SetConfig+0x150>)
 800845e:	781b      	ldrb	r3, [r3, #0]
 8008460:	4619      	mov	r1, r3
 8008462:	6878      	ldr	r0, [r7, #4]
 8008464:	f7fe ffa5 	bl	80073b2 <USBD_SetClassConfig>
 8008468:	4603      	mov	r3, r0
 800846a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800846c:	7bfb      	ldrb	r3, [r7, #15]
 800846e:	2b00      	cmp	r3, #0
 8008470:	d008      	beq.n	8008484 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8008472:	6839      	ldr	r1, [r7, #0]
 8008474:	6878      	ldr	r0, [r7, #4]
 8008476:	f000 f962 	bl	800873e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	2202      	movs	r2, #2
 800847e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008482:	e065      	b.n	8008550 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008484:	6878      	ldr	r0, [r7, #4]
 8008486:	f000 fa38 	bl	80088fa <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	2203      	movs	r2, #3
 800848e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8008492:	e05d      	b.n	8008550 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008494:	6878      	ldr	r0, [r7, #4]
 8008496:	f000 fa30 	bl	80088fa <USBD_CtlSendStatus>
      break;
 800849a:	e059      	b.n	8008550 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800849c:	4b2f      	ldr	r3, [pc, #188]	@ (800855c <USBD_SetConfig+0x150>)
 800849e:	781b      	ldrb	r3, [r3, #0]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d112      	bne.n	80084ca <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	2202      	movs	r2, #2
 80084a8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 80084ac:	4b2b      	ldr	r3, [pc, #172]	@ (800855c <USBD_SetConfig+0x150>)
 80084ae:	781b      	ldrb	r3, [r3, #0]
 80084b0:	461a      	mov	r2, r3
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80084b6:	4b29      	ldr	r3, [pc, #164]	@ (800855c <USBD_SetConfig+0x150>)
 80084b8:	781b      	ldrb	r3, [r3, #0]
 80084ba:	4619      	mov	r1, r3
 80084bc:	6878      	ldr	r0, [r7, #4]
 80084be:	f7fe ff94 	bl	80073ea <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80084c2:	6878      	ldr	r0, [r7, #4]
 80084c4:	f000 fa19 	bl	80088fa <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80084c8:	e042      	b.n	8008550 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80084ca:	4b24      	ldr	r3, [pc, #144]	@ (800855c <USBD_SetConfig+0x150>)
 80084cc:	781b      	ldrb	r3, [r3, #0]
 80084ce:	461a      	mov	r2, r3
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	685b      	ldr	r3, [r3, #4]
 80084d4:	429a      	cmp	r2, r3
 80084d6:	d02a      	beq.n	800852e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	685b      	ldr	r3, [r3, #4]
 80084dc:	b2db      	uxtb	r3, r3
 80084de:	4619      	mov	r1, r3
 80084e0:	6878      	ldr	r0, [r7, #4]
 80084e2:	f7fe ff82 	bl	80073ea <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80084e6:	4b1d      	ldr	r3, [pc, #116]	@ (800855c <USBD_SetConfig+0x150>)
 80084e8:	781b      	ldrb	r3, [r3, #0]
 80084ea:	461a      	mov	r2, r3
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80084f0:	4b1a      	ldr	r3, [pc, #104]	@ (800855c <USBD_SetConfig+0x150>)
 80084f2:	781b      	ldrb	r3, [r3, #0]
 80084f4:	4619      	mov	r1, r3
 80084f6:	6878      	ldr	r0, [r7, #4]
 80084f8:	f7fe ff5b 	bl	80073b2 <USBD_SetClassConfig>
 80084fc:	4603      	mov	r3, r0
 80084fe:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008500:	7bfb      	ldrb	r3, [r7, #15]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d00f      	beq.n	8008526 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008506:	6839      	ldr	r1, [r7, #0]
 8008508:	6878      	ldr	r0, [r7, #4]
 800850a:	f000 f918 	bl	800873e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	685b      	ldr	r3, [r3, #4]
 8008512:	b2db      	uxtb	r3, r3
 8008514:	4619      	mov	r1, r3
 8008516:	6878      	ldr	r0, [r7, #4]
 8008518:	f7fe ff67 	bl	80073ea <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	2202      	movs	r2, #2
 8008520:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8008524:	e014      	b.n	8008550 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008526:	6878      	ldr	r0, [r7, #4]
 8008528:	f000 f9e7 	bl	80088fa <USBD_CtlSendStatus>
      break;
 800852c:	e010      	b.n	8008550 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800852e:	6878      	ldr	r0, [r7, #4]
 8008530:	f000 f9e3 	bl	80088fa <USBD_CtlSendStatus>
      break;
 8008534:	e00c      	b.n	8008550 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008536:	6839      	ldr	r1, [r7, #0]
 8008538:	6878      	ldr	r0, [r7, #4]
 800853a:	f000 f900 	bl	800873e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800853e:	4b07      	ldr	r3, [pc, #28]	@ (800855c <USBD_SetConfig+0x150>)
 8008540:	781b      	ldrb	r3, [r3, #0]
 8008542:	4619      	mov	r1, r3
 8008544:	6878      	ldr	r0, [r7, #4]
 8008546:	f7fe ff50 	bl	80073ea <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800854a:	2303      	movs	r3, #3
 800854c:	73fb      	strb	r3, [r7, #15]
      break;
 800854e:	bf00      	nop
  }

  return ret;
 8008550:	7bfb      	ldrb	r3, [r7, #15]
}
 8008552:	4618      	mov	r0, r3
 8008554:	3710      	adds	r7, #16
 8008556:	46bd      	mov	sp, r7
 8008558:	bd80      	pop	{r7, pc}
 800855a:	bf00      	nop
 800855c:	200002b8 	.word	0x200002b8

08008560 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008560:	b580      	push	{r7, lr}
 8008562:	b082      	sub	sp, #8
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
 8008568:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800856a:	683b      	ldr	r3, [r7, #0]
 800856c:	88db      	ldrh	r3, [r3, #6]
 800856e:	2b01      	cmp	r3, #1
 8008570:	d004      	beq.n	800857c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008572:	6839      	ldr	r1, [r7, #0]
 8008574:	6878      	ldr	r0, [r7, #4]
 8008576:	f000 f8e2 	bl	800873e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800857a:	e023      	b.n	80085c4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008582:	b2db      	uxtb	r3, r3
 8008584:	2b02      	cmp	r3, #2
 8008586:	dc02      	bgt.n	800858e <USBD_GetConfig+0x2e>
 8008588:	2b00      	cmp	r3, #0
 800858a:	dc03      	bgt.n	8008594 <USBD_GetConfig+0x34>
 800858c:	e015      	b.n	80085ba <USBD_GetConfig+0x5a>
 800858e:	2b03      	cmp	r3, #3
 8008590:	d00b      	beq.n	80085aa <USBD_GetConfig+0x4a>
 8008592:	e012      	b.n	80085ba <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	2200      	movs	r2, #0
 8008598:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	3308      	adds	r3, #8
 800859e:	2201      	movs	r2, #1
 80085a0:	4619      	mov	r1, r3
 80085a2:	6878      	ldr	r0, [r7, #4]
 80085a4:	f000 f948 	bl	8008838 <USBD_CtlSendData>
        break;
 80085a8:	e00c      	b.n	80085c4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	3304      	adds	r3, #4
 80085ae:	2201      	movs	r2, #1
 80085b0:	4619      	mov	r1, r3
 80085b2:	6878      	ldr	r0, [r7, #4]
 80085b4:	f000 f940 	bl	8008838 <USBD_CtlSendData>
        break;
 80085b8:	e004      	b.n	80085c4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80085ba:	6839      	ldr	r1, [r7, #0]
 80085bc:	6878      	ldr	r0, [r7, #4]
 80085be:	f000 f8be 	bl	800873e <USBD_CtlError>
        break;
 80085c2:	bf00      	nop
}
 80085c4:	bf00      	nop
 80085c6:	3708      	adds	r7, #8
 80085c8:	46bd      	mov	sp, r7
 80085ca:	bd80      	pop	{r7, pc}

080085cc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b082      	sub	sp, #8
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]
 80085d4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80085dc:	b2db      	uxtb	r3, r3
 80085de:	3b01      	subs	r3, #1
 80085e0:	2b02      	cmp	r3, #2
 80085e2:	d81e      	bhi.n	8008622 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80085e4:	683b      	ldr	r3, [r7, #0]
 80085e6:	88db      	ldrh	r3, [r3, #6]
 80085e8:	2b02      	cmp	r3, #2
 80085ea:	d004      	beq.n	80085f6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80085ec:	6839      	ldr	r1, [r7, #0]
 80085ee:	6878      	ldr	r0, [r7, #4]
 80085f0:	f000 f8a5 	bl	800873e <USBD_CtlError>
        break;
 80085f4:	e01a      	b.n	800862c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	2201      	movs	r2, #1
 80085fa:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8008602:	2b00      	cmp	r3, #0
 8008604:	d005      	beq.n	8008612 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	68db      	ldr	r3, [r3, #12]
 800860a:	f043 0202 	orr.w	r2, r3, #2
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	330c      	adds	r3, #12
 8008616:	2202      	movs	r2, #2
 8008618:	4619      	mov	r1, r3
 800861a:	6878      	ldr	r0, [r7, #4]
 800861c:	f000 f90c 	bl	8008838 <USBD_CtlSendData>
      break;
 8008620:	e004      	b.n	800862c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008622:	6839      	ldr	r1, [r7, #0]
 8008624:	6878      	ldr	r0, [r7, #4]
 8008626:	f000 f88a 	bl	800873e <USBD_CtlError>
      break;
 800862a:	bf00      	nop
  }
}
 800862c:	bf00      	nop
 800862e:	3708      	adds	r7, #8
 8008630:	46bd      	mov	sp, r7
 8008632:	bd80      	pop	{r7, pc}

08008634 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008634:	b580      	push	{r7, lr}
 8008636:	b082      	sub	sp, #8
 8008638:	af00      	add	r7, sp, #0
 800863a:	6078      	str	r0, [r7, #4]
 800863c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800863e:	683b      	ldr	r3, [r7, #0]
 8008640:	885b      	ldrh	r3, [r3, #2]
 8008642:	2b01      	cmp	r3, #1
 8008644:	d107      	bne.n	8008656 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	2201      	movs	r2, #1
 800864a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800864e:	6878      	ldr	r0, [r7, #4]
 8008650:	f000 f953 	bl	80088fa <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008654:	e013      	b.n	800867e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008656:	683b      	ldr	r3, [r7, #0]
 8008658:	885b      	ldrh	r3, [r3, #2]
 800865a:	2b02      	cmp	r3, #2
 800865c:	d10b      	bne.n	8008676 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800865e:	683b      	ldr	r3, [r7, #0]
 8008660:	889b      	ldrh	r3, [r3, #4]
 8008662:	0a1b      	lsrs	r3, r3, #8
 8008664:	b29b      	uxth	r3, r3
 8008666:	b2da      	uxtb	r2, r3
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800866e:	6878      	ldr	r0, [r7, #4]
 8008670:	f000 f943 	bl	80088fa <USBD_CtlSendStatus>
}
 8008674:	e003      	b.n	800867e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008676:	6839      	ldr	r1, [r7, #0]
 8008678:	6878      	ldr	r0, [r7, #4]
 800867a:	f000 f860 	bl	800873e <USBD_CtlError>
}
 800867e:	bf00      	nop
 8008680:	3708      	adds	r7, #8
 8008682:	46bd      	mov	sp, r7
 8008684:	bd80      	pop	{r7, pc}

08008686 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008686:	b580      	push	{r7, lr}
 8008688:	b082      	sub	sp, #8
 800868a:	af00      	add	r7, sp, #0
 800868c:	6078      	str	r0, [r7, #4]
 800868e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008696:	b2db      	uxtb	r3, r3
 8008698:	3b01      	subs	r3, #1
 800869a:	2b02      	cmp	r3, #2
 800869c:	d80b      	bhi.n	80086b6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800869e:	683b      	ldr	r3, [r7, #0]
 80086a0:	885b      	ldrh	r3, [r3, #2]
 80086a2:	2b01      	cmp	r3, #1
 80086a4:	d10c      	bne.n	80086c0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	2200      	movs	r2, #0
 80086aa:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80086ae:	6878      	ldr	r0, [r7, #4]
 80086b0:	f000 f923 	bl	80088fa <USBD_CtlSendStatus>
      }
      break;
 80086b4:	e004      	b.n	80086c0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80086b6:	6839      	ldr	r1, [r7, #0]
 80086b8:	6878      	ldr	r0, [r7, #4]
 80086ba:	f000 f840 	bl	800873e <USBD_CtlError>
      break;
 80086be:	e000      	b.n	80086c2 <USBD_ClrFeature+0x3c>
      break;
 80086c0:	bf00      	nop
  }
}
 80086c2:	bf00      	nop
 80086c4:	3708      	adds	r7, #8
 80086c6:	46bd      	mov	sp, r7
 80086c8:	bd80      	pop	{r7, pc}

080086ca <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80086ca:	b580      	push	{r7, lr}
 80086cc:	b084      	sub	sp, #16
 80086ce:	af00      	add	r7, sp, #0
 80086d0:	6078      	str	r0, [r7, #4]
 80086d2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80086d4:	683b      	ldr	r3, [r7, #0]
 80086d6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	781a      	ldrb	r2, [r3, #0]
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	3301      	adds	r3, #1
 80086e4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	781a      	ldrb	r2, [r3, #0]
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	3301      	adds	r3, #1
 80086f2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80086f4:	68f8      	ldr	r0, [r7, #12]
 80086f6:	f7ff fa15 	bl	8007b24 <SWAPBYTE>
 80086fa:	4603      	mov	r3, r0
 80086fc:	461a      	mov	r2, r3
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	3301      	adds	r3, #1
 8008706:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	3301      	adds	r3, #1
 800870c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800870e:	68f8      	ldr	r0, [r7, #12]
 8008710:	f7ff fa08 	bl	8007b24 <SWAPBYTE>
 8008714:	4603      	mov	r3, r0
 8008716:	461a      	mov	r2, r3
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	3301      	adds	r3, #1
 8008720:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	3301      	adds	r3, #1
 8008726:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008728:	68f8      	ldr	r0, [r7, #12]
 800872a:	f7ff f9fb 	bl	8007b24 <SWAPBYTE>
 800872e:	4603      	mov	r3, r0
 8008730:	461a      	mov	r2, r3
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	80da      	strh	r2, [r3, #6]
}
 8008736:	bf00      	nop
 8008738:	3710      	adds	r7, #16
 800873a:	46bd      	mov	sp, r7
 800873c:	bd80      	pop	{r7, pc}

0800873e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800873e:	b580      	push	{r7, lr}
 8008740:	b082      	sub	sp, #8
 8008742:	af00      	add	r7, sp, #0
 8008744:	6078      	str	r0, [r7, #4]
 8008746:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008748:	2180      	movs	r1, #128	@ 0x80
 800874a:	6878      	ldr	r0, [r7, #4]
 800874c:	f000 fd32 	bl	80091b4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008750:	2100      	movs	r1, #0
 8008752:	6878      	ldr	r0, [r7, #4]
 8008754:	f000 fd2e 	bl	80091b4 <USBD_LL_StallEP>
}
 8008758:	bf00      	nop
 800875a:	3708      	adds	r7, #8
 800875c:	46bd      	mov	sp, r7
 800875e:	bd80      	pop	{r7, pc}

08008760 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008760:	b580      	push	{r7, lr}
 8008762:	b086      	sub	sp, #24
 8008764:	af00      	add	r7, sp, #0
 8008766:	60f8      	str	r0, [r7, #12]
 8008768:	60b9      	str	r1, [r7, #8]
 800876a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800876c:	2300      	movs	r3, #0
 800876e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	2b00      	cmp	r3, #0
 8008774:	d042      	beq.n	80087fc <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800877a:	6938      	ldr	r0, [r7, #16]
 800877c:	f000 f842 	bl	8008804 <USBD_GetLen>
 8008780:	4603      	mov	r3, r0
 8008782:	3301      	adds	r3, #1
 8008784:	005b      	lsls	r3, r3, #1
 8008786:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800878a:	d808      	bhi.n	800879e <USBD_GetString+0x3e>
 800878c:	6938      	ldr	r0, [r7, #16]
 800878e:	f000 f839 	bl	8008804 <USBD_GetLen>
 8008792:	4603      	mov	r3, r0
 8008794:	3301      	adds	r3, #1
 8008796:	b29b      	uxth	r3, r3
 8008798:	005b      	lsls	r3, r3, #1
 800879a:	b29a      	uxth	r2, r3
 800879c:	e001      	b.n	80087a2 <USBD_GetString+0x42>
 800879e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80087a6:	7dfb      	ldrb	r3, [r7, #23]
 80087a8:	68ba      	ldr	r2, [r7, #8]
 80087aa:	4413      	add	r3, r2
 80087ac:	687a      	ldr	r2, [r7, #4]
 80087ae:	7812      	ldrb	r2, [r2, #0]
 80087b0:	701a      	strb	r2, [r3, #0]
  idx++;
 80087b2:	7dfb      	ldrb	r3, [r7, #23]
 80087b4:	3301      	adds	r3, #1
 80087b6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80087b8:	7dfb      	ldrb	r3, [r7, #23]
 80087ba:	68ba      	ldr	r2, [r7, #8]
 80087bc:	4413      	add	r3, r2
 80087be:	2203      	movs	r2, #3
 80087c0:	701a      	strb	r2, [r3, #0]
  idx++;
 80087c2:	7dfb      	ldrb	r3, [r7, #23]
 80087c4:	3301      	adds	r3, #1
 80087c6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80087c8:	e013      	b.n	80087f2 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 80087ca:	7dfb      	ldrb	r3, [r7, #23]
 80087cc:	68ba      	ldr	r2, [r7, #8]
 80087ce:	4413      	add	r3, r2
 80087d0:	693a      	ldr	r2, [r7, #16]
 80087d2:	7812      	ldrb	r2, [r2, #0]
 80087d4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80087d6:	693b      	ldr	r3, [r7, #16]
 80087d8:	3301      	adds	r3, #1
 80087da:	613b      	str	r3, [r7, #16]
    idx++;
 80087dc:	7dfb      	ldrb	r3, [r7, #23]
 80087de:	3301      	adds	r3, #1
 80087e0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80087e2:	7dfb      	ldrb	r3, [r7, #23]
 80087e4:	68ba      	ldr	r2, [r7, #8]
 80087e6:	4413      	add	r3, r2
 80087e8:	2200      	movs	r2, #0
 80087ea:	701a      	strb	r2, [r3, #0]
    idx++;
 80087ec:	7dfb      	ldrb	r3, [r7, #23]
 80087ee:	3301      	adds	r3, #1
 80087f0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80087f2:	693b      	ldr	r3, [r7, #16]
 80087f4:	781b      	ldrb	r3, [r3, #0]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d1e7      	bne.n	80087ca <USBD_GetString+0x6a>
 80087fa:	e000      	b.n	80087fe <USBD_GetString+0x9e>
    return;
 80087fc:	bf00      	nop
  }
}
 80087fe:	3718      	adds	r7, #24
 8008800:	46bd      	mov	sp, r7
 8008802:	bd80      	pop	{r7, pc}

08008804 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008804:	b480      	push	{r7}
 8008806:	b085      	sub	sp, #20
 8008808:	af00      	add	r7, sp, #0
 800880a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800880c:	2300      	movs	r3, #0
 800880e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008814:	e005      	b.n	8008822 <USBD_GetLen+0x1e>
  {
    len++;
 8008816:	7bfb      	ldrb	r3, [r7, #15]
 8008818:	3301      	adds	r3, #1
 800881a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800881c:	68bb      	ldr	r3, [r7, #8]
 800881e:	3301      	adds	r3, #1
 8008820:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008822:	68bb      	ldr	r3, [r7, #8]
 8008824:	781b      	ldrb	r3, [r3, #0]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d1f5      	bne.n	8008816 <USBD_GetLen+0x12>
  }

  return len;
 800882a:	7bfb      	ldrb	r3, [r7, #15]
}
 800882c:	4618      	mov	r0, r3
 800882e:	3714      	adds	r7, #20
 8008830:	46bd      	mov	sp, r7
 8008832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008836:	4770      	bx	lr

08008838 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008838:	b580      	push	{r7, lr}
 800883a:	b084      	sub	sp, #16
 800883c:	af00      	add	r7, sp, #0
 800883e:	60f8      	str	r0, [r7, #12]
 8008840:	60b9      	str	r1, [r7, #8]
 8008842:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	2202      	movs	r2, #2
 8008848:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	687a      	ldr	r2, [r7, #4]
 8008850:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	68ba      	ldr	r2, [r7, #8]
 8008856:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	687a      	ldr	r2, [r7, #4]
 800885c:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	68ba      	ldr	r2, [r7, #8]
 8008862:	2100      	movs	r1, #0
 8008864:	68f8      	ldr	r0, [r7, #12]
 8008866:	f000 fd2e 	bl	80092c6 <USBD_LL_Transmit>

  return USBD_OK;
 800886a:	2300      	movs	r3, #0
}
 800886c:	4618      	mov	r0, r3
 800886e:	3710      	adds	r7, #16
 8008870:	46bd      	mov	sp, r7
 8008872:	bd80      	pop	{r7, pc}

08008874 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008874:	b580      	push	{r7, lr}
 8008876:	b084      	sub	sp, #16
 8008878:	af00      	add	r7, sp, #0
 800887a:	60f8      	str	r0, [r7, #12]
 800887c:	60b9      	str	r1, [r7, #8]
 800887e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	68ba      	ldr	r2, [r7, #8]
 8008884:	2100      	movs	r1, #0
 8008886:	68f8      	ldr	r0, [r7, #12]
 8008888:	f000 fd1d 	bl	80092c6 <USBD_LL_Transmit>

  return USBD_OK;
 800888c:	2300      	movs	r3, #0
}
 800888e:	4618      	mov	r0, r3
 8008890:	3710      	adds	r7, #16
 8008892:	46bd      	mov	sp, r7
 8008894:	bd80      	pop	{r7, pc}

08008896 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008896:	b580      	push	{r7, lr}
 8008898:	b084      	sub	sp, #16
 800889a:	af00      	add	r7, sp, #0
 800889c:	60f8      	str	r0, [r7, #12]
 800889e:	60b9      	str	r1, [r7, #8]
 80088a0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	2203      	movs	r2, #3
 80088a6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	687a      	ldr	r2, [r7, #4]
 80088ae:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
  pdev->ep_out[0].pbuffer = pbuf;
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	68ba      	ldr	r2, [r7, #8]
 80088b6:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	687a      	ldr	r2, [r7, #4]
 80088be:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	68ba      	ldr	r2, [r7, #8]
 80088c6:	2100      	movs	r1, #0
 80088c8:	68f8      	ldr	r0, [r7, #12]
 80088ca:	f000 fd1d 	bl	8009308 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80088ce:	2300      	movs	r3, #0
}
 80088d0:	4618      	mov	r0, r3
 80088d2:	3710      	adds	r7, #16
 80088d4:	46bd      	mov	sp, r7
 80088d6:	bd80      	pop	{r7, pc}

080088d8 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80088d8:	b580      	push	{r7, lr}
 80088da:	b084      	sub	sp, #16
 80088dc:	af00      	add	r7, sp, #0
 80088de:	60f8      	str	r0, [r7, #12]
 80088e0:	60b9      	str	r1, [r7, #8]
 80088e2:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	68ba      	ldr	r2, [r7, #8]
 80088e8:	2100      	movs	r1, #0
 80088ea:	68f8      	ldr	r0, [r7, #12]
 80088ec:	f000 fd0c 	bl	8009308 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80088f0:	2300      	movs	r3, #0
}
 80088f2:	4618      	mov	r0, r3
 80088f4:	3710      	adds	r7, #16
 80088f6:	46bd      	mov	sp, r7
 80088f8:	bd80      	pop	{r7, pc}

080088fa <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80088fa:	b580      	push	{r7, lr}
 80088fc:	b082      	sub	sp, #8
 80088fe:	af00      	add	r7, sp, #0
 8008900:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	2204      	movs	r2, #4
 8008906:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800890a:	2300      	movs	r3, #0
 800890c:	2200      	movs	r2, #0
 800890e:	2100      	movs	r1, #0
 8008910:	6878      	ldr	r0, [r7, #4]
 8008912:	f000 fcd8 	bl	80092c6 <USBD_LL_Transmit>

  return USBD_OK;
 8008916:	2300      	movs	r3, #0
}
 8008918:	4618      	mov	r0, r3
 800891a:	3708      	adds	r7, #8
 800891c:	46bd      	mov	sp, r7
 800891e:	bd80      	pop	{r7, pc}

08008920 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008920:	b580      	push	{r7, lr}
 8008922:	b082      	sub	sp, #8
 8008924:	af00      	add	r7, sp, #0
 8008926:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	2205      	movs	r2, #5
 800892c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008930:	2300      	movs	r3, #0
 8008932:	2200      	movs	r2, #0
 8008934:	2100      	movs	r1, #0
 8008936:	6878      	ldr	r0, [r7, #4]
 8008938:	f000 fce6 	bl	8009308 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800893c:	2300      	movs	r3, #0
}
 800893e:	4618      	mov	r0, r3
 8008940:	3708      	adds	r7, #8
 8008942:	46bd      	mov	sp, r7
 8008944:	bd80      	pop	{r7, pc}
	...

08008948 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008948:	b580      	push	{r7, lr}
 800894a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800894c:	2200      	movs	r2, #0
 800894e:	4912      	ldr	r1, [pc, #72]	@ (8008998 <MX_USB_DEVICE_Init+0x50>)
 8008950:	4812      	ldr	r0, [pc, #72]	@ (800899c <MX_USB_DEVICE_Init+0x54>)
 8008952:	f7fe fcb1 	bl	80072b8 <USBD_Init>
 8008956:	4603      	mov	r3, r0
 8008958:	2b00      	cmp	r3, #0
 800895a:	d001      	beq.n	8008960 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800895c:	f7f8 fa30 	bl	8000dc0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008960:	490f      	ldr	r1, [pc, #60]	@ (80089a0 <MX_USB_DEVICE_Init+0x58>)
 8008962:	480e      	ldr	r0, [pc, #56]	@ (800899c <MX_USB_DEVICE_Init+0x54>)
 8008964:	f7fe fcd8 	bl	8007318 <USBD_RegisterClass>
 8008968:	4603      	mov	r3, r0
 800896a:	2b00      	cmp	r3, #0
 800896c:	d001      	beq.n	8008972 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800896e:	f7f8 fa27 	bl	8000dc0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008972:	490c      	ldr	r1, [pc, #48]	@ (80089a4 <MX_USB_DEVICE_Init+0x5c>)
 8008974:	4809      	ldr	r0, [pc, #36]	@ (800899c <MX_USB_DEVICE_Init+0x54>)
 8008976:	f7fe fbcf 	bl	8007118 <USBD_CDC_RegisterInterface>
 800897a:	4603      	mov	r3, r0
 800897c:	2b00      	cmp	r3, #0
 800897e:	d001      	beq.n	8008984 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008980:	f7f8 fa1e 	bl	8000dc0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008984:	4805      	ldr	r0, [pc, #20]	@ (800899c <MX_USB_DEVICE_Init+0x54>)
 8008986:	f7fe fcfd 	bl	8007384 <USBD_Start>
 800898a:	4603      	mov	r3, r0
 800898c:	2b00      	cmp	r3, #0
 800898e:	d001      	beq.n	8008994 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008990:	f7f8 fa16 	bl	8000dc0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008994:	bf00      	nop
 8008996:	bd80      	pop	{r7, pc}
 8008998:	200000bc 	.word	0x200000bc
 800899c:	200002bc 	.word	0x200002bc
 80089a0:	20000028 	.word	0x20000028
 80089a4:	200000a8 	.word	0x200000a8

080089a8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80089a8:	b580      	push	{r7, lr}
 80089aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80089ac:	2200      	movs	r2, #0
 80089ae:	4905      	ldr	r1, [pc, #20]	@ (80089c4 <CDC_Init_FS+0x1c>)
 80089b0:	4805      	ldr	r0, [pc, #20]	@ (80089c8 <CDC_Init_FS+0x20>)
 80089b2:	f7fe fbcb 	bl	800714c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80089b6:	4905      	ldr	r1, [pc, #20]	@ (80089cc <CDC_Init_FS+0x24>)
 80089b8:	4803      	ldr	r0, [pc, #12]	@ (80089c8 <CDC_Init_FS+0x20>)
 80089ba:	f7fe fbe9 	bl	8007190 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80089be:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80089c0:	4618      	mov	r0, r3
 80089c2:	bd80      	pop	{r7, pc}
 80089c4:	20000d98 	.word	0x20000d98
 80089c8:	200002bc 	.word	0x200002bc
 80089cc:	20000598 	.word	0x20000598

080089d0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80089d0:	b480      	push	{r7}
 80089d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80089d4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80089d6:	4618      	mov	r0, r3
 80089d8:	46bd      	mov	sp, r7
 80089da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089de:	4770      	bx	lr

080089e0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80089e0:	b480      	push	{r7}
 80089e2:	b083      	sub	sp, #12
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	4603      	mov	r3, r0
 80089e8:	6039      	str	r1, [r7, #0]
 80089ea:	71fb      	strb	r3, [r7, #7]
 80089ec:	4613      	mov	r3, r2
 80089ee:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80089f0:	79fb      	ldrb	r3, [r7, #7]
 80089f2:	2b23      	cmp	r3, #35	@ 0x23
 80089f4:	d84a      	bhi.n	8008a8c <CDC_Control_FS+0xac>
 80089f6:	a201      	add	r2, pc, #4	@ (adr r2, 80089fc <CDC_Control_FS+0x1c>)
 80089f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089fc:	08008a8d 	.word	0x08008a8d
 8008a00:	08008a8d 	.word	0x08008a8d
 8008a04:	08008a8d 	.word	0x08008a8d
 8008a08:	08008a8d 	.word	0x08008a8d
 8008a0c:	08008a8d 	.word	0x08008a8d
 8008a10:	08008a8d 	.word	0x08008a8d
 8008a14:	08008a8d 	.word	0x08008a8d
 8008a18:	08008a8d 	.word	0x08008a8d
 8008a1c:	08008a8d 	.word	0x08008a8d
 8008a20:	08008a8d 	.word	0x08008a8d
 8008a24:	08008a8d 	.word	0x08008a8d
 8008a28:	08008a8d 	.word	0x08008a8d
 8008a2c:	08008a8d 	.word	0x08008a8d
 8008a30:	08008a8d 	.word	0x08008a8d
 8008a34:	08008a8d 	.word	0x08008a8d
 8008a38:	08008a8d 	.word	0x08008a8d
 8008a3c:	08008a8d 	.word	0x08008a8d
 8008a40:	08008a8d 	.word	0x08008a8d
 8008a44:	08008a8d 	.word	0x08008a8d
 8008a48:	08008a8d 	.word	0x08008a8d
 8008a4c:	08008a8d 	.word	0x08008a8d
 8008a50:	08008a8d 	.word	0x08008a8d
 8008a54:	08008a8d 	.word	0x08008a8d
 8008a58:	08008a8d 	.word	0x08008a8d
 8008a5c:	08008a8d 	.word	0x08008a8d
 8008a60:	08008a8d 	.word	0x08008a8d
 8008a64:	08008a8d 	.word	0x08008a8d
 8008a68:	08008a8d 	.word	0x08008a8d
 8008a6c:	08008a8d 	.word	0x08008a8d
 8008a70:	08008a8d 	.word	0x08008a8d
 8008a74:	08008a8d 	.word	0x08008a8d
 8008a78:	08008a8d 	.word	0x08008a8d
 8008a7c:	08008a8d 	.word	0x08008a8d
 8008a80:	08008a8d 	.word	0x08008a8d
 8008a84:	08008a8d 	.word	0x08008a8d
 8008a88:	08008a8d 	.word	0x08008a8d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008a8c:	bf00      	nop
  }

  return (USBD_OK);
 8008a8e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008a90:	4618      	mov	r0, r3
 8008a92:	370c      	adds	r7, #12
 8008a94:	46bd      	mov	sp, r7
 8008a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9a:	4770      	bx	lr

08008a9c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008a9c:	b580      	push	{r7, lr}
 8008a9e:	b082      	sub	sp, #8
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	6078      	str	r0, [r7, #4]
 8008aa4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008aa6:	6879      	ldr	r1, [r7, #4]
 8008aa8:	480f      	ldr	r0, [pc, #60]	@ (8008ae8 <CDC_Receive_FS+0x4c>)
 8008aaa:	f7fe fb71 	bl	8007190 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008aae:	480e      	ldr	r0, [pc, #56]	@ (8008ae8 <CDC_Receive_FS+0x4c>)
 8008ab0:	f7fe fbcc 	bl	800724c <USBD_CDC_ReceivePacket>

  rx_buff[0] = Buf[0];
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	781a      	ldrb	r2, [r3, #0]
 8008ab8:	4b0c      	ldr	r3, [pc, #48]	@ (8008aec <CDC_Receive_FS+0x50>)
 8008aba:	701a      	strb	r2, [r3, #0]
  rx_buff[1] = Buf[1];
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	785a      	ldrb	r2, [r3, #1]
 8008ac0:	4b0a      	ldr	r3, [pc, #40]	@ (8008aec <CDC_Receive_FS+0x50>)
 8008ac2:	705a      	strb	r2, [r3, #1]
  rx_buff[2] = Buf[2];
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	789a      	ldrb	r2, [r3, #2]
 8008ac8:	4b08      	ldr	r3, [pc, #32]	@ (8008aec <CDC_Receive_FS+0x50>)
 8008aca:	709a      	strb	r2, [r3, #2]
  rx_buff[3] = Buf[3];
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	78da      	ldrb	r2, [r3, #3]
 8008ad0:	4b06      	ldr	r3, [pc, #24]	@ (8008aec <CDC_Receive_FS+0x50>)
 8008ad2:	70da      	strb	r2, [r3, #3]
  rx_buff[4] = Buf[4];
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	791a      	ldrb	r2, [r3, #4]
 8008ad8:	4b04      	ldr	r3, [pc, #16]	@ (8008aec <CDC_Receive_FS+0x50>)
 8008ada:	711a      	strb	r2, [r3, #4]

  return (USBD_OK);
 8008adc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008ade:	4618      	mov	r0, r3
 8008ae0:	3708      	adds	r7, #8
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	bd80      	pop	{r7, pc}
 8008ae6:	bf00      	nop
 8008ae8:	200002bc 	.word	0x200002bc
 8008aec:	20000138 	.word	0x20000138

08008af0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008af0:	b580      	push	{r7, lr}
 8008af2:	b084      	sub	sp, #16
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	6078      	str	r0, [r7, #4]
 8008af8:	460b      	mov	r3, r1
 8008afa:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008afc:	2300      	movs	r3, #0
 8008afe:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008b00:	4b0d      	ldr	r3, [pc, #52]	@ (8008b38 <CDC_Transmit_FS+0x48>)
 8008b02:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008b06:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008b08:	68bb      	ldr	r3, [r7, #8]
 8008b0a:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d001      	beq.n	8008b16 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008b12:	2301      	movs	r3, #1
 8008b14:	e00b      	b.n	8008b2e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008b16:	887b      	ldrh	r3, [r7, #2]
 8008b18:	461a      	mov	r2, r3
 8008b1a:	6879      	ldr	r1, [r7, #4]
 8008b1c:	4806      	ldr	r0, [pc, #24]	@ (8008b38 <CDC_Transmit_FS+0x48>)
 8008b1e:	f7fe fb15 	bl	800714c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008b22:	4805      	ldr	r0, [pc, #20]	@ (8008b38 <CDC_Transmit_FS+0x48>)
 8008b24:	f7fe fb52 	bl	80071cc <USBD_CDC_TransmitPacket>
 8008b28:	4603      	mov	r3, r0
 8008b2a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008b2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b2e:	4618      	mov	r0, r3
 8008b30:	3710      	adds	r7, #16
 8008b32:	46bd      	mov	sp, r7
 8008b34:	bd80      	pop	{r7, pc}
 8008b36:	bf00      	nop
 8008b38:	200002bc 	.word	0x200002bc

08008b3c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008b3c:	b480      	push	{r7}
 8008b3e:	b087      	sub	sp, #28
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	60f8      	str	r0, [r7, #12]
 8008b44:	60b9      	str	r1, [r7, #8]
 8008b46:	4613      	mov	r3, r2
 8008b48:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008b4a:	2300      	movs	r3, #0
 8008b4c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008b4e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008b52:	4618      	mov	r0, r3
 8008b54:	371c      	adds	r7, #28
 8008b56:	46bd      	mov	sp, r7
 8008b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5c:	4770      	bx	lr
	...

08008b60 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b60:	b480      	push	{r7}
 8008b62:	b083      	sub	sp, #12
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	4603      	mov	r3, r0
 8008b68:	6039      	str	r1, [r7, #0]
 8008b6a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008b6c:	683b      	ldr	r3, [r7, #0]
 8008b6e:	2212      	movs	r2, #18
 8008b70:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008b72:	4b03      	ldr	r3, [pc, #12]	@ (8008b80 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008b74:	4618      	mov	r0, r3
 8008b76:	370c      	adds	r7, #12
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7e:	4770      	bx	lr
 8008b80:	200000dc 	.word	0x200000dc

08008b84 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b84:	b480      	push	{r7}
 8008b86:	b083      	sub	sp, #12
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	4603      	mov	r3, r0
 8008b8c:	6039      	str	r1, [r7, #0]
 8008b8e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008b90:	683b      	ldr	r3, [r7, #0]
 8008b92:	2204      	movs	r2, #4
 8008b94:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008b96:	4b03      	ldr	r3, [pc, #12]	@ (8008ba4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008b98:	4618      	mov	r0, r3
 8008b9a:	370c      	adds	r7, #12
 8008b9c:	46bd      	mov	sp, r7
 8008b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba2:	4770      	bx	lr
 8008ba4:	200000fc 	.word	0x200000fc

08008ba8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ba8:	b580      	push	{r7, lr}
 8008baa:	b082      	sub	sp, #8
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	4603      	mov	r3, r0
 8008bb0:	6039      	str	r1, [r7, #0]
 8008bb2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008bb4:	79fb      	ldrb	r3, [r7, #7]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d105      	bne.n	8008bc6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008bba:	683a      	ldr	r2, [r7, #0]
 8008bbc:	4907      	ldr	r1, [pc, #28]	@ (8008bdc <USBD_FS_ProductStrDescriptor+0x34>)
 8008bbe:	4808      	ldr	r0, [pc, #32]	@ (8008be0 <USBD_FS_ProductStrDescriptor+0x38>)
 8008bc0:	f7ff fdce 	bl	8008760 <USBD_GetString>
 8008bc4:	e004      	b.n	8008bd0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008bc6:	683a      	ldr	r2, [r7, #0]
 8008bc8:	4904      	ldr	r1, [pc, #16]	@ (8008bdc <USBD_FS_ProductStrDescriptor+0x34>)
 8008bca:	4805      	ldr	r0, [pc, #20]	@ (8008be0 <USBD_FS_ProductStrDescriptor+0x38>)
 8008bcc:	f7ff fdc8 	bl	8008760 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008bd0:	4b02      	ldr	r3, [pc, #8]	@ (8008bdc <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	3708      	adds	r7, #8
 8008bd6:	46bd      	mov	sp, r7
 8008bd8:	bd80      	pop	{r7, pc}
 8008bda:	bf00      	nop
 8008bdc:	20001598 	.word	0x20001598
 8008be0:	08009504 	.word	0x08009504

08008be4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008be4:	b580      	push	{r7, lr}
 8008be6:	b082      	sub	sp, #8
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	4603      	mov	r3, r0
 8008bec:	6039      	str	r1, [r7, #0]
 8008bee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008bf0:	683a      	ldr	r2, [r7, #0]
 8008bf2:	4904      	ldr	r1, [pc, #16]	@ (8008c04 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008bf4:	4804      	ldr	r0, [pc, #16]	@ (8008c08 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008bf6:	f7ff fdb3 	bl	8008760 <USBD_GetString>
  return USBD_StrDesc;
 8008bfa:	4b02      	ldr	r3, [pc, #8]	@ (8008c04 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	3708      	adds	r7, #8
 8008c00:	46bd      	mov	sp, r7
 8008c02:	bd80      	pop	{r7, pc}
 8008c04:	20001598 	.word	0x20001598
 8008c08:	0800951c 	.word	0x0800951c

08008c0c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b082      	sub	sp, #8
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	4603      	mov	r3, r0
 8008c14:	6039      	str	r1, [r7, #0]
 8008c16:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008c18:	683b      	ldr	r3, [r7, #0]
 8008c1a:	221a      	movs	r2, #26
 8008c1c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008c1e:	f000 f855 	bl	8008ccc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008c22:	4b02      	ldr	r3, [pc, #8]	@ (8008c2c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008c24:	4618      	mov	r0, r3
 8008c26:	3708      	adds	r7, #8
 8008c28:	46bd      	mov	sp, r7
 8008c2a:	bd80      	pop	{r7, pc}
 8008c2c:	20000100 	.word	0x20000100

08008c30 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c30:	b580      	push	{r7, lr}
 8008c32:	b082      	sub	sp, #8
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	4603      	mov	r3, r0
 8008c38:	6039      	str	r1, [r7, #0]
 8008c3a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008c3c:	79fb      	ldrb	r3, [r7, #7]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d105      	bne.n	8008c4e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008c42:	683a      	ldr	r2, [r7, #0]
 8008c44:	4907      	ldr	r1, [pc, #28]	@ (8008c64 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008c46:	4808      	ldr	r0, [pc, #32]	@ (8008c68 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008c48:	f7ff fd8a 	bl	8008760 <USBD_GetString>
 8008c4c:	e004      	b.n	8008c58 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008c4e:	683a      	ldr	r2, [r7, #0]
 8008c50:	4904      	ldr	r1, [pc, #16]	@ (8008c64 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008c52:	4805      	ldr	r0, [pc, #20]	@ (8008c68 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008c54:	f7ff fd84 	bl	8008760 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008c58:	4b02      	ldr	r3, [pc, #8]	@ (8008c64 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	3708      	adds	r7, #8
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	bd80      	pop	{r7, pc}
 8008c62:	bf00      	nop
 8008c64:	20001598 	.word	0x20001598
 8008c68:	08009530 	.word	0x08009530

08008c6c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c6c:	b580      	push	{r7, lr}
 8008c6e:	b082      	sub	sp, #8
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	4603      	mov	r3, r0
 8008c74:	6039      	str	r1, [r7, #0]
 8008c76:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008c78:	79fb      	ldrb	r3, [r7, #7]
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d105      	bne.n	8008c8a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008c7e:	683a      	ldr	r2, [r7, #0]
 8008c80:	4907      	ldr	r1, [pc, #28]	@ (8008ca0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008c82:	4808      	ldr	r0, [pc, #32]	@ (8008ca4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008c84:	f7ff fd6c 	bl	8008760 <USBD_GetString>
 8008c88:	e004      	b.n	8008c94 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008c8a:	683a      	ldr	r2, [r7, #0]
 8008c8c:	4904      	ldr	r1, [pc, #16]	@ (8008ca0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008c8e:	4805      	ldr	r0, [pc, #20]	@ (8008ca4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008c90:	f7ff fd66 	bl	8008760 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008c94:	4b02      	ldr	r3, [pc, #8]	@ (8008ca0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008c96:	4618      	mov	r0, r3
 8008c98:	3708      	adds	r7, #8
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	bd80      	pop	{r7, pc}
 8008c9e:	bf00      	nop
 8008ca0:	20001598 	.word	0x20001598
 8008ca4:	0800953c 	.word	0x0800953c

08008ca8 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ca8:	b480      	push	{r7}
 8008caa:	b083      	sub	sp, #12
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	4603      	mov	r3, r0
 8008cb0:	6039      	str	r1, [r7, #0]
 8008cb2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8008cb4:	683b      	ldr	r3, [r7, #0]
 8008cb6:	220c      	movs	r2, #12
 8008cb8:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8008cba:	4b03      	ldr	r3, [pc, #12]	@ (8008cc8 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	370c      	adds	r7, #12
 8008cc0:	46bd      	mov	sp, r7
 8008cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc6:	4770      	bx	lr
 8008cc8:	200000f0 	.word	0x200000f0

08008ccc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b084      	sub	sp, #16
 8008cd0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008cd2:	4b0f      	ldr	r3, [pc, #60]	@ (8008d10 <Get_SerialNum+0x44>)
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008cd8:	4b0e      	ldr	r3, [pc, #56]	@ (8008d14 <Get_SerialNum+0x48>)
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008cde:	4b0e      	ldr	r3, [pc, #56]	@ (8008d18 <Get_SerialNum+0x4c>)
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008ce4:	68fa      	ldr	r2, [r7, #12]
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	4413      	add	r3, r2
 8008cea:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d009      	beq.n	8008d06 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008cf2:	2208      	movs	r2, #8
 8008cf4:	4909      	ldr	r1, [pc, #36]	@ (8008d1c <Get_SerialNum+0x50>)
 8008cf6:	68f8      	ldr	r0, [r7, #12]
 8008cf8:	f000 f814 	bl	8008d24 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008cfc:	2204      	movs	r2, #4
 8008cfe:	4908      	ldr	r1, [pc, #32]	@ (8008d20 <Get_SerialNum+0x54>)
 8008d00:	68b8      	ldr	r0, [r7, #8]
 8008d02:	f000 f80f 	bl	8008d24 <IntToUnicode>
  }
}
 8008d06:	bf00      	nop
 8008d08:	3710      	adds	r7, #16
 8008d0a:	46bd      	mov	sp, r7
 8008d0c:	bd80      	pop	{r7, pc}
 8008d0e:	bf00      	nop
 8008d10:	1fff7a10 	.word	0x1fff7a10
 8008d14:	1fff7a14 	.word	0x1fff7a14
 8008d18:	1fff7a18 	.word	0x1fff7a18
 8008d1c:	20000102 	.word	0x20000102
 8008d20:	20000112 	.word	0x20000112

08008d24 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008d24:	b480      	push	{r7}
 8008d26:	b087      	sub	sp, #28
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	60f8      	str	r0, [r7, #12]
 8008d2c:	60b9      	str	r1, [r7, #8]
 8008d2e:	4613      	mov	r3, r2
 8008d30:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008d32:	2300      	movs	r3, #0
 8008d34:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008d36:	2300      	movs	r3, #0
 8008d38:	75fb      	strb	r3, [r7, #23]
 8008d3a:	e027      	b.n	8008d8c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	0f1b      	lsrs	r3, r3, #28
 8008d40:	2b09      	cmp	r3, #9
 8008d42:	d80b      	bhi.n	8008d5c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	0f1b      	lsrs	r3, r3, #28
 8008d48:	b2da      	uxtb	r2, r3
 8008d4a:	7dfb      	ldrb	r3, [r7, #23]
 8008d4c:	005b      	lsls	r3, r3, #1
 8008d4e:	4619      	mov	r1, r3
 8008d50:	68bb      	ldr	r3, [r7, #8]
 8008d52:	440b      	add	r3, r1
 8008d54:	3230      	adds	r2, #48	@ 0x30
 8008d56:	b2d2      	uxtb	r2, r2
 8008d58:	701a      	strb	r2, [r3, #0]
 8008d5a:	e00a      	b.n	8008d72 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	0f1b      	lsrs	r3, r3, #28
 8008d60:	b2da      	uxtb	r2, r3
 8008d62:	7dfb      	ldrb	r3, [r7, #23]
 8008d64:	005b      	lsls	r3, r3, #1
 8008d66:	4619      	mov	r1, r3
 8008d68:	68bb      	ldr	r3, [r7, #8]
 8008d6a:	440b      	add	r3, r1
 8008d6c:	3237      	adds	r2, #55	@ 0x37
 8008d6e:	b2d2      	uxtb	r2, r2
 8008d70:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	011b      	lsls	r3, r3, #4
 8008d76:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008d78:	7dfb      	ldrb	r3, [r7, #23]
 8008d7a:	005b      	lsls	r3, r3, #1
 8008d7c:	3301      	adds	r3, #1
 8008d7e:	68ba      	ldr	r2, [r7, #8]
 8008d80:	4413      	add	r3, r2
 8008d82:	2200      	movs	r2, #0
 8008d84:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008d86:	7dfb      	ldrb	r3, [r7, #23]
 8008d88:	3301      	adds	r3, #1
 8008d8a:	75fb      	strb	r3, [r7, #23]
 8008d8c:	7dfa      	ldrb	r2, [r7, #23]
 8008d8e:	79fb      	ldrb	r3, [r7, #7]
 8008d90:	429a      	cmp	r2, r3
 8008d92:	d3d3      	bcc.n	8008d3c <IntToUnicode+0x18>
  }
}
 8008d94:	bf00      	nop
 8008d96:	bf00      	nop
 8008d98:	371c      	adds	r7, #28
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da0:	4770      	bx	lr
	...

08008da4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008da4:	b580      	push	{r7, lr}
 8008da6:	b0a0      	sub	sp, #128	@ 0x80
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008dac:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8008db0:	2200      	movs	r2, #0
 8008db2:	601a      	str	r2, [r3, #0]
 8008db4:	605a      	str	r2, [r3, #4]
 8008db6:	609a      	str	r2, [r3, #8]
 8008db8:	60da      	str	r2, [r3, #12]
 8008dba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8008dbc:	f107 0310 	add.w	r3, r7, #16
 8008dc0:	225c      	movs	r2, #92	@ 0x5c
 8008dc2:	2100      	movs	r1, #0
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	f000 fb65 	bl	8009494 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008dd2:	d149      	bne.n	8008e68 <HAL_PCD_MspInit+0xc4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8008dd4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008dd8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8008dda:	2300      	movs	r3, #0
 8008ddc:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8008dde:	f107 0310 	add.w	r3, r7, #16
 8008de2:	4618      	mov	r0, r3
 8008de4:	f7fa f8f2 	bl	8002fcc <HAL_RCCEx_PeriphCLKConfig>
 8008de8:	4603      	mov	r3, r0
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d001      	beq.n	8008df2 <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 8008dee:	f7f7 ffe7 	bl	8000dc0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008df2:	2300      	movs	r3, #0
 8008df4:	60fb      	str	r3, [r7, #12]
 8008df6:	4b1e      	ldr	r3, [pc, #120]	@ (8008e70 <HAL_PCD_MspInit+0xcc>)
 8008df8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008dfa:	4a1d      	ldr	r2, [pc, #116]	@ (8008e70 <HAL_PCD_MspInit+0xcc>)
 8008dfc:	f043 0301 	orr.w	r3, r3, #1
 8008e00:	6313      	str	r3, [r2, #48]	@ 0x30
 8008e02:	4b1b      	ldr	r3, [pc, #108]	@ (8008e70 <HAL_PCD_MspInit+0xcc>)
 8008e04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e06:	f003 0301 	and.w	r3, r3, #1
 8008e0a:	60fb      	str	r3, [r7, #12]
 8008e0c:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008e0e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8008e12:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008e14:	2302      	movs	r3, #2
 8008e16:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008e18:	2300      	movs	r3, #0
 8008e1a:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008e1c:	2303      	movs	r3, #3
 8008e1e:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008e20:	230a      	movs	r3, #10
 8008e22:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008e24:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8008e28:	4619      	mov	r1, r3
 8008e2a:	4812      	ldr	r0, [pc, #72]	@ (8008e74 <HAL_PCD_MspInit+0xd0>)
 8008e2c:	f7f8 fb50 	bl	80014d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008e30:	4b0f      	ldr	r3, [pc, #60]	@ (8008e70 <HAL_PCD_MspInit+0xcc>)
 8008e32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008e34:	4a0e      	ldr	r2, [pc, #56]	@ (8008e70 <HAL_PCD_MspInit+0xcc>)
 8008e36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008e3a:	6353      	str	r3, [r2, #52]	@ 0x34
 8008e3c:	2300      	movs	r3, #0
 8008e3e:	60bb      	str	r3, [r7, #8]
 8008e40:	4b0b      	ldr	r3, [pc, #44]	@ (8008e70 <HAL_PCD_MspInit+0xcc>)
 8008e42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008e44:	4a0a      	ldr	r2, [pc, #40]	@ (8008e70 <HAL_PCD_MspInit+0xcc>)
 8008e46:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008e4a:	6453      	str	r3, [r2, #68]	@ 0x44
 8008e4c:	4b08      	ldr	r3, [pc, #32]	@ (8008e70 <HAL_PCD_MspInit+0xcc>)
 8008e4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008e50:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008e54:	60bb      	str	r3, [r7, #8]
 8008e56:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008e58:	2200      	movs	r2, #0
 8008e5a:	2100      	movs	r1, #0
 8008e5c:	2043      	movs	r0, #67	@ 0x43
 8008e5e:	f7f8 fb00 	bl	8001462 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008e62:	2043      	movs	r0, #67	@ 0x43
 8008e64:	f7f8 fb19 	bl	800149a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008e68:	bf00      	nop
 8008e6a:	3780      	adds	r7, #128	@ 0x80
 8008e6c:	46bd      	mov	sp, r7
 8008e6e:	bd80      	pop	{r7, pc}
 8008e70:	40023800 	.word	0x40023800
 8008e74:	40020000 	.word	0x40020000

08008e78 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b082      	sub	sp, #8
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008e8c:	4619      	mov	r1, r3
 8008e8e:	4610      	mov	r0, r2
 8008e90:	f7fe fac5 	bl	800741e <USBD_LL_SetupStage>
}
 8008e94:	bf00      	nop
 8008e96:	3708      	adds	r7, #8
 8008e98:	46bd      	mov	sp, r7
 8008e9a:	bd80      	pop	{r7, pc}

08008e9c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e9c:	b580      	push	{r7, lr}
 8008e9e:	b082      	sub	sp, #8
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	6078      	str	r0, [r7, #4]
 8008ea4:	460b      	mov	r3, r1
 8008ea6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8008eae:	78fa      	ldrb	r2, [r7, #3]
 8008eb0:	6879      	ldr	r1, [r7, #4]
 8008eb2:	4613      	mov	r3, r2
 8008eb4:	00db      	lsls	r3, r3, #3
 8008eb6:	4413      	add	r3, r2
 8008eb8:	009b      	lsls	r3, r3, #2
 8008eba:	440b      	add	r3, r1
 8008ebc:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8008ec0:	681a      	ldr	r2, [r3, #0]
 8008ec2:	78fb      	ldrb	r3, [r7, #3]
 8008ec4:	4619      	mov	r1, r3
 8008ec6:	f7fe faff 	bl	80074c8 <USBD_LL_DataOutStage>
}
 8008eca:	bf00      	nop
 8008ecc:	3708      	adds	r7, #8
 8008ece:	46bd      	mov	sp, r7
 8008ed0:	bd80      	pop	{r7, pc}

08008ed2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ed2:	b580      	push	{r7, lr}
 8008ed4:	b082      	sub	sp, #8
 8008ed6:	af00      	add	r7, sp, #0
 8008ed8:	6078      	str	r0, [r7, #4]
 8008eda:	460b      	mov	r3, r1
 8008edc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8008ee4:	78fa      	ldrb	r2, [r7, #3]
 8008ee6:	6879      	ldr	r1, [r7, #4]
 8008ee8:	4613      	mov	r3, r2
 8008eea:	00db      	lsls	r3, r3, #3
 8008eec:	4413      	add	r3, r2
 8008eee:	009b      	lsls	r3, r3, #2
 8008ef0:	440b      	add	r3, r1
 8008ef2:	3320      	adds	r3, #32
 8008ef4:	681a      	ldr	r2, [r3, #0]
 8008ef6:	78fb      	ldrb	r3, [r7, #3]
 8008ef8:	4619      	mov	r1, r3
 8008efa:	f7fe fba1 	bl	8007640 <USBD_LL_DataInStage>
}
 8008efe:	bf00      	nop
 8008f00:	3708      	adds	r7, #8
 8008f02:	46bd      	mov	sp, r7
 8008f04:	bd80      	pop	{r7, pc}

08008f06 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f06:	b580      	push	{r7, lr}
 8008f08:	b082      	sub	sp, #8
 8008f0a:	af00      	add	r7, sp, #0
 8008f0c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008f14:	4618      	mov	r0, r3
 8008f16:	f7fe fce5 	bl	80078e4 <USBD_LL_SOF>
}
 8008f1a:	bf00      	nop
 8008f1c:	3708      	adds	r7, #8
 8008f1e:	46bd      	mov	sp, r7
 8008f20:	bd80      	pop	{r7, pc}

08008f22 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f22:	b580      	push	{r7, lr}
 8008f24:	b084      	sub	sp, #16
 8008f26:	af00      	add	r7, sp, #0
 8008f28:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008f2a:	2301      	movs	r3, #1
 8008f2c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	79db      	ldrb	r3, [r3, #7]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d102      	bne.n	8008f3c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8008f36:	2300      	movs	r3, #0
 8008f38:	73fb      	strb	r3, [r7, #15]
 8008f3a:	e008      	b.n	8008f4e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	79db      	ldrb	r3, [r3, #7]
 8008f40:	2b02      	cmp	r3, #2
 8008f42:	d102      	bne.n	8008f4a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8008f44:	2301      	movs	r3, #1
 8008f46:	73fb      	strb	r3, [r7, #15]
 8008f48:	e001      	b.n	8008f4e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8008f4a:	f7f7 ff39 	bl	8000dc0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008f54:	7bfa      	ldrb	r2, [r7, #15]
 8008f56:	4611      	mov	r1, r2
 8008f58:	4618      	mov	r0, r3
 8008f5a:	f7fe fc7f 	bl	800785c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008f64:	4618      	mov	r0, r3
 8008f66:	f7fe fc26 	bl	80077b6 <USBD_LL_Reset>
}
 8008f6a:	bf00      	nop
 8008f6c:	3710      	adds	r7, #16
 8008f6e:	46bd      	mov	sp, r7
 8008f70:	bd80      	pop	{r7, pc}
	...

08008f74 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f74:	b580      	push	{r7, lr}
 8008f76:	b082      	sub	sp, #8
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008f82:	4618      	mov	r0, r3
 8008f84:	f7fe fc7a 	bl	800787c <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	687a      	ldr	r2, [r7, #4]
 8008f94:	6812      	ldr	r2, [r2, #0]
 8008f96:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008f9a:	f043 0301 	orr.w	r3, r3, #1
 8008f9e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	7adb      	ldrb	r3, [r3, #11]
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d005      	beq.n	8008fb4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008fa8:	4b04      	ldr	r3, [pc, #16]	@ (8008fbc <HAL_PCD_SuspendCallback+0x48>)
 8008faa:	691b      	ldr	r3, [r3, #16]
 8008fac:	4a03      	ldr	r2, [pc, #12]	@ (8008fbc <HAL_PCD_SuspendCallback+0x48>)
 8008fae:	f043 0306 	orr.w	r3, r3, #6
 8008fb2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008fb4:	bf00      	nop
 8008fb6:	3708      	adds	r7, #8
 8008fb8:	46bd      	mov	sp, r7
 8008fba:	bd80      	pop	{r7, pc}
 8008fbc:	e000ed00 	.word	0xe000ed00

08008fc0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b082      	sub	sp, #8
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008fce:	4618      	mov	r0, r3
 8008fd0:	f7fe fc70 	bl	80078b4 <USBD_LL_Resume>
}
 8008fd4:	bf00      	nop
 8008fd6:	3708      	adds	r7, #8
 8008fd8:	46bd      	mov	sp, r7
 8008fda:	bd80      	pop	{r7, pc}

08008fdc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008fdc:	b580      	push	{r7, lr}
 8008fde:	b082      	sub	sp, #8
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	6078      	str	r0, [r7, #4]
 8008fe4:	460b      	mov	r3, r1
 8008fe6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008fee:	78fa      	ldrb	r2, [r7, #3]
 8008ff0:	4611      	mov	r1, r2
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	f7fe fcc8 	bl	8007988 <USBD_LL_IsoOUTIncomplete>
}
 8008ff8:	bf00      	nop
 8008ffa:	3708      	adds	r7, #8
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	bd80      	pop	{r7, pc}

08009000 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009000:	b580      	push	{r7, lr}
 8009002:	b082      	sub	sp, #8
 8009004:	af00      	add	r7, sp, #0
 8009006:	6078      	str	r0, [r7, #4]
 8009008:	460b      	mov	r3, r1
 800900a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009012:	78fa      	ldrb	r2, [r7, #3]
 8009014:	4611      	mov	r1, r2
 8009016:	4618      	mov	r0, r3
 8009018:	f7fe fc84 	bl	8007924 <USBD_LL_IsoINIncomplete>
}
 800901c:	bf00      	nop
 800901e:	3708      	adds	r7, #8
 8009020:	46bd      	mov	sp, r7
 8009022:	bd80      	pop	{r7, pc}

08009024 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009024:	b580      	push	{r7, lr}
 8009026:	b082      	sub	sp, #8
 8009028:	af00      	add	r7, sp, #0
 800902a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009032:	4618      	mov	r0, r3
 8009034:	f7fe fcda 	bl	80079ec <USBD_LL_DevConnected>
}
 8009038:	bf00      	nop
 800903a:	3708      	adds	r7, #8
 800903c:	46bd      	mov	sp, r7
 800903e:	bd80      	pop	{r7, pc}

08009040 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009040:	b580      	push	{r7, lr}
 8009042:	b082      	sub	sp, #8
 8009044:	af00      	add	r7, sp, #0
 8009046:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800904e:	4618      	mov	r0, r3
 8009050:	f7fe fcd7 	bl	8007a02 <USBD_LL_DevDisconnected>
}
 8009054:	bf00      	nop
 8009056:	3708      	adds	r7, #8
 8009058:	46bd      	mov	sp, r7
 800905a:	bd80      	pop	{r7, pc}

0800905c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800905c:	b580      	push	{r7, lr}
 800905e:	b082      	sub	sp, #8
 8009060:	af00      	add	r7, sp, #0
 8009062:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	781b      	ldrb	r3, [r3, #0]
 8009068:	2b00      	cmp	r3, #0
 800906a:	d13c      	bne.n	80090e6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800906c:	4a20      	ldr	r2, [pc, #128]	@ (80090f0 <USBD_LL_Init+0x94>)
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	4a1e      	ldr	r2, [pc, #120]	@ (80090f0 <USBD_LL_Init+0x94>)
 8009078:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800907c:	4b1c      	ldr	r3, [pc, #112]	@ (80090f0 <USBD_LL_Init+0x94>)
 800907e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8009082:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8009084:	4b1a      	ldr	r3, [pc, #104]	@ (80090f0 <USBD_LL_Init+0x94>)
 8009086:	2206      	movs	r2, #6
 8009088:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800908a:	4b19      	ldr	r3, [pc, #100]	@ (80090f0 <USBD_LL_Init+0x94>)
 800908c:	2202      	movs	r2, #2
 800908e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009090:	4b17      	ldr	r3, [pc, #92]	@ (80090f0 <USBD_LL_Init+0x94>)
 8009092:	2200      	movs	r2, #0
 8009094:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009096:	4b16      	ldr	r3, [pc, #88]	@ (80090f0 <USBD_LL_Init+0x94>)
 8009098:	2202      	movs	r2, #2
 800909a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800909c:	4b14      	ldr	r3, [pc, #80]	@ (80090f0 <USBD_LL_Init+0x94>)
 800909e:	2200      	movs	r2, #0
 80090a0:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80090a2:	4b13      	ldr	r3, [pc, #76]	@ (80090f0 <USBD_LL_Init+0x94>)
 80090a4:	2200      	movs	r2, #0
 80090a6:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80090a8:	4b11      	ldr	r3, [pc, #68]	@ (80090f0 <USBD_LL_Init+0x94>)
 80090aa:	2200      	movs	r2, #0
 80090ac:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80090ae:	4b10      	ldr	r3, [pc, #64]	@ (80090f0 <USBD_LL_Init+0x94>)
 80090b0:	2200      	movs	r2, #0
 80090b2:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80090b4:	4b0e      	ldr	r3, [pc, #56]	@ (80090f0 <USBD_LL_Init+0x94>)
 80090b6:	2200      	movs	r2, #0
 80090b8:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80090ba:	480d      	ldr	r0, [pc, #52]	@ (80090f0 <USBD_LL_Init+0x94>)
 80090bc:	f7f8 fbcd 	bl	800185a <HAL_PCD_Init>
 80090c0:	4603      	mov	r3, r0
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d001      	beq.n	80090ca <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80090c6:	f7f7 fe7b 	bl	8000dc0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80090ca:	2180      	movs	r1, #128	@ 0x80
 80090cc:	4808      	ldr	r0, [pc, #32]	@ (80090f0 <USBD_LL_Init+0x94>)
 80090ce:	f7f9 fe2e 	bl	8002d2e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80090d2:	2240      	movs	r2, #64	@ 0x40
 80090d4:	2100      	movs	r1, #0
 80090d6:	4806      	ldr	r0, [pc, #24]	@ (80090f0 <USBD_LL_Init+0x94>)
 80090d8:	f7f9 fde2 	bl	8002ca0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80090dc:	2280      	movs	r2, #128	@ 0x80
 80090de:	2101      	movs	r1, #1
 80090e0:	4803      	ldr	r0, [pc, #12]	@ (80090f0 <USBD_LL_Init+0x94>)
 80090e2:	f7f9 fddd 	bl	8002ca0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80090e6:	2300      	movs	r3, #0
}
 80090e8:	4618      	mov	r0, r3
 80090ea:	3708      	adds	r7, #8
 80090ec:	46bd      	mov	sp, r7
 80090ee:	bd80      	pop	{r7, pc}
 80090f0:	20001798 	.word	0x20001798

080090f4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80090f4:	b580      	push	{r7, lr}
 80090f6:	b084      	sub	sp, #16
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80090fc:	2300      	movs	r3, #0
 80090fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009100:	2300      	movs	r3, #0
 8009102:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800910a:	4618      	mov	r0, r3
 800910c:	f7f8 fcbb 	bl	8001a86 <HAL_PCD_Start>
 8009110:	4603      	mov	r3, r0
 8009112:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009114:	7bfb      	ldrb	r3, [r7, #15]
 8009116:	4618      	mov	r0, r3
 8009118:	f000 f990 	bl	800943c <USBD_Get_USB_Status>
 800911c:	4603      	mov	r3, r0
 800911e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009120:	7bbb      	ldrb	r3, [r7, #14]
}
 8009122:	4618      	mov	r0, r3
 8009124:	3710      	adds	r7, #16
 8009126:	46bd      	mov	sp, r7
 8009128:	bd80      	pop	{r7, pc}

0800912a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800912a:	b580      	push	{r7, lr}
 800912c:	b084      	sub	sp, #16
 800912e:	af00      	add	r7, sp, #0
 8009130:	6078      	str	r0, [r7, #4]
 8009132:	4608      	mov	r0, r1
 8009134:	4611      	mov	r1, r2
 8009136:	461a      	mov	r2, r3
 8009138:	4603      	mov	r3, r0
 800913a:	70fb      	strb	r3, [r7, #3]
 800913c:	460b      	mov	r3, r1
 800913e:	70bb      	strb	r3, [r7, #2]
 8009140:	4613      	mov	r3, r2
 8009142:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009144:	2300      	movs	r3, #0
 8009146:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009148:	2300      	movs	r3, #0
 800914a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8009152:	78bb      	ldrb	r3, [r7, #2]
 8009154:	883a      	ldrh	r2, [r7, #0]
 8009156:	78f9      	ldrb	r1, [r7, #3]
 8009158:	f7f9 f9bc 	bl	80024d4 <HAL_PCD_EP_Open>
 800915c:	4603      	mov	r3, r0
 800915e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009160:	7bfb      	ldrb	r3, [r7, #15]
 8009162:	4618      	mov	r0, r3
 8009164:	f000 f96a 	bl	800943c <USBD_Get_USB_Status>
 8009168:	4603      	mov	r3, r0
 800916a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800916c:	7bbb      	ldrb	r3, [r7, #14]
}
 800916e:	4618      	mov	r0, r3
 8009170:	3710      	adds	r7, #16
 8009172:	46bd      	mov	sp, r7
 8009174:	bd80      	pop	{r7, pc}

08009176 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009176:	b580      	push	{r7, lr}
 8009178:	b084      	sub	sp, #16
 800917a:	af00      	add	r7, sp, #0
 800917c:	6078      	str	r0, [r7, #4]
 800917e:	460b      	mov	r3, r1
 8009180:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009182:	2300      	movs	r3, #0
 8009184:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009186:	2300      	movs	r3, #0
 8009188:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009190:	78fa      	ldrb	r2, [r7, #3]
 8009192:	4611      	mov	r1, r2
 8009194:	4618      	mov	r0, r3
 8009196:	f7f9 fa07 	bl	80025a8 <HAL_PCD_EP_Close>
 800919a:	4603      	mov	r3, r0
 800919c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800919e:	7bfb      	ldrb	r3, [r7, #15]
 80091a0:	4618      	mov	r0, r3
 80091a2:	f000 f94b 	bl	800943c <USBD_Get_USB_Status>
 80091a6:	4603      	mov	r3, r0
 80091a8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80091aa:	7bbb      	ldrb	r3, [r7, #14]
}
 80091ac:	4618      	mov	r0, r3
 80091ae:	3710      	adds	r7, #16
 80091b0:	46bd      	mov	sp, r7
 80091b2:	bd80      	pop	{r7, pc}

080091b4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80091b4:	b580      	push	{r7, lr}
 80091b6:	b084      	sub	sp, #16
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	6078      	str	r0, [r7, #4]
 80091bc:	460b      	mov	r3, r1
 80091be:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091c0:	2300      	movs	r3, #0
 80091c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80091c4:	2300      	movs	r3, #0
 80091c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80091ce:	78fa      	ldrb	r2, [r7, #3]
 80091d0:	4611      	mov	r1, r2
 80091d2:	4618      	mov	r0, r3
 80091d4:	f7f9 fabf 	bl	8002756 <HAL_PCD_EP_SetStall>
 80091d8:	4603      	mov	r3, r0
 80091da:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80091dc:	7bfb      	ldrb	r3, [r7, #15]
 80091de:	4618      	mov	r0, r3
 80091e0:	f000 f92c 	bl	800943c <USBD_Get_USB_Status>
 80091e4:	4603      	mov	r3, r0
 80091e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80091e8:	7bbb      	ldrb	r3, [r7, #14]
}
 80091ea:	4618      	mov	r0, r3
 80091ec:	3710      	adds	r7, #16
 80091ee:	46bd      	mov	sp, r7
 80091f0:	bd80      	pop	{r7, pc}

080091f2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80091f2:	b580      	push	{r7, lr}
 80091f4:	b084      	sub	sp, #16
 80091f6:	af00      	add	r7, sp, #0
 80091f8:	6078      	str	r0, [r7, #4]
 80091fa:	460b      	mov	r3, r1
 80091fc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091fe:	2300      	movs	r3, #0
 8009200:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009202:	2300      	movs	r3, #0
 8009204:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800920c:	78fa      	ldrb	r2, [r7, #3]
 800920e:	4611      	mov	r1, r2
 8009210:	4618      	mov	r0, r3
 8009212:	f7f9 fb03 	bl	800281c <HAL_PCD_EP_ClrStall>
 8009216:	4603      	mov	r3, r0
 8009218:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800921a:	7bfb      	ldrb	r3, [r7, #15]
 800921c:	4618      	mov	r0, r3
 800921e:	f000 f90d 	bl	800943c <USBD_Get_USB_Status>
 8009222:	4603      	mov	r3, r0
 8009224:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009226:	7bbb      	ldrb	r3, [r7, #14]
}
 8009228:	4618      	mov	r0, r3
 800922a:	3710      	adds	r7, #16
 800922c:	46bd      	mov	sp, r7
 800922e:	bd80      	pop	{r7, pc}

08009230 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009230:	b480      	push	{r7}
 8009232:	b085      	sub	sp, #20
 8009234:	af00      	add	r7, sp, #0
 8009236:	6078      	str	r0, [r7, #4]
 8009238:	460b      	mov	r3, r1
 800923a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009242:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009244:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009248:	2b00      	cmp	r3, #0
 800924a:	da0b      	bge.n	8009264 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800924c:	78fb      	ldrb	r3, [r7, #3]
 800924e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009252:	68f9      	ldr	r1, [r7, #12]
 8009254:	4613      	mov	r3, r2
 8009256:	00db      	lsls	r3, r3, #3
 8009258:	4413      	add	r3, r2
 800925a:	009b      	lsls	r3, r3, #2
 800925c:	440b      	add	r3, r1
 800925e:	3316      	adds	r3, #22
 8009260:	781b      	ldrb	r3, [r3, #0]
 8009262:	e00b      	b.n	800927c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009264:	78fb      	ldrb	r3, [r7, #3]
 8009266:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800926a:	68f9      	ldr	r1, [r7, #12]
 800926c:	4613      	mov	r3, r2
 800926e:	00db      	lsls	r3, r3, #3
 8009270:	4413      	add	r3, r2
 8009272:	009b      	lsls	r3, r3, #2
 8009274:	440b      	add	r3, r1
 8009276:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800927a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800927c:	4618      	mov	r0, r3
 800927e:	3714      	adds	r7, #20
 8009280:	46bd      	mov	sp, r7
 8009282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009286:	4770      	bx	lr

08009288 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009288:	b580      	push	{r7, lr}
 800928a:	b084      	sub	sp, #16
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
 8009290:	460b      	mov	r3, r1
 8009292:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009294:	2300      	movs	r3, #0
 8009296:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009298:	2300      	movs	r3, #0
 800929a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80092a2:	78fa      	ldrb	r2, [r7, #3]
 80092a4:	4611      	mov	r1, r2
 80092a6:	4618      	mov	r0, r3
 80092a8:	f7f9 f8f0 	bl	800248c <HAL_PCD_SetAddress>
 80092ac:	4603      	mov	r3, r0
 80092ae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80092b0:	7bfb      	ldrb	r3, [r7, #15]
 80092b2:	4618      	mov	r0, r3
 80092b4:	f000 f8c2 	bl	800943c <USBD_Get_USB_Status>
 80092b8:	4603      	mov	r3, r0
 80092ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80092bc:	7bbb      	ldrb	r3, [r7, #14]
}
 80092be:	4618      	mov	r0, r3
 80092c0:	3710      	adds	r7, #16
 80092c2:	46bd      	mov	sp, r7
 80092c4:	bd80      	pop	{r7, pc}

080092c6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80092c6:	b580      	push	{r7, lr}
 80092c8:	b086      	sub	sp, #24
 80092ca:	af00      	add	r7, sp, #0
 80092cc:	60f8      	str	r0, [r7, #12]
 80092ce:	607a      	str	r2, [r7, #4]
 80092d0:	603b      	str	r3, [r7, #0]
 80092d2:	460b      	mov	r3, r1
 80092d4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80092d6:	2300      	movs	r3, #0
 80092d8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80092da:	2300      	movs	r3, #0
 80092dc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80092e4:	7af9      	ldrb	r1, [r7, #11]
 80092e6:	683b      	ldr	r3, [r7, #0]
 80092e8:	687a      	ldr	r2, [r7, #4]
 80092ea:	f7f9 f9fa 	bl	80026e2 <HAL_PCD_EP_Transmit>
 80092ee:	4603      	mov	r3, r0
 80092f0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80092f2:	7dfb      	ldrb	r3, [r7, #23]
 80092f4:	4618      	mov	r0, r3
 80092f6:	f000 f8a1 	bl	800943c <USBD_Get_USB_Status>
 80092fa:	4603      	mov	r3, r0
 80092fc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80092fe:	7dbb      	ldrb	r3, [r7, #22]
}
 8009300:	4618      	mov	r0, r3
 8009302:	3718      	adds	r7, #24
 8009304:	46bd      	mov	sp, r7
 8009306:	bd80      	pop	{r7, pc}

08009308 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009308:	b580      	push	{r7, lr}
 800930a:	b086      	sub	sp, #24
 800930c:	af00      	add	r7, sp, #0
 800930e:	60f8      	str	r0, [r7, #12]
 8009310:	607a      	str	r2, [r7, #4]
 8009312:	603b      	str	r3, [r7, #0]
 8009314:	460b      	mov	r3, r1
 8009316:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009318:	2300      	movs	r3, #0
 800931a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800931c:	2300      	movs	r3, #0
 800931e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8009326:	7af9      	ldrb	r1, [r7, #11]
 8009328:	683b      	ldr	r3, [r7, #0]
 800932a:	687a      	ldr	r2, [r7, #4]
 800932c:	f7f9 f986 	bl	800263c <HAL_PCD_EP_Receive>
 8009330:	4603      	mov	r3, r0
 8009332:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009334:	7dfb      	ldrb	r3, [r7, #23]
 8009336:	4618      	mov	r0, r3
 8009338:	f000 f880 	bl	800943c <USBD_Get_USB_Status>
 800933c:	4603      	mov	r3, r0
 800933e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009340:	7dbb      	ldrb	r3, [r7, #22]
}
 8009342:	4618      	mov	r0, r3
 8009344:	3718      	adds	r7, #24
 8009346:	46bd      	mov	sp, r7
 8009348:	bd80      	pop	{r7, pc}

0800934a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800934a:	b580      	push	{r7, lr}
 800934c:	b082      	sub	sp, #8
 800934e:	af00      	add	r7, sp, #0
 8009350:	6078      	str	r0, [r7, #4]
 8009352:	460b      	mov	r3, r1
 8009354:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800935c:	78fa      	ldrb	r2, [r7, #3]
 800935e:	4611      	mov	r1, r2
 8009360:	4618      	mov	r0, r3
 8009362:	f7f9 f9a6 	bl	80026b2 <HAL_PCD_EP_GetRxCount>
 8009366:	4603      	mov	r3, r0
}
 8009368:	4618      	mov	r0, r3
 800936a:	3708      	adds	r7, #8
 800936c:	46bd      	mov	sp, r7
 800936e:	bd80      	pop	{r7, pc}

08009370 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8009370:	b580      	push	{r7, lr}
 8009372:	b082      	sub	sp, #8
 8009374:	af00      	add	r7, sp, #0
 8009376:	6078      	str	r0, [r7, #4]
 8009378:	460b      	mov	r3, r1
 800937a:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800937c:	78fb      	ldrb	r3, [r7, #3]
 800937e:	2b00      	cmp	r3, #0
 8009380:	d002      	beq.n	8009388 <HAL_PCDEx_LPM_Callback+0x18>
 8009382:	2b01      	cmp	r3, #1
 8009384:	d01f      	beq.n	80093c6 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8009386:	e03b      	b.n	8009400 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	7adb      	ldrb	r3, [r3, #11]
 800938c:	2b00      	cmp	r3, #0
 800938e:	d007      	beq.n	80093a0 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 8009390:	f7f7 fb1e 	bl	80009d0 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009394:	4b1c      	ldr	r3, [pc, #112]	@ (8009408 <HAL_PCDEx_LPM_Callback+0x98>)
 8009396:	691b      	ldr	r3, [r3, #16]
 8009398:	4a1b      	ldr	r2, [pc, #108]	@ (8009408 <HAL_PCDEx_LPM_Callback+0x98>)
 800939a:	f023 0306 	bic.w	r3, r3, #6
 800939e:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	687a      	ldr	r2, [r7, #4]
 80093ac:	6812      	ldr	r2, [r2, #0]
 80093ae:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80093b2:	f023 0301 	bic.w	r3, r3, #1
 80093b6:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80093be:	4618      	mov	r0, r3
 80093c0:	f7fe fa78 	bl	80078b4 <USBD_LL_Resume>
    break;
 80093c4:	e01c      	b.n	8009400 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	687a      	ldr	r2, [r7, #4]
 80093d2:	6812      	ldr	r2, [r2, #0]
 80093d4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80093d8:	f043 0301 	orr.w	r3, r3, #1
 80093dc:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80093e4:	4618      	mov	r0, r3
 80093e6:	f7fe fa49 	bl	800787c <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	7adb      	ldrb	r3, [r3, #11]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d005      	beq.n	80093fe <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80093f2:	4b05      	ldr	r3, [pc, #20]	@ (8009408 <HAL_PCDEx_LPM_Callback+0x98>)
 80093f4:	691b      	ldr	r3, [r3, #16]
 80093f6:	4a04      	ldr	r2, [pc, #16]	@ (8009408 <HAL_PCDEx_LPM_Callback+0x98>)
 80093f8:	f043 0306 	orr.w	r3, r3, #6
 80093fc:	6113      	str	r3, [r2, #16]
    break;
 80093fe:	bf00      	nop
}
 8009400:	bf00      	nop
 8009402:	3708      	adds	r7, #8
 8009404:	46bd      	mov	sp, r7
 8009406:	bd80      	pop	{r7, pc}
 8009408:	e000ed00 	.word	0xe000ed00

0800940c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800940c:	b480      	push	{r7}
 800940e:	b083      	sub	sp, #12
 8009410:	af00      	add	r7, sp, #0
 8009412:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009414:	4b03      	ldr	r3, [pc, #12]	@ (8009424 <USBD_static_malloc+0x18>)
}
 8009416:	4618      	mov	r0, r3
 8009418:	370c      	adds	r7, #12
 800941a:	46bd      	mov	sp, r7
 800941c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009420:	4770      	bx	lr
 8009422:	bf00      	nop
 8009424:	20001c7c 	.word	0x20001c7c

08009428 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009428:	b480      	push	{r7}
 800942a:	b083      	sub	sp, #12
 800942c:	af00      	add	r7, sp, #0
 800942e:	6078      	str	r0, [r7, #4]

}
 8009430:	bf00      	nop
 8009432:	370c      	adds	r7, #12
 8009434:	46bd      	mov	sp, r7
 8009436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943a:	4770      	bx	lr

0800943c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800943c:	b480      	push	{r7}
 800943e:	b085      	sub	sp, #20
 8009440:	af00      	add	r7, sp, #0
 8009442:	4603      	mov	r3, r0
 8009444:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009446:	2300      	movs	r3, #0
 8009448:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800944a:	79fb      	ldrb	r3, [r7, #7]
 800944c:	2b03      	cmp	r3, #3
 800944e:	d817      	bhi.n	8009480 <USBD_Get_USB_Status+0x44>
 8009450:	a201      	add	r2, pc, #4	@ (adr r2, 8009458 <USBD_Get_USB_Status+0x1c>)
 8009452:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009456:	bf00      	nop
 8009458:	08009469 	.word	0x08009469
 800945c:	0800946f 	.word	0x0800946f
 8009460:	08009475 	.word	0x08009475
 8009464:	0800947b 	.word	0x0800947b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009468:	2300      	movs	r3, #0
 800946a:	73fb      	strb	r3, [r7, #15]
    break;
 800946c:	e00b      	b.n	8009486 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800946e:	2303      	movs	r3, #3
 8009470:	73fb      	strb	r3, [r7, #15]
    break;
 8009472:	e008      	b.n	8009486 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009474:	2301      	movs	r3, #1
 8009476:	73fb      	strb	r3, [r7, #15]
    break;
 8009478:	e005      	b.n	8009486 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800947a:	2303      	movs	r3, #3
 800947c:	73fb      	strb	r3, [r7, #15]
    break;
 800947e:	e002      	b.n	8009486 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009480:	2303      	movs	r3, #3
 8009482:	73fb      	strb	r3, [r7, #15]
    break;
 8009484:	bf00      	nop
  }
  return usb_status;
 8009486:	7bfb      	ldrb	r3, [r7, #15]
}
 8009488:	4618      	mov	r0, r3
 800948a:	3714      	adds	r7, #20
 800948c:	46bd      	mov	sp, r7
 800948e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009492:	4770      	bx	lr

08009494 <memset>:
 8009494:	4402      	add	r2, r0
 8009496:	4603      	mov	r3, r0
 8009498:	4293      	cmp	r3, r2
 800949a:	d100      	bne.n	800949e <memset+0xa>
 800949c:	4770      	bx	lr
 800949e:	f803 1b01 	strb.w	r1, [r3], #1
 80094a2:	e7f9      	b.n	8009498 <memset+0x4>

080094a4 <__libc_init_array>:
 80094a4:	b570      	push	{r4, r5, r6, lr}
 80094a6:	4d0d      	ldr	r5, [pc, #52]	@ (80094dc <__libc_init_array+0x38>)
 80094a8:	4c0d      	ldr	r4, [pc, #52]	@ (80094e0 <__libc_init_array+0x3c>)
 80094aa:	1b64      	subs	r4, r4, r5
 80094ac:	10a4      	asrs	r4, r4, #2
 80094ae:	2600      	movs	r6, #0
 80094b0:	42a6      	cmp	r6, r4
 80094b2:	d109      	bne.n	80094c8 <__libc_init_array+0x24>
 80094b4:	4d0b      	ldr	r5, [pc, #44]	@ (80094e4 <__libc_init_array+0x40>)
 80094b6:	4c0c      	ldr	r4, [pc, #48]	@ (80094e8 <__libc_init_array+0x44>)
 80094b8:	f000 f818 	bl	80094ec <_init>
 80094bc:	1b64      	subs	r4, r4, r5
 80094be:	10a4      	asrs	r4, r4, #2
 80094c0:	2600      	movs	r6, #0
 80094c2:	42a6      	cmp	r6, r4
 80094c4:	d105      	bne.n	80094d2 <__libc_init_array+0x2e>
 80094c6:	bd70      	pop	{r4, r5, r6, pc}
 80094c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80094cc:	4798      	blx	r3
 80094ce:	3601      	adds	r6, #1
 80094d0:	e7ee      	b.n	80094b0 <__libc_init_array+0xc>
 80094d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80094d6:	4798      	blx	r3
 80094d8:	3601      	adds	r6, #1
 80094da:	e7f2      	b.n	80094c2 <__libc_init_array+0x1e>
 80094dc:	0800956c 	.word	0x0800956c
 80094e0:	0800956c 	.word	0x0800956c
 80094e4:	0800956c 	.word	0x0800956c
 80094e8:	08009570 	.word	0x08009570

080094ec <_init>:
 80094ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094ee:	bf00      	nop
 80094f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094f2:	bc08      	pop	{r3}
 80094f4:	469e      	mov	lr, r3
 80094f6:	4770      	bx	lr

080094f8 <_fini>:
 80094f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094fa:	bf00      	nop
 80094fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094fe:	bc08      	pop	{r3}
 8009500:	469e      	mov	lr, r3
 8009502:	4770      	bx	lr
