
RAILWAY_GATE_FINAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009b54  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08009d18  08009d18  0000ad18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009d78  08009d78  0000b11c  2**0
                  CONTENTS
  4 .ARM          00000008  08009d78  08009d78  0000ad78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009d80  08009d80  0000b11c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009d80  08009d80  0000ad80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009d84  08009d84  0000ad84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000011c  20000000  08009d88  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001dc8  2000011c  08009ea4  0000b11c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001ee4  08009ea4  0000bee4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b11c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019713  00000000  00000000  0000b14c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003dc6  00000000  00000000  0002485f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001550  00000000  00000000  00028628  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000105b  00000000  00000000  00029b78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000274d3  00000000  00000000  0002abd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001cb1b  00000000  00000000  000520a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e1a54  00000000  00000000  0006ebc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00150615  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005804  00000000  00000000  00150658  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  00155e5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000011c 	.word	0x2000011c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08009d00 	.word	0x08009d00

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000120 	.word	0x20000120
 8000200:	08009d00 	.word	0x08009d00

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000214:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000218:	f000 b96a 	b.w	80004f0 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	460c      	mov	r4, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14e      	bne.n	80002de <__udivmoddi4+0xaa>
 8000240:	4694      	mov	ip, r2
 8000242:	458c      	cmp	ip, r1
 8000244:	4686      	mov	lr, r0
 8000246:	fab2 f282 	clz	r2, r2
 800024a:	d962      	bls.n	8000312 <__udivmoddi4+0xde>
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0320 	rsb	r3, r2, #32
 8000252:	4091      	lsls	r1, r2
 8000254:	fa20 f303 	lsr.w	r3, r0, r3
 8000258:	fa0c fc02 	lsl.w	ip, ip, r2
 800025c:	4319      	orrs	r1, r3
 800025e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000262:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000266:	fa1f f68c 	uxth.w	r6, ip
 800026a:	fbb1 f4f7 	udiv	r4, r1, r7
 800026e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000272:	fb07 1114 	mls	r1, r7, r4, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb04 f106 	mul.w	r1, r4, r6
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800028a:	f080 8112 	bcs.w	80004b2 <__udivmoddi4+0x27e>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 810f 	bls.w	80004b2 <__udivmoddi4+0x27e>
 8000294:	3c02      	subs	r4, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a59      	subs	r1, r3, r1
 800029a:	fa1f f38e 	uxth.w	r3, lr
 800029e:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a2:	fb07 1110 	mls	r1, r7, r0, r1
 80002a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002aa:	fb00 f606 	mul.w	r6, r0, r6
 80002ae:	429e      	cmp	r6, r3
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x94>
 80002b2:	eb1c 0303 	adds.w	r3, ip, r3
 80002b6:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80002ba:	f080 80fc 	bcs.w	80004b6 <__udivmoddi4+0x282>
 80002be:	429e      	cmp	r6, r3
 80002c0:	f240 80f9 	bls.w	80004b6 <__udivmoddi4+0x282>
 80002c4:	4463      	add	r3, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	1b9b      	subs	r3, r3, r6
 80002ca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11d      	cbz	r5, 80002da <__udivmoddi4+0xa6>
 80002d2:	40d3      	lsrs	r3, r2
 80002d4:	2200      	movs	r2, #0
 80002d6:	e9c5 3200 	strd	r3, r2, [r5]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d905      	bls.n	80002ee <__udivmoddi4+0xba>
 80002e2:	b10d      	cbz	r5, 80002e8 <__udivmoddi4+0xb4>
 80002e4:	e9c5 0100 	strd	r0, r1, [r5]
 80002e8:	2100      	movs	r1, #0
 80002ea:	4608      	mov	r0, r1
 80002ec:	e7f5      	b.n	80002da <__udivmoddi4+0xa6>
 80002ee:	fab3 f183 	clz	r1, r3
 80002f2:	2900      	cmp	r1, #0
 80002f4:	d146      	bne.n	8000384 <__udivmoddi4+0x150>
 80002f6:	42a3      	cmp	r3, r4
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xcc>
 80002fa:	4290      	cmp	r0, r2
 80002fc:	f0c0 80f0 	bcc.w	80004e0 <__udivmoddi4+0x2ac>
 8000300:	1a86      	subs	r6, r0, r2
 8000302:	eb64 0303 	sbc.w	r3, r4, r3
 8000306:	2001      	movs	r0, #1
 8000308:	2d00      	cmp	r5, #0
 800030a:	d0e6      	beq.n	80002da <__udivmoddi4+0xa6>
 800030c:	e9c5 6300 	strd	r6, r3, [r5]
 8000310:	e7e3      	b.n	80002da <__udivmoddi4+0xa6>
 8000312:	2a00      	cmp	r2, #0
 8000314:	f040 8090 	bne.w	8000438 <__udivmoddi4+0x204>
 8000318:	eba1 040c 	sub.w	r4, r1, ip
 800031c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000320:	fa1f f78c 	uxth.w	r7, ip
 8000324:	2101      	movs	r1, #1
 8000326:	fbb4 f6f8 	udiv	r6, r4, r8
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb08 4416 	mls	r4, r8, r6, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb07 f006 	mul.w	r0, r7, r6
 800033a:	4298      	cmp	r0, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x11c>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x11a>
 8000348:	4298      	cmp	r0, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 800034e:	4626      	mov	r6, r4
 8000350:	1a1c      	subs	r4, r3, r0
 8000352:	fa1f f38e 	uxth.w	r3, lr
 8000356:	fbb4 f0f8 	udiv	r0, r4, r8
 800035a:	fb08 4410 	mls	r4, r8, r0, r4
 800035e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000362:	fb00 f707 	mul.w	r7, r0, r7
 8000366:	429f      	cmp	r7, r3
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x148>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x146>
 8000374:	429f      	cmp	r7, r3
 8000376:	f200 80b0 	bhi.w	80004da <__udivmoddi4+0x2a6>
 800037a:	4620      	mov	r0, r4
 800037c:	1bdb      	subs	r3, r3, r7
 800037e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000382:	e7a5      	b.n	80002d0 <__udivmoddi4+0x9c>
 8000384:	f1c1 0620 	rsb	r6, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 f706 	lsr.w	r7, r2, r6
 800038e:	431f      	orrs	r7, r3
 8000390:	fa20 fc06 	lsr.w	ip, r0, r6
 8000394:	fa04 f301 	lsl.w	r3, r4, r1
 8000398:	ea43 030c 	orr.w	r3, r3, ip
 800039c:	40f4      	lsrs	r4, r6
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	0c38      	lsrs	r0, r7, #16
 80003a4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a8:	fbb4 fef0 	udiv	lr, r4, r0
 80003ac:	fa1f fc87 	uxth.w	ip, r7
 80003b0:	fb00 441e 	mls	r4, r0, lr, r4
 80003b4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b8:	fb0e f90c 	mul.w	r9, lr, ip
 80003bc:	45a1      	cmp	r9, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	d90a      	bls.n	80003da <__udivmoddi4+0x1a6>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003ca:	f080 8084 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80003ce:	45a1      	cmp	r9, r4
 80003d0:	f240 8081 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80003d4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d8:	443c      	add	r4, r7
 80003da:	eba4 0409 	sub.w	r4, r4, r9
 80003de:	fa1f f983 	uxth.w	r9, r3
 80003e2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003e6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ee:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1d2>
 80003f6:	193c      	adds	r4, r7, r4
 80003f8:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003fc:	d267      	bcs.n	80004ce <__udivmoddi4+0x29a>
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d965      	bls.n	80004ce <__udivmoddi4+0x29a>
 8000402:	3b02      	subs	r3, #2
 8000404:	443c      	add	r4, r7
 8000406:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040a:	fba0 9302 	umull	r9, r3, r0, r2
 800040e:	eba4 040c 	sub.w	r4, r4, ip
 8000412:	429c      	cmp	r4, r3
 8000414:	46ce      	mov	lr, r9
 8000416:	469c      	mov	ip, r3
 8000418:	d351      	bcc.n	80004be <__udivmoddi4+0x28a>
 800041a:	d04e      	beq.n	80004ba <__udivmoddi4+0x286>
 800041c:	b155      	cbz	r5, 8000434 <__udivmoddi4+0x200>
 800041e:	ebb8 030e 	subs.w	r3, r8, lr
 8000422:	eb64 040c 	sbc.w	r4, r4, ip
 8000426:	fa04 f606 	lsl.w	r6, r4, r6
 800042a:	40cb      	lsrs	r3, r1
 800042c:	431e      	orrs	r6, r3
 800042e:	40cc      	lsrs	r4, r1
 8000430:	e9c5 6400 	strd	r6, r4, [r5]
 8000434:	2100      	movs	r1, #0
 8000436:	e750      	b.n	80002da <__udivmoddi4+0xa6>
 8000438:	f1c2 0320 	rsb	r3, r2, #32
 800043c:	fa20 f103 	lsr.w	r1, r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa24 f303 	lsr.w	r3, r4, r3
 8000448:	4094      	lsls	r4, r2
 800044a:	430c      	orrs	r4, r1
 800044c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000450:	fa00 fe02 	lsl.w	lr, r0, r2
 8000454:	fa1f f78c 	uxth.w	r7, ip
 8000458:	fbb3 f0f8 	udiv	r0, r3, r8
 800045c:	fb08 3110 	mls	r1, r8, r0, r3
 8000460:	0c23      	lsrs	r3, r4, #16
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f107 	mul.w	r1, r0, r7
 800046a:	4299      	cmp	r1, r3
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x24c>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000476:	d22c      	bcs.n	80004d2 <__udivmoddi4+0x29e>
 8000478:	4299      	cmp	r1, r3
 800047a:	d92a      	bls.n	80004d2 <__udivmoddi4+0x29e>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1a5b      	subs	r3, r3, r1
 8000482:	b2a4      	uxth	r4, r4
 8000484:	fbb3 f1f8 	udiv	r1, r3, r8
 8000488:	fb08 3311 	mls	r3, r8, r1, r3
 800048c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000490:	fb01 f307 	mul.w	r3, r1, r7
 8000494:	42a3      	cmp	r3, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x276>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80004a0:	d213      	bcs.n	80004ca <__udivmoddi4+0x296>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d911      	bls.n	80004ca <__udivmoddi4+0x296>
 80004a6:	3902      	subs	r1, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	1ae4      	subs	r4, r4, r3
 80004ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b0:	e739      	b.n	8000326 <__udivmoddi4+0xf2>
 80004b2:	4604      	mov	r4, r0
 80004b4:	e6f0      	b.n	8000298 <__udivmoddi4+0x64>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e706      	b.n	80002c8 <__udivmoddi4+0x94>
 80004ba:	45c8      	cmp	r8, r9
 80004bc:	d2ae      	bcs.n	800041c <__udivmoddi4+0x1e8>
 80004be:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004c6:	3801      	subs	r0, #1
 80004c8:	e7a8      	b.n	800041c <__udivmoddi4+0x1e8>
 80004ca:	4631      	mov	r1, r6
 80004cc:	e7ed      	b.n	80004aa <__udivmoddi4+0x276>
 80004ce:	4603      	mov	r3, r0
 80004d0:	e799      	b.n	8000406 <__udivmoddi4+0x1d2>
 80004d2:	4630      	mov	r0, r6
 80004d4:	e7d4      	b.n	8000480 <__udivmoddi4+0x24c>
 80004d6:	46d6      	mov	lr, sl
 80004d8:	e77f      	b.n	80003da <__udivmoddi4+0x1a6>
 80004da:	4463      	add	r3, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e74d      	b.n	800037c <__udivmoddi4+0x148>
 80004e0:	4606      	mov	r6, r0
 80004e2:	4623      	mov	r3, r4
 80004e4:	4608      	mov	r0, r1
 80004e6:	e70f      	b.n	8000308 <__udivmoddi4+0xd4>
 80004e8:	3e02      	subs	r6, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	e730      	b.n	8000350 <__udivmoddi4+0x11c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <Lever_Lock>:
  *         Uses temp_rx_buff[0] to determine
  * @param  None
  * @retval None
  */
void Lever_Lock()
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
	if(temp_rx_buff[0] == 0x01)
 80004f8:	4b0c      	ldr	r3, [pc, #48]	@ (800052c <Lever_Lock+0x38>)
 80004fa:	781b      	ldrb	r3, [r3, #0]
 80004fc:	b2db      	uxtb	r3, r3
 80004fe:	2b01      	cmp	r3, #1
 8000500:	d106      	bne.n	8000510 <Lever_Lock+0x1c>
	{
		HAL_GPIO_WritePin(LT_GPIO_Port, LT_Pin, GPIO_PIN_SET); /* Turn ON */
 8000502:	2201      	movs	r2, #1
 8000504:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000508:	4809      	ldr	r0, [pc, #36]	@ (8000530 <Lever_Lock+0x3c>)
 800050a:	f001 fd97 	bl	800203c <HAL_GPIO_WritePin>
	}
	else if (temp_rx_buff[0] == 0x00)
	{
		HAL_GPIO_WritePin(LT_GPIO_Port, LT_Pin, GPIO_PIN_RESET); /* Turn OFF */
	}
}
 800050e:	e00a      	b.n	8000526 <Lever_Lock+0x32>
	else if (temp_rx_buff[0] == 0x00)
 8000510:	4b06      	ldr	r3, [pc, #24]	@ (800052c <Lever_Lock+0x38>)
 8000512:	781b      	ldrb	r3, [r3, #0]
 8000514:	b2db      	uxtb	r3, r3
 8000516:	2b00      	cmp	r3, #0
 8000518:	d105      	bne.n	8000526 <Lever_Lock+0x32>
		HAL_GPIO_WritePin(LT_GPIO_Port, LT_Pin, GPIO_PIN_RESET); /* Turn OFF */
 800051a:	2200      	movs	r2, #0
 800051c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000520:	4803      	ldr	r0, [pc, #12]	@ (8000530 <Lever_Lock+0x3c>)
 8000522:	f001 fd8b 	bl	800203c <HAL_GPIO_WritePin>
}
 8000526:	bf00      	nop
 8000528:	bd80      	pop	{r7, pc}
 800052a:	bf00      	nop
 800052c:	20000000 	.word	0x20000000
 8000530:	40020800 	.word	0x40020800

08000534 <Alarm_ON>:
  *         Uses temp_rx_buff[1] to determine
  * @param  None
  * @retval None
  */
void Alarm_ON()
{
 8000534:	b580      	push	{r7, lr}
 8000536:	af00      	add	r7, sp, #0
	if(temp_rx_buff[1] == 0x01)
 8000538:	4b0c      	ldr	r3, [pc, #48]	@ (800056c <Alarm_ON+0x38>)
 800053a:	785b      	ldrb	r3, [r3, #1]
 800053c:	b2db      	uxtb	r3, r3
 800053e:	2b01      	cmp	r3, #1
 8000540:	d106      	bne.n	8000550 <Alarm_ON+0x1c>
	{
		HAL_GPIO_WritePin(AT_GPIO_Port, AT_Pin, GPIO_PIN_SET); /* Turn ON */
 8000542:	2201      	movs	r2, #1
 8000544:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000548:	4809      	ldr	r0, [pc, #36]	@ (8000570 <Alarm_ON+0x3c>)
 800054a:	f001 fd77 	bl	800203c <HAL_GPIO_WritePin>
	}
	else if (temp_rx_buff[1] == 0x00)
	{
		HAL_GPIO_WritePin(AT_GPIO_Port, AT_Pin, GPIO_PIN_RESET); /* Turn OFF */
	}
}
 800054e:	e00a      	b.n	8000566 <Alarm_ON+0x32>
	else if (temp_rx_buff[1] == 0x00)
 8000550:	4b06      	ldr	r3, [pc, #24]	@ (800056c <Alarm_ON+0x38>)
 8000552:	785b      	ldrb	r3, [r3, #1]
 8000554:	b2db      	uxtb	r3, r3
 8000556:	2b00      	cmp	r3, #0
 8000558:	d105      	bne.n	8000566 <Alarm_ON+0x32>
		HAL_GPIO_WritePin(AT_GPIO_Port, AT_Pin, GPIO_PIN_RESET); /* Turn OFF */
 800055a:	2200      	movs	r2, #0
 800055c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000560:	4803      	ldr	r0, [pc, #12]	@ (8000570 <Alarm_ON+0x3c>)
 8000562:	f001 fd6b 	bl	800203c <HAL_GPIO_WritePin>
}
 8000566:	bf00      	nop
 8000568:	bd80      	pop	{r7, pc}
 800056a:	bf00      	nop
 800056c:	20000000 	.word	0x20000000
 8000570:	40020800 	.word	0x40020800

08000574 <Transmit_Msg>:
  *         Total 10 bytes of data...
  * @param  None
  * @retval None
  */
void Transmit_Msg()
{
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
	tx_buff[0] = 0x55;            /* Header */
 8000578:	4b17      	ldr	r3, [pc, #92]	@ (80005d8 <Transmit_Msg+0x64>)
 800057a:	2255      	movs	r2, #85	@ 0x55
 800057c:	701a      	strb	r2, [r3, #0]
	tx_buff[1] = 0x55;            /* Header */
 800057e:	4b16      	ldr	r3, [pc, #88]	@ (80005d8 <Transmit_Msg+0x64>)
 8000580:	2255      	movs	r2, #85	@ 0x55
 8000582:	705a      	strb	r2, [r3, #1]

	tx_buff[2] = temp_tx_buff[2];    /* Train UP */
 8000584:	4b15      	ldr	r3, [pc, #84]	@ (80005dc <Transmit_Msg+0x68>)
 8000586:	789b      	ldrb	r3, [r3, #2]
 8000588:	b2da      	uxtb	r2, r3
 800058a:	4b13      	ldr	r3, [pc, #76]	@ (80005d8 <Transmit_Msg+0x64>)
 800058c:	709a      	strb	r2, [r3, #2]
	tx_buff[3] = temp_tx_buff[3];    /* Train DOWN */
 800058e:	4b13      	ldr	r3, [pc, #76]	@ (80005dc <Transmit_Msg+0x68>)
 8000590:	78db      	ldrb	r3, [r3, #3]
 8000592:	b2da      	uxtb	r2, r3
 8000594:	4b10      	ldr	r3, [pc, #64]	@ (80005d8 <Transmit_Msg+0x64>)
 8000596:	70da      	strb	r2, [r3, #3]

	tx_buff[4] = temp_tx_buff[4];    /* BOOM 1 STATUS */
 8000598:	4b10      	ldr	r3, [pc, #64]	@ (80005dc <Transmit_Msg+0x68>)
 800059a:	791b      	ldrb	r3, [r3, #4]
 800059c:	b2da      	uxtb	r2, r3
 800059e:	4b0e      	ldr	r3, [pc, #56]	@ (80005d8 <Transmit_Msg+0x64>)
 80005a0:	711a      	strb	r2, [r3, #4]
	tx_buff[5] = temp_tx_buff[5];    /* BOOM 2 STATUS */
 80005a2:	4b0e      	ldr	r3, [pc, #56]	@ (80005dc <Transmit_Msg+0x68>)
 80005a4:	795b      	ldrb	r3, [r3, #5]
 80005a6:	b2da      	uxtb	r2, r3
 80005a8:	4b0b      	ldr	r3, [pc, #44]	@ (80005d8 <Transmit_Msg+0x64>)
 80005aa:	715a      	strb	r2, [r3, #5]

	tx_buff[6] = temp_tx_buff[6];    /* BOOM 1 HEALTH */
 80005ac:	4b0b      	ldr	r3, [pc, #44]	@ (80005dc <Transmit_Msg+0x68>)
 80005ae:	799b      	ldrb	r3, [r3, #6]
 80005b0:	b2da      	uxtb	r2, r3
 80005b2:	4b09      	ldr	r3, [pc, #36]	@ (80005d8 <Transmit_Msg+0x64>)
 80005b4:	719a      	strb	r2, [r3, #6]
	tx_buff[7] = temp_tx_buff[7];    /* BOOM 2 HEALTH */
 80005b6:	4b09      	ldr	r3, [pc, #36]	@ (80005dc <Transmit_Msg+0x68>)
 80005b8:	79db      	ldrb	r3, [r3, #7]
 80005ba:	b2da      	uxtb	r2, r3
 80005bc:	4b06      	ldr	r3, [pc, #24]	@ (80005d8 <Transmit_Msg+0x64>)
 80005be:	71da      	strb	r2, [r3, #7]

	tx_buff[8] = 0xFF;            /* Lever Lock Status */
 80005c0:	4b05      	ldr	r3, [pc, #20]	@ (80005d8 <Transmit_Msg+0x64>)
 80005c2:	22ff      	movs	r2, #255	@ 0xff
 80005c4:	721a      	strb	r2, [r3, #8]
	tx_buff[9] = 0xFF;            /* Alarm Status */
 80005c6:	4b04      	ldr	r3, [pc, #16]	@ (80005d8 <Transmit_Msg+0x64>)
 80005c8:	22ff      	movs	r2, #255	@ 0xff
 80005ca:	725a      	strb	r2, [r3, #9]

	CDC_Transmit_FS((uint8_t*)tx_buff,10);
 80005cc:	210a      	movs	r1, #10
 80005ce:	4802      	ldr	r0, [pc, #8]	@ (80005d8 <Transmit_Msg+0x64>)
 80005d0:	f008 fe98 	bl	8009304 <CDC_Transmit_FS>
}
 80005d4:	bf00      	nop
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	20000140 	.word	0x20000140
 80005dc:	20000004 	.word	0x20000004

080005e0 <Receive_Msg>:
  * @brief  Reads the recieved buffer from USC VCP
  * @param  None
  * @retval None
  */
void Receive_Msg()
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
	if( (rx_buff[0] == 0x59) && (rx_buff[1] == 0x59))
 80005e4:	4b0f      	ldr	r3, [pc, #60]	@ (8000624 <Receive_Msg+0x44>)
 80005e6:	781b      	ldrb	r3, [r3, #0]
 80005e8:	b2db      	uxtb	r3, r3
 80005ea:	2b59      	cmp	r3, #89	@ 0x59
 80005ec:	d118      	bne.n	8000620 <Receive_Msg+0x40>
 80005ee:	4b0d      	ldr	r3, [pc, #52]	@ (8000624 <Receive_Msg+0x44>)
 80005f0:	785b      	ldrb	r3, [r3, #1]
 80005f2:	b2db      	uxtb	r3, r3
 80005f4:	2b59      	cmp	r3, #89	@ 0x59
 80005f6:	d113      	bne.n	8000620 <Receive_Msg+0x40>
	{
		temp_rx_buff[0] = rx_buff[2];
 80005f8:	4b0a      	ldr	r3, [pc, #40]	@ (8000624 <Receive_Msg+0x44>)
 80005fa:	789b      	ldrb	r3, [r3, #2]
 80005fc:	b2da      	uxtb	r2, r3
 80005fe:	4b0a      	ldr	r3, [pc, #40]	@ (8000628 <Receive_Msg+0x48>)
 8000600:	701a      	strb	r2, [r3, #0]
		temp_rx_buff[1] = rx_buff[3];
 8000602:	4b08      	ldr	r3, [pc, #32]	@ (8000624 <Receive_Msg+0x44>)
 8000604:	78db      	ldrb	r3, [r3, #3]
 8000606:	b2da      	uxtb	r2, r3
 8000608:	4b07      	ldr	r3, [pc, #28]	@ (8000628 <Receive_Msg+0x48>)
 800060a:	705a      	strb	r2, [r3, #1]
		if(rx_buff[4] == 0x01)
 800060c:	4b05      	ldr	r3, [pc, #20]	@ (8000624 <Receive_Msg+0x44>)
 800060e:	791b      	ldrb	r3, [r3, #4]
 8000610:	b2db      	uxtb	r3, r3
 8000612:	2b01      	cmp	r3, #1
 8000614:	d104      	bne.n	8000620 <Receive_Msg+0x40>
		{
			Transmit_Msg();
 8000616:	f7ff ffad 	bl	8000574 <Transmit_Msg>
			rx_buff[4] = 0xFF;
 800061a:	4b02      	ldr	r3, [pc, #8]	@ (8000624 <Receive_Msg+0x44>)
 800061c:	22ff      	movs	r2, #255	@ 0xff
 800061e:	711a      	strb	r2, [r3, #4]
		}
	}
}
 8000620:	bf00      	nop
 8000622:	bd80      	pop	{r7, pc}
 8000624:	20000138 	.word	0x20000138
 8000628:	20000000 	.word	0x20000000

0800062c <Boom1_Status>:
  *         Changes temp_tx_msg[4] - UP/DOWN and temp_tx_msg[6] - GOOD/BAD  accordingly...
  * @param  None
  * @retval None.
  */
void Boom1_Status()
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
	if( ( (HAL_GPIO_ReadPin(BOOM1_LS11_GPIO_Port, BOOM1_LS11_Pin) == GPIO_PIN_RESET) &&
 8000630:	2104      	movs	r1, #4
 8000632:	4828      	ldr	r0, [pc, #160]	@ (80006d4 <Boom1_Status+0xa8>)
 8000634:	f001 fcea 	bl	800200c <HAL_GPIO_ReadPin>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d106      	bne.n	800064c <Boom1_Status+0x20>
		  (HAL_GPIO_ReadPin(BOOM1_LS12_GPIO_Port, BOOM1_LS12_Pin) == GPIO_PIN_SET) ) ||
 800063e:	2108      	movs	r1, #8
 8000640:	4824      	ldr	r0, [pc, #144]	@ (80006d4 <Boom1_Status+0xa8>)
 8000642:	f001 fce3 	bl	800200c <HAL_GPIO_ReadPin>
 8000646:	4603      	mov	r3, r0
	if( ( (HAL_GPIO_ReadPin(BOOM1_LS11_GPIO_Port, BOOM1_LS11_Pin) == GPIO_PIN_RESET) &&
 8000648:	2b01      	cmp	r3, #1
 800064a:	d00e      	beq.n	800066a <Boom1_Status+0x3e>
		( (HAL_GPIO_ReadPin(BOOM1_LS21_GPIO_Port, BOOM1_LS21_Pin) == GPIO_PIN_RESET) &&
 800064c:	2180      	movs	r1, #128	@ 0x80
 800064e:	4822      	ldr	r0, [pc, #136]	@ (80006d8 <Boom1_Status+0xac>)
 8000650:	f001 fcdc 	bl	800200c <HAL_GPIO_ReadPin>
 8000654:	4603      	mov	r3, r0
		  (HAL_GPIO_ReadPin(BOOM1_LS12_GPIO_Port, BOOM1_LS12_Pin) == GPIO_PIN_SET) ) ||
 8000656:	2b00      	cmp	r3, #0
 8000658:	d10e      	bne.n	8000678 <Boom1_Status+0x4c>
		  (HAL_GPIO_ReadPin(BOOM1_LS22_GPIO_Port, BOOM1_LS22_Pin) == GPIO_PIN_SET) ) )
 800065a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800065e:	481d      	ldr	r0, [pc, #116]	@ (80006d4 <Boom1_Status+0xa8>)
 8000660:	f001 fcd4 	bl	800200c <HAL_GPIO_ReadPin>
 8000664:	4603      	mov	r3, r0
		( (HAL_GPIO_ReadPin(BOOM1_LS21_GPIO_Port, BOOM1_LS21_Pin) == GPIO_PIN_RESET) &&
 8000666:	2b01      	cmp	r3, #1
 8000668:	d106      	bne.n	8000678 <Boom1_Status+0x4c>
	{
		temp_tx_buff[4] = 0x00; /* BOOM 1 CLOSED */
 800066a:	4b1c      	ldr	r3, [pc, #112]	@ (80006dc <Boom1_Status+0xb0>)
 800066c:	2200      	movs	r2, #0
 800066e:	711a      	strb	r2, [r3, #4]
		temp_tx_buff[6] = 0x01; /* BOOM 1 Healthy */
 8000670:	4b1a      	ldr	r3, [pc, #104]	@ (80006dc <Boom1_Status+0xb0>)
 8000672:	2201      	movs	r2, #1
 8000674:	719a      	strb	r2, [r3, #6]
 8000676:	e02a      	b.n	80006ce <Boom1_Status+0xa2>

	}
	else if( ( (HAL_GPIO_ReadPin(BOOM1_LS11_GPIO_Port, BOOM1_LS11_Pin) == GPIO_PIN_SET) &&
 8000678:	2104      	movs	r1, #4
 800067a:	4816      	ldr	r0, [pc, #88]	@ (80006d4 <Boom1_Status+0xa8>)
 800067c:	f001 fcc6 	bl	800200c <HAL_GPIO_ReadPin>
 8000680:	4603      	mov	r3, r0
 8000682:	2b01      	cmp	r3, #1
 8000684:	d106      	bne.n	8000694 <Boom1_Status+0x68>
		       (HAL_GPIO_ReadPin(BOOM1_LS12_GPIO_Port, BOOM1_LS12_Pin) == GPIO_PIN_RESET) ) ||
 8000686:	2108      	movs	r1, #8
 8000688:	4812      	ldr	r0, [pc, #72]	@ (80006d4 <Boom1_Status+0xa8>)
 800068a:	f001 fcbf 	bl	800200c <HAL_GPIO_ReadPin>
 800068e:	4603      	mov	r3, r0
	else if( ( (HAL_GPIO_ReadPin(BOOM1_LS11_GPIO_Port, BOOM1_LS11_Pin) == GPIO_PIN_SET) &&
 8000690:	2b00      	cmp	r3, #0
 8000692:	d00e      	beq.n	80006b2 <Boom1_Status+0x86>
		     ( (HAL_GPIO_ReadPin(BOOM1_LS21_GPIO_Port, BOOM1_LS21_Pin) == GPIO_PIN_SET) &&
 8000694:	2180      	movs	r1, #128	@ 0x80
 8000696:	4810      	ldr	r0, [pc, #64]	@ (80006d8 <Boom1_Status+0xac>)
 8000698:	f001 fcb8 	bl	800200c <HAL_GPIO_ReadPin>
 800069c:	4603      	mov	r3, r0
		       (HAL_GPIO_ReadPin(BOOM1_LS12_GPIO_Port, BOOM1_LS12_Pin) == GPIO_PIN_RESET) ) ||
 800069e:	2b01      	cmp	r3, #1
 80006a0:	d10e      	bne.n	80006c0 <Boom1_Status+0x94>
		       (HAL_GPIO_ReadPin(BOOM1_LS22_GPIO_Port, BOOM1_LS22_Pin) == GPIO_PIN_RESET) ) )
 80006a2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80006a6:	480b      	ldr	r0, [pc, #44]	@ (80006d4 <Boom1_Status+0xa8>)
 80006a8:	f001 fcb0 	bl	800200c <HAL_GPIO_ReadPin>
 80006ac:	4603      	mov	r3, r0
		     ( (HAL_GPIO_ReadPin(BOOM1_LS21_GPIO_Port, BOOM1_LS21_Pin) == GPIO_PIN_SET) &&
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d106      	bne.n	80006c0 <Boom1_Status+0x94>
	{
		temp_tx_buff[4] = 0x01; /* BOOM 1 OPEN */
 80006b2:	4b0a      	ldr	r3, [pc, #40]	@ (80006dc <Boom1_Status+0xb0>)
 80006b4:	2201      	movs	r2, #1
 80006b6:	711a      	strb	r2, [r3, #4]
		temp_tx_buff[6] = 0x01; /* BOOM 1 Healthy */
 80006b8:	4b08      	ldr	r3, [pc, #32]	@ (80006dc <Boom1_Status+0xb0>)
 80006ba:	2201      	movs	r2, #1
 80006bc:	719a      	strb	r2, [r3, #6]
 80006be:	e006      	b.n	80006ce <Boom1_Status+0xa2>
	}
	else
	{
		temp_tx_buff[4] = 0xFF;
 80006c0:	4b06      	ldr	r3, [pc, #24]	@ (80006dc <Boom1_Status+0xb0>)
 80006c2:	22ff      	movs	r2, #255	@ 0xff
 80006c4:	711a      	strb	r2, [r3, #4]
		temp_tx_buff[6] = 0x00; /* BOOM 1 HEALTH BAD */
 80006c6:	4b05      	ldr	r3, [pc, #20]	@ (80006dc <Boom1_Status+0xb0>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	719a      	strb	r2, [r3, #6]
	}

}
 80006cc:	bf00      	nop
 80006ce:	bf00      	nop
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	40020800 	.word	0x40020800
 80006d8:	40020400 	.word	0x40020400
 80006dc:	20000004 	.word	0x20000004

080006e0 <Boom2_Status>:
  *         Changes temp_tx_msg[5] - UP/DOWN and temp_tx_msg[7] - GOOD/BAD  accordingly...
  * @param  None
  * @retval None.
  */
void Boom2_Status()
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
	if( ( (HAL_GPIO_ReadPin(BOOM2_LS11_GPIO_Port, BOOM2_LS11_Pin) == GPIO_PIN_RESET) &&
 80006e4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80006e8:	4829      	ldr	r0, [pc, #164]	@ (8000790 <Boom2_Status+0xb0>)
 80006ea:	f001 fc8f 	bl	800200c <HAL_GPIO_ReadPin>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d107      	bne.n	8000704 <Boom2_Status+0x24>
		  (HAL_GPIO_ReadPin(BOOM2_LS12_GPIO_Port, BOOM2_LS12_Pin) == GPIO_PIN_SET) ) ||
 80006f4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80006f8:	4825      	ldr	r0, [pc, #148]	@ (8000790 <Boom2_Status+0xb0>)
 80006fa:	f001 fc87 	bl	800200c <HAL_GPIO_ReadPin>
 80006fe:	4603      	mov	r3, r0
	if( ( (HAL_GPIO_ReadPin(BOOM2_LS11_GPIO_Port, BOOM2_LS11_Pin) == GPIO_PIN_RESET) &&
 8000700:	2b01      	cmp	r3, #1
 8000702:	d00e      	beq.n	8000722 <Boom2_Status+0x42>
		( (HAL_GPIO_ReadPin(BOOM2_LS21_GPIO_Port, BOOM2_LS21_Pin) == GPIO_PIN_RESET) &&
 8000704:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000708:	4821      	ldr	r0, [pc, #132]	@ (8000790 <Boom2_Status+0xb0>)
 800070a:	f001 fc7f 	bl	800200c <HAL_GPIO_ReadPin>
 800070e:	4603      	mov	r3, r0
		  (HAL_GPIO_ReadPin(BOOM2_LS12_GPIO_Port, BOOM2_LS12_Pin) == GPIO_PIN_SET) ) ||
 8000710:	2b00      	cmp	r3, #0
 8000712:	d10d      	bne.n	8000730 <Boom2_Status+0x50>
		  (HAL_GPIO_ReadPin(BOOM2_LS22_GPIO_Port, BOOM2_LS22_Pin) == GPIO_PIN_SET) ) )
 8000714:	2102      	movs	r1, #2
 8000716:	481e      	ldr	r0, [pc, #120]	@ (8000790 <Boom2_Status+0xb0>)
 8000718:	f001 fc78 	bl	800200c <HAL_GPIO_ReadPin>
 800071c:	4603      	mov	r3, r0
		( (HAL_GPIO_ReadPin(BOOM2_LS21_GPIO_Port, BOOM2_LS21_Pin) == GPIO_PIN_RESET) &&
 800071e:	2b01      	cmp	r3, #1
 8000720:	d106      	bne.n	8000730 <Boom2_Status+0x50>
	{
		temp_tx_buff[5] = 0x00; /* BOOM 2 CLOSED */
 8000722:	4b1c      	ldr	r3, [pc, #112]	@ (8000794 <Boom2_Status+0xb4>)
 8000724:	2200      	movs	r2, #0
 8000726:	715a      	strb	r2, [r3, #5]
		temp_tx_buff[7] = 0x01; /* BOOM 2 Healthy */
 8000728:	4b1a      	ldr	r3, [pc, #104]	@ (8000794 <Boom2_Status+0xb4>)
 800072a:	2201      	movs	r2, #1
 800072c:	71da      	strb	r2, [r3, #7]
 800072e:	e02c      	b.n	800078a <Boom2_Status+0xaa>

	}
	else if( ( (HAL_GPIO_ReadPin(BOOM2_LS11_GPIO_Port, BOOM2_LS11_Pin) == GPIO_PIN_SET) &&
 8000730:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000734:	4816      	ldr	r0, [pc, #88]	@ (8000790 <Boom2_Status+0xb0>)
 8000736:	f001 fc69 	bl	800200c <HAL_GPIO_ReadPin>
 800073a:	4603      	mov	r3, r0
 800073c:	2b01      	cmp	r3, #1
 800073e:	d107      	bne.n	8000750 <Boom2_Status+0x70>
		       (HAL_GPIO_ReadPin(BOOM2_LS12_GPIO_Port, BOOM2_LS12_Pin) == GPIO_PIN_RESET) ) ||
 8000740:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000744:	4812      	ldr	r0, [pc, #72]	@ (8000790 <Boom2_Status+0xb0>)
 8000746:	f001 fc61 	bl	800200c <HAL_GPIO_ReadPin>
 800074a:	4603      	mov	r3, r0
	else if( ( (HAL_GPIO_ReadPin(BOOM2_LS11_GPIO_Port, BOOM2_LS11_Pin) == GPIO_PIN_SET) &&
 800074c:	2b00      	cmp	r3, #0
 800074e:	d00e      	beq.n	800076e <Boom2_Status+0x8e>
		     ( (HAL_GPIO_ReadPin(BOOM2_LS21_GPIO_Port, BOOM2_LS21_Pin) == GPIO_PIN_SET) &&
 8000750:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000754:	480e      	ldr	r0, [pc, #56]	@ (8000790 <Boom2_Status+0xb0>)
 8000756:	f001 fc59 	bl	800200c <HAL_GPIO_ReadPin>
 800075a:	4603      	mov	r3, r0
		       (HAL_GPIO_ReadPin(BOOM2_LS12_GPIO_Port, BOOM2_LS12_Pin) == GPIO_PIN_RESET) ) ||
 800075c:	2b01      	cmp	r3, #1
 800075e:	d10d      	bne.n	800077c <Boom2_Status+0x9c>
		       (HAL_GPIO_ReadPin(BOOM2_LS22_GPIO_Port, BOOM2_LS22_Pin) == GPIO_PIN_RESET) ) )
 8000760:	2102      	movs	r1, #2
 8000762:	480b      	ldr	r0, [pc, #44]	@ (8000790 <Boom2_Status+0xb0>)
 8000764:	f001 fc52 	bl	800200c <HAL_GPIO_ReadPin>
 8000768:	4603      	mov	r3, r0
		     ( (HAL_GPIO_ReadPin(BOOM2_LS21_GPIO_Port, BOOM2_LS21_Pin) == GPIO_PIN_SET) &&
 800076a:	2b00      	cmp	r3, #0
 800076c:	d106      	bne.n	800077c <Boom2_Status+0x9c>
	{
		temp_tx_buff[5] = 0x01; /* BOOM 2 OPEN */
 800076e:	4b09      	ldr	r3, [pc, #36]	@ (8000794 <Boom2_Status+0xb4>)
 8000770:	2201      	movs	r2, #1
 8000772:	715a      	strb	r2, [r3, #5]
		temp_tx_buff[7] = 0x01; /* BOOM 2 Healthy */
 8000774:	4b07      	ldr	r3, [pc, #28]	@ (8000794 <Boom2_Status+0xb4>)
 8000776:	2201      	movs	r2, #1
 8000778:	71da      	strb	r2, [r3, #7]
 800077a:	e006      	b.n	800078a <Boom2_Status+0xaa>
	}
	else
	{
		temp_tx_buff[5] = 0xFF;
 800077c:	4b05      	ldr	r3, [pc, #20]	@ (8000794 <Boom2_Status+0xb4>)
 800077e:	22ff      	movs	r2, #255	@ 0xff
 8000780:	715a      	strb	r2, [r3, #5]
		temp_tx_buff[7] = 0x00; /* BOOM 2 HEALTH BAD */
 8000782:	4b04      	ldr	r3, [pc, #16]	@ (8000794 <Boom2_Status+0xb4>)
 8000784:	2200      	movs	r2, #0
 8000786:	71da      	strb	r2, [r3, #7]
	}

}
 8000788:	bf00      	nop
 800078a:	bf00      	nop
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	40020400 	.word	0x40020400
 8000794:	20000004 	.word	0x20000004

08000798 <UP_Train_Status>:
  *         Compare it with TRAIN_DIST MACRO and changes temp_tx_buff[2] - UP direction
  * @param  None
  * @retval None
  */
void UP_Train_Status()
{
 8000798:	b590      	push	{r4, r7, lr}
 800079a:	b087      	sub	sp, #28
 800079c:	af00      	add	r7, sp, #0
	volatile uint16_t data1[5] = {0xFFFF};
 800079e:	f107 030c 	add.w	r3, r7, #12
 80007a2:	2200      	movs	r2, #0
 80007a4:	601a      	str	r2, [r3, #0]
 80007a6:	605a      	str	r2, [r3, #4]
 80007a8:	811a      	strh	r2, [r3, #8]
 80007aa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80007ae:	81bb      	strh	r3, [r7, #12]
	volatile uint16_t data2[5] = {0xFFFF};
 80007b0:	463b      	mov	r3, r7
 80007b2:	2200      	movs	r2, #0
 80007b4:	601a      	str	r2, [r3, #0]
 80007b6:	605a      	str	r2, [r3, #4]
 80007b8:	811a      	strh	r2, [r3, #8]
 80007ba:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80007be:	803b      	strh	r3, [r7, #0]

	for(uint8_t i=0;i<5;i++)
 80007c0:	2300      	movs	r3, #0
 80007c2:	75fb      	strb	r3, [r7, #23]
 80007c4:	e018      	b.n	80007f8 <UP_Train_Status+0x60>
	{
	    data1[i] = TF02_Get_Dist(&huart1);
 80007c6:	7dfc      	ldrb	r4, [r7, #23]
 80007c8:	4840      	ldr	r0, [pc, #256]	@ (80008cc <UP_Train_Status+0x134>)
 80007ca:	f000 f925 	bl	8000a18 <TF02_Get_Dist>
 80007ce:	4603      	mov	r3, r0
 80007d0:	461a      	mov	r2, r3
 80007d2:	0063      	lsls	r3, r4, #1
 80007d4:	3318      	adds	r3, #24
 80007d6:	443b      	add	r3, r7
 80007d8:	f823 2c0c 	strh.w	r2, [r3, #-12]
	    data2[i] = TF02_Get_Dist(&huart3);
 80007dc:	7dfc      	ldrb	r4, [r7, #23]
 80007de:	483c      	ldr	r0, [pc, #240]	@ (80008d0 <UP_Train_Status+0x138>)
 80007e0:	f000 f91a 	bl	8000a18 <TF02_Get_Dist>
 80007e4:	4603      	mov	r3, r0
 80007e6:	461a      	mov	r2, r3
 80007e8:	0063      	lsls	r3, r4, #1
 80007ea:	3318      	adds	r3, #24
 80007ec:	443b      	add	r3, r7
 80007ee:	f823 2c18 	strh.w	r2, [r3, #-24]
	for(uint8_t i=0;i<5;i++)
 80007f2:	7dfb      	ldrb	r3, [r7, #23]
 80007f4:	3301      	adds	r3, #1
 80007f6:	75fb      	strb	r3, [r7, #23]
 80007f8:	7dfb      	ldrb	r3, [r7, #23]
 80007fa:	2b04      	cmp	r3, #4
 80007fc:	d9e3      	bls.n	80007c6 <UP_Train_Status+0x2e>
	}


    if( ((data1[0] == 0xFFFF) && (data1[1] == 0xFFFF) && (data1[2] == 0xFFFF) && (data1[3] == 0xFFFF) && (data1[4] == 0xFFFF))
 80007fe:	89bb      	ldrh	r3, [r7, #12]
 8000800:	b29b      	uxth	r3, r3
 8000802:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000806:	4293      	cmp	r3, r2
 8000808:	d117      	bne.n	800083a <UP_Train_Status+0xa2>
 800080a:	89fb      	ldrh	r3, [r7, #14]
 800080c:	b29b      	uxth	r3, r3
 800080e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000812:	4293      	cmp	r3, r2
 8000814:	d111      	bne.n	800083a <UP_Train_Status+0xa2>
 8000816:	8a3b      	ldrh	r3, [r7, #16]
 8000818:	b29b      	uxth	r3, r3
 800081a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800081e:	4293      	cmp	r3, r2
 8000820:	d10b      	bne.n	800083a <UP_Train_Status+0xa2>
 8000822:	8a7b      	ldrh	r3, [r7, #18]
 8000824:	b29b      	uxth	r3, r3
 8000826:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800082a:	4293      	cmp	r3, r2
 800082c:	d105      	bne.n	800083a <UP_Train_Status+0xa2>
 800082e:	8abb      	ldrh	r3, [r7, #20]
 8000830:	b29b      	uxth	r3, r3
 8000832:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000836:	4293      	cmp	r3, r2
 8000838:	d01d      	beq.n	8000876 <UP_Train_Status+0xde>
     || ((data2[0] == 0xFFFF) && (data2[1] == 0xFFFF) && (data2[2] == 0xFFFF) && (data2[3] == 0xFFFF) && (data2[4] == 0xFFFF)) )
 800083a:	883b      	ldrh	r3, [r7, #0]
 800083c:	b29b      	uxth	r3, r3
 800083e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000842:	4293      	cmp	r3, r2
 8000844:	d11a      	bne.n	800087c <UP_Train_Status+0xe4>
 8000846:	887b      	ldrh	r3, [r7, #2]
 8000848:	b29b      	uxth	r3, r3
 800084a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800084e:	4293      	cmp	r3, r2
 8000850:	d114      	bne.n	800087c <UP_Train_Status+0xe4>
 8000852:	88bb      	ldrh	r3, [r7, #4]
 8000854:	b29b      	uxth	r3, r3
 8000856:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800085a:	4293      	cmp	r3, r2
 800085c:	d10e      	bne.n	800087c <UP_Train_Status+0xe4>
 800085e:	88fb      	ldrh	r3, [r7, #6]
 8000860:	b29b      	uxth	r3, r3
 8000862:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000866:	4293      	cmp	r3, r2
 8000868:	d108      	bne.n	800087c <UP_Train_Status+0xe4>
 800086a:	893b      	ldrh	r3, [r7, #8]
 800086c:	b29b      	uxth	r3, r3
 800086e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000872:	4293      	cmp	r3, r2
 8000874:	d102      	bne.n	800087c <UP_Train_Status+0xe4>
    {
    	temp_tx_buff[2] = 0xFF; /* Sensor Error */
 8000876:	4b17      	ldr	r3, [pc, #92]	@ (80008d4 <UP_Train_Status+0x13c>)
 8000878:	22ff      	movs	r2, #255	@ 0xff
 800087a:	709a      	strb	r2, [r3, #2]
    }
   if((data1[4] != 0xFFFF) && (data2[4] != 0xFFFF))
 800087c:	8abb      	ldrh	r3, [r7, #20]
 800087e:	b29b      	uxth	r3, r3
 8000880:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000884:	4293      	cmp	r3, r2
 8000886:	d01c      	beq.n	80008c2 <UP_Train_Status+0x12a>
 8000888:	893b      	ldrh	r3, [r7, #8]
 800088a:	b29b      	uxth	r3, r3
 800088c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000890:	4293      	cmp	r3, r2
 8000892:	d016      	beq.n	80008c2 <UP_Train_Status+0x12a>
   {
	   if(data1[4] <= TRAIN_DIST && data2[4] <= TRAIN_DIST)
 8000894:	8abb      	ldrh	r3, [r7, #20]
 8000896:	b29b      	uxth	r3, r3
 8000898:	2b32      	cmp	r3, #50	@ 0x32
 800089a:	d807      	bhi.n	80008ac <UP_Train_Status+0x114>
 800089c:	893b      	ldrh	r3, [r7, #8]
 800089e:	b29b      	uxth	r3, r3
 80008a0:	2b32      	cmp	r3, #50	@ 0x32
 80008a2:	d803      	bhi.n	80008ac <UP_Train_Status+0x114>
	   {
		   temp_tx_buff[2] = 0x01;  /* Train Detected */
 80008a4:	4b0b      	ldr	r3, [pc, #44]	@ (80008d4 <UP_Train_Status+0x13c>)
 80008a6:	2201      	movs	r2, #1
 80008a8:	709a      	strb	r2, [r3, #2]
	   {
		   temp_tx_buff[2] = 0x00;  /* No Train Detected */
	   }
   }

}
 80008aa:	e00a      	b.n	80008c2 <UP_Train_Status+0x12a>
	   else if (data1[4] >= TRAIN_DIST && data2[4] >= TRAIN_DIST)
 80008ac:	8abb      	ldrh	r3, [r7, #20]
 80008ae:	b29b      	uxth	r3, r3
 80008b0:	2b31      	cmp	r3, #49	@ 0x31
 80008b2:	d906      	bls.n	80008c2 <UP_Train_Status+0x12a>
 80008b4:	893b      	ldrh	r3, [r7, #8]
 80008b6:	b29b      	uxth	r3, r3
 80008b8:	2b31      	cmp	r3, #49	@ 0x31
 80008ba:	d902      	bls.n	80008c2 <UP_Train_Status+0x12a>
		   temp_tx_buff[2] = 0x00;  /* No Train Detected */
 80008bc:	4b05      	ldr	r3, [pc, #20]	@ (80008d4 <UP_Train_Status+0x13c>)
 80008be:	2200      	movs	r2, #0
 80008c0:	709a      	strb	r2, [r3, #2]
}
 80008c2:	bf00      	nop
 80008c4:	371c      	adds	r7, #28
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd90      	pop	{r4, r7, pc}
 80008ca:	bf00      	nop
 80008cc:	20000224 	.word	0x20000224
 80008d0:	200002b4 	.word	0x200002b4
 80008d4:	20000004 	.word	0x20000004

080008d8 <DOWN_Train_Status>:
  *         Compare it with TRAIN_DIST MACRO and changes temp_tx_buff[3] - DOWN direction
  * @param  None
  * @retval None
  */
void DOWN_Train_Status()
{
 80008d8:	b590      	push	{r4, r7, lr}
 80008da:	b087      	sub	sp, #28
 80008dc:	af00      	add	r7, sp, #0
	volatile uint16_t data3[5] = {0xFFFF};
 80008de:	f107 030c 	add.w	r3, r7, #12
 80008e2:	2200      	movs	r2, #0
 80008e4:	601a      	str	r2, [r3, #0]
 80008e6:	605a      	str	r2, [r3, #4]
 80008e8:	811a      	strh	r2, [r3, #8]
 80008ea:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80008ee:	81bb      	strh	r3, [r7, #12]
	volatile uint16_t data4[5] = {0xFFFF};
 80008f0:	463b      	mov	r3, r7
 80008f2:	2200      	movs	r2, #0
 80008f4:	601a      	str	r2, [r3, #0]
 80008f6:	605a      	str	r2, [r3, #4]
 80008f8:	811a      	strh	r2, [r3, #8]
 80008fa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80008fe:	803b      	strh	r3, [r7, #0]

	for(uint8_t i=0;i<5;i++)
 8000900:	2300      	movs	r3, #0
 8000902:	75fb      	strb	r3, [r7, #23]
 8000904:	e018      	b.n	8000938 <DOWN_Train_Status+0x60>
	{
	    data3[i] = TF02_Get_Dist(&huart3);
 8000906:	7dfc      	ldrb	r4, [r7, #23]
 8000908:	4840      	ldr	r0, [pc, #256]	@ (8000a0c <DOWN_Train_Status+0x134>)
 800090a:	f000 f885 	bl	8000a18 <TF02_Get_Dist>
 800090e:	4603      	mov	r3, r0
 8000910:	461a      	mov	r2, r3
 8000912:	0063      	lsls	r3, r4, #1
 8000914:	3318      	adds	r3, #24
 8000916:	443b      	add	r3, r7
 8000918:	f823 2c0c 	strh.w	r2, [r3, #-12]
	    data4[i] = TF02_Get_Dist(&huart4);
 800091c:	7dfc      	ldrb	r4, [r7, #23]
 800091e:	483c      	ldr	r0, [pc, #240]	@ (8000a10 <DOWN_Train_Status+0x138>)
 8000920:	f000 f87a 	bl	8000a18 <TF02_Get_Dist>
 8000924:	4603      	mov	r3, r0
 8000926:	461a      	mov	r2, r3
 8000928:	0063      	lsls	r3, r4, #1
 800092a:	3318      	adds	r3, #24
 800092c:	443b      	add	r3, r7
 800092e:	f823 2c18 	strh.w	r2, [r3, #-24]
	for(uint8_t i=0;i<5;i++)
 8000932:	7dfb      	ldrb	r3, [r7, #23]
 8000934:	3301      	adds	r3, #1
 8000936:	75fb      	strb	r3, [r7, #23]
 8000938:	7dfb      	ldrb	r3, [r7, #23]
 800093a:	2b04      	cmp	r3, #4
 800093c:	d9e3      	bls.n	8000906 <DOWN_Train_Status+0x2e>
	}

    if( ((data3[0] == 0xFFFF) && (data3[1] == 0xFFFF) && (data3[2] == 0xFFFF) && (data3[3] == 0xFFFF) && (data3[4] == 0xFFFF))
 800093e:	89bb      	ldrh	r3, [r7, #12]
 8000940:	b29b      	uxth	r3, r3
 8000942:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000946:	4293      	cmp	r3, r2
 8000948:	d117      	bne.n	800097a <DOWN_Train_Status+0xa2>
 800094a:	89fb      	ldrh	r3, [r7, #14]
 800094c:	b29b      	uxth	r3, r3
 800094e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000952:	4293      	cmp	r3, r2
 8000954:	d111      	bne.n	800097a <DOWN_Train_Status+0xa2>
 8000956:	8a3b      	ldrh	r3, [r7, #16]
 8000958:	b29b      	uxth	r3, r3
 800095a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800095e:	4293      	cmp	r3, r2
 8000960:	d10b      	bne.n	800097a <DOWN_Train_Status+0xa2>
 8000962:	8a7b      	ldrh	r3, [r7, #18]
 8000964:	b29b      	uxth	r3, r3
 8000966:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800096a:	4293      	cmp	r3, r2
 800096c:	d105      	bne.n	800097a <DOWN_Train_Status+0xa2>
 800096e:	8abb      	ldrh	r3, [r7, #20]
 8000970:	b29b      	uxth	r3, r3
 8000972:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000976:	4293      	cmp	r3, r2
 8000978:	d01d      	beq.n	80009b6 <DOWN_Train_Status+0xde>
     || ((data4[0] == 0xFFFF) && (data4[1] == 0xFFFF) && (data4[2] == 0xFFFF) && (data4[3] == 0xFFFF) && (data4[4] == 0xFFFF)) )
 800097a:	883b      	ldrh	r3, [r7, #0]
 800097c:	b29b      	uxth	r3, r3
 800097e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000982:	4293      	cmp	r3, r2
 8000984:	d11a      	bne.n	80009bc <DOWN_Train_Status+0xe4>
 8000986:	887b      	ldrh	r3, [r7, #2]
 8000988:	b29b      	uxth	r3, r3
 800098a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800098e:	4293      	cmp	r3, r2
 8000990:	d114      	bne.n	80009bc <DOWN_Train_Status+0xe4>
 8000992:	88bb      	ldrh	r3, [r7, #4]
 8000994:	b29b      	uxth	r3, r3
 8000996:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800099a:	4293      	cmp	r3, r2
 800099c:	d10e      	bne.n	80009bc <DOWN_Train_Status+0xe4>
 800099e:	88fb      	ldrh	r3, [r7, #6]
 80009a0:	b29b      	uxth	r3, r3
 80009a2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80009a6:	4293      	cmp	r3, r2
 80009a8:	d108      	bne.n	80009bc <DOWN_Train_Status+0xe4>
 80009aa:	893b      	ldrh	r3, [r7, #8]
 80009ac:	b29b      	uxth	r3, r3
 80009ae:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80009b2:	4293      	cmp	r3, r2
 80009b4:	d102      	bne.n	80009bc <DOWN_Train_Status+0xe4>
    {
    	temp_tx_buff[3] = 0xFF; /* Sensor Error */
 80009b6:	4b17      	ldr	r3, [pc, #92]	@ (8000a14 <DOWN_Train_Status+0x13c>)
 80009b8:	22ff      	movs	r2, #255	@ 0xff
 80009ba:	70da      	strb	r2, [r3, #3]
    }
    if((data3[4] != 0xFFFF) && (data4[4] != 0xFFFF))
 80009bc:	8abb      	ldrh	r3, [r7, #20]
 80009be:	b29b      	uxth	r3, r3
 80009c0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80009c4:	4293      	cmp	r3, r2
 80009c6:	d01c      	beq.n	8000a02 <DOWN_Train_Status+0x12a>
 80009c8:	893b      	ldrh	r3, [r7, #8]
 80009ca:	b29b      	uxth	r3, r3
 80009cc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80009d0:	4293      	cmp	r3, r2
 80009d2:	d016      	beq.n	8000a02 <DOWN_Train_Status+0x12a>
    {
 	   if(data3[4] <= TRAIN_DIST && data4[4] <= TRAIN_DIST)
 80009d4:	8abb      	ldrh	r3, [r7, #20]
 80009d6:	b29b      	uxth	r3, r3
 80009d8:	2b32      	cmp	r3, #50	@ 0x32
 80009da:	d807      	bhi.n	80009ec <DOWN_Train_Status+0x114>
 80009dc:	893b      	ldrh	r3, [r7, #8]
 80009de:	b29b      	uxth	r3, r3
 80009e0:	2b32      	cmp	r3, #50	@ 0x32
 80009e2:	d803      	bhi.n	80009ec <DOWN_Train_Status+0x114>
 	   {
 		   temp_tx_buff[3] = 0x01;  /* Train Detected */
 80009e4:	4b0b      	ldr	r3, [pc, #44]	@ (8000a14 <DOWN_Train_Status+0x13c>)
 80009e6:	2201      	movs	r2, #1
 80009e8:	70da      	strb	r2, [r3, #3]
 	   {
 		   temp_tx_buff[3] = 0x00;  /* No Train Detected */
 	   }
    }

}
 80009ea:	e00a      	b.n	8000a02 <DOWN_Train_Status+0x12a>
 	   else if (data3[4] >= TRAIN_DIST && data4[4] >= TRAIN_DIST)
 80009ec:	8abb      	ldrh	r3, [r7, #20]
 80009ee:	b29b      	uxth	r3, r3
 80009f0:	2b31      	cmp	r3, #49	@ 0x31
 80009f2:	d906      	bls.n	8000a02 <DOWN_Train_Status+0x12a>
 80009f4:	893b      	ldrh	r3, [r7, #8]
 80009f6:	b29b      	uxth	r3, r3
 80009f8:	2b31      	cmp	r3, #49	@ 0x31
 80009fa:	d902      	bls.n	8000a02 <DOWN_Train_Status+0x12a>
 		   temp_tx_buff[3] = 0x00;  /* No Train Detected */
 80009fc:	4b05      	ldr	r3, [pc, #20]	@ (8000a14 <DOWN_Train_Status+0x13c>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	70da      	strb	r2, [r3, #3]
}
 8000a02:	bf00      	nop
 8000a04:	371c      	adds	r7, #28
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd90      	pop	{r4, r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	200002b4 	.word	0x200002b4
 8000a10:	200001dc 	.word	0x200001dc
 8000a14:	20000004 	.word	0x20000004

08000a18 <TF02_Get_Dist>:
  *               the configuration information for the specified UART module.
  * @retval 16-bit distance data in cm (by default)
  */

uint16_t TF02_Get_Dist(UART_HandleTypeDef *UART_BUS)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b084      	sub	sp, #16
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
	volatile uint8_t data[8];

	if(HAL_UART_Receive(UART_BUS,(uint8_t*)data, 8, 100)== HAL_OK)
 8000a20:	f107 0108 	add.w	r1, r7, #8
 8000a24:	2364      	movs	r3, #100	@ 0x64
 8000a26:	2208      	movs	r2, #8
 8000a28:	6878      	ldr	r0, [r7, #4]
 8000a2a:	f004 fc6f 	bl	800530c <HAL_UART_Receive>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d112      	bne.n	8000a5a <TF02_Get_Dist+0x42>
	{
		if (data[1] == 0x59 && data[2] == 0x59)
 8000a34:	7a7b      	ldrb	r3, [r7, #9]
 8000a36:	b2db      	uxtb	r3, r3
 8000a38:	2b59      	cmp	r3, #89	@ 0x59
 8000a3a:	d111      	bne.n	8000a60 <TF02_Get_Dist+0x48>
 8000a3c:	7abb      	ldrb	r3, [r7, #10]
 8000a3e:	b2db      	uxtb	r3, r3
 8000a40:	2b59      	cmp	r3, #89	@ 0x59
 8000a42:	d10d      	bne.n	8000a60 <TF02_Get_Dist+0x48>
		{
			return (data[4] << 8 | data[3]);
 8000a44:	7b3b      	ldrb	r3, [r7, #12]
 8000a46:	b2db      	uxtb	r3, r3
 8000a48:	021b      	lsls	r3, r3, #8
 8000a4a:	b21a      	sxth	r2, r3
 8000a4c:	7afb      	ldrb	r3, [r7, #11]
 8000a4e:	b2db      	uxtb	r3, r3
 8000a50:	b21b      	sxth	r3, r3
 8000a52:	4313      	orrs	r3, r2
 8000a54:	b21b      	sxth	r3, r3
 8000a56:	b29b      	uxth	r3, r3
 8000a58:	e004      	b.n	8000a64 <TF02_Get_Dist+0x4c>
		}
	}
	else return 0xFFFF;
 8000a5a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000a5e:	e001      	b.n	8000a64 <TF02_Get_Dist+0x4c>
	return 0xFFFF;
 8000a60:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 8000a64:	4618      	mov	r0, r3
 8000a66:	3710      	adds	r7, #16
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}

08000a6c <Start_Polling>:
  * @brief  Starts reading the status of two BOOM , all 4 lidar etc
  * @param  None
  * @retval None
  */
void Start_Polling()
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
	Boom1_Status();
 8000a70:	f7ff fddc 	bl	800062c <Boom1_Status>
	Boom2_Status();
 8000a74:	f7ff fe34 	bl	80006e0 <Boom2_Status>
	UP_Train_Status();
 8000a78:	f7ff fe8e 	bl	8000798 <UP_Train_Status>
	DOWN_Train_Status();
 8000a7c:	f7ff ff2c 	bl	80008d8 <DOWN_Train_Status>
}
 8000a80:	bf00      	nop
 8000a82:	bd80      	pop	{r7, pc}

08000a84 <Send_If_Change>:
  * @brief  Sends Data via USB VCP whenever a change in the status of BOOM or Lidar data is detected
  * @param  None
  * @retval None
  */
void Send_If_Change()
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
	if( (temp_tx_buff[2] != tx_buff[2]) || (temp_tx_buff[3] != tx_buff[3]) ||
 8000a88:	4b19      	ldr	r3, [pc, #100]	@ (8000af0 <Send_If_Change+0x6c>)
 8000a8a:	789b      	ldrb	r3, [r3, #2]
 8000a8c:	b2da      	uxtb	r2, r3
 8000a8e:	4b19      	ldr	r3, [pc, #100]	@ (8000af4 <Send_If_Change+0x70>)
 8000a90:	789b      	ldrb	r3, [r3, #2]
 8000a92:	b2db      	uxtb	r3, r3
 8000a94:	429a      	cmp	r2, r3
 8000a96:	d127      	bne.n	8000ae8 <Send_If_Change+0x64>
 8000a98:	4b15      	ldr	r3, [pc, #84]	@ (8000af0 <Send_If_Change+0x6c>)
 8000a9a:	78db      	ldrb	r3, [r3, #3]
 8000a9c:	b2da      	uxtb	r2, r3
 8000a9e:	4b15      	ldr	r3, [pc, #84]	@ (8000af4 <Send_If_Change+0x70>)
 8000aa0:	78db      	ldrb	r3, [r3, #3]
 8000aa2:	b2db      	uxtb	r3, r3
 8000aa4:	429a      	cmp	r2, r3
 8000aa6:	d11f      	bne.n	8000ae8 <Send_If_Change+0x64>
		(temp_tx_buff[4] != tx_buff[4]) || (temp_tx_buff[5] != tx_buff[5]) ||
 8000aa8:	4b11      	ldr	r3, [pc, #68]	@ (8000af0 <Send_If_Change+0x6c>)
 8000aaa:	791b      	ldrb	r3, [r3, #4]
 8000aac:	b2da      	uxtb	r2, r3
 8000aae:	4b11      	ldr	r3, [pc, #68]	@ (8000af4 <Send_If_Change+0x70>)
 8000ab0:	791b      	ldrb	r3, [r3, #4]
 8000ab2:	b2db      	uxtb	r3, r3
	if( (temp_tx_buff[2] != tx_buff[2]) || (temp_tx_buff[3] != tx_buff[3]) ||
 8000ab4:	429a      	cmp	r2, r3
 8000ab6:	d117      	bne.n	8000ae8 <Send_If_Change+0x64>
		(temp_tx_buff[4] != tx_buff[4]) || (temp_tx_buff[5] != tx_buff[5]) ||
 8000ab8:	4b0d      	ldr	r3, [pc, #52]	@ (8000af0 <Send_If_Change+0x6c>)
 8000aba:	795b      	ldrb	r3, [r3, #5]
 8000abc:	b2da      	uxtb	r2, r3
 8000abe:	4b0d      	ldr	r3, [pc, #52]	@ (8000af4 <Send_If_Change+0x70>)
 8000ac0:	795b      	ldrb	r3, [r3, #5]
 8000ac2:	b2db      	uxtb	r3, r3
 8000ac4:	429a      	cmp	r2, r3
 8000ac6:	d10f      	bne.n	8000ae8 <Send_If_Change+0x64>
		(temp_tx_buff[6] != tx_buff[6]) || (temp_tx_buff[7] != tx_buff[7]) )
 8000ac8:	4b09      	ldr	r3, [pc, #36]	@ (8000af0 <Send_If_Change+0x6c>)
 8000aca:	799b      	ldrb	r3, [r3, #6]
 8000acc:	b2da      	uxtb	r2, r3
 8000ace:	4b09      	ldr	r3, [pc, #36]	@ (8000af4 <Send_If_Change+0x70>)
 8000ad0:	799b      	ldrb	r3, [r3, #6]
 8000ad2:	b2db      	uxtb	r3, r3
		(temp_tx_buff[4] != tx_buff[4]) || (temp_tx_buff[5] != tx_buff[5]) ||
 8000ad4:	429a      	cmp	r2, r3
 8000ad6:	d107      	bne.n	8000ae8 <Send_If_Change+0x64>
		(temp_tx_buff[6] != tx_buff[6]) || (temp_tx_buff[7] != tx_buff[7]) )
 8000ad8:	4b05      	ldr	r3, [pc, #20]	@ (8000af0 <Send_If_Change+0x6c>)
 8000ada:	79db      	ldrb	r3, [r3, #7]
 8000adc:	b2da      	uxtb	r2, r3
 8000ade:	4b05      	ldr	r3, [pc, #20]	@ (8000af4 <Send_If_Change+0x70>)
 8000ae0:	79db      	ldrb	r3, [r3, #7]
 8000ae2:	b2db      	uxtb	r3, r3
 8000ae4:	429a      	cmp	r2, r3
 8000ae6:	d001      	beq.n	8000aec <Send_If_Change+0x68>
	{
		Transmit_Msg();
 8000ae8:	f7ff fd44 	bl	8000574 <Transmit_Msg>
	}
}
 8000aec:	bf00      	nop
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	20000004 	.word	0x20000004
 8000af4:	20000140 	.word	0x20000140

08000af8 <Receive_Handler>:
  * @brief  Handles Recieved message and trigger lever lock , alarm , and data transmit
  * @param  None
  * @retval None
  */
void Receive_Handler()
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
	Receive_Msg();
 8000afc:	f7ff fd70 	bl	80005e0 <Receive_Msg>
	Lever_Lock();
 8000b00:	f7ff fcf8 	bl	80004f4 <Lever_Lock>
	Alarm_ON();
 8000b04:	f7ff fd16 	bl	8000534 <Alarm_ON>
}
 8000b08:	bf00      	nop
 8000b0a:	bd80      	pop	{r7, pc}

08000b0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b10:	f000 fcce 	bl	80014b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b14:	f000 f81e 	bl	8000b54 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b18:	f000 f9ea 	bl	8000ef0 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000b1c:	f000 f8d8 	bl	8000cd0 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000b20:	f000 f968 	bl	8000df4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000b24:	f000 f990 	bl	8000e48 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000b28:	f000 f9b8 	bl	8000e9c <MX_USART3_UART_Init>
  MX_USB_DEVICE_Init();
 8000b2c:	f008 fb16 	bl	800915c <MX_USB_DEVICE_Init>
  MX_UART4_Init();
 8000b30:	f000 f936 	bl	8000da0 <MX_UART4_Init>
  MX_ADC1_Init();
 8000b34:	f000 f87a 	bl	8000c2c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  //char buff1[20] = {0};
  //char buff2[20] = {0};
  // Start TIM1 with interrupt
  HAL_TIM_Base_Start_IT(&htim1); /* 15s Interrupt Timer Start */
 8000b38:	4805      	ldr	r0, [pc, #20]	@ (8000b50 <main+0x44>)
 8000b3a:	f003 fe99 	bl	8004870 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Start_Polling();  //Starts Polling Boom status along with Train passing and save the status
 8000b3e:	f7ff ff95 	bl	8000a6c <Start_Polling>
	  Send_If_Change();  //If any change is detected with the Previous state of any Boom or Train pass tx is enabled
 8000b42:	f7ff ff9f 	bl	8000a84 <Send_If_Change>
	  Receive_Handler();  //Used to Trigger lever lock and alarm based on rx data
 8000b46:	f7ff ffd7 	bl	8000af8 <Receive_Handler>
	  Start_Polling();  //Starts Polling Boom status along with Train passing and save the status
 8000b4a:	bf00      	nop
 8000b4c:	e7f7      	b.n	8000b3e <main+0x32>
 8000b4e:	bf00      	nop
 8000b50:	20000194 	.word	0x20000194

08000b54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b094      	sub	sp, #80	@ 0x50
 8000b58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b5a:	f107 031c 	add.w	r3, r7, #28
 8000b5e:	2234      	movs	r2, #52	@ 0x34
 8000b60:	2100      	movs	r1, #0
 8000b62:	4618      	mov	r0, r3
 8000b64:	f009 f8a0 	bl	8009ca8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b68:	f107 0308 	add.w	r3, r7, #8
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	601a      	str	r2, [r3, #0]
 8000b70:	605a      	str	r2, [r3, #4]
 8000b72:	609a      	str	r2, [r3, #8]
 8000b74:	60da      	str	r2, [r3, #12]
 8000b76:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b78:	2300      	movs	r3, #0
 8000b7a:	607b      	str	r3, [r7, #4]
 8000b7c:	4b29      	ldr	r3, [pc, #164]	@ (8000c24 <SystemClock_Config+0xd0>)
 8000b7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b80:	4a28      	ldr	r2, [pc, #160]	@ (8000c24 <SystemClock_Config+0xd0>)
 8000b82:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b86:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b88:	4b26      	ldr	r3, [pc, #152]	@ (8000c24 <SystemClock_Config+0xd0>)
 8000b8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b8c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b90:	607b      	str	r3, [r7, #4]
 8000b92:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000b94:	2300      	movs	r3, #0
 8000b96:	603b      	str	r3, [r7, #0]
 8000b98:	4b23      	ldr	r3, [pc, #140]	@ (8000c28 <SystemClock_Config+0xd4>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000ba0:	4a21      	ldr	r2, [pc, #132]	@ (8000c28 <SystemClock_Config+0xd4>)
 8000ba2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ba6:	6013      	str	r3, [r2, #0]
 8000ba8:	4b1f      	ldr	r3, [pc, #124]	@ (8000c28 <SystemClock_Config+0xd4>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000bb0:	603b      	str	r3, [r7, #0]
 8000bb2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000bb8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000bbc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bbe:	2302      	movs	r3, #2
 8000bc0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bc2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000bc6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000bc8:	2304      	movs	r3, #4
 8000bca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000bcc:	2348      	movs	r3, #72	@ 0x48
 8000bce:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000bd0:	2302      	movs	r3, #2
 8000bd2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000bd4:	2303      	movs	r3, #3
 8000bd6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000bd8:	2302      	movs	r3, #2
 8000bda:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bdc:	f107 031c 	add.w	r3, r7, #28
 8000be0:	4618      	mov	r0, r3
 8000be2:	f003 fb57 	bl	8004294 <HAL_RCC_OscConfig>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000bec:	f000 fa3c 	bl	8001068 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bf0:	230f      	movs	r3, #15
 8000bf2:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bf4:	2302      	movs	r3, #2
 8000bf6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000bfc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c00:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c02:	2300      	movs	r3, #0
 8000c04:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c06:	f107 0308 	add.w	r3, r7, #8
 8000c0a:	2102      	movs	r1, #2
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f002 fccd 	bl	80035ac <HAL_RCC_ClockConfig>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d001      	beq.n	8000c1c <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000c18:	f000 fa26 	bl	8001068 <Error_Handler>
  }
}
 8000c1c:	bf00      	nop
 8000c1e:	3750      	adds	r7, #80	@ 0x50
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	40023800 	.word	0x40023800
 8000c28:	40007000 	.word	0x40007000

08000c2c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b084      	sub	sp, #16
 8000c30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c32:	463b      	mov	r3, r7
 8000c34:	2200      	movs	r2, #0
 8000c36:	601a      	str	r2, [r3, #0]
 8000c38:	605a      	str	r2, [r3, #4]
 8000c3a:	609a      	str	r2, [r3, #8]
 8000c3c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000c3e:	4b21      	ldr	r3, [pc, #132]	@ (8000cc4 <MX_ADC1_Init+0x98>)
 8000c40:	4a21      	ldr	r2, [pc, #132]	@ (8000cc8 <MX_ADC1_Init+0x9c>)
 8000c42:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000c44:	4b1f      	ldr	r3, [pc, #124]	@ (8000cc4 <MX_ADC1_Init+0x98>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000c4a:	4b1e      	ldr	r3, [pc, #120]	@ (8000cc4 <MX_ADC1_Init+0x98>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000c50:	4b1c      	ldr	r3, [pc, #112]	@ (8000cc4 <MX_ADC1_Init+0x98>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000c56:	4b1b      	ldr	r3, [pc, #108]	@ (8000cc4 <MX_ADC1_Init+0x98>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c5c:	4b19      	ldr	r3, [pc, #100]	@ (8000cc4 <MX_ADC1_Init+0x98>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c64:	4b17      	ldr	r3, [pc, #92]	@ (8000cc4 <MX_ADC1_Init+0x98>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c6a:	4b16      	ldr	r3, [pc, #88]	@ (8000cc4 <MX_ADC1_Init+0x98>)
 8000c6c:	4a17      	ldr	r2, [pc, #92]	@ (8000ccc <MX_ADC1_Init+0xa0>)
 8000c6e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c70:	4b14      	ldr	r3, [pc, #80]	@ (8000cc4 <MX_ADC1_Init+0x98>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000c76:	4b13      	ldr	r3, [pc, #76]	@ (8000cc4 <MX_ADC1_Init+0x98>)
 8000c78:	2201      	movs	r2, #1
 8000c7a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000c7c:	4b11      	ldr	r3, [pc, #68]	@ (8000cc4 <MX_ADC1_Init+0x98>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c84:	4b0f      	ldr	r3, [pc, #60]	@ (8000cc4 <MX_ADC1_Init+0x98>)
 8000c86:	2201      	movs	r2, #1
 8000c88:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c8a:	480e      	ldr	r0, [pc, #56]	@ (8000cc4 <MX_ADC1_Init+0x98>)
 8000c8c:	f000 fca6 	bl	80015dc <HAL_ADC_Init>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d001      	beq.n	8000c9a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000c96:	f000 f9e7 	bl	8001068 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000c9a:	2304      	movs	r3, #4
 8000c9c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ca6:	463b      	mov	r3, r7
 8000ca8:	4619      	mov	r1, r3
 8000caa:	4806      	ldr	r0, [pc, #24]	@ (8000cc4 <MX_ADC1_Init+0x98>)
 8000cac:	f000 fcda 	bl	8001664 <HAL_ADC_ConfigChannel>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000cb6:	f000 f9d7 	bl	8001068 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000cba:	bf00      	nop
 8000cbc:	3710      	adds	r7, #16
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	2000014c 	.word	0x2000014c
 8000cc8:	40012000 	.word	0x40012000
 8000ccc:	0f000001 	.word	0x0f000001

08000cd0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b08c      	sub	sp, #48	@ 0x30
 8000cd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cd6:	f107 0320 	add.w	r3, r7, #32
 8000cda:	2200      	movs	r2, #0
 8000cdc:	601a      	str	r2, [r3, #0]
 8000cde:	605a      	str	r2, [r3, #4]
 8000ce0:	609a      	str	r2, [r3, #8]
 8000ce2:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000ce4:	f107 030c 	add.w	r3, r7, #12
 8000ce8:	2200      	movs	r2, #0
 8000cea:	601a      	str	r2, [r3, #0]
 8000cec:	605a      	str	r2, [r3, #4]
 8000cee:	609a      	str	r2, [r3, #8]
 8000cf0:	60da      	str	r2, [r3, #12]
 8000cf2:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cf4:	1d3b      	adds	r3, r7, #4
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	601a      	str	r2, [r3, #0]
 8000cfa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000cfc:	4b26      	ldr	r3, [pc, #152]	@ (8000d98 <MX_TIM1_Init+0xc8>)
 8000cfe:	4a27      	ldr	r2, [pc, #156]	@ (8000d9c <MX_TIM1_Init+0xcc>)
 8000d00:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16467;
 8000d02:	4b25      	ldr	r3, [pc, #148]	@ (8000d98 <MX_TIM1_Init+0xc8>)
 8000d04:	f244 0253 	movw	r2, #16467	@ 0x4053
 8000d08:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d0a:	4b23      	ldr	r3, [pc, #140]	@ (8000d98 <MX_TIM1_Init+0xc8>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000d10:	4b21      	ldr	r3, [pc, #132]	@ (8000d98 <MX_TIM1_Init+0xc8>)
 8000d12:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000d16:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d18:	4b1f      	ldr	r3, [pc, #124]	@ (8000d98 <MX_TIM1_Init+0xc8>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000d1e:	4b1e      	ldr	r3, [pc, #120]	@ (8000d98 <MX_TIM1_Init+0xc8>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d24:	4b1c      	ldr	r3, [pc, #112]	@ (8000d98 <MX_TIM1_Init+0xc8>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000d2a:	481b      	ldr	r0, [pc, #108]	@ (8000d98 <MX_TIM1_Init+0xc8>)
 8000d2c:	f003 fd50 	bl	80047d0 <HAL_TIM_Base_Init>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 8000d36:	f000 f997 	bl	8001068 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d3a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d3e:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000d40:	f107 0320 	add.w	r3, r7, #32
 8000d44:	4619      	mov	r1, r3
 8000d46:	4814      	ldr	r0, [pc, #80]	@ (8000d98 <MX_TIM1_Init+0xc8>)
 8000d48:	f003 fef2 	bl	8004b30 <HAL_TIM_ConfigClockSource>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d001      	beq.n	8000d56 <MX_TIM1_Init+0x86>
  {
    Error_Handler();
 8000d52:	f000 f989 	bl	8001068 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8000d56:	2300      	movs	r3, #0
 8000d58:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8000d5e:	f107 030c 	add.w	r3, r7, #12
 8000d62:	4619      	mov	r1, r3
 8000d64:	480c      	ldr	r0, [pc, #48]	@ (8000d98 <MX_TIM1_Init+0xc8>)
 8000d66:	f003 ffaa 	bl	8004cbe <HAL_TIM_SlaveConfigSynchro>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d001      	beq.n	8000d74 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000d70:	f000 f97a 	bl	8001068 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d74:	2300      	movs	r3, #0
 8000d76:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d7c:	1d3b      	adds	r3, r7, #4
 8000d7e:	4619      	mov	r1, r3
 8000d80:	4805      	ldr	r0, [pc, #20]	@ (8000d98 <MX_TIM1_Init+0xc8>)
 8000d82:	f004 f9e3 	bl	800514c <HAL_TIMEx_MasterConfigSynchronization>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d001      	beq.n	8000d90 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 8000d8c:	f000 f96c 	bl	8001068 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000d90:	bf00      	nop
 8000d92:	3730      	adds	r7, #48	@ 0x30
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	20000194 	.word	0x20000194
 8000d9c:	40010000 	.word	0x40010000

08000da0 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000da4:	4b11      	ldr	r3, [pc, #68]	@ (8000dec <MX_UART4_Init+0x4c>)
 8000da6:	4a12      	ldr	r2, [pc, #72]	@ (8000df0 <MX_UART4_Init+0x50>)
 8000da8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000daa:	4b10      	ldr	r3, [pc, #64]	@ (8000dec <MX_UART4_Init+0x4c>)
 8000dac:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000db0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000db2:	4b0e      	ldr	r3, [pc, #56]	@ (8000dec <MX_UART4_Init+0x4c>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000db8:	4b0c      	ldr	r3, [pc, #48]	@ (8000dec <MX_UART4_Init+0x4c>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000dbe:	4b0b      	ldr	r3, [pc, #44]	@ (8000dec <MX_UART4_Init+0x4c>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000dc4:	4b09      	ldr	r3, [pc, #36]	@ (8000dec <MX_UART4_Init+0x4c>)
 8000dc6:	220c      	movs	r2, #12
 8000dc8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dca:	4b08      	ldr	r3, [pc, #32]	@ (8000dec <MX_UART4_Init+0x4c>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dd0:	4b06      	ldr	r3, [pc, #24]	@ (8000dec <MX_UART4_Init+0x4c>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000dd6:	4805      	ldr	r0, [pc, #20]	@ (8000dec <MX_UART4_Init+0x4c>)
 8000dd8:	f004 fa48 	bl	800526c <HAL_UART_Init>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8000de2:	f000 f941 	bl	8001068 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000de6:	bf00      	nop
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	200001dc 	.word	0x200001dc
 8000df0:	40004c00 	.word	0x40004c00

08000df4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000df8:	4b11      	ldr	r3, [pc, #68]	@ (8000e40 <MX_USART1_UART_Init+0x4c>)
 8000dfa:	4a12      	ldr	r2, [pc, #72]	@ (8000e44 <MX_USART1_UART_Init+0x50>)
 8000dfc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000dfe:	4b10      	ldr	r3, [pc, #64]	@ (8000e40 <MX_USART1_UART_Init+0x4c>)
 8000e00:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000e04:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e06:	4b0e      	ldr	r3, [pc, #56]	@ (8000e40 <MX_USART1_UART_Init+0x4c>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e0c:	4b0c      	ldr	r3, [pc, #48]	@ (8000e40 <MX_USART1_UART_Init+0x4c>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e12:	4b0b      	ldr	r3, [pc, #44]	@ (8000e40 <MX_USART1_UART_Init+0x4c>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e18:	4b09      	ldr	r3, [pc, #36]	@ (8000e40 <MX_USART1_UART_Init+0x4c>)
 8000e1a:	220c      	movs	r2, #12
 8000e1c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e1e:	4b08      	ldr	r3, [pc, #32]	@ (8000e40 <MX_USART1_UART_Init+0x4c>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e24:	4b06      	ldr	r3, [pc, #24]	@ (8000e40 <MX_USART1_UART_Init+0x4c>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e2a:	4805      	ldr	r0, [pc, #20]	@ (8000e40 <MX_USART1_UART_Init+0x4c>)
 8000e2c:	f004 fa1e 	bl	800526c <HAL_UART_Init>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000e36:	f000 f917 	bl	8001068 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e3a:	bf00      	nop
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	20000224 	.word	0x20000224
 8000e44:	40011000 	.word	0x40011000

08000e48 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e4c:	4b11      	ldr	r3, [pc, #68]	@ (8000e94 <MX_USART2_UART_Init+0x4c>)
 8000e4e:	4a12      	ldr	r2, [pc, #72]	@ (8000e98 <MX_USART2_UART_Init+0x50>)
 8000e50:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e52:	4b10      	ldr	r3, [pc, #64]	@ (8000e94 <MX_USART2_UART_Init+0x4c>)
 8000e54:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000e58:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e5a:	4b0e      	ldr	r3, [pc, #56]	@ (8000e94 <MX_USART2_UART_Init+0x4c>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e60:	4b0c      	ldr	r3, [pc, #48]	@ (8000e94 <MX_USART2_UART_Init+0x4c>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e66:	4b0b      	ldr	r3, [pc, #44]	@ (8000e94 <MX_USART2_UART_Init+0x4c>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e6c:	4b09      	ldr	r3, [pc, #36]	@ (8000e94 <MX_USART2_UART_Init+0x4c>)
 8000e6e:	220c      	movs	r2, #12
 8000e70:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e72:	4b08      	ldr	r3, [pc, #32]	@ (8000e94 <MX_USART2_UART_Init+0x4c>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e78:	4b06      	ldr	r3, [pc, #24]	@ (8000e94 <MX_USART2_UART_Init+0x4c>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e7e:	4805      	ldr	r0, [pc, #20]	@ (8000e94 <MX_USART2_UART_Init+0x4c>)
 8000e80:	f004 f9f4 	bl	800526c <HAL_UART_Init>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d001      	beq.n	8000e8e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000e8a:	f000 f8ed 	bl	8001068 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e8e:	bf00      	nop
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	2000026c 	.word	0x2000026c
 8000e98:	40004400 	.word	0x40004400

08000e9c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ea0:	4b11      	ldr	r3, [pc, #68]	@ (8000ee8 <MX_USART3_UART_Init+0x4c>)
 8000ea2:	4a12      	ldr	r2, [pc, #72]	@ (8000eec <MX_USART3_UART_Init+0x50>)
 8000ea4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000ea6:	4b10      	ldr	r3, [pc, #64]	@ (8000ee8 <MX_USART3_UART_Init+0x4c>)
 8000ea8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000eac:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000eae:	4b0e      	ldr	r3, [pc, #56]	@ (8000ee8 <MX_USART3_UART_Init+0x4c>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000eb4:	4b0c      	ldr	r3, [pc, #48]	@ (8000ee8 <MX_USART3_UART_Init+0x4c>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000eba:	4b0b      	ldr	r3, [pc, #44]	@ (8000ee8 <MX_USART3_UART_Init+0x4c>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ec0:	4b09      	ldr	r3, [pc, #36]	@ (8000ee8 <MX_USART3_UART_Init+0x4c>)
 8000ec2:	220c      	movs	r2, #12
 8000ec4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ec6:	4b08      	ldr	r3, [pc, #32]	@ (8000ee8 <MX_USART3_UART_Init+0x4c>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ecc:	4b06      	ldr	r3, [pc, #24]	@ (8000ee8 <MX_USART3_UART_Init+0x4c>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000ed2:	4805      	ldr	r0, [pc, #20]	@ (8000ee8 <MX_USART3_UART_Init+0x4c>)
 8000ed4:	f004 f9ca 	bl	800526c <HAL_UART_Init>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d001      	beq.n	8000ee2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000ede:	f000 f8c3 	bl	8001068 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000ee2:	bf00      	nop
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	200002b4 	.word	0x200002b4
 8000eec:	40004800 	.word	0x40004800

08000ef0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b08a      	sub	sp, #40	@ 0x28
 8000ef4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef6:	f107 0314 	add.w	r3, r7, #20
 8000efa:	2200      	movs	r2, #0
 8000efc:	601a      	str	r2, [r3, #0]
 8000efe:	605a      	str	r2, [r3, #4]
 8000f00:	609a      	str	r2, [r3, #8]
 8000f02:	60da      	str	r2, [r3, #12]
 8000f04:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f06:	2300      	movs	r3, #0
 8000f08:	613b      	str	r3, [r7, #16]
 8000f0a:	4b52      	ldr	r3, [pc, #328]	@ (8001054 <MX_GPIO_Init+0x164>)
 8000f0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f0e:	4a51      	ldr	r2, [pc, #324]	@ (8001054 <MX_GPIO_Init+0x164>)
 8000f10:	f043 0304 	orr.w	r3, r3, #4
 8000f14:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f16:	4b4f      	ldr	r3, [pc, #316]	@ (8001054 <MX_GPIO_Init+0x164>)
 8000f18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f1a:	f003 0304 	and.w	r3, r3, #4
 8000f1e:	613b      	str	r3, [r7, #16]
 8000f20:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f22:	2300      	movs	r3, #0
 8000f24:	60fb      	str	r3, [r7, #12]
 8000f26:	4b4b      	ldr	r3, [pc, #300]	@ (8001054 <MX_GPIO_Init+0x164>)
 8000f28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f2a:	4a4a      	ldr	r2, [pc, #296]	@ (8001054 <MX_GPIO_Init+0x164>)
 8000f2c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f30:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f32:	4b48      	ldr	r3, [pc, #288]	@ (8001054 <MX_GPIO_Init+0x164>)
 8000f34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f3a:	60fb      	str	r3, [r7, #12]
 8000f3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f3e:	2300      	movs	r3, #0
 8000f40:	60bb      	str	r3, [r7, #8]
 8000f42:	4b44      	ldr	r3, [pc, #272]	@ (8001054 <MX_GPIO_Init+0x164>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f46:	4a43      	ldr	r2, [pc, #268]	@ (8001054 <MX_GPIO_Init+0x164>)
 8000f48:	f043 0301 	orr.w	r3, r3, #1
 8000f4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f4e:	4b41      	ldr	r3, [pc, #260]	@ (8001054 <MX_GPIO_Init+0x164>)
 8000f50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f52:	f003 0301 	and.w	r3, r3, #1
 8000f56:	60bb      	str	r3, [r7, #8]
 8000f58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	607b      	str	r3, [r7, #4]
 8000f5e:	4b3d      	ldr	r3, [pc, #244]	@ (8001054 <MX_GPIO_Init+0x164>)
 8000f60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f62:	4a3c      	ldr	r2, [pc, #240]	@ (8001054 <MX_GPIO_Init+0x164>)
 8000f64:	f043 0302 	orr.w	r3, r3, #2
 8000f68:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f6a:	4b3a      	ldr	r3, [pc, #232]	@ (8001054 <MX_GPIO_Init+0x164>)
 8000f6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f6e:	f003 0302 	and.w	r3, r3, #2
 8000f72:	607b      	str	r3, [r7, #4]
 8000f74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f76:	2300      	movs	r3, #0
 8000f78:	603b      	str	r3, [r7, #0]
 8000f7a:	4b36      	ldr	r3, [pc, #216]	@ (8001054 <MX_GPIO_Init+0x164>)
 8000f7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f7e:	4a35      	ldr	r2, [pc, #212]	@ (8001054 <MX_GPIO_Init+0x164>)
 8000f80:	f043 0308 	orr.w	r3, r3, #8
 8000f84:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f86:	4b33      	ldr	r3, [pc, #204]	@ (8001054 <MX_GPIO_Init+0x164>)
 8000f88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f8a:	f003 0308 	and.w	r3, r3, #8
 8000f8e:	603b      	str	r3, [r7, #0]
 8000f90:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AT1_GPIO_Port, AT1_Pin, GPIO_PIN_RESET);
 8000f92:	2200      	movs	r2, #0
 8000f94:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000f98:	482f      	ldr	r0, [pc, #188]	@ (8001058 <MX_GPIO_Init+0x168>)
 8000f9a:	f001 f84f 	bl	800203c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, AT_Pin|LT_Pin, GPIO_PIN_RESET);
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	f44f 51a0 	mov.w	r1, #5120	@ 0x1400
 8000fa4:	482d      	ldr	r0, [pc, #180]	@ (800105c <MX_GPIO_Init+0x16c>)
 8000fa6:	f001 f849 	bl	800203c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BOOM1_LS22_Pin BOOM1_LS11_Pin BOOM1_LS12_Pin */
  GPIO_InitStruct.Pin = BOOM1_LS22_Pin|BOOM1_LS11_Pin|BOOM1_LS12_Pin;
 8000faa:	f242 030c 	movw	r3, #8204	@ 0x200c
 8000fae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fb8:	f107 0314 	add.w	r3, r7, #20
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	4827      	ldr	r0, [pc, #156]	@ (800105c <MX_GPIO_Init+0x16c>)
 8000fc0:	f000 fe90 	bl	8001ce4 <HAL_GPIO_Init>

  /*Configure GPIO pins : BOOM2_LS22_Pin BOOM2_LS11_Pin BOOM2_LS12_Pin BOOM2_LS21_Pin
                           BOOM1_LS21_Pin */
  GPIO_InitStruct.Pin = BOOM2_LS22_Pin|BOOM2_LS11_Pin|BOOM2_LS12_Pin|BOOM2_LS21_Pin
 8000fc4:	f24e 0382 	movw	r3, #57474	@ 0xe082
 8000fc8:	617b      	str	r3, [r7, #20]
                          |BOOM1_LS21_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fd2:	f107 0314 	add.w	r3, r7, #20
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	4821      	ldr	r0, [pc, #132]	@ (8001060 <MX_GPIO_Init+0x170>)
 8000fda:	f000 fe83 	bl	8001ce4 <HAL_GPIO_Init>

  /*Configure GPIO pin : AT1_Pin */
  GPIO_InitStruct.Pin = AT1_Pin;
 8000fde:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000fe2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fec:	2300      	movs	r3, #0
 8000fee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(AT1_GPIO_Port, &GPIO_InitStruct);
 8000ff0:	f107 0314 	add.w	r3, r7, #20
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	4818      	ldr	r0, [pc, #96]	@ (8001058 <MX_GPIO_Init+0x168>)
 8000ff8:	f000 fe74 	bl	8001ce4 <HAL_GPIO_Init>

  /*Configure GPIO pins : AT_Pin LT_Pin */
  GPIO_InitStruct.Pin = AT_Pin|LT_Pin;
 8000ffc:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001000:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001002:	2301      	movs	r3, #1
 8001004:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001006:	2300      	movs	r3, #0
 8001008:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800100a:	2300      	movs	r3, #0
 800100c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800100e:	f107 0314 	add.w	r3, r7, #20
 8001012:	4619      	mov	r1, r3
 8001014:	4811      	ldr	r0, [pc, #68]	@ (800105c <MX_GPIO_Init+0x16c>)
 8001016:	f000 fe65 	bl	8001ce4 <HAL_GPIO_Init>

  /*Configure GPIO pin : L_FB1_Pin */
  GPIO_InitStruct.Pin = L_FB1_Pin;
 800101a:	2304      	movs	r3, #4
 800101c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800101e:	2300      	movs	r3, #0
 8001020:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001022:	2300      	movs	r3, #0
 8001024:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(L_FB1_GPIO_Port, &GPIO_InitStruct);
 8001026:	f107 0314 	add.w	r3, r7, #20
 800102a:	4619      	mov	r1, r3
 800102c:	480d      	ldr	r0, [pc, #52]	@ (8001064 <MX_GPIO_Init+0x174>)
 800102e:	f000 fe59 	bl	8001ce4 <HAL_GPIO_Init>

  /*Configure GPIO pin : L_FB2_Pin */
  GPIO_InitStruct.Pin = L_FB2_Pin;
 8001032:	2308      	movs	r3, #8
 8001034:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001036:	2300      	movs	r3, #0
 8001038:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103a:	2300      	movs	r3, #0
 800103c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(L_FB2_GPIO_Port, &GPIO_InitStruct);
 800103e:	f107 0314 	add.w	r3, r7, #20
 8001042:	4619      	mov	r1, r3
 8001044:	4806      	ldr	r0, [pc, #24]	@ (8001060 <MX_GPIO_Init+0x170>)
 8001046:	f000 fe4d 	bl	8001ce4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800104a:	bf00      	nop
 800104c:	3728      	adds	r7, #40	@ 0x28
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	40023800 	.word	0x40023800
 8001058:	40020000 	.word	0x40020000
 800105c:	40020800 	.word	0x40020800
 8001060:	40020400 	.word	0x40020400
 8001064:	40020c00 	.word	0x40020c00

08001068 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800106c:	b672      	cpsid	i
}
 800106e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001070:	bf00      	nop
 8001072:	e7fd      	b.n	8001070 <Error_Handler+0x8>

08001074 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800107a:	2300      	movs	r3, #0
 800107c:	607b      	str	r3, [r7, #4]
 800107e:	4b10      	ldr	r3, [pc, #64]	@ (80010c0 <HAL_MspInit+0x4c>)
 8001080:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001082:	4a0f      	ldr	r2, [pc, #60]	@ (80010c0 <HAL_MspInit+0x4c>)
 8001084:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001088:	6453      	str	r3, [r2, #68]	@ 0x44
 800108a:	4b0d      	ldr	r3, [pc, #52]	@ (80010c0 <HAL_MspInit+0x4c>)
 800108c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800108e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001092:	607b      	str	r3, [r7, #4]
 8001094:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001096:	2300      	movs	r3, #0
 8001098:	603b      	str	r3, [r7, #0]
 800109a:	4b09      	ldr	r3, [pc, #36]	@ (80010c0 <HAL_MspInit+0x4c>)
 800109c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800109e:	4a08      	ldr	r2, [pc, #32]	@ (80010c0 <HAL_MspInit+0x4c>)
 80010a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80010a6:	4b06      	ldr	r3, [pc, #24]	@ (80010c0 <HAL_MspInit+0x4c>)
 80010a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010ae:	603b      	str	r3, [r7, #0]
 80010b0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80010b2:	2007      	movs	r0, #7
 80010b4:	f000 fdd4 	bl	8001c60 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010b8:	bf00      	nop
 80010ba:	3708      	adds	r7, #8
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	40023800 	.word	0x40023800

080010c4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b08a      	sub	sp, #40	@ 0x28
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010cc:	f107 0314 	add.w	r3, r7, #20
 80010d0:	2200      	movs	r2, #0
 80010d2:	601a      	str	r2, [r3, #0]
 80010d4:	605a      	str	r2, [r3, #4]
 80010d6:	609a      	str	r2, [r3, #8]
 80010d8:	60da      	str	r2, [r3, #12]
 80010da:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4a17      	ldr	r2, [pc, #92]	@ (8001140 <HAL_ADC_MspInit+0x7c>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d127      	bne.n	8001136 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80010e6:	2300      	movs	r3, #0
 80010e8:	613b      	str	r3, [r7, #16]
 80010ea:	4b16      	ldr	r3, [pc, #88]	@ (8001144 <HAL_ADC_MspInit+0x80>)
 80010ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010ee:	4a15      	ldr	r2, [pc, #84]	@ (8001144 <HAL_ADC_MspInit+0x80>)
 80010f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80010f6:	4b13      	ldr	r3, [pc, #76]	@ (8001144 <HAL_ADC_MspInit+0x80>)
 80010f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80010fe:	613b      	str	r3, [r7, #16]
 8001100:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001102:	2300      	movs	r3, #0
 8001104:	60fb      	str	r3, [r7, #12]
 8001106:	4b0f      	ldr	r3, [pc, #60]	@ (8001144 <HAL_ADC_MspInit+0x80>)
 8001108:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800110a:	4a0e      	ldr	r2, [pc, #56]	@ (8001144 <HAL_ADC_MspInit+0x80>)
 800110c:	f043 0301 	orr.w	r3, r3, #1
 8001110:	6313      	str	r3, [r2, #48]	@ 0x30
 8001112:	4b0c      	ldr	r3, [pc, #48]	@ (8001144 <HAL_ADC_MspInit+0x80>)
 8001114:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001116:	f003 0301 	and.w	r3, r3, #1
 800111a:	60fb      	str	r3, [r7, #12]
 800111c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = BOOM1_ADC_Pin|BOOM2_ADC_Pin;
 800111e:	2330      	movs	r3, #48	@ 0x30
 8001120:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001122:	2303      	movs	r3, #3
 8001124:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001126:	2300      	movs	r3, #0
 8001128:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800112a:	f107 0314 	add.w	r3, r7, #20
 800112e:	4619      	mov	r1, r3
 8001130:	4805      	ldr	r0, [pc, #20]	@ (8001148 <HAL_ADC_MspInit+0x84>)
 8001132:	f000 fdd7 	bl	8001ce4 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001136:	bf00      	nop
 8001138:	3728      	adds	r7, #40	@ 0x28
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	40012000 	.word	0x40012000
 8001144:	40023800 	.word	0x40023800
 8001148:	40020000 	.word	0x40020000

0800114c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b084      	sub	sp, #16
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4a0e      	ldr	r2, [pc, #56]	@ (8001194 <HAL_TIM_Base_MspInit+0x48>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d115      	bne.n	800118a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800115e:	2300      	movs	r3, #0
 8001160:	60fb      	str	r3, [r7, #12]
 8001162:	4b0d      	ldr	r3, [pc, #52]	@ (8001198 <HAL_TIM_Base_MspInit+0x4c>)
 8001164:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001166:	4a0c      	ldr	r2, [pc, #48]	@ (8001198 <HAL_TIM_Base_MspInit+0x4c>)
 8001168:	f043 0301 	orr.w	r3, r3, #1
 800116c:	6453      	str	r3, [r2, #68]	@ 0x44
 800116e:	4b0a      	ldr	r3, [pc, #40]	@ (8001198 <HAL_TIM_Base_MspInit+0x4c>)
 8001170:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001172:	f003 0301 	and.w	r3, r3, #1
 8001176:	60fb      	str	r3, [r7, #12]
 8001178:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800117a:	2200      	movs	r2, #0
 800117c:	2100      	movs	r1, #0
 800117e:	2019      	movs	r0, #25
 8001180:	f000 fd79 	bl	8001c76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001184:	2019      	movs	r0, #25
 8001186:	f000 fd92 	bl	8001cae <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 800118a:	bf00      	nop
 800118c:	3710      	adds	r7, #16
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	40010000 	.word	0x40010000
 8001198:	40023800 	.word	0x40023800

0800119c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b090      	sub	sp, #64	@ 0x40
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80011a8:	2200      	movs	r2, #0
 80011aa:	601a      	str	r2, [r3, #0]
 80011ac:	605a      	str	r2, [r3, #4]
 80011ae:	609a      	str	r2, [r3, #8]
 80011b0:	60da      	str	r2, [r3, #12]
 80011b2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a74      	ldr	r2, [pc, #464]	@ (800138c <HAL_UART_MspInit+0x1f0>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d12c      	bne.n	8001218 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80011be:	2300      	movs	r3, #0
 80011c0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80011c2:	4b73      	ldr	r3, [pc, #460]	@ (8001390 <HAL_UART_MspInit+0x1f4>)
 80011c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011c6:	4a72      	ldr	r2, [pc, #456]	@ (8001390 <HAL_UART_MspInit+0x1f4>)
 80011c8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80011cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80011ce:	4b70      	ldr	r3, [pc, #448]	@ (8001390 <HAL_UART_MspInit+0x1f4>)
 80011d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011d2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80011d6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80011d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011da:	2300      	movs	r3, #0
 80011dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80011de:	4b6c      	ldr	r3, [pc, #432]	@ (8001390 <HAL_UART_MspInit+0x1f4>)
 80011e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011e2:	4a6b      	ldr	r2, [pc, #428]	@ (8001390 <HAL_UART_MspInit+0x1f4>)
 80011e4:	f043 0301 	orr.w	r3, r3, #1
 80011e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80011ea:	4b69      	ldr	r3, [pc, #420]	@ (8001390 <HAL_UART_MspInit+0x1f4>)
 80011ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ee:	f003 0301 	and.w	r3, r3, #1
 80011f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80011f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|S1_L2_Pin;
 80011f6:	2303      	movs	r3, #3
 80011f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011fa:	2302      	movs	r3, #2
 80011fc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fe:	2300      	movs	r3, #0
 8001200:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001202:	2303      	movs	r3, #3
 8001204:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001206:	2308      	movs	r3, #8
 8001208:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800120a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800120e:	4619      	mov	r1, r3
 8001210:	4860      	ldr	r0, [pc, #384]	@ (8001394 <HAL_UART_MspInit+0x1f8>)
 8001212:	f000 fd67 	bl	8001ce4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001216:	e0b5      	b.n	8001384 <HAL_UART_MspInit+0x1e8>
  else if(huart->Instance==USART1)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a5e      	ldr	r2, [pc, #376]	@ (8001398 <HAL_UART_MspInit+0x1fc>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d12d      	bne.n	800127e <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001222:	2300      	movs	r3, #0
 8001224:	623b      	str	r3, [r7, #32]
 8001226:	4b5a      	ldr	r3, [pc, #360]	@ (8001390 <HAL_UART_MspInit+0x1f4>)
 8001228:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800122a:	4a59      	ldr	r2, [pc, #356]	@ (8001390 <HAL_UART_MspInit+0x1f4>)
 800122c:	f043 0310 	orr.w	r3, r3, #16
 8001230:	6453      	str	r3, [r2, #68]	@ 0x44
 8001232:	4b57      	ldr	r3, [pc, #348]	@ (8001390 <HAL_UART_MspInit+0x1f4>)
 8001234:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001236:	f003 0310 	and.w	r3, r3, #16
 800123a:	623b      	str	r3, [r7, #32]
 800123c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800123e:	2300      	movs	r3, #0
 8001240:	61fb      	str	r3, [r7, #28]
 8001242:	4b53      	ldr	r3, [pc, #332]	@ (8001390 <HAL_UART_MspInit+0x1f4>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001246:	4a52      	ldr	r2, [pc, #328]	@ (8001390 <HAL_UART_MspInit+0x1f4>)
 8001248:	f043 0301 	orr.w	r3, r3, #1
 800124c:	6313      	str	r3, [r2, #48]	@ 0x30
 800124e:	4b50      	ldr	r3, [pc, #320]	@ (8001390 <HAL_UART_MspInit+0x1f4>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001252:	f003 0301 	and.w	r3, r3, #1
 8001256:	61fb      	str	r3, [r7, #28]
 8001258:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_9|S2_L1_Pin;
 800125a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800125e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001260:	2302      	movs	r3, #2
 8001262:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001264:	2300      	movs	r3, #0
 8001266:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001268:	2303      	movs	r3, #3
 800126a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800126c:	2307      	movs	r3, #7
 800126e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001270:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001274:	4619      	mov	r1, r3
 8001276:	4847      	ldr	r0, [pc, #284]	@ (8001394 <HAL_UART_MspInit+0x1f8>)
 8001278:	f000 fd34 	bl	8001ce4 <HAL_GPIO_Init>
}
 800127c:	e082      	b.n	8001384 <HAL_UART_MspInit+0x1e8>
  else if(huart->Instance==USART2)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4a46      	ldr	r2, [pc, #280]	@ (800139c <HAL_UART_MspInit+0x200>)
 8001284:	4293      	cmp	r3, r2
 8001286:	d12c      	bne.n	80012e2 <HAL_UART_MspInit+0x146>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001288:	2300      	movs	r3, #0
 800128a:	61bb      	str	r3, [r7, #24]
 800128c:	4b40      	ldr	r3, [pc, #256]	@ (8001390 <HAL_UART_MspInit+0x1f4>)
 800128e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001290:	4a3f      	ldr	r2, [pc, #252]	@ (8001390 <HAL_UART_MspInit+0x1f4>)
 8001292:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001296:	6413      	str	r3, [r2, #64]	@ 0x40
 8001298:	4b3d      	ldr	r3, [pc, #244]	@ (8001390 <HAL_UART_MspInit+0x1f4>)
 800129a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800129c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012a0:	61bb      	str	r3, [r7, #24]
 80012a2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012a4:	2300      	movs	r3, #0
 80012a6:	617b      	str	r3, [r7, #20]
 80012a8:	4b39      	ldr	r3, [pc, #228]	@ (8001390 <HAL_UART_MspInit+0x1f4>)
 80012aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ac:	4a38      	ldr	r2, [pc, #224]	@ (8001390 <HAL_UART_MspInit+0x1f4>)
 80012ae:	f043 0301 	orr.w	r3, r3, #1
 80012b2:	6313      	str	r3, [r2, #48]	@ 0x30
 80012b4:	4b36      	ldr	r3, [pc, #216]	@ (8001390 <HAL_UART_MspInit+0x1f4>)
 80012b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012b8:	f003 0301 	and.w	r3, r3, #1
 80012bc:	617b      	str	r3, [r7, #20]
 80012be:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|S2_L2_Pin;
 80012c0:	230c      	movs	r3, #12
 80012c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c4:	2302      	movs	r3, #2
 80012c6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c8:	2300      	movs	r3, #0
 80012ca:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012cc:	2303      	movs	r3, #3
 80012ce:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80012d0:	2307      	movs	r3, #7
 80012d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012d4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80012d8:	4619      	mov	r1, r3
 80012da:	482e      	ldr	r0, [pc, #184]	@ (8001394 <HAL_UART_MspInit+0x1f8>)
 80012dc:	f000 fd02 	bl	8001ce4 <HAL_GPIO_Init>
}
 80012e0:	e050      	b.n	8001384 <HAL_UART_MspInit+0x1e8>
  else if(huart->Instance==USART3)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4a2e      	ldr	r2, [pc, #184]	@ (80013a0 <HAL_UART_MspInit+0x204>)
 80012e8:	4293      	cmp	r3, r2
 80012ea:	d14b      	bne.n	8001384 <HAL_UART_MspInit+0x1e8>
    __HAL_RCC_USART3_CLK_ENABLE();
 80012ec:	2300      	movs	r3, #0
 80012ee:	613b      	str	r3, [r7, #16]
 80012f0:	4b27      	ldr	r3, [pc, #156]	@ (8001390 <HAL_UART_MspInit+0x1f4>)
 80012f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012f4:	4a26      	ldr	r2, [pc, #152]	@ (8001390 <HAL_UART_MspInit+0x1f4>)
 80012f6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80012fa:	6413      	str	r3, [r2, #64]	@ 0x40
 80012fc:	4b24      	ldr	r3, [pc, #144]	@ (8001390 <HAL_UART_MspInit+0x1f4>)
 80012fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001300:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001304:	613b      	str	r3, [r7, #16]
 8001306:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001308:	2300      	movs	r3, #0
 800130a:	60fb      	str	r3, [r7, #12]
 800130c:	4b20      	ldr	r3, [pc, #128]	@ (8001390 <HAL_UART_MspInit+0x1f4>)
 800130e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001310:	4a1f      	ldr	r2, [pc, #124]	@ (8001390 <HAL_UART_MspInit+0x1f4>)
 8001312:	f043 0302 	orr.w	r3, r3, #2
 8001316:	6313      	str	r3, [r2, #48]	@ 0x30
 8001318:	4b1d      	ldr	r3, [pc, #116]	@ (8001390 <HAL_UART_MspInit+0x1f4>)
 800131a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800131c:	f003 0302 	and.w	r3, r3, #2
 8001320:	60fb      	str	r3, [r7, #12]
 8001322:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001324:	2300      	movs	r3, #0
 8001326:	60bb      	str	r3, [r7, #8]
 8001328:	4b19      	ldr	r3, [pc, #100]	@ (8001390 <HAL_UART_MspInit+0x1f4>)
 800132a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800132c:	4a18      	ldr	r2, [pc, #96]	@ (8001390 <HAL_UART_MspInit+0x1f4>)
 800132e:	f043 0304 	orr.w	r3, r3, #4
 8001332:	6313      	str	r3, [r2, #48]	@ 0x30
 8001334:	4b16      	ldr	r3, [pc, #88]	@ (8001390 <HAL_UART_MspInit+0x1f4>)
 8001336:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001338:	f003 0304 	and.w	r3, r3, #4
 800133c:	60bb      	str	r3, [r7, #8]
 800133e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001340:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001344:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001346:	2302      	movs	r3, #2
 8001348:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134a:	2300      	movs	r3, #0
 800134c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800134e:	2303      	movs	r3, #3
 8001350:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001352:	2307      	movs	r3, #7
 8001354:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001356:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800135a:	4619      	mov	r1, r3
 800135c:	4811      	ldr	r0, [pc, #68]	@ (80013a4 <HAL_UART_MspInit+0x208>)
 800135e:	f000 fcc1 	bl	8001ce4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = S1_L1_Pin;
 8001362:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001366:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001368:	2302      	movs	r3, #2
 800136a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136c:	2300      	movs	r3, #0
 800136e:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001370:	2303      	movs	r3, #3
 8001372:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001374:	2307      	movs	r3, #7
 8001376:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(S1_L1_GPIO_Port, &GPIO_InitStruct);
 8001378:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800137c:	4619      	mov	r1, r3
 800137e:	480a      	ldr	r0, [pc, #40]	@ (80013a8 <HAL_UART_MspInit+0x20c>)
 8001380:	f000 fcb0 	bl	8001ce4 <HAL_GPIO_Init>
}
 8001384:	bf00      	nop
 8001386:	3740      	adds	r7, #64	@ 0x40
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	40004c00 	.word	0x40004c00
 8001390:	40023800 	.word	0x40023800
 8001394:	40020000 	.word	0x40020000
 8001398:	40011000 	.word	0x40011000
 800139c:	40004400 	.word	0x40004400
 80013a0:	40004800 	.word	0x40004800
 80013a4:	40020400 	.word	0x40020400
 80013a8:	40020800 	.word	0x40020800

080013ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013b0:	bf00      	nop
 80013b2:	e7fd      	b.n	80013b0 <NMI_Handler+0x4>

080013b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013b8:	bf00      	nop
 80013ba:	e7fd      	b.n	80013b8 <HardFault_Handler+0x4>

080013bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013c0:	bf00      	nop
 80013c2:	e7fd      	b.n	80013c0 <MemManage_Handler+0x4>

080013c4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013c8:	bf00      	nop
 80013ca:	e7fd      	b.n	80013c8 <BusFault_Handler+0x4>

080013cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013d0:	bf00      	nop
 80013d2:	e7fd      	b.n	80013d0 <UsageFault_Handler+0x4>

080013d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013d8:	bf00      	nop
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr

080013e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013e2:	b480      	push	{r7}
 80013e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013e6:	bf00      	nop
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr

080013f0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013f4:	bf00      	nop
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr

080013fe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013fe:	b580      	push	{r7, lr}
 8001400:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001402:	f000 f8a7 	bl	8001554 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001406:	bf00      	nop
 8001408:	bd80      	pop	{r7, pc}
	...

0800140c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  Transmit_Msg(); /* Transmit existing Parsed Data */
 8001410:	f7ff f8b0 	bl	8000574 <Transmit_Msg>

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001414:	4802      	ldr	r0, [pc, #8]	@ (8001420 <TIM1_UP_TIM10_IRQHandler+0x14>)
 8001416:	f003 fa9b 	bl	8004950 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800141a:	bf00      	nop
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	20000194 	.word	0x20000194

08001424 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001428:	4802      	ldr	r0, [pc, #8]	@ (8001434 <OTG_FS_IRQHandler+0x10>)
 800142a:	f000 ff6b 	bl	8002304 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800142e:	bf00      	nop
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	200017e0 	.word	0x200017e0

08001438 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800143c:	4b06      	ldr	r3, [pc, #24]	@ (8001458 <SystemInit+0x20>)
 800143e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001442:	4a05      	ldr	r2, [pc, #20]	@ (8001458 <SystemInit+0x20>)
 8001444:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001448:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800144c:	bf00      	nop
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop
 8001458:	e000ed00 	.word	0xe000ed00

0800145c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800145c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001494 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001460:	f7ff ffea 	bl	8001438 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001464:	480c      	ldr	r0, [pc, #48]	@ (8001498 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001466:	490d      	ldr	r1, [pc, #52]	@ (800149c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001468:	4a0d      	ldr	r2, [pc, #52]	@ (80014a0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800146a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800146c:	e002      	b.n	8001474 <LoopCopyDataInit>

0800146e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800146e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001470:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001472:	3304      	adds	r3, #4

08001474 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001474:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001476:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001478:	d3f9      	bcc.n	800146e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800147a:	4a0a      	ldr	r2, [pc, #40]	@ (80014a4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800147c:	4c0a      	ldr	r4, [pc, #40]	@ (80014a8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800147e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001480:	e001      	b.n	8001486 <LoopFillZerobss>

08001482 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001482:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001484:	3204      	adds	r2, #4

08001486 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001486:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001488:	d3fb      	bcc.n	8001482 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800148a:	f008 fc15 	bl	8009cb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800148e:	f7ff fb3d 	bl	8000b0c <main>
  bx  lr    
 8001492:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001494:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001498:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800149c:	2000011c 	.word	0x2000011c
  ldr r2, =_sidata
 80014a0:	08009d88 	.word	0x08009d88
  ldr r2, =_sbss
 80014a4:	2000011c 	.word	0x2000011c
  ldr r4, =_ebss
 80014a8:	20001ee4 	.word	0x20001ee4

080014ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014ac:	e7fe      	b.n	80014ac <ADC_IRQHandler>
	...

080014b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80014b4:	4b0e      	ldr	r3, [pc, #56]	@ (80014f0 <HAL_Init+0x40>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a0d      	ldr	r2, [pc, #52]	@ (80014f0 <HAL_Init+0x40>)
 80014ba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80014be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80014c0:	4b0b      	ldr	r3, [pc, #44]	@ (80014f0 <HAL_Init+0x40>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a0a      	ldr	r2, [pc, #40]	@ (80014f0 <HAL_Init+0x40>)
 80014c6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80014ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014cc:	4b08      	ldr	r3, [pc, #32]	@ (80014f0 <HAL_Init+0x40>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a07      	ldr	r2, [pc, #28]	@ (80014f0 <HAL_Init+0x40>)
 80014d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014d8:	2003      	movs	r0, #3
 80014da:	f000 fbc1 	bl	8001c60 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014de:	2000      	movs	r0, #0
 80014e0:	f000 f808 	bl	80014f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014e4:	f7ff fdc6 	bl	8001074 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014e8:	2300      	movs	r3, #0
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	40023c00 	.word	0x40023c00

080014f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014fc:	4b12      	ldr	r3, [pc, #72]	@ (8001548 <HAL_InitTick+0x54>)
 80014fe:	681a      	ldr	r2, [r3, #0]
 8001500:	4b12      	ldr	r3, [pc, #72]	@ (800154c <HAL_InitTick+0x58>)
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	4619      	mov	r1, r3
 8001506:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800150a:	fbb3 f3f1 	udiv	r3, r3, r1
 800150e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001512:	4618      	mov	r0, r3
 8001514:	f000 fbd9 	bl	8001cca <HAL_SYSTICK_Config>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d001      	beq.n	8001522 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800151e:	2301      	movs	r3, #1
 8001520:	e00e      	b.n	8001540 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2b0f      	cmp	r3, #15
 8001526:	d80a      	bhi.n	800153e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001528:	2200      	movs	r2, #0
 800152a:	6879      	ldr	r1, [r7, #4]
 800152c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001530:	f000 fba1 	bl	8001c76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001534:	4a06      	ldr	r2, [pc, #24]	@ (8001550 <HAL_InitTick+0x5c>)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800153a:	2300      	movs	r3, #0
 800153c:	e000      	b.n	8001540 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800153e:	2301      	movs	r3, #1
}
 8001540:	4618      	mov	r0, r3
 8001542:	3708      	adds	r7, #8
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}
 8001548:	20000010 	.word	0x20000010
 800154c:	20000018 	.word	0x20000018
 8001550:	20000014 	.word	0x20000014

08001554 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001558:	4b06      	ldr	r3, [pc, #24]	@ (8001574 <HAL_IncTick+0x20>)
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	461a      	mov	r2, r3
 800155e:	4b06      	ldr	r3, [pc, #24]	@ (8001578 <HAL_IncTick+0x24>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4413      	add	r3, r2
 8001564:	4a04      	ldr	r2, [pc, #16]	@ (8001578 <HAL_IncTick+0x24>)
 8001566:	6013      	str	r3, [r2, #0]
}
 8001568:	bf00      	nop
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
 8001572:	bf00      	nop
 8001574:	20000018 	.word	0x20000018
 8001578:	200002fc 	.word	0x200002fc

0800157c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  return uwTick;
 8001580:	4b03      	ldr	r3, [pc, #12]	@ (8001590 <HAL_GetTick+0x14>)
 8001582:	681b      	ldr	r3, [r3, #0]
}
 8001584:	4618      	mov	r0, r3
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr
 800158e:	bf00      	nop
 8001590:	200002fc 	.word	0x200002fc

08001594 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b084      	sub	sp, #16
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800159c:	f7ff ffee 	bl	800157c <HAL_GetTick>
 80015a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80015ac:	d005      	beq.n	80015ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015ae:	4b0a      	ldr	r3, [pc, #40]	@ (80015d8 <HAL_Delay+0x44>)
 80015b0:	781b      	ldrb	r3, [r3, #0]
 80015b2:	461a      	mov	r2, r3
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	4413      	add	r3, r2
 80015b8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80015ba:	bf00      	nop
 80015bc:	f7ff ffde 	bl	800157c <HAL_GetTick>
 80015c0:	4602      	mov	r2, r0
 80015c2:	68bb      	ldr	r3, [r7, #8]
 80015c4:	1ad3      	subs	r3, r2, r3
 80015c6:	68fa      	ldr	r2, [r7, #12]
 80015c8:	429a      	cmp	r2, r3
 80015ca:	d8f7      	bhi.n	80015bc <HAL_Delay+0x28>
  {
  }
}
 80015cc:	bf00      	nop
 80015ce:	bf00      	nop
 80015d0:	3710      	adds	r7, #16
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	20000018 	.word	0x20000018

080015dc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b084      	sub	sp, #16
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015e4:	2300      	movs	r3, #0
 80015e6:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d101      	bne.n	80015f2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80015ee:	2301      	movs	r3, #1
 80015f0:	e033      	b.n	800165a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d109      	bne.n	800160e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80015fa:	6878      	ldr	r0, [r7, #4]
 80015fc:	f7ff fd62 	bl	80010c4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2200      	movs	r2, #0
 8001604:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2200      	movs	r2, #0
 800160a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001612:	f003 0310 	and.w	r3, r3, #16
 8001616:	2b00      	cmp	r3, #0
 8001618:	d118      	bne.n	800164c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800161e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001622:	f023 0302 	bic.w	r3, r3, #2
 8001626:	f043 0202 	orr.w	r2, r3, #2
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800162e:	6878      	ldr	r0, [r7, #4]
 8001630:	f000 f94a 	bl	80018c8 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2200      	movs	r2, #0
 8001638:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800163e:	f023 0303 	bic.w	r3, r3, #3
 8001642:	f043 0201 	orr.w	r2, r3, #1
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	641a      	str	r2, [r3, #64]	@ 0x40
 800164a:	e001      	b.n	8001650 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800164c:	2301      	movs	r3, #1
 800164e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2200      	movs	r2, #0
 8001654:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001658:	7bfb      	ldrb	r3, [r7, #15]
}
 800165a:	4618      	mov	r0, r3
 800165c:	3710      	adds	r7, #16
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
	...

08001664 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001664:	b480      	push	{r7}
 8001666:	b085      	sub	sp, #20
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
 800166c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800166e:	2300      	movs	r3, #0
 8001670:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001678:	2b01      	cmp	r3, #1
 800167a:	d101      	bne.n	8001680 <HAL_ADC_ConfigChannel+0x1c>
 800167c:	2302      	movs	r3, #2
 800167e:	e113      	b.n	80018a8 <HAL_ADC_ConfigChannel+0x244>
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2201      	movs	r2, #1
 8001684:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	2b09      	cmp	r3, #9
 800168e:	d925      	bls.n	80016dc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	68d9      	ldr	r1, [r3, #12]
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	b29b      	uxth	r3, r3
 800169c:	461a      	mov	r2, r3
 800169e:	4613      	mov	r3, r2
 80016a0:	005b      	lsls	r3, r3, #1
 80016a2:	4413      	add	r3, r2
 80016a4:	3b1e      	subs	r3, #30
 80016a6:	2207      	movs	r2, #7
 80016a8:	fa02 f303 	lsl.w	r3, r2, r3
 80016ac:	43da      	mvns	r2, r3
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	400a      	ands	r2, r1
 80016b4:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	68d9      	ldr	r1, [r3, #12]
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	689a      	ldr	r2, [r3, #8]
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	b29b      	uxth	r3, r3
 80016c6:	4618      	mov	r0, r3
 80016c8:	4603      	mov	r3, r0
 80016ca:	005b      	lsls	r3, r3, #1
 80016cc:	4403      	add	r3, r0
 80016ce:	3b1e      	subs	r3, #30
 80016d0:	409a      	lsls	r2, r3
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	430a      	orrs	r2, r1
 80016d8:	60da      	str	r2, [r3, #12]
 80016da:	e022      	b.n	8001722 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	6919      	ldr	r1, [r3, #16]
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	b29b      	uxth	r3, r3
 80016e8:	461a      	mov	r2, r3
 80016ea:	4613      	mov	r3, r2
 80016ec:	005b      	lsls	r3, r3, #1
 80016ee:	4413      	add	r3, r2
 80016f0:	2207      	movs	r2, #7
 80016f2:	fa02 f303 	lsl.w	r3, r2, r3
 80016f6:	43da      	mvns	r2, r3
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	400a      	ands	r2, r1
 80016fe:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	6919      	ldr	r1, [r3, #16]
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	689a      	ldr	r2, [r3, #8]
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	b29b      	uxth	r3, r3
 8001710:	4618      	mov	r0, r3
 8001712:	4603      	mov	r3, r0
 8001714:	005b      	lsls	r3, r3, #1
 8001716:	4403      	add	r3, r0
 8001718:	409a      	lsls	r2, r3
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	430a      	orrs	r2, r1
 8001720:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	2b06      	cmp	r3, #6
 8001728:	d824      	bhi.n	8001774 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	685a      	ldr	r2, [r3, #4]
 8001734:	4613      	mov	r3, r2
 8001736:	009b      	lsls	r3, r3, #2
 8001738:	4413      	add	r3, r2
 800173a:	3b05      	subs	r3, #5
 800173c:	221f      	movs	r2, #31
 800173e:	fa02 f303 	lsl.w	r3, r2, r3
 8001742:	43da      	mvns	r2, r3
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	400a      	ands	r2, r1
 800174a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	b29b      	uxth	r3, r3
 8001758:	4618      	mov	r0, r3
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	685a      	ldr	r2, [r3, #4]
 800175e:	4613      	mov	r3, r2
 8001760:	009b      	lsls	r3, r3, #2
 8001762:	4413      	add	r3, r2
 8001764:	3b05      	subs	r3, #5
 8001766:	fa00 f203 	lsl.w	r2, r0, r3
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	430a      	orrs	r2, r1
 8001770:	635a      	str	r2, [r3, #52]	@ 0x34
 8001772:	e04c      	b.n	800180e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	2b0c      	cmp	r3, #12
 800177a:	d824      	bhi.n	80017c6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	685a      	ldr	r2, [r3, #4]
 8001786:	4613      	mov	r3, r2
 8001788:	009b      	lsls	r3, r3, #2
 800178a:	4413      	add	r3, r2
 800178c:	3b23      	subs	r3, #35	@ 0x23
 800178e:	221f      	movs	r2, #31
 8001790:	fa02 f303 	lsl.w	r3, r2, r3
 8001794:	43da      	mvns	r2, r3
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	400a      	ands	r2, r1
 800179c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	b29b      	uxth	r3, r3
 80017aa:	4618      	mov	r0, r3
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	685a      	ldr	r2, [r3, #4]
 80017b0:	4613      	mov	r3, r2
 80017b2:	009b      	lsls	r3, r3, #2
 80017b4:	4413      	add	r3, r2
 80017b6:	3b23      	subs	r3, #35	@ 0x23
 80017b8:	fa00 f203 	lsl.w	r2, r0, r3
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	430a      	orrs	r2, r1
 80017c2:	631a      	str	r2, [r3, #48]	@ 0x30
 80017c4:	e023      	b.n	800180e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	685a      	ldr	r2, [r3, #4]
 80017d0:	4613      	mov	r3, r2
 80017d2:	009b      	lsls	r3, r3, #2
 80017d4:	4413      	add	r3, r2
 80017d6:	3b41      	subs	r3, #65	@ 0x41
 80017d8:	221f      	movs	r2, #31
 80017da:	fa02 f303 	lsl.w	r3, r2, r3
 80017de:	43da      	mvns	r2, r3
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	400a      	ands	r2, r1
 80017e6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	b29b      	uxth	r3, r3
 80017f4:	4618      	mov	r0, r3
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	685a      	ldr	r2, [r3, #4]
 80017fa:	4613      	mov	r3, r2
 80017fc:	009b      	lsls	r3, r3, #2
 80017fe:	4413      	add	r3, r2
 8001800:	3b41      	subs	r3, #65	@ 0x41
 8001802:	fa00 f203 	lsl.w	r2, r0, r3
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	430a      	orrs	r2, r1
 800180c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800180e:	4b29      	ldr	r3, [pc, #164]	@ (80018b4 <HAL_ADC_ConfigChannel+0x250>)
 8001810:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a28      	ldr	r2, [pc, #160]	@ (80018b8 <HAL_ADC_ConfigChannel+0x254>)
 8001818:	4293      	cmp	r3, r2
 800181a:	d10f      	bne.n	800183c <HAL_ADC_ConfigChannel+0x1d8>
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	2b12      	cmp	r3, #18
 8001822:	d10b      	bne.n	800183c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a1d      	ldr	r2, [pc, #116]	@ (80018b8 <HAL_ADC_ConfigChannel+0x254>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d12b      	bne.n	800189e <HAL_ADC_ConfigChannel+0x23a>
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4a1c      	ldr	r2, [pc, #112]	@ (80018bc <HAL_ADC_ConfigChannel+0x258>)
 800184c:	4293      	cmp	r3, r2
 800184e:	d003      	beq.n	8001858 <HAL_ADC_ConfigChannel+0x1f4>
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	2b11      	cmp	r3, #17
 8001856:	d122      	bne.n	800189e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a11      	ldr	r2, [pc, #68]	@ (80018bc <HAL_ADC_ConfigChannel+0x258>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d111      	bne.n	800189e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800187a:	4b11      	ldr	r3, [pc, #68]	@ (80018c0 <HAL_ADC_ConfigChannel+0x25c>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4a11      	ldr	r2, [pc, #68]	@ (80018c4 <HAL_ADC_ConfigChannel+0x260>)
 8001880:	fba2 2303 	umull	r2, r3, r2, r3
 8001884:	0c9a      	lsrs	r2, r3, #18
 8001886:	4613      	mov	r3, r2
 8001888:	009b      	lsls	r3, r3, #2
 800188a:	4413      	add	r3, r2
 800188c:	005b      	lsls	r3, r3, #1
 800188e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001890:	e002      	b.n	8001898 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001892:	68bb      	ldr	r3, [r7, #8]
 8001894:	3b01      	subs	r3, #1
 8001896:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001898:	68bb      	ldr	r3, [r7, #8]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d1f9      	bne.n	8001892 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2200      	movs	r2, #0
 80018a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80018a6:	2300      	movs	r3, #0
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	3714      	adds	r7, #20
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr
 80018b4:	40012300 	.word	0x40012300
 80018b8:	40012000 	.word	0x40012000
 80018bc:	10000012 	.word	0x10000012
 80018c0:	20000010 	.word	0x20000010
 80018c4:	431bde83 	.word	0x431bde83

080018c8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b085      	sub	sp, #20
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80018d0:	4b79      	ldr	r3, [pc, #484]	@ (8001ab8 <ADC_Init+0x1f0>)
 80018d2:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	685a      	ldr	r2, [r3, #4]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	431a      	orrs	r2, r3
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	685a      	ldr	r2, [r3, #4]
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80018fc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	6859      	ldr	r1, [r3, #4]
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	691b      	ldr	r3, [r3, #16]
 8001908:	021a      	lsls	r2, r3, #8
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	430a      	orrs	r2, r1
 8001910:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	685a      	ldr	r2, [r3, #4]
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001920:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	6859      	ldr	r1, [r3, #4]
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	689a      	ldr	r2, [r3, #8]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	430a      	orrs	r2, r1
 8001932:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	689a      	ldr	r2, [r3, #8]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001942:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	6899      	ldr	r1, [r3, #8]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	68da      	ldr	r2, [r3, #12]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	430a      	orrs	r2, r1
 8001954:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800195a:	4a58      	ldr	r2, [pc, #352]	@ (8001abc <ADC_Init+0x1f4>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d022      	beq.n	80019a6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	689a      	ldr	r2, [r3, #8]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800196e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	6899      	ldr	r1, [r3, #8]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	430a      	orrs	r2, r1
 8001980:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	689a      	ldr	r2, [r3, #8]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001990:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	6899      	ldr	r1, [r3, #8]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	430a      	orrs	r2, r1
 80019a2:	609a      	str	r2, [r3, #8]
 80019a4:	e00f      	b.n	80019c6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	689a      	ldr	r2, [r3, #8]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80019b4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	689a      	ldr	r2, [r3, #8]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80019c4:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	689a      	ldr	r2, [r3, #8]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f022 0202 	bic.w	r2, r2, #2
 80019d4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	6899      	ldr	r1, [r3, #8]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	7e1b      	ldrb	r3, [r3, #24]
 80019e0:	005a      	lsls	r2, r3, #1
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	430a      	orrs	r2, r1
 80019e8:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d01b      	beq.n	8001a2c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	685a      	ldr	r2, [r3, #4]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001a02:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	685a      	ldr	r2, [r3, #4]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001a12:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	6859      	ldr	r1, [r3, #4]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a1e:	3b01      	subs	r3, #1
 8001a20:	035a      	lsls	r2, r3, #13
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	430a      	orrs	r2, r1
 8001a28:	605a      	str	r2, [r3, #4]
 8001a2a:	e007      	b.n	8001a3c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	685a      	ldr	r2, [r3, #4]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001a3a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001a4a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	69db      	ldr	r3, [r3, #28]
 8001a56:	3b01      	subs	r3, #1
 8001a58:	051a      	lsls	r2, r3, #20
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	430a      	orrs	r2, r1
 8001a60:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	689a      	ldr	r2, [r3, #8]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001a70:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	6899      	ldr	r1, [r3, #8]
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001a7e:	025a      	lsls	r2, r3, #9
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	430a      	orrs	r2, r1
 8001a86:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	689a      	ldr	r2, [r3, #8]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001a96:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	6899      	ldr	r1, [r3, #8]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	695b      	ldr	r3, [r3, #20]
 8001aa2:	029a      	lsls	r2, r3, #10
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	430a      	orrs	r2, r1
 8001aaa:	609a      	str	r2, [r3, #8]
}
 8001aac:	bf00      	nop
 8001aae:	3714      	adds	r7, #20
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr
 8001ab8:	40012300 	.word	0x40012300
 8001abc:	0f000001 	.word	0x0f000001

08001ac0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b085      	sub	sp, #20
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	f003 0307 	and.w	r3, r3, #7
 8001ace:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ad0:	4b0c      	ldr	r3, [pc, #48]	@ (8001b04 <__NVIC_SetPriorityGrouping+0x44>)
 8001ad2:	68db      	ldr	r3, [r3, #12]
 8001ad4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ad6:	68ba      	ldr	r2, [r7, #8]
 8001ad8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001adc:	4013      	ands	r3, r2
 8001ade:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ae8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001aec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001af0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001af2:	4a04      	ldr	r2, [pc, #16]	@ (8001b04 <__NVIC_SetPriorityGrouping+0x44>)
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	60d3      	str	r3, [r2, #12]
}
 8001af8:	bf00      	nop
 8001afa:	3714      	adds	r7, #20
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr
 8001b04:	e000ed00 	.word	0xe000ed00

08001b08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b0c:	4b04      	ldr	r3, [pc, #16]	@ (8001b20 <__NVIC_GetPriorityGrouping+0x18>)
 8001b0e:	68db      	ldr	r3, [r3, #12]
 8001b10:	0a1b      	lsrs	r3, r3, #8
 8001b12:	f003 0307 	and.w	r3, r3, #7
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr
 8001b20:	e000ed00 	.word	0xe000ed00

08001b24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b083      	sub	sp, #12
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	db0b      	blt.n	8001b4e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b36:	79fb      	ldrb	r3, [r7, #7]
 8001b38:	f003 021f 	and.w	r2, r3, #31
 8001b3c:	4907      	ldr	r1, [pc, #28]	@ (8001b5c <__NVIC_EnableIRQ+0x38>)
 8001b3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b42:	095b      	lsrs	r3, r3, #5
 8001b44:	2001      	movs	r0, #1
 8001b46:	fa00 f202 	lsl.w	r2, r0, r2
 8001b4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001b4e:	bf00      	nop
 8001b50:	370c      	adds	r7, #12
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr
 8001b5a:	bf00      	nop
 8001b5c:	e000e100 	.word	0xe000e100

08001b60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b083      	sub	sp, #12
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	4603      	mov	r3, r0
 8001b68:	6039      	str	r1, [r7, #0]
 8001b6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	db0a      	blt.n	8001b8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	b2da      	uxtb	r2, r3
 8001b78:	490c      	ldr	r1, [pc, #48]	@ (8001bac <__NVIC_SetPriority+0x4c>)
 8001b7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b7e:	0112      	lsls	r2, r2, #4
 8001b80:	b2d2      	uxtb	r2, r2
 8001b82:	440b      	add	r3, r1
 8001b84:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b88:	e00a      	b.n	8001ba0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	b2da      	uxtb	r2, r3
 8001b8e:	4908      	ldr	r1, [pc, #32]	@ (8001bb0 <__NVIC_SetPriority+0x50>)
 8001b90:	79fb      	ldrb	r3, [r7, #7]
 8001b92:	f003 030f 	and.w	r3, r3, #15
 8001b96:	3b04      	subs	r3, #4
 8001b98:	0112      	lsls	r2, r2, #4
 8001b9a:	b2d2      	uxtb	r2, r2
 8001b9c:	440b      	add	r3, r1
 8001b9e:	761a      	strb	r2, [r3, #24]
}
 8001ba0:	bf00      	nop
 8001ba2:	370c      	adds	r7, #12
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001baa:	4770      	bx	lr
 8001bac:	e000e100 	.word	0xe000e100
 8001bb0:	e000ed00 	.word	0xe000ed00

08001bb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b089      	sub	sp, #36	@ 0x24
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	60f8      	str	r0, [r7, #12]
 8001bbc:	60b9      	str	r1, [r7, #8]
 8001bbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	f003 0307 	and.w	r3, r3, #7
 8001bc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bc8:	69fb      	ldr	r3, [r7, #28]
 8001bca:	f1c3 0307 	rsb	r3, r3, #7
 8001bce:	2b04      	cmp	r3, #4
 8001bd0:	bf28      	it	cs
 8001bd2:	2304      	movcs	r3, #4
 8001bd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bd6:	69fb      	ldr	r3, [r7, #28]
 8001bd8:	3304      	adds	r3, #4
 8001bda:	2b06      	cmp	r3, #6
 8001bdc:	d902      	bls.n	8001be4 <NVIC_EncodePriority+0x30>
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	3b03      	subs	r3, #3
 8001be2:	e000      	b.n	8001be6 <NVIC_EncodePriority+0x32>
 8001be4:	2300      	movs	r3, #0
 8001be6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001be8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001bec:	69bb      	ldr	r3, [r7, #24]
 8001bee:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf2:	43da      	mvns	r2, r3
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	401a      	ands	r2, r3
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bfc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	fa01 f303 	lsl.w	r3, r1, r3
 8001c06:	43d9      	mvns	r1, r3
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c0c:	4313      	orrs	r3, r2
         );
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3724      	adds	r7, #36	@ 0x24
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr
	...

08001c1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b082      	sub	sp, #8
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	3b01      	subs	r3, #1
 8001c28:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c2c:	d301      	bcc.n	8001c32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e00f      	b.n	8001c52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c32:	4a0a      	ldr	r2, [pc, #40]	@ (8001c5c <SysTick_Config+0x40>)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	3b01      	subs	r3, #1
 8001c38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c3a:	210f      	movs	r1, #15
 8001c3c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001c40:	f7ff ff8e 	bl	8001b60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c44:	4b05      	ldr	r3, [pc, #20]	@ (8001c5c <SysTick_Config+0x40>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c4a:	4b04      	ldr	r3, [pc, #16]	@ (8001c5c <SysTick_Config+0x40>)
 8001c4c:	2207      	movs	r2, #7
 8001c4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c50:	2300      	movs	r3, #0
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	3708      	adds	r7, #8
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	e000e010 	.word	0xe000e010

08001c60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c68:	6878      	ldr	r0, [r7, #4]
 8001c6a:	f7ff ff29 	bl	8001ac0 <__NVIC_SetPriorityGrouping>
}
 8001c6e:	bf00      	nop
 8001c70:	3708      	adds	r7, #8
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}

08001c76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c76:	b580      	push	{r7, lr}
 8001c78:	b086      	sub	sp, #24
 8001c7a:	af00      	add	r7, sp, #0
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	60b9      	str	r1, [r7, #8]
 8001c80:	607a      	str	r2, [r7, #4]
 8001c82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c84:	2300      	movs	r3, #0
 8001c86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c88:	f7ff ff3e 	bl	8001b08 <__NVIC_GetPriorityGrouping>
 8001c8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c8e:	687a      	ldr	r2, [r7, #4]
 8001c90:	68b9      	ldr	r1, [r7, #8]
 8001c92:	6978      	ldr	r0, [r7, #20]
 8001c94:	f7ff ff8e 	bl	8001bb4 <NVIC_EncodePriority>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c9e:	4611      	mov	r1, r2
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f7ff ff5d 	bl	8001b60 <__NVIC_SetPriority>
}
 8001ca6:	bf00      	nop
 8001ca8:	3718      	adds	r7, #24
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}

08001cae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cae:	b580      	push	{r7, lr}
 8001cb0:	b082      	sub	sp, #8
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f7ff ff31 	bl	8001b24 <__NVIC_EnableIRQ>
}
 8001cc2:	bf00      	nop
 8001cc4:	3708      	adds	r7, #8
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}

08001cca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cca:	b580      	push	{r7, lr}
 8001ccc:	b082      	sub	sp, #8
 8001cce:	af00      	add	r7, sp, #0
 8001cd0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cd2:	6878      	ldr	r0, [r7, #4]
 8001cd4:	f7ff ffa2 	bl	8001c1c <SysTick_Config>
 8001cd8:	4603      	mov	r3, r0
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	3708      	adds	r7, #8
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
	...

08001ce4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b089      	sub	sp, #36	@ 0x24
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
 8001cec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	61fb      	str	r3, [r7, #28]
 8001cfe:	e165      	b.n	8001fcc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d00:	2201      	movs	r2, #1
 8001d02:	69fb      	ldr	r3, [r7, #28]
 8001d04:	fa02 f303 	lsl.w	r3, r2, r3
 8001d08:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	697a      	ldr	r2, [r7, #20]
 8001d10:	4013      	ands	r3, r2
 8001d12:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d14:	693a      	ldr	r2, [r7, #16]
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	f040 8154 	bne.w	8001fc6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	f003 0303 	and.w	r3, r3, #3
 8001d26:	2b01      	cmp	r3, #1
 8001d28:	d005      	beq.n	8001d36 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d32:	2b02      	cmp	r3, #2
 8001d34:	d130      	bne.n	8001d98 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	689b      	ldr	r3, [r3, #8]
 8001d3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d3c:	69fb      	ldr	r3, [r7, #28]
 8001d3e:	005b      	lsls	r3, r3, #1
 8001d40:	2203      	movs	r2, #3
 8001d42:	fa02 f303 	lsl.w	r3, r2, r3
 8001d46:	43db      	mvns	r3, r3
 8001d48:	69ba      	ldr	r2, [r7, #24]
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	68da      	ldr	r2, [r3, #12]
 8001d52:	69fb      	ldr	r3, [r7, #28]
 8001d54:	005b      	lsls	r3, r3, #1
 8001d56:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5a:	69ba      	ldr	r2, [r7, #24]
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	69ba      	ldr	r2, [r7, #24]
 8001d64:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	69fb      	ldr	r3, [r7, #28]
 8001d70:	fa02 f303 	lsl.w	r3, r2, r3
 8001d74:	43db      	mvns	r3, r3
 8001d76:	69ba      	ldr	r2, [r7, #24]
 8001d78:	4013      	ands	r3, r2
 8001d7a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	091b      	lsrs	r3, r3, #4
 8001d82:	f003 0201 	and.w	r2, r3, #1
 8001d86:	69fb      	ldr	r3, [r7, #28]
 8001d88:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8c:	69ba      	ldr	r2, [r7, #24]
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	69ba      	ldr	r2, [r7, #24]
 8001d96:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	f003 0303 	and.w	r3, r3, #3
 8001da0:	2b03      	cmp	r3, #3
 8001da2:	d017      	beq.n	8001dd4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	68db      	ldr	r3, [r3, #12]
 8001da8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001daa:	69fb      	ldr	r3, [r7, #28]
 8001dac:	005b      	lsls	r3, r3, #1
 8001dae:	2203      	movs	r2, #3
 8001db0:	fa02 f303 	lsl.w	r3, r2, r3
 8001db4:	43db      	mvns	r3, r3
 8001db6:	69ba      	ldr	r2, [r7, #24]
 8001db8:	4013      	ands	r3, r2
 8001dba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	689a      	ldr	r2, [r3, #8]
 8001dc0:	69fb      	ldr	r3, [r7, #28]
 8001dc2:	005b      	lsls	r3, r3, #1
 8001dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc8:	69ba      	ldr	r2, [r7, #24]
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	69ba      	ldr	r2, [r7, #24]
 8001dd2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	f003 0303 	and.w	r3, r3, #3
 8001ddc:	2b02      	cmp	r3, #2
 8001dde:	d123      	bne.n	8001e28 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001de0:	69fb      	ldr	r3, [r7, #28]
 8001de2:	08da      	lsrs	r2, r3, #3
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	3208      	adds	r2, #8
 8001de8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001dee:	69fb      	ldr	r3, [r7, #28]
 8001df0:	f003 0307 	and.w	r3, r3, #7
 8001df4:	009b      	lsls	r3, r3, #2
 8001df6:	220f      	movs	r2, #15
 8001df8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfc:	43db      	mvns	r3, r3
 8001dfe:	69ba      	ldr	r2, [r7, #24]
 8001e00:	4013      	ands	r3, r2
 8001e02:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	691a      	ldr	r2, [r3, #16]
 8001e08:	69fb      	ldr	r3, [r7, #28]
 8001e0a:	f003 0307 	and.w	r3, r3, #7
 8001e0e:	009b      	lsls	r3, r3, #2
 8001e10:	fa02 f303 	lsl.w	r3, r2, r3
 8001e14:	69ba      	ldr	r2, [r7, #24]
 8001e16:	4313      	orrs	r3, r2
 8001e18:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e1a:	69fb      	ldr	r3, [r7, #28]
 8001e1c:	08da      	lsrs	r2, r3, #3
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	3208      	adds	r2, #8
 8001e22:	69b9      	ldr	r1, [r7, #24]
 8001e24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e2e:	69fb      	ldr	r3, [r7, #28]
 8001e30:	005b      	lsls	r3, r3, #1
 8001e32:	2203      	movs	r2, #3
 8001e34:	fa02 f303 	lsl.w	r3, r2, r3
 8001e38:	43db      	mvns	r3, r3
 8001e3a:	69ba      	ldr	r2, [r7, #24]
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	f003 0203 	and.w	r2, r3, #3
 8001e48:	69fb      	ldr	r3, [r7, #28]
 8001e4a:	005b      	lsls	r3, r3, #1
 8001e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e50:	69ba      	ldr	r2, [r7, #24]
 8001e52:	4313      	orrs	r3, r2
 8001e54:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	69ba      	ldr	r2, [r7, #24]
 8001e5a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	f000 80ae 	beq.w	8001fc6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	60fb      	str	r3, [r7, #12]
 8001e6e:	4b5d      	ldr	r3, [pc, #372]	@ (8001fe4 <HAL_GPIO_Init+0x300>)
 8001e70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e72:	4a5c      	ldr	r2, [pc, #368]	@ (8001fe4 <HAL_GPIO_Init+0x300>)
 8001e74:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e78:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e7a:	4b5a      	ldr	r3, [pc, #360]	@ (8001fe4 <HAL_GPIO_Init+0x300>)
 8001e7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e7e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e82:	60fb      	str	r3, [r7, #12]
 8001e84:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e86:	4a58      	ldr	r2, [pc, #352]	@ (8001fe8 <HAL_GPIO_Init+0x304>)
 8001e88:	69fb      	ldr	r3, [r7, #28]
 8001e8a:	089b      	lsrs	r3, r3, #2
 8001e8c:	3302      	adds	r3, #2
 8001e8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e92:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e94:	69fb      	ldr	r3, [r7, #28]
 8001e96:	f003 0303 	and.w	r3, r3, #3
 8001e9a:	009b      	lsls	r3, r3, #2
 8001e9c:	220f      	movs	r2, #15
 8001e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea2:	43db      	mvns	r3, r3
 8001ea4:	69ba      	ldr	r2, [r7, #24]
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	4a4f      	ldr	r2, [pc, #316]	@ (8001fec <HAL_GPIO_Init+0x308>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d025      	beq.n	8001efe <HAL_GPIO_Init+0x21a>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	4a4e      	ldr	r2, [pc, #312]	@ (8001ff0 <HAL_GPIO_Init+0x30c>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d01f      	beq.n	8001efa <HAL_GPIO_Init+0x216>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	4a4d      	ldr	r2, [pc, #308]	@ (8001ff4 <HAL_GPIO_Init+0x310>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d019      	beq.n	8001ef6 <HAL_GPIO_Init+0x212>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	4a4c      	ldr	r2, [pc, #304]	@ (8001ff8 <HAL_GPIO_Init+0x314>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d013      	beq.n	8001ef2 <HAL_GPIO_Init+0x20e>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	4a4b      	ldr	r2, [pc, #300]	@ (8001ffc <HAL_GPIO_Init+0x318>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d00d      	beq.n	8001eee <HAL_GPIO_Init+0x20a>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	4a4a      	ldr	r2, [pc, #296]	@ (8002000 <HAL_GPIO_Init+0x31c>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d007      	beq.n	8001eea <HAL_GPIO_Init+0x206>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	4a49      	ldr	r2, [pc, #292]	@ (8002004 <HAL_GPIO_Init+0x320>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d101      	bne.n	8001ee6 <HAL_GPIO_Init+0x202>
 8001ee2:	2306      	movs	r3, #6
 8001ee4:	e00c      	b.n	8001f00 <HAL_GPIO_Init+0x21c>
 8001ee6:	2307      	movs	r3, #7
 8001ee8:	e00a      	b.n	8001f00 <HAL_GPIO_Init+0x21c>
 8001eea:	2305      	movs	r3, #5
 8001eec:	e008      	b.n	8001f00 <HAL_GPIO_Init+0x21c>
 8001eee:	2304      	movs	r3, #4
 8001ef0:	e006      	b.n	8001f00 <HAL_GPIO_Init+0x21c>
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	e004      	b.n	8001f00 <HAL_GPIO_Init+0x21c>
 8001ef6:	2302      	movs	r3, #2
 8001ef8:	e002      	b.n	8001f00 <HAL_GPIO_Init+0x21c>
 8001efa:	2301      	movs	r3, #1
 8001efc:	e000      	b.n	8001f00 <HAL_GPIO_Init+0x21c>
 8001efe:	2300      	movs	r3, #0
 8001f00:	69fa      	ldr	r2, [r7, #28]
 8001f02:	f002 0203 	and.w	r2, r2, #3
 8001f06:	0092      	lsls	r2, r2, #2
 8001f08:	4093      	lsls	r3, r2
 8001f0a:	69ba      	ldr	r2, [r7, #24]
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f10:	4935      	ldr	r1, [pc, #212]	@ (8001fe8 <HAL_GPIO_Init+0x304>)
 8001f12:	69fb      	ldr	r3, [r7, #28]
 8001f14:	089b      	lsrs	r3, r3, #2
 8001f16:	3302      	adds	r3, #2
 8001f18:	69ba      	ldr	r2, [r7, #24]
 8001f1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f1e:	4b3a      	ldr	r3, [pc, #232]	@ (8002008 <HAL_GPIO_Init+0x324>)
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	43db      	mvns	r3, r3
 8001f28:	69ba      	ldr	r2, [r7, #24]
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d003      	beq.n	8001f42 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001f3a:	69ba      	ldr	r2, [r7, #24]
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f42:	4a31      	ldr	r2, [pc, #196]	@ (8002008 <HAL_GPIO_Init+0x324>)
 8001f44:	69bb      	ldr	r3, [r7, #24]
 8001f46:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f48:	4b2f      	ldr	r3, [pc, #188]	@ (8002008 <HAL_GPIO_Init+0x324>)
 8001f4a:	68db      	ldr	r3, [r3, #12]
 8001f4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	43db      	mvns	r3, r3
 8001f52:	69ba      	ldr	r2, [r7, #24]
 8001f54:	4013      	ands	r3, r2
 8001f56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d003      	beq.n	8001f6c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001f64:	69ba      	ldr	r2, [r7, #24]
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f6c:	4a26      	ldr	r2, [pc, #152]	@ (8002008 <HAL_GPIO_Init+0x324>)
 8001f6e:	69bb      	ldr	r3, [r7, #24]
 8001f70:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f72:	4b25      	ldr	r3, [pc, #148]	@ (8002008 <HAL_GPIO_Init+0x324>)
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	43db      	mvns	r3, r3
 8001f7c:	69ba      	ldr	r2, [r7, #24]
 8001f7e:	4013      	ands	r3, r2
 8001f80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d003      	beq.n	8001f96 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001f8e:	69ba      	ldr	r2, [r7, #24]
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	4313      	orrs	r3, r2
 8001f94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f96:	4a1c      	ldr	r2, [pc, #112]	@ (8002008 <HAL_GPIO_Init+0x324>)
 8001f98:	69bb      	ldr	r3, [r7, #24]
 8001f9a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f9c:	4b1a      	ldr	r3, [pc, #104]	@ (8002008 <HAL_GPIO_Init+0x324>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	43db      	mvns	r3, r3
 8001fa6:	69ba      	ldr	r2, [r7, #24]
 8001fa8:	4013      	ands	r3, r2
 8001faa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d003      	beq.n	8001fc0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001fb8:	69ba      	ldr	r2, [r7, #24]
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001fc0:	4a11      	ldr	r2, [pc, #68]	@ (8002008 <HAL_GPIO_Init+0x324>)
 8001fc2:	69bb      	ldr	r3, [r7, #24]
 8001fc4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fc6:	69fb      	ldr	r3, [r7, #28]
 8001fc8:	3301      	adds	r3, #1
 8001fca:	61fb      	str	r3, [r7, #28]
 8001fcc:	69fb      	ldr	r3, [r7, #28]
 8001fce:	2b0f      	cmp	r3, #15
 8001fd0:	f67f ae96 	bls.w	8001d00 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001fd4:	bf00      	nop
 8001fd6:	bf00      	nop
 8001fd8:	3724      	adds	r7, #36	@ 0x24
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr
 8001fe2:	bf00      	nop
 8001fe4:	40023800 	.word	0x40023800
 8001fe8:	40013800 	.word	0x40013800
 8001fec:	40020000 	.word	0x40020000
 8001ff0:	40020400 	.word	0x40020400
 8001ff4:	40020800 	.word	0x40020800
 8001ff8:	40020c00 	.word	0x40020c00
 8001ffc:	40021000 	.word	0x40021000
 8002000:	40021400 	.word	0x40021400
 8002004:	40021800 	.word	0x40021800
 8002008:	40013c00 	.word	0x40013c00

0800200c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800200c:	b480      	push	{r7}
 800200e:	b085      	sub	sp, #20
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
 8002014:	460b      	mov	r3, r1
 8002016:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	691a      	ldr	r2, [r3, #16]
 800201c:	887b      	ldrh	r3, [r7, #2]
 800201e:	4013      	ands	r3, r2
 8002020:	2b00      	cmp	r3, #0
 8002022:	d002      	beq.n	800202a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002024:	2301      	movs	r3, #1
 8002026:	73fb      	strb	r3, [r7, #15]
 8002028:	e001      	b.n	800202e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800202a:	2300      	movs	r3, #0
 800202c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800202e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002030:	4618      	mov	r0, r3
 8002032:	3714      	adds	r7, #20
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr

0800203c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800203c:	b480      	push	{r7}
 800203e:	b083      	sub	sp, #12
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
 8002044:	460b      	mov	r3, r1
 8002046:	807b      	strh	r3, [r7, #2]
 8002048:	4613      	mov	r3, r2
 800204a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800204c:	787b      	ldrb	r3, [r7, #1]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d003      	beq.n	800205a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002052:	887a      	ldrh	r2, [r7, #2]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002058:	e003      	b.n	8002062 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800205a:	887b      	ldrh	r3, [r7, #2]
 800205c:	041a      	lsls	r2, r3, #16
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	619a      	str	r2, [r3, #24]
}
 8002062:	bf00      	nop
 8002064:	370c      	adds	r7, #12
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr

0800206e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800206e:	b580      	push	{r7, lr}
 8002070:	b086      	sub	sp, #24
 8002072:	af02      	add	r7, sp, #8
 8002074:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d101      	bne.n	8002080 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800207c:	2301      	movs	r3, #1
 800207e:	e108      	b.n	8002292 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800208c:	b2db      	uxtb	r3, r3
 800208e:	2b00      	cmp	r3, #0
 8002090:	d106      	bne.n	80020a0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2200      	movs	r2, #0
 8002096:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	f007 fa8c 	bl	80095b8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2203      	movs	r2, #3
 80020a4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80020a8:	68bb      	ldr	r3, [r7, #8]
 80020aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80020ae:	d102      	bne.n	80020b6 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2200      	movs	r2, #0
 80020b4:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4618      	mov	r0, r3
 80020bc:	f003 fe05 	bl	8005cca <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6818      	ldr	r0, [r3, #0]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	7c1a      	ldrb	r2, [r3, #16]
 80020c8:	f88d 2000 	strb.w	r2, [sp]
 80020cc:	3304      	adds	r3, #4
 80020ce:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020d0:	f003 fce4 	bl	8005a9c <USB_CoreInit>
 80020d4:	4603      	mov	r3, r0
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d005      	beq.n	80020e6 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2202      	movs	r2, #2
 80020de:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	e0d5      	b.n	8002292 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	2100      	movs	r1, #0
 80020ec:	4618      	mov	r0, r3
 80020ee:	f003 fdfd 	bl	8005cec <USB_SetCurrentMode>
 80020f2:	4603      	mov	r3, r0
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d005      	beq.n	8002104 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2202      	movs	r2, #2
 80020fc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002100:	2301      	movs	r3, #1
 8002102:	e0c6      	b.n	8002292 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002104:	2300      	movs	r3, #0
 8002106:	73fb      	strb	r3, [r7, #15]
 8002108:	e04a      	b.n	80021a0 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800210a:	7bfa      	ldrb	r2, [r7, #15]
 800210c:	6879      	ldr	r1, [r7, #4]
 800210e:	4613      	mov	r3, r2
 8002110:	00db      	lsls	r3, r3, #3
 8002112:	4413      	add	r3, r2
 8002114:	009b      	lsls	r3, r3, #2
 8002116:	440b      	add	r3, r1
 8002118:	3315      	adds	r3, #21
 800211a:	2201      	movs	r2, #1
 800211c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800211e:	7bfa      	ldrb	r2, [r7, #15]
 8002120:	6879      	ldr	r1, [r7, #4]
 8002122:	4613      	mov	r3, r2
 8002124:	00db      	lsls	r3, r3, #3
 8002126:	4413      	add	r3, r2
 8002128:	009b      	lsls	r3, r3, #2
 800212a:	440b      	add	r3, r1
 800212c:	3314      	adds	r3, #20
 800212e:	7bfa      	ldrb	r2, [r7, #15]
 8002130:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002132:	7bfa      	ldrb	r2, [r7, #15]
 8002134:	7bfb      	ldrb	r3, [r7, #15]
 8002136:	b298      	uxth	r0, r3
 8002138:	6879      	ldr	r1, [r7, #4]
 800213a:	4613      	mov	r3, r2
 800213c:	00db      	lsls	r3, r3, #3
 800213e:	4413      	add	r3, r2
 8002140:	009b      	lsls	r3, r3, #2
 8002142:	440b      	add	r3, r1
 8002144:	332e      	adds	r3, #46	@ 0x2e
 8002146:	4602      	mov	r2, r0
 8002148:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800214a:	7bfa      	ldrb	r2, [r7, #15]
 800214c:	6879      	ldr	r1, [r7, #4]
 800214e:	4613      	mov	r3, r2
 8002150:	00db      	lsls	r3, r3, #3
 8002152:	4413      	add	r3, r2
 8002154:	009b      	lsls	r3, r3, #2
 8002156:	440b      	add	r3, r1
 8002158:	3318      	adds	r3, #24
 800215a:	2200      	movs	r2, #0
 800215c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800215e:	7bfa      	ldrb	r2, [r7, #15]
 8002160:	6879      	ldr	r1, [r7, #4]
 8002162:	4613      	mov	r3, r2
 8002164:	00db      	lsls	r3, r3, #3
 8002166:	4413      	add	r3, r2
 8002168:	009b      	lsls	r3, r3, #2
 800216a:	440b      	add	r3, r1
 800216c:	331c      	adds	r3, #28
 800216e:	2200      	movs	r2, #0
 8002170:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002172:	7bfa      	ldrb	r2, [r7, #15]
 8002174:	6879      	ldr	r1, [r7, #4]
 8002176:	4613      	mov	r3, r2
 8002178:	00db      	lsls	r3, r3, #3
 800217a:	4413      	add	r3, r2
 800217c:	009b      	lsls	r3, r3, #2
 800217e:	440b      	add	r3, r1
 8002180:	3320      	adds	r3, #32
 8002182:	2200      	movs	r2, #0
 8002184:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002186:	7bfa      	ldrb	r2, [r7, #15]
 8002188:	6879      	ldr	r1, [r7, #4]
 800218a:	4613      	mov	r3, r2
 800218c:	00db      	lsls	r3, r3, #3
 800218e:	4413      	add	r3, r2
 8002190:	009b      	lsls	r3, r3, #2
 8002192:	440b      	add	r3, r1
 8002194:	3324      	adds	r3, #36	@ 0x24
 8002196:	2200      	movs	r2, #0
 8002198:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800219a:	7bfb      	ldrb	r3, [r7, #15]
 800219c:	3301      	adds	r3, #1
 800219e:	73fb      	strb	r3, [r7, #15]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	791b      	ldrb	r3, [r3, #4]
 80021a4:	7bfa      	ldrb	r2, [r7, #15]
 80021a6:	429a      	cmp	r2, r3
 80021a8:	d3af      	bcc.n	800210a <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021aa:	2300      	movs	r3, #0
 80021ac:	73fb      	strb	r3, [r7, #15]
 80021ae:	e044      	b.n	800223a <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80021b0:	7bfa      	ldrb	r2, [r7, #15]
 80021b2:	6879      	ldr	r1, [r7, #4]
 80021b4:	4613      	mov	r3, r2
 80021b6:	00db      	lsls	r3, r3, #3
 80021b8:	4413      	add	r3, r2
 80021ba:	009b      	lsls	r3, r3, #2
 80021bc:	440b      	add	r3, r1
 80021be:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80021c2:	2200      	movs	r2, #0
 80021c4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80021c6:	7bfa      	ldrb	r2, [r7, #15]
 80021c8:	6879      	ldr	r1, [r7, #4]
 80021ca:	4613      	mov	r3, r2
 80021cc:	00db      	lsls	r3, r3, #3
 80021ce:	4413      	add	r3, r2
 80021d0:	009b      	lsls	r3, r3, #2
 80021d2:	440b      	add	r3, r1
 80021d4:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80021d8:	7bfa      	ldrb	r2, [r7, #15]
 80021da:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80021dc:	7bfa      	ldrb	r2, [r7, #15]
 80021de:	6879      	ldr	r1, [r7, #4]
 80021e0:	4613      	mov	r3, r2
 80021e2:	00db      	lsls	r3, r3, #3
 80021e4:	4413      	add	r3, r2
 80021e6:	009b      	lsls	r3, r3, #2
 80021e8:	440b      	add	r3, r1
 80021ea:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80021ee:	2200      	movs	r2, #0
 80021f0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80021f2:	7bfa      	ldrb	r2, [r7, #15]
 80021f4:	6879      	ldr	r1, [r7, #4]
 80021f6:	4613      	mov	r3, r2
 80021f8:	00db      	lsls	r3, r3, #3
 80021fa:	4413      	add	r3, r2
 80021fc:	009b      	lsls	r3, r3, #2
 80021fe:	440b      	add	r3, r1
 8002200:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002204:	2200      	movs	r2, #0
 8002206:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002208:	7bfa      	ldrb	r2, [r7, #15]
 800220a:	6879      	ldr	r1, [r7, #4]
 800220c:	4613      	mov	r3, r2
 800220e:	00db      	lsls	r3, r3, #3
 8002210:	4413      	add	r3, r2
 8002212:	009b      	lsls	r3, r3, #2
 8002214:	440b      	add	r3, r1
 8002216:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800221a:	2200      	movs	r2, #0
 800221c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800221e:	7bfa      	ldrb	r2, [r7, #15]
 8002220:	6879      	ldr	r1, [r7, #4]
 8002222:	4613      	mov	r3, r2
 8002224:	00db      	lsls	r3, r3, #3
 8002226:	4413      	add	r3, r2
 8002228:	009b      	lsls	r3, r3, #2
 800222a:	440b      	add	r3, r1
 800222c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002230:	2200      	movs	r2, #0
 8002232:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002234:	7bfb      	ldrb	r3, [r7, #15]
 8002236:	3301      	adds	r3, #1
 8002238:	73fb      	strb	r3, [r7, #15]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	791b      	ldrb	r3, [r3, #4]
 800223e:	7bfa      	ldrb	r2, [r7, #15]
 8002240:	429a      	cmp	r2, r3
 8002242:	d3b5      	bcc.n	80021b0 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6818      	ldr	r0, [r3, #0]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	7c1a      	ldrb	r2, [r3, #16]
 800224c:	f88d 2000 	strb.w	r2, [sp]
 8002250:	3304      	adds	r3, #4
 8002252:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002254:	f003 fd96 	bl	8005d84 <USB_DevInit>
 8002258:	4603      	mov	r3, r0
 800225a:	2b00      	cmp	r3, #0
 800225c:	d005      	beq.n	800226a <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2202      	movs	r2, #2
 8002262:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	e013      	b.n	8002292 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2200      	movs	r2, #0
 800226e:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2201      	movs	r2, #1
 8002274:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	7b1b      	ldrb	r3, [r3, #12]
 800227c:	2b01      	cmp	r3, #1
 800227e:	d102      	bne.n	8002286 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002280:	6878      	ldr	r0, [r7, #4]
 8002282:	f001 f96f 	bl	8003564 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4618      	mov	r0, r3
 800228c:	f004 fdd3 	bl	8006e36 <USB_DevDisconnect>

  return HAL_OK;
 8002290:	2300      	movs	r3, #0
}
 8002292:	4618      	mov	r0, r3
 8002294:	3710      	adds	r7, #16
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}

0800229a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800229a:	b580      	push	{r7, lr}
 800229c:	b084      	sub	sp, #16
 800229e:	af00      	add	r7, sp, #0
 80022a0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80022ae:	2b01      	cmp	r3, #1
 80022b0:	d101      	bne.n	80022b6 <HAL_PCD_Start+0x1c>
 80022b2:	2302      	movs	r3, #2
 80022b4:	e022      	b.n	80022fc <HAL_PCD_Start+0x62>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2201      	movs	r2, #1
 80022ba:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	68db      	ldr	r3, [r3, #12]
 80022c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d009      	beq.n	80022de <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80022ce:	2b01      	cmp	r3, #1
 80022d0:	d105      	bne.n	80022de <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022d6:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4618      	mov	r0, r3
 80022e4:	f003 fce0 	bl	8005ca8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4618      	mov	r0, r3
 80022ee:	f004 fd81 	bl	8006df4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2200      	movs	r2, #0
 80022f6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80022fa:	2300      	movs	r3, #0
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	3710      	adds	r7, #16
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}

08002304 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002304:	b590      	push	{r4, r7, lr}
 8002306:	b08d      	sub	sp, #52	@ 0x34
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002312:	6a3b      	ldr	r3, [r7, #32]
 8002314:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4618      	mov	r0, r3
 800231c:	f004 fe3f 	bl	8006f9e <USB_GetMode>
 8002320:	4603      	mov	r3, r0
 8002322:	2b00      	cmp	r3, #0
 8002324:	f040 84b9 	bne.w	8002c9a <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4618      	mov	r0, r3
 800232e:	f004 fda3 	bl	8006e78 <USB_ReadInterrupts>
 8002332:	4603      	mov	r3, r0
 8002334:	2b00      	cmp	r3, #0
 8002336:	f000 84af 	beq.w	8002c98 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800233a:	69fb      	ldr	r3, [r7, #28]
 800233c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002340:	689b      	ldr	r3, [r3, #8]
 8002342:	0a1b      	lsrs	r3, r3, #8
 8002344:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4618      	mov	r0, r3
 8002354:	f004 fd90 	bl	8006e78 <USB_ReadInterrupts>
 8002358:	4603      	mov	r3, r0
 800235a:	f003 0302 	and.w	r3, r3, #2
 800235e:	2b02      	cmp	r3, #2
 8002360:	d107      	bne.n	8002372 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	695a      	ldr	r2, [r3, #20]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f002 0202 	and.w	r2, r2, #2
 8002370:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4618      	mov	r0, r3
 8002378:	f004 fd7e 	bl	8006e78 <USB_ReadInterrupts>
 800237c:	4603      	mov	r3, r0
 800237e:	f003 0310 	and.w	r3, r3, #16
 8002382:	2b10      	cmp	r3, #16
 8002384:	d161      	bne.n	800244a <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	699a      	ldr	r2, [r3, #24]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f022 0210 	bic.w	r2, r2, #16
 8002394:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002396:	6a3b      	ldr	r3, [r7, #32]
 8002398:	6a1b      	ldr	r3, [r3, #32]
 800239a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800239c:	69bb      	ldr	r3, [r7, #24]
 800239e:	f003 020f 	and.w	r2, r3, #15
 80023a2:	4613      	mov	r3, r2
 80023a4:	00db      	lsls	r3, r3, #3
 80023a6:	4413      	add	r3, r2
 80023a8:	009b      	lsls	r3, r3, #2
 80023aa:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80023ae:	687a      	ldr	r2, [r7, #4]
 80023b0:	4413      	add	r3, r2
 80023b2:	3304      	adds	r3, #4
 80023b4:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80023b6:	69bb      	ldr	r3, [r7, #24]
 80023b8:	0c5b      	lsrs	r3, r3, #17
 80023ba:	f003 030f 	and.w	r3, r3, #15
 80023be:	2b02      	cmp	r3, #2
 80023c0:	d124      	bne.n	800240c <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80023c2:	69ba      	ldr	r2, [r7, #24]
 80023c4:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80023c8:	4013      	ands	r3, r2
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d035      	beq.n	800243a <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80023d2:	69bb      	ldr	r3, [r7, #24]
 80023d4:	091b      	lsrs	r3, r3, #4
 80023d6:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80023d8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80023dc:	b29b      	uxth	r3, r3
 80023de:	461a      	mov	r2, r3
 80023e0:	6a38      	ldr	r0, [r7, #32]
 80023e2:	f004 fbb5 	bl	8006b50 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80023e6:	697b      	ldr	r3, [r7, #20]
 80023e8:	68da      	ldr	r2, [r3, #12]
 80023ea:	69bb      	ldr	r3, [r7, #24]
 80023ec:	091b      	lsrs	r3, r3, #4
 80023ee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80023f2:	441a      	add	r2, r3
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	695a      	ldr	r2, [r3, #20]
 80023fc:	69bb      	ldr	r3, [r7, #24]
 80023fe:	091b      	lsrs	r3, r3, #4
 8002400:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002404:	441a      	add	r2, r3
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	615a      	str	r2, [r3, #20]
 800240a:	e016      	b.n	800243a <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800240c:	69bb      	ldr	r3, [r7, #24]
 800240e:	0c5b      	lsrs	r3, r3, #17
 8002410:	f003 030f 	and.w	r3, r3, #15
 8002414:	2b06      	cmp	r3, #6
 8002416:	d110      	bne.n	800243a <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800241e:	2208      	movs	r2, #8
 8002420:	4619      	mov	r1, r3
 8002422:	6a38      	ldr	r0, [r7, #32]
 8002424:	f004 fb94 	bl	8006b50 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	695a      	ldr	r2, [r3, #20]
 800242c:	69bb      	ldr	r3, [r7, #24]
 800242e:	091b      	lsrs	r3, r3, #4
 8002430:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002434:	441a      	add	r2, r3
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	699a      	ldr	r2, [r3, #24]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f042 0210 	orr.w	r2, r2, #16
 8002448:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4618      	mov	r0, r3
 8002450:	f004 fd12 	bl	8006e78 <USB_ReadInterrupts>
 8002454:	4603      	mov	r3, r0
 8002456:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800245a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800245e:	f040 80a7 	bne.w	80025b0 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002462:	2300      	movs	r3, #0
 8002464:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4618      	mov	r0, r3
 800246c:	f004 fd17 	bl	8006e9e <USB_ReadDevAllOutEpInterrupt>
 8002470:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8002472:	e099      	b.n	80025a8 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002474:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002476:	f003 0301 	and.w	r3, r3, #1
 800247a:	2b00      	cmp	r3, #0
 800247c:	f000 808e 	beq.w	800259c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002486:	b2d2      	uxtb	r2, r2
 8002488:	4611      	mov	r1, r2
 800248a:	4618      	mov	r0, r3
 800248c:	f004 fd3b 	bl	8006f06 <USB_ReadDevOutEPInterrupt>
 8002490:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	f003 0301 	and.w	r3, r3, #1
 8002498:	2b00      	cmp	r3, #0
 800249a:	d00c      	beq.n	80024b6 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800249c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800249e:	015a      	lsls	r2, r3, #5
 80024a0:	69fb      	ldr	r3, [r7, #28]
 80024a2:	4413      	add	r3, r2
 80024a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80024a8:	461a      	mov	r2, r3
 80024aa:	2301      	movs	r3, #1
 80024ac:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80024ae:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80024b0:	6878      	ldr	r0, [r7, #4]
 80024b2:	f000 fed1 	bl	8003258 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	f003 0308 	and.w	r3, r3, #8
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d00c      	beq.n	80024da <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80024c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024c2:	015a      	lsls	r2, r3, #5
 80024c4:	69fb      	ldr	r3, [r7, #28]
 80024c6:	4413      	add	r3, r2
 80024c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80024cc:	461a      	mov	r2, r3
 80024ce:	2308      	movs	r3, #8
 80024d0:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80024d2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80024d4:	6878      	ldr	r0, [r7, #4]
 80024d6:	f000 ffa7 	bl	8003428 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	f003 0310 	and.w	r3, r3, #16
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d008      	beq.n	80024f6 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80024e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024e6:	015a      	lsls	r2, r3, #5
 80024e8:	69fb      	ldr	r3, [r7, #28]
 80024ea:	4413      	add	r3, r2
 80024ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80024f0:	461a      	mov	r2, r3
 80024f2:	2310      	movs	r3, #16
 80024f4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	f003 0302 	and.w	r3, r3, #2
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d030      	beq.n	8002562 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002500:	6a3b      	ldr	r3, [r7, #32]
 8002502:	695b      	ldr	r3, [r3, #20]
 8002504:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002508:	2b80      	cmp	r3, #128	@ 0x80
 800250a:	d109      	bne.n	8002520 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800250c:	69fb      	ldr	r3, [r7, #28]
 800250e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	69fa      	ldr	r2, [r7, #28]
 8002516:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800251a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800251e:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002520:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002522:	4613      	mov	r3, r2
 8002524:	00db      	lsls	r3, r3, #3
 8002526:	4413      	add	r3, r2
 8002528:	009b      	lsls	r3, r3, #2
 800252a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800252e:	687a      	ldr	r2, [r7, #4]
 8002530:	4413      	add	r3, r2
 8002532:	3304      	adds	r3, #4
 8002534:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	78db      	ldrb	r3, [r3, #3]
 800253a:	2b01      	cmp	r3, #1
 800253c:	d108      	bne.n	8002550 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	2200      	movs	r2, #0
 8002542:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002544:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002546:	b2db      	uxtb	r3, r3
 8002548:	4619      	mov	r1, r3
 800254a:	6878      	ldr	r0, [r7, #4]
 800254c:	f007 f950 	bl	80097f0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002552:	015a      	lsls	r2, r3, #5
 8002554:	69fb      	ldr	r3, [r7, #28]
 8002556:	4413      	add	r3, r2
 8002558:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800255c:	461a      	mov	r2, r3
 800255e:	2302      	movs	r3, #2
 8002560:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	f003 0320 	and.w	r3, r3, #32
 8002568:	2b00      	cmp	r3, #0
 800256a:	d008      	beq.n	800257e <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800256c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800256e:	015a      	lsls	r2, r3, #5
 8002570:	69fb      	ldr	r3, [r7, #28]
 8002572:	4413      	add	r3, r2
 8002574:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002578:	461a      	mov	r2, r3
 800257a:	2320      	movs	r3, #32
 800257c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002584:	2b00      	cmp	r3, #0
 8002586:	d009      	beq.n	800259c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002588:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800258a:	015a      	lsls	r2, r3, #5
 800258c:	69fb      	ldr	r3, [r7, #28]
 800258e:	4413      	add	r3, r2
 8002590:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002594:	461a      	mov	r2, r3
 8002596:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800259a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800259c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800259e:	3301      	adds	r3, #1
 80025a0:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80025a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025a4:	085b      	lsrs	r3, r3, #1
 80025a6:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80025a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	f47f af62 	bne.w	8002474 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4618      	mov	r0, r3
 80025b6:	f004 fc5f 	bl	8006e78 <USB_ReadInterrupts>
 80025ba:	4603      	mov	r3, r0
 80025bc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80025c0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80025c4:	f040 80db 	bne.w	800277e <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4618      	mov	r0, r3
 80025ce:	f004 fc80 	bl	8006ed2 <USB_ReadDevAllInEpInterrupt>
 80025d2:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80025d4:	2300      	movs	r3, #0
 80025d6:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80025d8:	e0cd      	b.n	8002776 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80025da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025dc:	f003 0301 	and.w	r3, r3, #1
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	f000 80c2 	beq.w	800276a <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80025ec:	b2d2      	uxtb	r2, r2
 80025ee:	4611      	mov	r1, r2
 80025f0:	4618      	mov	r0, r3
 80025f2:	f004 fca6 	bl	8006f42 <USB_ReadDevInEPInterrupt>
 80025f6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	f003 0301 	and.w	r3, r3, #1
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d057      	beq.n	80026b2 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002604:	f003 030f 	and.w	r3, r3, #15
 8002608:	2201      	movs	r2, #1
 800260a:	fa02 f303 	lsl.w	r3, r2, r3
 800260e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002610:	69fb      	ldr	r3, [r7, #28]
 8002612:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002616:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	43db      	mvns	r3, r3
 800261c:	69f9      	ldr	r1, [r7, #28]
 800261e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002622:	4013      	ands	r3, r2
 8002624:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002628:	015a      	lsls	r2, r3, #5
 800262a:	69fb      	ldr	r3, [r7, #28]
 800262c:	4413      	add	r3, r2
 800262e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002632:	461a      	mov	r2, r3
 8002634:	2301      	movs	r3, #1
 8002636:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	799b      	ldrb	r3, [r3, #6]
 800263c:	2b01      	cmp	r3, #1
 800263e:	d132      	bne.n	80026a6 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002640:	6879      	ldr	r1, [r7, #4]
 8002642:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002644:	4613      	mov	r3, r2
 8002646:	00db      	lsls	r3, r3, #3
 8002648:	4413      	add	r3, r2
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	440b      	add	r3, r1
 800264e:	3320      	adds	r3, #32
 8002650:	6819      	ldr	r1, [r3, #0]
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002656:	4613      	mov	r3, r2
 8002658:	00db      	lsls	r3, r3, #3
 800265a:	4413      	add	r3, r2
 800265c:	009b      	lsls	r3, r3, #2
 800265e:	4403      	add	r3, r0
 8002660:	331c      	adds	r3, #28
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4419      	add	r1, r3
 8002666:	6878      	ldr	r0, [r7, #4]
 8002668:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800266a:	4613      	mov	r3, r2
 800266c:	00db      	lsls	r3, r3, #3
 800266e:	4413      	add	r3, r2
 8002670:	009b      	lsls	r3, r3, #2
 8002672:	4403      	add	r3, r0
 8002674:	3320      	adds	r3, #32
 8002676:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800267a:	2b00      	cmp	r3, #0
 800267c:	d113      	bne.n	80026a6 <HAL_PCD_IRQHandler+0x3a2>
 800267e:	6879      	ldr	r1, [r7, #4]
 8002680:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002682:	4613      	mov	r3, r2
 8002684:	00db      	lsls	r3, r3, #3
 8002686:	4413      	add	r3, r2
 8002688:	009b      	lsls	r3, r3, #2
 800268a:	440b      	add	r3, r1
 800268c:	3324      	adds	r3, #36	@ 0x24
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d108      	bne.n	80026a6 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6818      	ldr	r0, [r3, #0]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800269e:	461a      	mov	r2, r3
 80026a0:	2101      	movs	r1, #1
 80026a2:	f004 fcad 	bl	8007000 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80026a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026a8:	b2db      	uxtb	r3, r3
 80026aa:	4619      	mov	r1, r3
 80026ac:	6878      	ldr	r0, [r7, #4]
 80026ae:	f007 f81a 	bl	80096e6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	f003 0308 	and.w	r3, r3, #8
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d008      	beq.n	80026ce <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80026bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026be:	015a      	lsls	r2, r3, #5
 80026c0:	69fb      	ldr	r3, [r7, #28]
 80026c2:	4413      	add	r3, r2
 80026c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80026c8:	461a      	mov	r2, r3
 80026ca:	2308      	movs	r3, #8
 80026cc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	f003 0310 	and.w	r3, r3, #16
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d008      	beq.n	80026ea <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80026d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026da:	015a      	lsls	r2, r3, #5
 80026dc:	69fb      	ldr	r3, [r7, #28]
 80026de:	4413      	add	r3, r2
 80026e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80026e4:	461a      	mov	r2, r3
 80026e6:	2310      	movs	r3, #16
 80026e8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d008      	beq.n	8002706 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80026f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026f6:	015a      	lsls	r2, r3, #5
 80026f8:	69fb      	ldr	r3, [r7, #28]
 80026fa:	4413      	add	r3, r2
 80026fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002700:	461a      	mov	r2, r3
 8002702:	2340      	movs	r3, #64	@ 0x40
 8002704:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	f003 0302 	and.w	r3, r3, #2
 800270c:	2b00      	cmp	r3, #0
 800270e:	d023      	beq.n	8002758 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002710:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002712:	6a38      	ldr	r0, [r7, #32]
 8002714:	f003 fc94 	bl	8006040 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002718:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800271a:	4613      	mov	r3, r2
 800271c:	00db      	lsls	r3, r3, #3
 800271e:	4413      	add	r3, r2
 8002720:	009b      	lsls	r3, r3, #2
 8002722:	3310      	adds	r3, #16
 8002724:	687a      	ldr	r2, [r7, #4]
 8002726:	4413      	add	r3, r2
 8002728:	3304      	adds	r3, #4
 800272a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	78db      	ldrb	r3, [r3, #3]
 8002730:	2b01      	cmp	r3, #1
 8002732:	d108      	bne.n	8002746 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	2200      	movs	r2, #0
 8002738:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800273a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800273c:	b2db      	uxtb	r3, r3
 800273e:	4619      	mov	r1, r3
 8002740:	6878      	ldr	r0, [r7, #4]
 8002742:	f007 f867 	bl	8009814 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002748:	015a      	lsls	r2, r3, #5
 800274a:	69fb      	ldr	r3, [r7, #28]
 800274c:	4413      	add	r3, r2
 800274e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002752:	461a      	mov	r2, r3
 8002754:	2302      	movs	r3, #2
 8002756:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800275e:	2b00      	cmp	r3, #0
 8002760:	d003      	beq.n	800276a <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002762:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002764:	6878      	ldr	r0, [r7, #4]
 8002766:	f000 fcea 	bl	800313e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800276a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800276c:	3301      	adds	r3, #1
 800276e:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002770:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002772:	085b      	lsrs	r3, r3, #1
 8002774:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002776:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002778:	2b00      	cmp	r3, #0
 800277a:	f47f af2e 	bne.w	80025da <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4618      	mov	r0, r3
 8002784:	f004 fb78 	bl	8006e78 <USB_ReadInterrupts>
 8002788:	4603      	mov	r3, r0
 800278a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800278e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002792:	d122      	bne.n	80027da <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002794:	69fb      	ldr	r3, [r7, #28]
 8002796:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	69fa      	ldr	r2, [r7, #28]
 800279e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80027a2:	f023 0301 	bic.w	r3, r3, #1
 80027a6:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80027ae:	2b01      	cmp	r3, #1
 80027b0:	d108      	bne.n	80027c4 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2200      	movs	r2, #0
 80027b6:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80027ba:	2100      	movs	r1, #0
 80027bc:	6878      	ldr	r0, [r7, #4]
 80027be:	f007 f9e1 	bl	8009b84 <HAL_PCDEx_LPM_Callback>
 80027c2:	e002      	b.n	80027ca <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80027c4:	6878      	ldr	r0, [r7, #4]
 80027c6:	f007 f805 	bl	80097d4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	695a      	ldr	r2, [r3, #20]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80027d8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4618      	mov	r0, r3
 80027e0:	f004 fb4a 	bl	8006e78 <USB_ReadInterrupts>
 80027e4:	4603      	mov	r3, r0
 80027e6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80027ea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80027ee:	d112      	bne.n	8002816 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80027f0:	69fb      	ldr	r3, [r7, #28]
 80027f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	f003 0301 	and.w	r3, r3, #1
 80027fc:	2b01      	cmp	r3, #1
 80027fe:	d102      	bne.n	8002806 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002800:	6878      	ldr	r0, [r7, #4]
 8002802:	f006 ffc1 	bl	8009788 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	695a      	ldr	r2, [r3, #20]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8002814:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4618      	mov	r0, r3
 800281c:	f004 fb2c 	bl	8006e78 <USB_ReadInterrupts>
 8002820:	4603      	mov	r3, r0
 8002822:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002826:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800282a:	d121      	bne.n	8002870 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	695a      	ldr	r2, [r3, #20]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 800283a:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002842:	2b00      	cmp	r3, #0
 8002844:	d111      	bne.n	800286a <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2201      	movs	r2, #1
 800284a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002854:	089b      	lsrs	r3, r3, #2
 8002856:	f003 020f 	and.w	r2, r3, #15
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002860:	2101      	movs	r1, #1
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	f007 f98e 	bl	8009b84 <HAL_PCDEx_LPM_Callback>
 8002868:	e002      	b.n	8002870 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800286a:	6878      	ldr	r0, [r7, #4]
 800286c:	f006 ff8c 	bl	8009788 <HAL_PCD_SuspendCallback>
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4618      	mov	r0, r3
 8002876:	f004 faff 	bl	8006e78 <USB_ReadInterrupts>
 800287a:	4603      	mov	r3, r0
 800287c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002880:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002884:	f040 80b7 	bne.w	80029f6 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002888:	69fb      	ldr	r3, [r7, #28]
 800288a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	69fa      	ldr	r2, [r7, #28]
 8002892:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002896:	f023 0301 	bic.w	r3, r3, #1
 800289a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	2110      	movs	r1, #16
 80028a2:	4618      	mov	r0, r3
 80028a4:	f003 fbcc 	bl	8006040 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028a8:	2300      	movs	r3, #0
 80028aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80028ac:	e046      	b.n	800293c <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80028ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028b0:	015a      	lsls	r2, r3, #5
 80028b2:	69fb      	ldr	r3, [r7, #28]
 80028b4:	4413      	add	r3, r2
 80028b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80028ba:	461a      	mov	r2, r3
 80028bc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80028c0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80028c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028c4:	015a      	lsls	r2, r3, #5
 80028c6:	69fb      	ldr	r3, [r7, #28]
 80028c8:	4413      	add	r3, r2
 80028ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80028d2:	0151      	lsls	r1, r2, #5
 80028d4:	69fa      	ldr	r2, [r7, #28]
 80028d6:	440a      	add	r2, r1
 80028d8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80028dc:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80028e0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80028e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028e4:	015a      	lsls	r2, r3, #5
 80028e6:	69fb      	ldr	r3, [r7, #28]
 80028e8:	4413      	add	r3, r2
 80028ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80028ee:	461a      	mov	r2, r3
 80028f0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80028f4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80028f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028f8:	015a      	lsls	r2, r3, #5
 80028fa:	69fb      	ldr	r3, [r7, #28]
 80028fc:	4413      	add	r3, r2
 80028fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002906:	0151      	lsls	r1, r2, #5
 8002908:	69fa      	ldr	r2, [r7, #28]
 800290a:	440a      	add	r2, r1
 800290c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002910:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002914:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002916:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002918:	015a      	lsls	r2, r3, #5
 800291a:	69fb      	ldr	r3, [r7, #28]
 800291c:	4413      	add	r3, r2
 800291e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002926:	0151      	lsls	r1, r2, #5
 8002928:	69fa      	ldr	r2, [r7, #28]
 800292a:	440a      	add	r2, r1
 800292c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002930:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002934:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002936:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002938:	3301      	adds	r3, #1
 800293a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	791b      	ldrb	r3, [r3, #4]
 8002940:	461a      	mov	r2, r3
 8002942:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002944:	4293      	cmp	r3, r2
 8002946:	d3b2      	bcc.n	80028ae <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002948:	69fb      	ldr	r3, [r7, #28]
 800294a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800294e:	69db      	ldr	r3, [r3, #28]
 8002950:	69fa      	ldr	r2, [r7, #28]
 8002952:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002956:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800295a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	7bdb      	ldrb	r3, [r3, #15]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d016      	beq.n	8002992 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002964:	69fb      	ldr	r3, [r7, #28]
 8002966:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800296a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800296e:	69fa      	ldr	r2, [r7, #28]
 8002970:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002974:	f043 030b 	orr.w	r3, r3, #11
 8002978:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800297c:	69fb      	ldr	r3, [r7, #28]
 800297e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002982:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002984:	69fa      	ldr	r2, [r7, #28]
 8002986:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800298a:	f043 030b 	orr.w	r3, r3, #11
 800298e:	6453      	str	r3, [r2, #68]	@ 0x44
 8002990:	e015      	b.n	80029be <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002992:	69fb      	ldr	r3, [r7, #28]
 8002994:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002998:	695b      	ldr	r3, [r3, #20]
 800299a:	69fa      	ldr	r2, [r7, #28]
 800299c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80029a0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80029a4:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80029a8:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80029aa:	69fb      	ldr	r3, [r7, #28]
 80029ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80029b0:	691b      	ldr	r3, [r3, #16]
 80029b2:	69fa      	ldr	r2, [r7, #28]
 80029b4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80029b8:	f043 030b 	orr.w	r3, r3, #11
 80029bc:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80029be:	69fb      	ldr	r3, [r7, #28]
 80029c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	69fa      	ldr	r2, [r7, #28]
 80029c8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80029cc:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80029d0:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6818      	ldr	r0, [r3, #0]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80029e0:	461a      	mov	r2, r3
 80029e2:	f004 fb0d 	bl	8007000 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	695a      	ldr	r2, [r3, #20]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80029f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4618      	mov	r0, r3
 80029fc:	f004 fa3c 	bl	8006e78 <USB_ReadInterrupts>
 8002a00:	4603      	mov	r3, r0
 8002a02:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002a06:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002a0a:	d123      	bne.n	8002a54 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4618      	mov	r0, r3
 8002a12:	f004 fad2 	bl	8006fba <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f003 fb89 	bl	8006132 <USB_GetDevSpeed>
 8002a20:	4603      	mov	r3, r0
 8002a22:	461a      	mov	r2, r3
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681c      	ldr	r4, [r3, #0]
 8002a2c:	f000 fea4 	bl	8003778 <HAL_RCC_GetHCLKFreq>
 8002a30:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002a36:	461a      	mov	r2, r3
 8002a38:	4620      	mov	r0, r4
 8002a3a:	f003 f893 	bl	8005b64 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002a3e:	6878      	ldr	r0, [r7, #4]
 8002a40:	f006 fe79 	bl	8009736 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	695a      	ldr	r2, [r3, #20]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8002a52:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f004 fa0d 	bl	8006e78 <USB_ReadInterrupts>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	f003 0308 	and.w	r3, r3, #8
 8002a64:	2b08      	cmp	r3, #8
 8002a66:	d10a      	bne.n	8002a7e <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002a68:	6878      	ldr	r0, [r7, #4]
 8002a6a:	f006 fe56 	bl	800971a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	695a      	ldr	r2, [r3, #20]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f002 0208 	and.w	r2, r2, #8
 8002a7c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4618      	mov	r0, r3
 8002a84:	f004 f9f8 	bl	8006e78 <USB_ReadInterrupts>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a8e:	2b80      	cmp	r3, #128	@ 0x80
 8002a90:	d123      	bne.n	8002ada <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002a92:	6a3b      	ldr	r3, [r7, #32]
 8002a94:	699b      	ldr	r3, [r3, #24]
 8002a96:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002a9a:	6a3b      	ldr	r3, [r7, #32]
 8002a9c:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	627b      	str	r3, [r7, #36]	@ 0x24
 8002aa2:	e014      	b.n	8002ace <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002aa4:	6879      	ldr	r1, [r7, #4]
 8002aa6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002aa8:	4613      	mov	r3, r2
 8002aaa:	00db      	lsls	r3, r3, #3
 8002aac:	4413      	add	r3, r2
 8002aae:	009b      	lsls	r3, r3, #2
 8002ab0:	440b      	add	r3, r1
 8002ab2:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002ab6:	781b      	ldrb	r3, [r3, #0]
 8002ab8:	2b01      	cmp	r3, #1
 8002aba:	d105      	bne.n	8002ac8 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002abc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002abe:	b2db      	uxtb	r3, r3
 8002ac0:	4619      	mov	r1, r3
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	f000 fb0a 	bl	80030dc <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002ac8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aca:	3301      	adds	r3, #1
 8002acc:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	791b      	ldrb	r3, [r3, #4]
 8002ad2:	461a      	mov	r2, r3
 8002ad4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d3e4      	bcc.n	8002aa4 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f004 f9ca 	bl	8006e78 <USB_ReadInterrupts>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002aea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002aee:	d13c      	bne.n	8002b6a <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002af0:	2301      	movs	r3, #1
 8002af2:	627b      	str	r3, [r7, #36]	@ 0x24
 8002af4:	e02b      	b.n	8002b4e <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002af6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002af8:	015a      	lsls	r2, r3, #5
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	4413      	add	r3, r2
 8002afe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002b06:	6879      	ldr	r1, [r7, #4]
 8002b08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b0a:	4613      	mov	r3, r2
 8002b0c:	00db      	lsls	r3, r3, #3
 8002b0e:	4413      	add	r3, r2
 8002b10:	009b      	lsls	r3, r3, #2
 8002b12:	440b      	add	r3, r1
 8002b14:	3318      	adds	r3, #24
 8002b16:	781b      	ldrb	r3, [r3, #0]
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	d115      	bne.n	8002b48 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002b1c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	da12      	bge.n	8002b48 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002b22:	6879      	ldr	r1, [r7, #4]
 8002b24:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b26:	4613      	mov	r3, r2
 8002b28:	00db      	lsls	r3, r3, #3
 8002b2a:	4413      	add	r3, r2
 8002b2c:	009b      	lsls	r3, r3, #2
 8002b2e:	440b      	add	r3, r1
 8002b30:	3317      	adds	r3, #23
 8002b32:	2201      	movs	r2, #1
 8002b34:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002b3e:	b2db      	uxtb	r3, r3
 8002b40:	4619      	mov	r1, r3
 8002b42:	6878      	ldr	r0, [r7, #4]
 8002b44:	f000 faca 	bl	80030dc <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002b48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b4a:	3301      	adds	r3, #1
 8002b4c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	791b      	ldrb	r3, [r3, #4]
 8002b52:	461a      	mov	r2, r3
 8002b54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d3cd      	bcc.n	8002af6 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	695a      	ldr	r2, [r3, #20]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8002b68:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f004 f982 	bl	8006e78 <USB_ReadInterrupts>
 8002b74:	4603      	mov	r3, r0
 8002b76:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b7a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002b7e:	d156      	bne.n	8002c2e <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002b80:	2301      	movs	r3, #1
 8002b82:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b84:	e045      	b.n	8002c12 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b88:	015a      	lsls	r2, r3, #5
 8002b8a:	69fb      	ldr	r3, [r7, #28]
 8002b8c:	4413      	add	r3, r2
 8002b8e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002b96:	6879      	ldr	r1, [r7, #4]
 8002b98:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b9a:	4613      	mov	r3, r2
 8002b9c:	00db      	lsls	r3, r3, #3
 8002b9e:	4413      	add	r3, r2
 8002ba0:	009b      	lsls	r3, r3, #2
 8002ba2:	440b      	add	r3, r1
 8002ba4:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002ba8:	781b      	ldrb	r3, [r3, #0]
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	d12e      	bne.n	8002c0c <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002bae:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	da2b      	bge.n	8002c0c <HAL_PCD_IRQHandler+0x908>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8002bb4:	69bb      	ldr	r3, [r7, #24]
 8002bb6:	0c1a      	lsrs	r2, r3, #16
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8002bbe:	4053      	eors	r3, r2
 8002bc0:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d121      	bne.n	8002c0c <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002bc8:	6879      	ldr	r1, [r7, #4]
 8002bca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002bcc:	4613      	mov	r3, r2
 8002bce:	00db      	lsls	r3, r3, #3
 8002bd0:	4413      	add	r3, r2
 8002bd2:	009b      	lsls	r3, r3, #2
 8002bd4:	440b      	add	r3, r1
 8002bd6:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002bda:	2201      	movs	r2, #1
 8002bdc:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002bde:	6a3b      	ldr	r3, [r7, #32]
 8002be0:	699b      	ldr	r3, [r3, #24]
 8002be2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002be6:	6a3b      	ldr	r3, [r7, #32]
 8002be8:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002bea:	6a3b      	ldr	r3, [r7, #32]
 8002bec:	695b      	ldr	r3, [r3, #20]
 8002bee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d10a      	bne.n	8002c0c <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002bf6:	69fb      	ldr	r3, [r7, #28]
 8002bf8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	69fa      	ldr	r2, [r7, #28]
 8002c00:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002c04:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002c08:	6053      	str	r3, [r2, #4]
            break;
 8002c0a:	e008      	b.n	8002c1e <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002c0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c0e:	3301      	adds	r3, #1
 8002c10:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	791b      	ldrb	r3, [r3, #4]
 8002c16:	461a      	mov	r2, r3
 8002c18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d3b3      	bcc.n	8002b86 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	695a      	ldr	r2, [r3, #20]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8002c2c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4618      	mov	r0, r3
 8002c34:	f004 f920 	bl	8006e78 <USB_ReadInterrupts>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002c3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c42:	d10a      	bne.n	8002c5a <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002c44:	6878      	ldr	r0, [r7, #4]
 8002c46:	f006 fdf7 	bl	8009838 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	695a      	ldr	r2, [r3, #20]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002c58:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f004 f90a 	bl	8006e78 <USB_ReadInterrupts>
 8002c64:	4603      	mov	r3, r0
 8002c66:	f003 0304 	and.w	r3, r3, #4
 8002c6a:	2b04      	cmp	r3, #4
 8002c6c:	d115      	bne.n	8002c9a <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002c76:	69bb      	ldr	r3, [r7, #24]
 8002c78:	f003 0304 	and.w	r3, r3, #4
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d002      	beq.n	8002c86 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002c80:	6878      	ldr	r0, [r7, #4]
 8002c82:	f006 fde7 	bl	8009854 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	6859      	ldr	r1, [r3, #4]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	69ba      	ldr	r2, [r7, #24]
 8002c92:	430a      	orrs	r2, r1
 8002c94:	605a      	str	r2, [r3, #4]
 8002c96:	e000      	b.n	8002c9a <HAL_PCD_IRQHandler+0x996>
      return;
 8002c98:	bf00      	nop
    }
  }
}
 8002c9a:	3734      	adds	r7, #52	@ 0x34
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd90      	pop	{r4, r7, pc}

08002ca0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b082      	sub	sp, #8
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
 8002ca8:	460b      	mov	r3, r1
 8002caa:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002cb2:	2b01      	cmp	r3, #1
 8002cb4:	d101      	bne.n	8002cba <HAL_PCD_SetAddress+0x1a>
 8002cb6:	2302      	movs	r3, #2
 8002cb8:	e012      	b.n	8002ce0 <HAL_PCD_SetAddress+0x40>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2201      	movs	r2, #1
 8002cbe:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	78fa      	ldrb	r2, [r7, #3]
 8002cc6:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	78fa      	ldrb	r2, [r7, #3]
 8002cce:	4611      	mov	r1, r2
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f004 f869 	bl	8006da8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002cde:	2300      	movs	r3, #0
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	3708      	adds	r7, #8
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}

08002ce8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b084      	sub	sp, #16
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
 8002cf0:	4608      	mov	r0, r1
 8002cf2:	4611      	mov	r1, r2
 8002cf4:	461a      	mov	r2, r3
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	70fb      	strb	r3, [r7, #3]
 8002cfa:	460b      	mov	r3, r1
 8002cfc:	803b      	strh	r3, [r7, #0]
 8002cfe:	4613      	mov	r3, r2
 8002d00:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8002d02:	2300      	movs	r3, #0
 8002d04:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002d06:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	da0f      	bge.n	8002d2e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d0e:	78fb      	ldrb	r3, [r7, #3]
 8002d10:	f003 020f 	and.w	r2, r3, #15
 8002d14:	4613      	mov	r3, r2
 8002d16:	00db      	lsls	r3, r3, #3
 8002d18:	4413      	add	r3, r2
 8002d1a:	009b      	lsls	r3, r3, #2
 8002d1c:	3310      	adds	r3, #16
 8002d1e:	687a      	ldr	r2, [r7, #4]
 8002d20:	4413      	add	r3, r2
 8002d22:	3304      	adds	r3, #4
 8002d24:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	2201      	movs	r2, #1
 8002d2a:	705a      	strb	r2, [r3, #1]
 8002d2c:	e00f      	b.n	8002d4e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d2e:	78fb      	ldrb	r3, [r7, #3]
 8002d30:	f003 020f 	and.w	r2, r3, #15
 8002d34:	4613      	mov	r3, r2
 8002d36:	00db      	lsls	r3, r3, #3
 8002d38:	4413      	add	r3, r2
 8002d3a:	009b      	lsls	r3, r3, #2
 8002d3c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002d40:	687a      	ldr	r2, [r7, #4]
 8002d42:	4413      	add	r3, r2
 8002d44:	3304      	adds	r3, #4
 8002d46:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002d4e:	78fb      	ldrb	r3, [r7, #3]
 8002d50:	f003 030f 	and.w	r3, r3, #15
 8002d54:	b2da      	uxtb	r2, r3
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8002d5a:	883b      	ldrh	r3, [r7, #0]
 8002d5c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	78ba      	ldrb	r2, [r7, #2]
 8002d68:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	785b      	ldrb	r3, [r3, #1]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d004      	beq.n	8002d7c <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	781b      	ldrb	r3, [r3, #0]
 8002d76:	461a      	mov	r2, r3
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002d7c:	78bb      	ldrb	r3, [r7, #2]
 8002d7e:	2b02      	cmp	r3, #2
 8002d80:	d102      	bne.n	8002d88 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	2200      	movs	r2, #0
 8002d86:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002d8e:	2b01      	cmp	r3, #1
 8002d90:	d101      	bne.n	8002d96 <HAL_PCD_EP_Open+0xae>
 8002d92:	2302      	movs	r3, #2
 8002d94:	e00e      	b.n	8002db4 <HAL_PCD_EP_Open+0xcc>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2201      	movs	r2, #1
 8002d9a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	68f9      	ldr	r1, [r7, #12]
 8002da4:	4618      	mov	r0, r3
 8002da6:	f003 f9e9 	bl	800617c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2200      	movs	r2, #0
 8002dae:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8002db2:	7afb      	ldrb	r3, [r7, #11]
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	3710      	adds	r7, #16
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd80      	pop	{r7, pc}

08002dbc <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b084      	sub	sp, #16
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
 8002dc4:	460b      	mov	r3, r1
 8002dc6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002dc8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	da0f      	bge.n	8002df0 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002dd0:	78fb      	ldrb	r3, [r7, #3]
 8002dd2:	f003 020f 	and.w	r2, r3, #15
 8002dd6:	4613      	mov	r3, r2
 8002dd8:	00db      	lsls	r3, r3, #3
 8002dda:	4413      	add	r3, r2
 8002ddc:	009b      	lsls	r3, r3, #2
 8002dde:	3310      	adds	r3, #16
 8002de0:	687a      	ldr	r2, [r7, #4]
 8002de2:	4413      	add	r3, r2
 8002de4:	3304      	adds	r3, #4
 8002de6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2201      	movs	r2, #1
 8002dec:	705a      	strb	r2, [r3, #1]
 8002dee:	e00f      	b.n	8002e10 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002df0:	78fb      	ldrb	r3, [r7, #3]
 8002df2:	f003 020f 	and.w	r2, r3, #15
 8002df6:	4613      	mov	r3, r2
 8002df8:	00db      	lsls	r3, r3, #3
 8002dfa:	4413      	add	r3, r2
 8002dfc:	009b      	lsls	r3, r3, #2
 8002dfe:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002e02:	687a      	ldr	r2, [r7, #4]
 8002e04:	4413      	add	r3, r2
 8002e06:	3304      	adds	r3, #4
 8002e08:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e10:	78fb      	ldrb	r3, [r7, #3]
 8002e12:	f003 030f 	and.w	r3, r3, #15
 8002e16:	b2da      	uxtb	r2, r3
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002e22:	2b01      	cmp	r3, #1
 8002e24:	d101      	bne.n	8002e2a <HAL_PCD_EP_Close+0x6e>
 8002e26:	2302      	movs	r3, #2
 8002e28:	e00e      	b.n	8002e48 <HAL_PCD_EP_Close+0x8c>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	68f9      	ldr	r1, [r7, #12]
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f003 fa27 	bl	800628c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2200      	movs	r2, #0
 8002e42:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8002e46:	2300      	movs	r3, #0
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	3710      	adds	r7, #16
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}

08002e50 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b086      	sub	sp, #24
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	60f8      	str	r0, [r7, #12]
 8002e58:	607a      	str	r2, [r7, #4]
 8002e5a:	603b      	str	r3, [r7, #0]
 8002e5c:	460b      	mov	r3, r1
 8002e5e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e60:	7afb      	ldrb	r3, [r7, #11]
 8002e62:	f003 020f 	and.w	r2, r3, #15
 8002e66:	4613      	mov	r3, r2
 8002e68:	00db      	lsls	r3, r3, #3
 8002e6a:	4413      	add	r3, r2
 8002e6c:	009b      	lsls	r3, r3, #2
 8002e6e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002e72:	68fa      	ldr	r2, [r7, #12]
 8002e74:	4413      	add	r3, r2
 8002e76:	3304      	adds	r3, #4
 8002e78:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	687a      	ldr	r2, [r7, #4]
 8002e7e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	683a      	ldr	r2, [r7, #0]
 8002e84:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e92:	7afb      	ldrb	r3, [r7, #11]
 8002e94:	f003 030f 	and.w	r3, r3, #15
 8002e98:	b2da      	uxtb	r2, r3
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	799b      	ldrb	r3, [r3, #6]
 8002ea2:	2b01      	cmp	r3, #1
 8002ea4:	d102      	bne.n	8002eac <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002ea6:	687a      	ldr	r2, [r7, #4]
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	6818      	ldr	r0, [r3, #0]
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	799b      	ldrb	r3, [r3, #6]
 8002eb4:	461a      	mov	r2, r3
 8002eb6:	6979      	ldr	r1, [r7, #20]
 8002eb8:	f003 fac4 	bl	8006444 <USB_EPStartXfer>

  return HAL_OK;
 8002ebc:	2300      	movs	r3, #0
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	3718      	adds	r7, #24
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}

08002ec6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002ec6:	b480      	push	{r7}
 8002ec8:	b083      	sub	sp, #12
 8002eca:	af00      	add	r7, sp, #0
 8002ecc:	6078      	str	r0, [r7, #4]
 8002ece:	460b      	mov	r3, r1
 8002ed0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002ed2:	78fb      	ldrb	r3, [r7, #3]
 8002ed4:	f003 020f 	and.w	r2, r3, #15
 8002ed8:	6879      	ldr	r1, [r7, #4]
 8002eda:	4613      	mov	r3, r2
 8002edc:	00db      	lsls	r3, r3, #3
 8002ede:	4413      	add	r3, r2
 8002ee0:	009b      	lsls	r3, r3, #2
 8002ee2:	440b      	add	r3, r1
 8002ee4:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8002ee8:	681b      	ldr	r3, [r3, #0]
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	370c      	adds	r7, #12
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef4:	4770      	bx	lr

08002ef6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002ef6:	b580      	push	{r7, lr}
 8002ef8:	b086      	sub	sp, #24
 8002efa:	af00      	add	r7, sp, #0
 8002efc:	60f8      	str	r0, [r7, #12]
 8002efe:	607a      	str	r2, [r7, #4]
 8002f00:	603b      	str	r3, [r7, #0]
 8002f02:	460b      	mov	r3, r1
 8002f04:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f06:	7afb      	ldrb	r3, [r7, #11]
 8002f08:	f003 020f 	and.w	r2, r3, #15
 8002f0c:	4613      	mov	r3, r2
 8002f0e:	00db      	lsls	r3, r3, #3
 8002f10:	4413      	add	r3, r2
 8002f12:	009b      	lsls	r3, r3, #2
 8002f14:	3310      	adds	r3, #16
 8002f16:	68fa      	ldr	r2, [r7, #12]
 8002f18:	4413      	add	r3, r2
 8002f1a:	3304      	adds	r3, #4
 8002f1c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	687a      	ldr	r2, [r7, #4]
 8002f22:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	683a      	ldr	r2, [r7, #0]
 8002f28:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	2201      	movs	r2, #1
 8002f34:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f36:	7afb      	ldrb	r3, [r7, #11]
 8002f38:	f003 030f 	and.w	r3, r3, #15
 8002f3c:	b2da      	uxtb	r2, r3
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	799b      	ldrb	r3, [r3, #6]
 8002f46:	2b01      	cmp	r3, #1
 8002f48:	d102      	bne.n	8002f50 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002f4a:	687a      	ldr	r2, [r7, #4]
 8002f4c:	697b      	ldr	r3, [r7, #20]
 8002f4e:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	6818      	ldr	r0, [r3, #0]
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	799b      	ldrb	r3, [r3, #6]
 8002f58:	461a      	mov	r2, r3
 8002f5a:	6979      	ldr	r1, [r7, #20]
 8002f5c:	f003 fa72 	bl	8006444 <USB_EPStartXfer>

  return HAL_OK;
 8002f60:	2300      	movs	r3, #0
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	3718      	adds	r7, #24
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}

08002f6a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f6a:	b580      	push	{r7, lr}
 8002f6c:	b084      	sub	sp, #16
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	6078      	str	r0, [r7, #4]
 8002f72:	460b      	mov	r3, r1
 8002f74:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002f76:	78fb      	ldrb	r3, [r7, #3]
 8002f78:	f003 030f 	and.w	r3, r3, #15
 8002f7c:	687a      	ldr	r2, [r7, #4]
 8002f7e:	7912      	ldrb	r2, [r2, #4]
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d901      	bls.n	8002f88 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	e04f      	b.n	8003028 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002f88:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	da0f      	bge.n	8002fb0 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f90:	78fb      	ldrb	r3, [r7, #3]
 8002f92:	f003 020f 	and.w	r2, r3, #15
 8002f96:	4613      	mov	r3, r2
 8002f98:	00db      	lsls	r3, r3, #3
 8002f9a:	4413      	add	r3, r2
 8002f9c:	009b      	lsls	r3, r3, #2
 8002f9e:	3310      	adds	r3, #16
 8002fa0:	687a      	ldr	r2, [r7, #4]
 8002fa2:	4413      	add	r3, r2
 8002fa4:	3304      	adds	r3, #4
 8002fa6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2201      	movs	r2, #1
 8002fac:	705a      	strb	r2, [r3, #1]
 8002fae:	e00d      	b.n	8002fcc <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002fb0:	78fa      	ldrb	r2, [r7, #3]
 8002fb2:	4613      	mov	r3, r2
 8002fb4:	00db      	lsls	r3, r3, #3
 8002fb6:	4413      	add	r3, r2
 8002fb8:	009b      	lsls	r3, r3, #2
 8002fba:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002fbe:	687a      	ldr	r2, [r7, #4]
 8002fc0:	4413      	add	r3, r2
 8002fc2:	3304      	adds	r3, #4
 8002fc4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2201      	movs	r2, #1
 8002fd0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002fd2:	78fb      	ldrb	r3, [r7, #3]
 8002fd4:	f003 030f 	and.w	r3, r3, #15
 8002fd8:	b2da      	uxtb	r2, r3
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002fe4:	2b01      	cmp	r3, #1
 8002fe6:	d101      	bne.n	8002fec <HAL_PCD_EP_SetStall+0x82>
 8002fe8:	2302      	movs	r3, #2
 8002fea:	e01d      	b.n	8003028 <HAL_PCD_EP_SetStall+0xbe>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2201      	movs	r2, #1
 8002ff0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	68f9      	ldr	r1, [r7, #12]
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f003 fe00 	bl	8006c00 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003000:	78fb      	ldrb	r3, [r7, #3]
 8003002:	f003 030f 	and.w	r3, r3, #15
 8003006:	2b00      	cmp	r3, #0
 8003008:	d109      	bne.n	800301e <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6818      	ldr	r0, [r3, #0]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	7999      	ldrb	r1, [r3, #6]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003018:	461a      	mov	r2, r3
 800301a:	f003 fff1 	bl	8007000 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2200      	movs	r2, #0
 8003022:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003026:	2300      	movs	r3, #0
}
 8003028:	4618      	mov	r0, r3
 800302a:	3710      	adds	r7, #16
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}

08003030 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b084      	sub	sp, #16
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
 8003038:	460b      	mov	r3, r1
 800303a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800303c:	78fb      	ldrb	r3, [r7, #3]
 800303e:	f003 030f 	and.w	r3, r3, #15
 8003042:	687a      	ldr	r2, [r7, #4]
 8003044:	7912      	ldrb	r2, [r2, #4]
 8003046:	4293      	cmp	r3, r2
 8003048:	d901      	bls.n	800304e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800304a:	2301      	movs	r3, #1
 800304c:	e042      	b.n	80030d4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800304e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003052:	2b00      	cmp	r3, #0
 8003054:	da0f      	bge.n	8003076 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003056:	78fb      	ldrb	r3, [r7, #3]
 8003058:	f003 020f 	and.w	r2, r3, #15
 800305c:	4613      	mov	r3, r2
 800305e:	00db      	lsls	r3, r3, #3
 8003060:	4413      	add	r3, r2
 8003062:	009b      	lsls	r3, r3, #2
 8003064:	3310      	adds	r3, #16
 8003066:	687a      	ldr	r2, [r7, #4]
 8003068:	4413      	add	r3, r2
 800306a:	3304      	adds	r3, #4
 800306c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	2201      	movs	r2, #1
 8003072:	705a      	strb	r2, [r3, #1]
 8003074:	e00f      	b.n	8003096 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003076:	78fb      	ldrb	r3, [r7, #3]
 8003078:	f003 020f 	and.w	r2, r3, #15
 800307c:	4613      	mov	r3, r2
 800307e:	00db      	lsls	r3, r3, #3
 8003080:	4413      	add	r3, r2
 8003082:	009b      	lsls	r3, r3, #2
 8003084:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003088:	687a      	ldr	r2, [r7, #4]
 800308a:	4413      	add	r3, r2
 800308c:	3304      	adds	r3, #4
 800308e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	2200      	movs	r2, #0
 8003094:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	2200      	movs	r2, #0
 800309a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800309c:	78fb      	ldrb	r3, [r7, #3]
 800309e:	f003 030f 	and.w	r3, r3, #15
 80030a2:	b2da      	uxtb	r2, r3
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80030ae:	2b01      	cmp	r3, #1
 80030b0:	d101      	bne.n	80030b6 <HAL_PCD_EP_ClrStall+0x86>
 80030b2:	2302      	movs	r3, #2
 80030b4:	e00e      	b.n	80030d4 <HAL_PCD_EP_ClrStall+0xa4>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2201      	movs	r2, #1
 80030ba:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	68f9      	ldr	r1, [r7, #12]
 80030c4:	4618      	mov	r0, r3
 80030c6:	f003 fe09 	bl	8006cdc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2200      	movs	r2, #0
 80030ce:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80030d2:	2300      	movs	r3, #0
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	3710      	adds	r7, #16
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}

080030dc <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b084      	sub	sp, #16
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
 80030e4:	460b      	mov	r3, r1
 80030e6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80030e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	da0c      	bge.n	800310a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030f0:	78fb      	ldrb	r3, [r7, #3]
 80030f2:	f003 020f 	and.w	r2, r3, #15
 80030f6:	4613      	mov	r3, r2
 80030f8:	00db      	lsls	r3, r3, #3
 80030fa:	4413      	add	r3, r2
 80030fc:	009b      	lsls	r3, r3, #2
 80030fe:	3310      	adds	r3, #16
 8003100:	687a      	ldr	r2, [r7, #4]
 8003102:	4413      	add	r3, r2
 8003104:	3304      	adds	r3, #4
 8003106:	60fb      	str	r3, [r7, #12]
 8003108:	e00c      	b.n	8003124 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800310a:	78fb      	ldrb	r3, [r7, #3]
 800310c:	f003 020f 	and.w	r2, r3, #15
 8003110:	4613      	mov	r3, r2
 8003112:	00db      	lsls	r3, r3, #3
 8003114:	4413      	add	r3, r2
 8003116:	009b      	lsls	r3, r3, #2
 8003118:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800311c:	687a      	ldr	r2, [r7, #4]
 800311e:	4413      	add	r3, r2
 8003120:	3304      	adds	r3, #4
 8003122:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	68f9      	ldr	r1, [r7, #12]
 800312a:	4618      	mov	r0, r3
 800312c:	f003 fc28 	bl	8006980 <USB_EPStopXfer>
 8003130:	4603      	mov	r3, r0
 8003132:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003134:	7afb      	ldrb	r3, [r7, #11]
}
 8003136:	4618      	mov	r0, r3
 8003138:	3710      	adds	r7, #16
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}

0800313e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800313e:	b580      	push	{r7, lr}
 8003140:	b08a      	sub	sp, #40	@ 0x28
 8003142:	af02      	add	r7, sp, #8
 8003144:	6078      	str	r0, [r7, #4]
 8003146:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003152:	683a      	ldr	r2, [r7, #0]
 8003154:	4613      	mov	r3, r2
 8003156:	00db      	lsls	r3, r3, #3
 8003158:	4413      	add	r3, r2
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	3310      	adds	r3, #16
 800315e:	687a      	ldr	r2, [r7, #4]
 8003160:	4413      	add	r3, r2
 8003162:	3304      	adds	r3, #4
 8003164:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	695a      	ldr	r2, [r3, #20]
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	691b      	ldr	r3, [r3, #16]
 800316e:	429a      	cmp	r2, r3
 8003170:	d901      	bls.n	8003176 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	e06b      	b.n	800324e <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	691a      	ldr	r2, [r3, #16]
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	695b      	ldr	r3, [r3, #20]
 800317e:	1ad3      	subs	r3, r2, r3
 8003180:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	69fa      	ldr	r2, [r7, #28]
 8003188:	429a      	cmp	r2, r3
 800318a:	d902      	bls.n	8003192 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003192:	69fb      	ldr	r3, [r7, #28]
 8003194:	3303      	adds	r3, #3
 8003196:	089b      	lsrs	r3, r3, #2
 8003198:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800319a:	e02a      	b.n	80031f2 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	691a      	ldr	r2, [r3, #16]
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	695b      	ldr	r3, [r3, #20]
 80031a4:	1ad3      	subs	r3, r2, r3
 80031a6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	689b      	ldr	r3, [r3, #8]
 80031ac:	69fa      	ldr	r2, [r7, #28]
 80031ae:	429a      	cmp	r2, r3
 80031b0:	d902      	bls.n	80031b8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80031b8:	69fb      	ldr	r3, [r7, #28]
 80031ba:	3303      	adds	r3, #3
 80031bc:	089b      	lsrs	r3, r3, #2
 80031be:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	68d9      	ldr	r1, [r3, #12]
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	b2da      	uxtb	r2, r3
 80031c8:	69fb      	ldr	r3, [r7, #28]
 80031ca:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80031d0:	9300      	str	r3, [sp, #0]
 80031d2:	4603      	mov	r3, r0
 80031d4:	6978      	ldr	r0, [r7, #20]
 80031d6:	f003 fc7d 	bl	8006ad4 <USB_WritePacket>

    ep->xfer_buff  += len;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	68da      	ldr	r2, [r3, #12]
 80031de:	69fb      	ldr	r3, [r7, #28]
 80031e0:	441a      	add	r2, r3
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	695a      	ldr	r2, [r3, #20]
 80031ea:	69fb      	ldr	r3, [r7, #28]
 80031ec:	441a      	add	r2, r3
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	015a      	lsls	r2, r3, #5
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	4413      	add	r3, r2
 80031fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80031fe:	699b      	ldr	r3, [r3, #24]
 8003200:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003202:	69ba      	ldr	r2, [r7, #24]
 8003204:	429a      	cmp	r2, r3
 8003206:	d809      	bhi.n	800321c <PCD_WriteEmptyTxFifo+0xde>
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	695a      	ldr	r2, [r3, #20]
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003210:	429a      	cmp	r2, r3
 8003212:	d203      	bcs.n	800321c <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	691b      	ldr	r3, [r3, #16]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d1bf      	bne.n	800319c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	691a      	ldr	r2, [r3, #16]
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	695b      	ldr	r3, [r3, #20]
 8003224:	429a      	cmp	r2, r3
 8003226:	d811      	bhi.n	800324c <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	f003 030f 	and.w	r3, r3, #15
 800322e:	2201      	movs	r2, #1
 8003230:	fa02 f303 	lsl.w	r3, r2, r3
 8003234:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800323c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	43db      	mvns	r3, r3
 8003242:	6939      	ldr	r1, [r7, #16]
 8003244:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003248:	4013      	ands	r3, r2
 800324a:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800324c:	2300      	movs	r3, #0
}
 800324e:	4618      	mov	r0, r3
 8003250:	3720      	adds	r7, #32
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}
	...

08003258 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b088      	sub	sp, #32
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
 8003260:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003268:	69fb      	ldr	r3, [r7, #28]
 800326a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800326c:	69fb      	ldr	r3, [r7, #28]
 800326e:	333c      	adds	r3, #60	@ 0x3c
 8003270:	3304      	adds	r3, #4
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	015a      	lsls	r2, r3, #5
 800327a:	69bb      	ldr	r3, [r7, #24]
 800327c:	4413      	add	r3, r2
 800327e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	799b      	ldrb	r3, [r3, #6]
 800328a:	2b01      	cmp	r3, #1
 800328c:	d17b      	bne.n	8003386 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	f003 0308 	and.w	r3, r3, #8
 8003294:	2b00      	cmp	r3, #0
 8003296:	d015      	beq.n	80032c4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	4a61      	ldr	r2, [pc, #388]	@ (8003420 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800329c:	4293      	cmp	r3, r2
 800329e:	f240 80b9 	bls.w	8003414 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	f000 80b3 	beq.w	8003414 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	015a      	lsls	r2, r3, #5
 80032b2:	69bb      	ldr	r3, [r7, #24]
 80032b4:	4413      	add	r3, r2
 80032b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80032ba:	461a      	mov	r2, r3
 80032bc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80032c0:	6093      	str	r3, [r2, #8]
 80032c2:	e0a7      	b.n	8003414 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	f003 0320 	and.w	r3, r3, #32
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d009      	beq.n	80032e2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	015a      	lsls	r2, r3, #5
 80032d2:	69bb      	ldr	r3, [r7, #24]
 80032d4:	4413      	add	r3, r2
 80032d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80032da:	461a      	mov	r2, r3
 80032dc:	2320      	movs	r3, #32
 80032de:	6093      	str	r3, [r2, #8]
 80032e0:	e098      	b.n	8003414 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	f040 8093 	bne.w	8003414 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	4a4b      	ldr	r2, [pc, #300]	@ (8003420 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d90f      	bls.n	8003316 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d00a      	beq.n	8003316 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	015a      	lsls	r2, r3, #5
 8003304:	69bb      	ldr	r3, [r7, #24]
 8003306:	4413      	add	r3, r2
 8003308:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800330c:	461a      	mov	r2, r3
 800330e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003312:	6093      	str	r3, [r2, #8]
 8003314:	e07e      	b.n	8003414 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003316:	683a      	ldr	r2, [r7, #0]
 8003318:	4613      	mov	r3, r2
 800331a:	00db      	lsls	r3, r3, #3
 800331c:	4413      	add	r3, r2
 800331e:	009b      	lsls	r3, r3, #2
 8003320:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003324:	687a      	ldr	r2, [r7, #4]
 8003326:	4413      	add	r3, r2
 8003328:	3304      	adds	r3, #4
 800332a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	6a1a      	ldr	r2, [r3, #32]
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	0159      	lsls	r1, r3, #5
 8003334:	69bb      	ldr	r3, [r7, #24]
 8003336:	440b      	add	r3, r1
 8003338:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800333c:	691b      	ldr	r3, [r3, #16]
 800333e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003342:	1ad2      	subs	r2, r2, r3
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d114      	bne.n	8003378 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	691b      	ldr	r3, [r3, #16]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d109      	bne.n	800336a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6818      	ldr	r0, [r3, #0]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003360:	461a      	mov	r2, r3
 8003362:	2101      	movs	r1, #1
 8003364:	f003 fe4c 	bl	8007000 <USB_EP0_OutStart>
 8003368:	e006      	b.n	8003378 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	68da      	ldr	r2, [r3, #12]
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	695b      	ldr	r3, [r3, #20]
 8003372:	441a      	add	r2, r3
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	b2db      	uxtb	r3, r3
 800337c:	4619      	mov	r1, r3
 800337e:	6878      	ldr	r0, [r7, #4]
 8003380:	f006 f996 	bl	80096b0 <HAL_PCD_DataOutStageCallback>
 8003384:	e046      	b.n	8003414 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	4a26      	ldr	r2, [pc, #152]	@ (8003424 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d124      	bne.n	80033d8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003394:	2b00      	cmp	r3, #0
 8003396:	d00a      	beq.n	80033ae <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	015a      	lsls	r2, r3, #5
 800339c:	69bb      	ldr	r3, [r7, #24]
 800339e:	4413      	add	r3, r2
 80033a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80033a4:	461a      	mov	r2, r3
 80033a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80033aa:	6093      	str	r3, [r2, #8]
 80033ac:	e032      	b.n	8003414 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	f003 0320 	and.w	r3, r3, #32
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d008      	beq.n	80033ca <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	015a      	lsls	r2, r3, #5
 80033bc:	69bb      	ldr	r3, [r7, #24]
 80033be:	4413      	add	r3, r2
 80033c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80033c4:	461a      	mov	r2, r3
 80033c6:	2320      	movs	r3, #32
 80033c8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	b2db      	uxtb	r3, r3
 80033ce:	4619      	mov	r1, r3
 80033d0:	6878      	ldr	r0, [r7, #4]
 80033d2:	f006 f96d 	bl	80096b0 <HAL_PCD_DataOutStageCallback>
 80033d6:	e01d      	b.n	8003414 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d114      	bne.n	8003408 <PCD_EP_OutXfrComplete_int+0x1b0>
 80033de:	6879      	ldr	r1, [r7, #4]
 80033e0:	683a      	ldr	r2, [r7, #0]
 80033e2:	4613      	mov	r3, r2
 80033e4:	00db      	lsls	r3, r3, #3
 80033e6:	4413      	add	r3, r2
 80033e8:	009b      	lsls	r3, r3, #2
 80033ea:	440b      	add	r3, r1
 80033ec:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d108      	bne.n	8003408 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6818      	ldr	r0, [r3, #0]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003400:	461a      	mov	r2, r3
 8003402:	2100      	movs	r1, #0
 8003404:	f003 fdfc 	bl	8007000 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	b2db      	uxtb	r3, r3
 800340c:	4619      	mov	r1, r3
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	f006 f94e 	bl	80096b0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003414:	2300      	movs	r3, #0
}
 8003416:	4618      	mov	r0, r3
 8003418:	3720      	adds	r7, #32
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}
 800341e:	bf00      	nop
 8003420:	4f54300a 	.word	0x4f54300a
 8003424:	4f54310a 	.word	0x4f54310a

08003428 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b086      	sub	sp, #24
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
 8003430:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	333c      	adds	r3, #60	@ 0x3c
 8003440:	3304      	adds	r3, #4
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	015a      	lsls	r2, r3, #5
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	4413      	add	r3, r2
 800344e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	4a15      	ldr	r2, [pc, #84]	@ (80034b0 <PCD_EP_OutSetupPacket_int+0x88>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d90e      	bls.n	800347c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003464:	2b00      	cmp	r3, #0
 8003466:	d009      	beq.n	800347c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	015a      	lsls	r2, r3, #5
 800346c:	693b      	ldr	r3, [r7, #16]
 800346e:	4413      	add	r3, r2
 8003470:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003474:	461a      	mov	r2, r3
 8003476:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800347a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800347c:	6878      	ldr	r0, [r7, #4]
 800347e:	f006 f905 	bl	800968c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	4a0a      	ldr	r2, [pc, #40]	@ (80034b0 <PCD_EP_OutSetupPacket_int+0x88>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d90c      	bls.n	80034a4 <PCD_EP_OutSetupPacket_int+0x7c>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	799b      	ldrb	r3, [r3, #6]
 800348e:	2b01      	cmp	r3, #1
 8003490:	d108      	bne.n	80034a4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6818      	ldr	r0, [r3, #0]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800349c:	461a      	mov	r2, r3
 800349e:	2101      	movs	r1, #1
 80034a0:	f003 fdae 	bl	8007000 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80034a4:	2300      	movs	r3, #0
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	3718      	adds	r7, #24
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}
 80034ae:	bf00      	nop
 80034b0:	4f54300a 	.word	0x4f54300a

080034b4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b085      	sub	sp, #20
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
 80034bc:	460b      	mov	r3, r1
 80034be:	70fb      	strb	r3, [r7, #3]
 80034c0:	4613      	mov	r3, r2
 80034c2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034ca:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80034cc:	78fb      	ldrb	r3, [r7, #3]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d107      	bne.n	80034e2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80034d2:	883b      	ldrh	r3, [r7, #0]
 80034d4:	0419      	lsls	r1, r3, #16
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	68ba      	ldr	r2, [r7, #8]
 80034dc:	430a      	orrs	r2, r1
 80034de:	629a      	str	r2, [r3, #40]	@ 0x28
 80034e0:	e028      	b.n	8003534 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034e8:	0c1b      	lsrs	r3, r3, #16
 80034ea:	68ba      	ldr	r2, [r7, #8]
 80034ec:	4413      	add	r3, r2
 80034ee:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80034f0:	2300      	movs	r3, #0
 80034f2:	73fb      	strb	r3, [r7, #15]
 80034f4:	e00d      	b.n	8003512 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681a      	ldr	r2, [r3, #0]
 80034fa:	7bfb      	ldrb	r3, [r7, #15]
 80034fc:	3340      	adds	r3, #64	@ 0x40
 80034fe:	009b      	lsls	r3, r3, #2
 8003500:	4413      	add	r3, r2
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	0c1b      	lsrs	r3, r3, #16
 8003506:	68ba      	ldr	r2, [r7, #8]
 8003508:	4413      	add	r3, r2
 800350a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800350c:	7bfb      	ldrb	r3, [r7, #15]
 800350e:	3301      	adds	r3, #1
 8003510:	73fb      	strb	r3, [r7, #15]
 8003512:	7bfa      	ldrb	r2, [r7, #15]
 8003514:	78fb      	ldrb	r3, [r7, #3]
 8003516:	3b01      	subs	r3, #1
 8003518:	429a      	cmp	r2, r3
 800351a:	d3ec      	bcc.n	80034f6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800351c:	883b      	ldrh	r3, [r7, #0]
 800351e:	0418      	lsls	r0, r3, #16
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6819      	ldr	r1, [r3, #0]
 8003524:	78fb      	ldrb	r3, [r7, #3]
 8003526:	3b01      	subs	r3, #1
 8003528:	68ba      	ldr	r2, [r7, #8]
 800352a:	4302      	orrs	r2, r0
 800352c:	3340      	adds	r3, #64	@ 0x40
 800352e:	009b      	lsls	r3, r3, #2
 8003530:	440b      	add	r3, r1
 8003532:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003534:	2300      	movs	r3, #0
}
 8003536:	4618      	mov	r0, r3
 8003538:	3714      	adds	r7, #20
 800353a:	46bd      	mov	sp, r7
 800353c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003540:	4770      	bx	lr

08003542 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003542:	b480      	push	{r7}
 8003544:	b083      	sub	sp, #12
 8003546:	af00      	add	r7, sp, #0
 8003548:	6078      	str	r0, [r7, #4]
 800354a:	460b      	mov	r3, r1
 800354c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	887a      	ldrh	r2, [r7, #2]
 8003554:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003556:	2300      	movs	r3, #0
}
 8003558:	4618      	mov	r0, r3
 800355a:	370c      	adds	r7, #12
 800355c:	46bd      	mov	sp, r7
 800355e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003562:	4770      	bx	lr

08003564 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003564:	b480      	push	{r7}
 8003566:	b085      	sub	sp, #20
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2201      	movs	r2, #1
 8003576:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2200      	movs	r2, #0
 800357e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	699b      	ldr	r3, [r3, #24]
 8003586:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003592:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003596:	f043 0303 	orr.w	r3, r3, #3
 800359a:	68fa      	ldr	r2, [r7, #12]
 800359c:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800359e:	2300      	movs	r3, #0
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	3714      	adds	r7, #20
 80035a4:	46bd      	mov	sp, r7
 80035a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035aa:	4770      	bx	lr

080035ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b084      	sub	sp, #16
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
 80035b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d101      	bne.n	80035c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035bc:	2301      	movs	r3, #1
 80035be:	e0cc      	b.n	800375a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80035c0:	4b68      	ldr	r3, [pc, #416]	@ (8003764 <HAL_RCC_ClockConfig+0x1b8>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f003 030f 	and.w	r3, r3, #15
 80035c8:	683a      	ldr	r2, [r7, #0]
 80035ca:	429a      	cmp	r2, r3
 80035cc:	d90c      	bls.n	80035e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035ce:	4b65      	ldr	r3, [pc, #404]	@ (8003764 <HAL_RCC_ClockConfig+0x1b8>)
 80035d0:	683a      	ldr	r2, [r7, #0]
 80035d2:	b2d2      	uxtb	r2, r2
 80035d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035d6:	4b63      	ldr	r3, [pc, #396]	@ (8003764 <HAL_RCC_ClockConfig+0x1b8>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 030f 	and.w	r3, r3, #15
 80035de:	683a      	ldr	r2, [r7, #0]
 80035e0:	429a      	cmp	r2, r3
 80035e2:	d001      	beq.n	80035e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80035e4:	2301      	movs	r3, #1
 80035e6:	e0b8      	b.n	800375a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f003 0302 	and.w	r3, r3, #2
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d020      	beq.n	8003636 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f003 0304 	and.w	r3, r3, #4
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d005      	beq.n	800360c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003600:	4b59      	ldr	r3, [pc, #356]	@ (8003768 <HAL_RCC_ClockConfig+0x1bc>)
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	4a58      	ldr	r2, [pc, #352]	@ (8003768 <HAL_RCC_ClockConfig+0x1bc>)
 8003606:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800360a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f003 0308 	and.w	r3, r3, #8
 8003614:	2b00      	cmp	r3, #0
 8003616:	d005      	beq.n	8003624 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003618:	4b53      	ldr	r3, [pc, #332]	@ (8003768 <HAL_RCC_ClockConfig+0x1bc>)
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	4a52      	ldr	r2, [pc, #328]	@ (8003768 <HAL_RCC_ClockConfig+0x1bc>)
 800361e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003622:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003624:	4b50      	ldr	r3, [pc, #320]	@ (8003768 <HAL_RCC_ClockConfig+0x1bc>)
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	689b      	ldr	r3, [r3, #8]
 8003630:	494d      	ldr	r1, [pc, #308]	@ (8003768 <HAL_RCC_ClockConfig+0x1bc>)
 8003632:	4313      	orrs	r3, r2
 8003634:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f003 0301 	and.w	r3, r3, #1
 800363e:	2b00      	cmp	r3, #0
 8003640:	d044      	beq.n	80036cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	2b01      	cmp	r3, #1
 8003648:	d107      	bne.n	800365a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800364a:	4b47      	ldr	r3, [pc, #284]	@ (8003768 <HAL_RCC_ClockConfig+0x1bc>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003652:	2b00      	cmp	r3, #0
 8003654:	d119      	bne.n	800368a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	e07f      	b.n	800375a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	2b02      	cmp	r3, #2
 8003660:	d003      	beq.n	800366a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003666:	2b03      	cmp	r3, #3
 8003668:	d107      	bne.n	800367a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800366a:	4b3f      	ldr	r3, [pc, #252]	@ (8003768 <HAL_RCC_ClockConfig+0x1bc>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003672:	2b00      	cmp	r3, #0
 8003674:	d109      	bne.n	800368a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	e06f      	b.n	800375a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800367a:	4b3b      	ldr	r3, [pc, #236]	@ (8003768 <HAL_RCC_ClockConfig+0x1bc>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f003 0302 	and.w	r3, r3, #2
 8003682:	2b00      	cmp	r3, #0
 8003684:	d101      	bne.n	800368a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	e067      	b.n	800375a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800368a:	4b37      	ldr	r3, [pc, #220]	@ (8003768 <HAL_RCC_ClockConfig+0x1bc>)
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	f023 0203 	bic.w	r2, r3, #3
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	4934      	ldr	r1, [pc, #208]	@ (8003768 <HAL_RCC_ClockConfig+0x1bc>)
 8003698:	4313      	orrs	r3, r2
 800369a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800369c:	f7fd ff6e 	bl	800157c <HAL_GetTick>
 80036a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036a2:	e00a      	b.n	80036ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036a4:	f7fd ff6a 	bl	800157c <HAL_GetTick>
 80036a8:	4602      	mov	r2, r0
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	1ad3      	subs	r3, r2, r3
 80036ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d901      	bls.n	80036ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80036b6:	2303      	movs	r3, #3
 80036b8:	e04f      	b.n	800375a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036ba:	4b2b      	ldr	r3, [pc, #172]	@ (8003768 <HAL_RCC_ClockConfig+0x1bc>)
 80036bc:	689b      	ldr	r3, [r3, #8]
 80036be:	f003 020c 	and.w	r2, r3, #12
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	009b      	lsls	r3, r3, #2
 80036c8:	429a      	cmp	r2, r3
 80036ca:	d1eb      	bne.n	80036a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80036cc:	4b25      	ldr	r3, [pc, #148]	@ (8003764 <HAL_RCC_ClockConfig+0x1b8>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f003 030f 	and.w	r3, r3, #15
 80036d4:	683a      	ldr	r2, [r7, #0]
 80036d6:	429a      	cmp	r2, r3
 80036d8:	d20c      	bcs.n	80036f4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036da:	4b22      	ldr	r3, [pc, #136]	@ (8003764 <HAL_RCC_ClockConfig+0x1b8>)
 80036dc:	683a      	ldr	r2, [r7, #0]
 80036de:	b2d2      	uxtb	r2, r2
 80036e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036e2:	4b20      	ldr	r3, [pc, #128]	@ (8003764 <HAL_RCC_ClockConfig+0x1b8>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f003 030f 	and.w	r3, r3, #15
 80036ea:	683a      	ldr	r2, [r7, #0]
 80036ec:	429a      	cmp	r2, r3
 80036ee:	d001      	beq.n	80036f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80036f0:	2301      	movs	r3, #1
 80036f2:	e032      	b.n	800375a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f003 0304 	and.w	r3, r3, #4
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d008      	beq.n	8003712 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003700:	4b19      	ldr	r3, [pc, #100]	@ (8003768 <HAL_RCC_ClockConfig+0x1bc>)
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	68db      	ldr	r3, [r3, #12]
 800370c:	4916      	ldr	r1, [pc, #88]	@ (8003768 <HAL_RCC_ClockConfig+0x1bc>)
 800370e:	4313      	orrs	r3, r2
 8003710:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f003 0308 	and.w	r3, r3, #8
 800371a:	2b00      	cmp	r3, #0
 800371c:	d009      	beq.n	8003732 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800371e:	4b12      	ldr	r3, [pc, #72]	@ (8003768 <HAL_RCC_ClockConfig+0x1bc>)
 8003720:	689b      	ldr	r3, [r3, #8]
 8003722:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	691b      	ldr	r3, [r3, #16]
 800372a:	00db      	lsls	r3, r3, #3
 800372c:	490e      	ldr	r1, [pc, #56]	@ (8003768 <HAL_RCC_ClockConfig+0x1bc>)
 800372e:	4313      	orrs	r3, r2
 8003730:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003732:	f000 fb7f 	bl	8003e34 <HAL_RCC_GetSysClockFreq>
 8003736:	4602      	mov	r2, r0
 8003738:	4b0b      	ldr	r3, [pc, #44]	@ (8003768 <HAL_RCC_ClockConfig+0x1bc>)
 800373a:	689b      	ldr	r3, [r3, #8]
 800373c:	091b      	lsrs	r3, r3, #4
 800373e:	f003 030f 	and.w	r3, r3, #15
 8003742:	490a      	ldr	r1, [pc, #40]	@ (800376c <HAL_RCC_ClockConfig+0x1c0>)
 8003744:	5ccb      	ldrb	r3, [r1, r3]
 8003746:	fa22 f303 	lsr.w	r3, r2, r3
 800374a:	4a09      	ldr	r2, [pc, #36]	@ (8003770 <HAL_RCC_ClockConfig+0x1c4>)
 800374c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800374e:	4b09      	ldr	r3, [pc, #36]	@ (8003774 <HAL_RCC_ClockConfig+0x1c8>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4618      	mov	r0, r3
 8003754:	f7fd fece 	bl	80014f4 <HAL_InitTick>

  return HAL_OK;
 8003758:	2300      	movs	r3, #0
}
 800375a:	4618      	mov	r0, r3
 800375c:	3710      	adds	r7, #16
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}
 8003762:	bf00      	nop
 8003764:	40023c00 	.word	0x40023c00
 8003768:	40023800 	.word	0x40023800
 800376c:	08009d60 	.word	0x08009d60
 8003770:	20000010 	.word	0x20000010
 8003774:	20000014 	.word	0x20000014

08003778 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003778:	b480      	push	{r7}
 800377a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800377c:	4b03      	ldr	r3, [pc, #12]	@ (800378c <HAL_RCC_GetHCLKFreq+0x14>)
 800377e:	681b      	ldr	r3, [r3, #0]
}
 8003780:	4618      	mov	r0, r3
 8003782:	46bd      	mov	sp, r7
 8003784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003788:	4770      	bx	lr
 800378a:	bf00      	nop
 800378c:	20000010 	.word	0x20000010

08003790 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003794:	f7ff fff0 	bl	8003778 <HAL_RCC_GetHCLKFreq>
 8003798:	4602      	mov	r2, r0
 800379a:	4b05      	ldr	r3, [pc, #20]	@ (80037b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800379c:	689b      	ldr	r3, [r3, #8]
 800379e:	0a9b      	lsrs	r3, r3, #10
 80037a0:	f003 0307 	and.w	r3, r3, #7
 80037a4:	4903      	ldr	r1, [pc, #12]	@ (80037b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80037a6:	5ccb      	ldrb	r3, [r1, r3]
 80037a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	bd80      	pop	{r7, pc}
 80037b0:	40023800 	.word	0x40023800
 80037b4:	08009d70 	.word	0x08009d70

080037b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80037bc:	f7ff ffdc 	bl	8003778 <HAL_RCC_GetHCLKFreq>
 80037c0:	4602      	mov	r2, r0
 80037c2:	4b05      	ldr	r3, [pc, #20]	@ (80037d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80037c4:	689b      	ldr	r3, [r3, #8]
 80037c6:	0b5b      	lsrs	r3, r3, #13
 80037c8:	f003 0307 	and.w	r3, r3, #7
 80037cc:	4903      	ldr	r1, [pc, #12]	@ (80037dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80037ce:	5ccb      	ldrb	r3, [r1, r3]
 80037d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037d4:	4618      	mov	r0, r3
 80037d6:	bd80      	pop	{r7, pc}
 80037d8:	40023800 	.word	0x40023800
 80037dc:	08009d70 	.word	0x08009d70

080037e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b08c      	sub	sp, #48	@ 0x30
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80037e8:	2300      	movs	r3, #0
 80037ea:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmpreg1 = 0U;
 80037ec:	2300      	movs	r3, #0
 80037ee:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 80037f0:	2300      	movs	r3, #0
 80037f2:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 80037f4:	2300      	movs	r3, #0
 80037f6:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 80037f8:	2300      	movs	r3, #0
 80037fa:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 80037fc:	2300      	movs	r3, #0
 80037fe:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8003800:	2300      	movs	r3, #0
 8003802:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8003804:	2300      	movs	r3, #0
 8003806:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t pllsaiused = 0U;
 8003808:	2300      	movs	r3, #0
 800380a:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f003 0301 	and.w	r3, r3, #1
 8003814:	2b00      	cmp	r3, #0
 8003816:	d010      	beq.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8003818:	4b6f      	ldr	r3, [pc, #444]	@ (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800381a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800381e:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003826:	496c      	ldr	r1, [pc, #432]	@ (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003828:	4313      	orrs	r3, r2
 800382a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003832:	2b00      	cmp	r3, #0
 8003834:	d101      	bne.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8003836:	2301      	movs	r3, #1
 8003838:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f003 0302 	and.w	r3, r3, #2
 8003842:	2b00      	cmp	r3, #0
 8003844:	d010      	beq.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8003846:	4b64      	ldr	r3, [pc, #400]	@ (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003848:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800384c:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003854:	4960      	ldr	r1, [pc, #384]	@ (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003856:	4313      	orrs	r3, r2
 8003858:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003860:	2b00      	cmp	r3, #0
 8003862:	d101      	bne.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8003864:	2301      	movs	r3, #1
 8003866:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f003 0304 	and.w	r3, r3, #4
 8003870:	2b00      	cmp	r3, #0
 8003872:	d017      	beq.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003874:	4b58      	ldr	r3, [pc, #352]	@ (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003876:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800387a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003882:	4955      	ldr	r1, [pc, #340]	@ (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003884:	4313      	orrs	r3, r2
 8003886:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800388e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003892:	d101      	bne.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8003894:	2301      	movs	r3, #1
 8003896:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800389c:	2b00      	cmp	r3, #0
 800389e:	d101      	bne.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 80038a0:	2301      	movs	r3, #1
 80038a2:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f003 0308 	and.w	r3, r3, #8
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d017      	beq.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80038b0:	4b49      	ldr	r3, [pc, #292]	@ (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80038b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80038b6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038be:	4946      	ldr	r1, [pc, #280]	@ (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80038c0:	4313      	orrs	r3, r2
 80038c2:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038ca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80038ce:	d101      	bne.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 80038d0:	2301      	movs	r3, #1
 80038d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d101      	bne.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 80038dc:	2301      	movs	r3, #1
 80038de:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f003 0320 	and.w	r3, r3, #32
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	f000 808a 	beq.w	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80038ee:	2300      	movs	r3, #0
 80038f0:	60bb      	str	r3, [r7, #8]
 80038f2:	4b39      	ldr	r3, [pc, #228]	@ (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80038f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038f6:	4a38      	ldr	r2, [pc, #224]	@ (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80038f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80038fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80038fe:	4b36      	ldr	r3, [pc, #216]	@ (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003900:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003902:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003906:	60bb      	str	r3, [r7, #8]
 8003908:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800390a:	4b34      	ldr	r3, [pc, #208]	@ (80039dc <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a33      	ldr	r2, [pc, #204]	@ (80039dc <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003910:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003914:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003916:	f7fd fe31 	bl	800157c <HAL_GetTick>
 800391a:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800391c:	e008      	b.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800391e:	f7fd fe2d 	bl	800157c <HAL_GetTick>
 8003922:	4602      	mov	r2, r0
 8003924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003926:	1ad3      	subs	r3, r2, r3
 8003928:	2b02      	cmp	r3, #2
 800392a:	d901      	bls.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 800392c:	2303      	movs	r3, #3
 800392e:	e278      	b.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8003930:	4b2a      	ldr	r3, [pc, #168]	@ (80039dc <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003938:	2b00      	cmp	r3, #0
 800393a:	d0f0      	beq.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800393c:	4b26      	ldr	r3, [pc, #152]	@ (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800393e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003940:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003944:	623b      	str	r3, [r7, #32]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003946:	6a3b      	ldr	r3, [r7, #32]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d02f      	beq.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003950:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003954:	6a3a      	ldr	r2, [r7, #32]
 8003956:	429a      	cmp	r2, r3
 8003958:	d028      	beq.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800395a:	4b1f      	ldr	r3, [pc, #124]	@ (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800395c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800395e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003962:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003964:	4b1e      	ldr	r3, [pc, #120]	@ (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8003966:	2201      	movs	r2, #1
 8003968:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800396a:	4b1d      	ldr	r3, [pc, #116]	@ (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800396c:	2200      	movs	r2, #0
 800396e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003970:	4a19      	ldr	r2, [pc, #100]	@ (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003972:	6a3b      	ldr	r3, [r7, #32]
 8003974:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003976:	4b18      	ldr	r3, [pc, #96]	@ (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003978:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800397a:	f003 0301 	and.w	r3, r3, #1
 800397e:	2b01      	cmp	r3, #1
 8003980:	d114      	bne.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003982:	f7fd fdfb 	bl	800157c <HAL_GetTick>
 8003986:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003988:	e00a      	b.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800398a:	f7fd fdf7 	bl	800157c <HAL_GetTick>
 800398e:	4602      	mov	r2, r0
 8003990:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003992:	1ad3      	subs	r3, r2, r3
 8003994:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003998:	4293      	cmp	r3, r2
 800399a:	d901      	bls.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 800399c:	2303      	movs	r3, #3
 800399e:	e240      	b.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039a0:	4b0d      	ldr	r3, [pc, #52]	@ (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80039a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039a4:	f003 0302 	and.w	r3, r3, #2
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d0ee      	beq.n	800398a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039b0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80039b4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80039b8:	d114      	bne.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x204>
 80039ba:	4b07      	ldr	r3, [pc, #28]	@ (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80039bc:	689b      	ldr	r3, [r3, #8]
 80039be:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039c6:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80039ca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80039ce:	4902      	ldr	r1, [pc, #8]	@ (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80039d0:	4313      	orrs	r3, r2
 80039d2:	608b      	str	r3, [r1, #8]
 80039d4:	e00c      	b.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x210>
 80039d6:	bf00      	nop
 80039d8:	40023800 	.word	0x40023800
 80039dc:	40007000 	.word	0x40007000
 80039e0:	42470e40 	.word	0x42470e40
 80039e4:	4b4a      	ldr	r3, [pc, #296]	@ (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	4a49      	ldr	r2, [pc, #292]	@ (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80039ea:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80039ee:	6093      	str	r3, [r2, #8]
 80039f0:	4b47      	ldr	r3, [pc, #284]	@ (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80039f2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039fc:	4944      	ldr	r1, [pc, #272]	@ (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80039fe:	4313      	orrs	r3, r2
 8003a00:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f003 0310 	and.w	r3, r3, #16
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d004      	beq.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8003a14:	4b3f      	ldr	r3, [pc, #252]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8003a16:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d00a      	beq.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8003a24:	4b3a      	ldr	r3, [pc, #232]	@ (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003a26:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003a2a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a32:	4937      	ldr	r1, [pc, #220]	@ (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003a34:	4313      	orrs	r3, r2
 8003a36:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d00a      	beq.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003a46:	4b32      	ldr	r3, [pc, #200]	@ (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003a48:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003a4c:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a54:	492e      	ldr	r1, [pc, #184]	@ (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003a56:	4313      	orrs	r3, r2
 8003a58:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d011      	beq.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003a68:	4b29      	ldr	r3, [pc, #164]	@ (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003a6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003a6e:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a76:	4926      	ldr	r1, [pc, #152]	@ (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a82:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003a86:	d101      	bne.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d00a      	beq.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8003a98:	4b1d      	ldr	r3, [pc, #116]	@ (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003a9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003a9e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003aa6:	491a      	ldr	r1, [pc, #104]	@ (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d011      	beq.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8003aba:	4b15      	ldr	r3, [pc, #84]	@ (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003abc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003ac0:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ac8:	4911      	ldr	r1, [pc, #68]	@ (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003aca:	4313      	orrs	r3, r2
 8003acc:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ad4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003ad8:	d101      	bne.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8003ada:	2301      	movs	r3, #1
 8003adc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if ((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003ade:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ae0:	2b01      	cmp	r3, #1
 8003ae2:	d005      	beq.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003aec:	f040 80ff 	bne.w	8003cee <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003af0:	4b09      	ldr	r3, [pc, #36]	@ (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003af2:	2200      	movs	r2, #0
 8003af4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003af6:	f7fd fd41 	bl	800157c <HAL_GetTick>
 8003afa:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003afc:	e00e      	b.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003afe:	f7fd fd3d 	bl	800157c <HAL_GetTick>
 8003b02:	4602      	mov	r2, r0
 8003b04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b06:	1ad3      	subs	r3, r2, r3
 8003b08:	2b02      	cmp	r3, #2
 8003b0a:	d907      	bls.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b0c:	2303      	movs	r3, #3
 8003b0e:	e188      	b.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003b10:	40023800 	.word	0x40023800
 8003b14:	424711e0 	.word	0x424711e0
 8003b18:	42470068 	.word	0x42470068
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003b1c:	4b7e      	ldr	r3, [pc, #504]	@ (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d1ea      	bne.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f003 0301 	and.w	r3, r3, #1
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d003      	beq.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x35c>
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d009      	beq.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x370>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f003 0302 	and.w	r3, r3, #2
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d028      	beq.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d124      	bne.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003b50:	4b71      	ldr	r3, [pc, #452]	@ (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003b52:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003b56:	0c1b      	lsrs	r3, r3, #16
 8003b58:	f003 0303 	and.w	r3, r3, #3
 8003b5c:	3301      	adds	r3, #1
 8003b5e:	005b      	lsls	r3, r3, #1
 8003b60:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003b62:	4b6d      	ldr	r3, [pc, #436]	@ (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003b64:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003b68:	0e1b      	lsrs	r3, r3, #24
 8003b6a:	f003 030f 	and.w	r3, r3, #15
 8003b6e:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp, plli2sq,
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	685a      	ldr	r2, [r3, #4]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	019b      	lsls	r3, r3, #6
 8003b7a:	431a      	orrs	r2, r3
 8003b7c:	69fb      	ldr	r3, [r7, #28]
 8003b7e:	085b      	lsrs	r3, r3, #1
 8003b80:	3b01      	subs	r3, #1
 8003b82:	041b      	lsls	r3, r3, #16
 8003b84:	431a      	orrs	r2, r3
 8003b86:	69bb      	ldr	r3, [r7, #24]
 8003b88:	061b      	lsls	r3, r3, #24
 8003b8a:	431a      	orrs	r2, r3
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	695b      	ldr	r3, [r3, #20]
 8003b90:	071b      	lsls	r3, r3, #28
 8003b92:	4961      	ldr	r1, [pc, #388]	@ (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003b94:	4313      	orrs	r3, r2
 8003b96:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f003 0304 	and.w	r3, r3, #4
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d004      	beq.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003baa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003bae:	d00a      	beq.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d035      	beq.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x448>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003bc0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003bc4:	d130      	bne.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003bc6:	4b54      	ldr	r3, [pc, #336]	@ (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003bc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003bcc:	0c1b      	lsrs	r3, r3, #16
 8003bce:	f003 0303 	and.w	r3, r3, #3
 8003bd2:	3301      	adds	r3, #1
 8003bd4:	005b      	lsls	r3, r3, #1
 8003bd6:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003bd8:	4b4f      	ldr	r3, [pc, #316]	@ (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003bda:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003bde:	0f1b      	lsrs	r3, r3, #28
 8003be0:	f003 0307 	and.w	r3, r3, #7
 8003be4:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp,
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	685a      	ldr	r2, [r3, #4]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	019b      	lsls	r3, r3, #6
 8003bf0:	431a      	orrs	r2, r3
 8003bf2:	69fb      	ldr	r3, [r7, #28]
 8003bf4:	085b      	lsrs	r3, r3, #1
 8003bf6:	3b01      	subs	r3, #1
 8003bf8:	041b      	lsls	r3, r3, #16
 8003bfa:	431a      	orrs	r2, r3
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	691b      	ldr	r3, [r3, #16]
 8003c00:	061b      	lsls	r3, r3, #24
 8003c02:	431a      	orrs	r2, r3
 8003c04:	697b      	ldr	r3, [r7, #20]
 8003c06:	071b      	lsls	r3, r3, #28
 8003c08:	4943      	ldr	r1, [pc, #268]	@ (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003c10:	4b41      	ldr	r3, [pc, #260]	@ (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003c12:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003c16:	f023 021f 	bic.w	r2, r3, #31
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c1e:	3b01      	subs	r3, #1
 8003c20:	493d      	ldr	r1, [pc, #244]	@ (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003c22:	4313      	orrs	r3, r2
 8003c24:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d029      	beq.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
        && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c38:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003c3c:	d124      	bne.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003c3e:	4b36      	ldr	r3, [pc, #216]	@ (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003c40:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003c44:	0c1b      	lsrs	r3, r3, #16
 8003c46:	f003 0303 	and.w	r3, r3, #3
 8003c4a:	3301      	adds	r3, #1
 8003c4c:	005b      	lsls	r3, r3, #1
 8003c4e:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003c50:	4b31      	ldr	r3, [pc, #196]	@ (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003c52:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003c56:	0f1b      	lsrs	r3, r3, #28
 8003c58:	f003 0307 	and.w	r3, r3, #7
 8003c5c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	685a      	ldr	r2, [r3, #4]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	019b      	lsls	r3, r3, #6
 8003c68:	431a      	orrs	r2, r3
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	68db      	ldr	r3, [r3, #12]
 8003c6e:	085b      	lsrs	r3, r3, #1
 8003c70:	3b01      	subs	r3, #1
 8003c72:	041b      	lsls	r3, r3, #16
 8003c74:	431a      	orrs	r2, r3
 8003c76:	69bb      	ldr	r3, [r7, #24]
 8003c78:	061b      	lsls	r3, r3, #24
 8003c7a:	431a      	orrs	r2, r3
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	071b      	lsls	r3, r3, #28
 8003c80:	4925      	ldr	r1, [pc, #148]	@ (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003c82:	4313      	orrs	r3, r2
 8003c84:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              plli2sq, plli2sr);
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d016      	beq.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	685a      	ldr	r2, [r3, #4]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	019b      	lsls	r3, r3, #6
 8003c9e:	431a      	orrs	r2, r3
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	68db      	ldr	r3, [r3, #12]
 8003ca4:	085b      	lsrs	r3, r3, #1
 8003ca6:	3b01      	subs	r3, #1
 8003ca8:	041b      	lsls	r3, r3, #16
 8003caa:	431a      	orrs	r2, r3
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	691b      	ldr	r3, [r3, #16]
 8003cb0:	061b      	lsls	r3, r3, #24
 8003cb2:	431a      	orrs	r2, r3
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	695b      	ldr	r3, [r3, #20]
 8003cb8:	071b      	lsls	r3, r3, #28
 8003cba:	4917      	ldr	r1, [pc, #92]	@ (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003cc2:	4b16      	ldr	r3, [pc, #88]	@ (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8003cc4:	2201      	movs	r2, #1
 8003cc6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003cc8:	f7fd fc58 	bl	800157c <HAL_GetTick>
 8003ccc:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003cce:	e008      	b.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003cd0:	f7fd fc54 	bl	800157c <HAL_GetTick>
 8003cd4:	4602      	mov	r2, r0
 8003cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cd8:	1ad3      	subs	r3, r2, r3
 8003cda:	2b02      	cmp	r3, #2
 8003cdc:	d901      	bls.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003cde:	2303      	movs	r3, #3
 8003ce0:	e09f      	b.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003ce2:	4b0d      	ldr	r3, [pc, #52]	@ (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d0f0      	beq.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if (pllsaiused == 1U)
 8003cee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cf0:	2b01      	cmp	r3, #1
 8003cf2:	f040 8095 	bne.w	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003cf6:	4b0a      	ldr	r3, [pc, #40]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003cfc:	f7fd fc3e 	bl	800157c <HAL_GetTick>
 8003d00:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003d02:	e00f      	b.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003d04:	f7fd fc3a 	bl	800157c <HAL_GetTick>
 8003d08:	4602      	mov	r2, r0
 8003d0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d0c:	1ad3      	subs	r3, r2, r3
 8003d0e:	2b02      	cmp	r3, #2
 8003d10:	d908      	bls.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d12:	2303      	movs	r3, #3
 8003d14:	e085      	b.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003d16:	bf00      	nop
 8003d18:	40023800 	.word	0x40023800
 8003d1c:	42470068 	.word	0x42470068
 8003d20:	42470070 	.word	0x42470070
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003d24:	4b41      	ldr	r3, [pc, #260]	@ (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003d2c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003d30:	d0e8      	beq.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f003 0304 	and.w	r3, r3, #4
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d003      	beq.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x566>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d009      	beq.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x57a>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d02b      	beq.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x5ca>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d127      	bne.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8003d5a:	4b34      	ldr	r3, [pc, #208]	@ (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003d5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d60:	0c1b      	lsrs	r3, r3, #16
 8003d62:	f003 0303 	and.w	r3, r3, #3
 8003d66:	3301      	adds	r3, #1
 8003d68:	005b      	lsls	r3, r3, #1
 8003d6a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, pllsaip,
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	699a      	ldr	r2, [r3, #24]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	69db      	ldr	r3, [r3, #28]
 8003d74:	019b      	lsls	r3, r3, #6
 8003d76:	431a      	orrs	r2, r3
 8003d78:	693b      	ldr	r3, [r7, #16]
 8003d7a:	085b      	lsrs	r3, r3, #1
 8003d7c:	3b01      	subs	r3, #1
 8003d7e:	041b      	lsls	r3, r3, #16
 8003d80:	431a      	orrs	r2, r3
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d86:	061b      	lsls	r3, r3, #24
 8003d88:	4928      	ldr	r1, [pc, #160]	@ (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              PeriphClkInit->PLLSAI.PLLSAIQ, 0U);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003d90:	4b26      	ldr	r3, [pc, #152]	@ (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003d92:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003d96:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d9e:	3b01      	subs	r3, #1
 8003da0:	021b      	lsls	r3, r3, #8
 8003da2:	4922      	ldr	r1, [pc, #136]	@ (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003da4:	4313      	orrs	r3, r2
 8003da6:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d01d      	beq.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x612>
        && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003dba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003dbe:	d118      	bne.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003dc0:	4b1a      	ldr	r3, [pc, #104]	@ (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003dc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dc6:	0e1b      	lsrs	r3, r3, #24
 8003dc8:	f003 030f 	and.w	r3, r3, #15
 8003dcc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP,
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	699a      	ldr	r2, [r3, #24]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	69db      	ldr	r3, [r3, #28]
 8003dd6:	019b      	lsls	r3, r3, #6
 8003dd8:	431a      	orrs	r2, r3
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6a1b      	ldr	r3, [r3, #32]
 8003dde:	085b      	lsrs	r3, r3, #1
 8003de0:	3b01      	subs	r3, #1
 8003de2:	041b      	lsls	r3, r3, #16
 8003de4:	431a      	orrs	r2, r3
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	061b      	lsls	r3, r3, #24
 8003dea:	4910      	ldr	r1, [pc, #64]	@ (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003dec:	4313      	orrs	r3, r2
 8003dee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              pllsaiq, 0U);
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003df2:	4b0f      	ldr	r3, [pc, #60]	@ (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8003df4:	2201      	movs	r2, #1
 8003df6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003df8:	f7fd fbc0 	bl	800157c <HAL_GetTick>
 8003dfc:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003dfe:	e008      	b.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003e00:	f7fd fbbc 	bl	800157c <HAL_GetTick>
 8003e04:	4602      	mov	r2, r0
 8003e06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e08:	1ad3      	subs	r3, r2, r3
 8003e0a:	2b02      	cmp	r3, #2
 8003e0c:	d901      	bls.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e0e:	2303      	movs	r3, #3
 8003e10:	e007      	b.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003e12:	4b06      	ldr	r3, [pc, #24]	@ (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003e1a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003e1e:	d1ef      	bne.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8003e20:	2300      	movs	r3, #0
}
 8003e22:	4618      	mov	r0, r3
 8003e24:	3730      	adds	r7, #48	@ 0x30
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}
 8003e2a:	bf00      	nop
 8003e2c:	40023800 	.word	0x40023800
 8003e30:	42470070 	.word	0x42470070

08003e34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e38:	b0ae      	sub	sp, #184	@ 0xb8
 8003e3a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8003e42:	2300      	movs	r3, #0
 8003e44:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8003e48:	2300      	movs	r3, #0
 8003e4a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8003e54:	2300      	movs	r3, #0
 8003e56:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e5a:	4bcb      	ldr	r3, [pc, #812]	@ (8004188 <HAL_RCC_GetSysClockFreq+0x354>)
 8003e5c:	689b      	ldr	r3, [r3, #8]
 8003e5e:	f003 030c 	and.w	r3, r3, #12
 8003e62:	2b0c      	cmp	r3, #12
 8003e64:	f200 8206 	bhi.w	8004274 <HAL_RCC_GetSysClockFreq+0x440>
 8003e68:	a201      	add	r2, pc, #4	@ (adr r2, 8003e70 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003e6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e6e:	bf00      	nop
 8003e70:	08003ea5 	.word	0x08003ea5
 8003e74:	08004275 	.word	0x08004275
 8003e78:	08004275 	.word	0x08004275
 8003e7c:	08004275 	.word	0x08004275
 8003e80:	08003ead 	.word	0x08003ead
 8003e84:	08004275 	.word	0x08004275
 8003e88:	08004275 	.word	0x08004275
 8003e8c:	08004275 	.word	0x08004275
 8003e90:	08003eb5 	.word	0x08003eb5
 8003e94:	08004275 	.word	0x08004275
 8003e98:	08004275 	.word	0x08004275
 8003e9c:	08004275 	.word	0x08004275
 8003ea0:	080040a5 	.word	0x080040a5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003ea4:	4bb9      	ldr	r3, [pc, #740]	@ (800418c <HAL_RCC_GetSysClockFreq+0x358>)
 8003ea6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003eaa:	e1e7      	b.n	800427c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003eac:	4bb8      	ldr	r3, [pc, #736]	@ (8004190 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003eae:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003eb2:	e1e3      	b.n	800427c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003eb4:	4bb4      	ldr	r3, [pc, #720]	@ (8004188 <HAL_RCC_GetSysClockFreq+0x354>)
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003ebc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003ec0:	4bb1      	ldr	r3, [pc, #708]	@ (8004188 <HAL_RCC_GetSysClockFreq+0x354>)
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d071      	beq.n	8003fb0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ecc:	4bae      	ldr	r3, [pc, #696]	@ (8004188 <HAL_RCC_GetSysClockFreq+0x354>)
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	099b      	lsrs	r3, r3, #6
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003ed8:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8003edc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003ee0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ee4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003ee8:	2300      	movs	r3, #0
 8003eea:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003eee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003ef2:	4622      	mov	r2, r4
 8003ef4:	462b      	mov	r3, r5
 8003ef6:	f04f 0000 	mov.w	r0, #0
 8003efa:	f04f 0100 	mov.w	r1, #0
 8003efe:	0159      	lsls	r1, r3, #5
 8003f00:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f04:	0150      	lsls	r0, r2, #5
 8003f06:	4602      	mov	r2, r0
 8003f08:	460b      	mov	r3, r1
 8003f0a:	4621      	mov	r1, r4
 8003f0c:	1a51      	subs	r1, r2, r1
 8003f0e:	6439      	str	r1, [r7, #64]	@ 0x40
 8003f10:	4629      	mov	r1, r5
 8003f12:	eb63 0301 	sbc.w	r3, r3, r1
 8003f16:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f18:	f04f 0200 	mov.w	r2, #0
 8003f1c:	f04f 0300 	mov.w	r3, #0
 8003f20:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8003f24:	4649      	mov	r1, r9
 8003f26:	018b      	lsls	r3, r1, #6
 8003f28:	4641      	mov	r1, r8
 8003f2a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003f2e:	4641      	mov	r1, r8
 8003f30:	018a      	lsls	r2, r1, #6
 8003f32:	4641      	mov	r1, r8
 8003f34:	1a51      	subs	r1, r2, r1
 8003f36:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003f38:	4649      	mov	r1, r9
 8003f3a:	eb63 0301 	sbc.w	r3, r3, r1
 8003f3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003f40:	f04f 0200 	mov.w	r2, #0
 8003f44:	f04f 0300 	mov.w	r3, #0
 8003f48:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8003f4c:	4649      	mov	r1, r9
 8003f4e:	00cb      	lsls	r3, r1, #3
 8003f50:	4641      	mov	r1, r8
 8003f52:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f56:	4641      	mov	r1, r8
 8003f58:	00ca      	lsls	r2, r1, #3
 8003f5a:	4610      	mov	r0, r2
 8003f5c:	4619      	mov	r1, r3
 8003f5e:	4603      	mov	r3, r0
 8003f60:	4622      	mov	r2, r4
 8003f62:	189b      	adds	r3, r3, r2
 8003f64:	633b      	str	r3, [r7, #48]	@ 0x30
 8003f66:	462b      	mov	r3, r5
 8003f68:	460a      	mov	r2, r1
 8003f6a:	eb42 0303 	adc.w	r3, r2, r3
 8003f6e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003f70:	f04f 0200 	mov.w	r2, #0
 8003f74:	f04f 0300 	mov.w	r3, #0
 8003f78:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003f7c:	4629      	mov	r1, r5
 8003f7e:	024b      	lsls	r3, r1, #9
 8003f80:	4621      	mov	r1, r4
 8003f82:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003f86:	4621      	mov	r1, r4
 8003f88:	024a      	lsls	r2, r1, #9
 8003f8a:	4610      	mov	r0, r2
 8003f8c:	4619      	mov	r1, r3
 8003f8e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003f92:	2200      	movs	r2, #0
 8003f94:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003f98:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003f9c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8003fa0:	f7fc f930 	bl	8000204 <__aeabi_uldivmod>
 8003fa4:	4602      	mov	r2, r0
 8003fa6:	460b      	mov	r3, r1
 8003fa8:	4613      	mov	r3, r2
 8003faa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003fae:	e067      	b.n	8004080 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003fb0:	4b75      	ldr	r3, [pc, #468]	@ (8004188 <HAL_RCC_GetSysClockFreq+0x354>)
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	099b      	lsrs	r3, r3, #6
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003fbc:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8003fc0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003fc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fc8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003fca:	2300      	movs	r3, #0
 8003fcc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003fce:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8003fd2:	4622      	mov	r2, r4
 8003fd4:	462b      	mov	r3, r5
 8003fd6:	f04f 0000 	mov.w	r0, #0
 8003fda:	f04f 0100 	mov.w	r1, #0
 8003fde:	0159      	lsls	r1, r3, #5
 8003fe0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003fe4:	0150      	lsls	r0, r2, #5
 8003fe6:	4602      	mov	r2, r0
 8003fe8:	460b      	mov	r3, r1
 8003fea:	4621      	mov	r1, r4
 8003fec:	1a51      	subs	r1, r2, r1
 8003fee:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003ff0:	4629      	mov	r1, r5
 8003ff2:	eb63 0301 	sbc.w	r3, r3, r1
 8003ff6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003ff8:	f04f 0200 	mov.w	r2, #0
 8003ffc:	f04f 0300 	mov.w	r3, #0
 8004000:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8004004:	4649      	mov	r1, r9
 8004006:	018b      	lsls	r3, r1, #6
 8004008:	4641      	mov	r1, r8
 800400a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800400e:	4641      	mov	r1, r8
 8004010:	018a      	lsls	r2, r1, #6
 8004012:	4641      	mov	r1, r8
 8004014:	ebb2 0a01 	subs.w	sl, r2, r1
 8004018:	4649      	mov	r1, r9
 800401a:	eb63 0b01 	sbc.w	fp, r3, r1
 800401e:	f04f 0200 	mov.w	r2, #0
 8004022:	f04f 0300 	mov.w	r3, #0
 8004026:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800402a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800402e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004032:	4692      	mov	sl, r2
 8004034:	469b      	mov	fp, r3
 8004036:	4623      	mov	r3, r4
 8004038:	eb1a 0303 	adds.w	r3, sl, r3
 800403c:	623b      	str	r3, [r7, #32]
 800403e:	462b      	mov	r3, r5
 8004040:	eb4b 0303 	adc.w	r3, fp, r3
 8004044:	627b      	str	r3, [r7, #36]	@ 0x24
 8004046:	f04f 0200 	mov.w	r2, #0
 800404a:	f04f 0300 	mov.w	r3, #0
 800404e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8004052:	4629      	mov	r1, r5
 8004054:	028b      	lsls	r3, r1, #10
 8004056:	4621      	mov	r1, r4
 8004058:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800405c:	4621      	mov	r1, r4
 800405e:	028a      	lsls	r2, r1, #10
 8004060:	4610      	mov	r0, r2
 8004062:	4619      	mov	r1, r3
 8004064:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004068:	2200      	movs	r2, #0
 800406a:	673b      	str	r3, [r7, #112]	@ 0x70
 800406c:	677a      	str	r2, [r7, #116]	@ 0x74
 800406e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8004072:	f7fc f8c7 	bl	8000204 <__aeabi_uldivmod>
 8004076:	4602      	mov	r2, r0
 8004078:	460b      	mov	r3, r1
 800407a:	4613      	mov	r3, r2
 800407c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004080:	4b41      	ldr	r3, [pc, #260]	@ (8004188 <HAL_RCC_GetSysClockFreq+0x354>)
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	0c1b      	lsrs	r3, r3, #16
 8004086:	f003 0303 	and.w	r3, r3, #3
 800408a:	3301      	adds	r3, #1
 800408c:	005b      	lsls	r3, r3, #1
 800408e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8004092:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004096:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800409a:	fbb2 f3f3 	udiv	r3, r2, r3
 800409e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80040a2:	e0eb      	b.n	800427c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80040a4:	4b38      	ldr	r3, [pc, #224]	@ (8004188 <HAL_RCC_GetSysClockFreq+0x354>)
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80040ac:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80040b0:	4b35      	ldr	r3, [pc, #212]	@ (8004188 <HAL_RCC_GetSysClockFreq+0x354>)
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d06b      	beq.n	8004194 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040bc:	4b32      	ldr	r3, [pc, #200]	@ (8004188 <HAL_RCC_GetSysClockFreq+0x354>)
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	099b      	lsrs	r3, r3, #6
 80040c2:	2200      	movs	r2, #0
 80040c4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80040c6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80040c8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80040ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040ce:	663b      	str	r3, [r7, #96]	@ 0x60
 80040d0:	2300      	movs	r3, #0
 80040d2:	667b      	str	r3, [r7, #100]	@ 0x64
 80040d4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80040d8:	4622      	mov	r2, r4
 80040da:	462b      	mov	r3, r5
 80040dc:	f04f 0000 	mov.w	r0, #0
 80040e0:	f04f 0100 	mov.w	r1, #0
 80040e4:	0159      	lsls	r1, r3, #5
 80040e6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80040ea:	0150      	lsls	r0, r2, #5
 80040ec:	4602      	mov	r2, r0
 80040ee:	460b      	mov	r3, r1
 80040f0:	4621      	mov	r1, r4
 80040f2:	1a51      	subs	r1, r2, r1
 80040f4:	61b9      	str	r1, [r7, #24]
 80040f6:	4629      	mov	r1, r5
 80040f8:	eb63 0301 	sbc.w	r3, r3, r1
 80040fc:	61fb      	str	r3, [r7, #28]
 80040fe:	f04f 0200 	mov.w	r2, #0
 8004102:	f04f 0300 	mov.w	r3, #0
 8004106:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800410a:	4659      	mov	r1, fp
 800410c:	018b      	lsls	r3, r1, #6
 800410e:	4651      	mov	r1, sl
 8004110:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004114:	4651      	mov	r1, sl
 8004116:	018a      	lsls	r2, r1, #6
 8004118:	4651      	mov	r1, sl
 800411a:	ebb2 0801 	subs.w	r8, r2, r1
 800411e:	4659      	mov	r1, fp
 8004120:	eb63 0901 	sbc.w	r9, r3, r1
 8004124:	f04f 0200 	mov.w	r2, #0
 8004128:	f04f 0300 	mov.w	r3, #0
 800412c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004130:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004134:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004138:	4690      	mov	r8, r2
 800413a:	4699      	mov	r9, r3
 800413c:	4623      	mov	r3, r4
 800413e:	eb18 0303 	adds.w	r3, r8, r3
 8004142:	613b      	str	r3, [r7, #16]
 8004144:	462b      	mov	r3, r5
 8004146:	eb49 0303 	adc.w	r3, r9, r3
 800414a:	617b      	str	r3, [r7, #20]
 800414c:	f04f 0200 	mov.w	r2, #0
 8004150:	f04f 0300 	mov.w	r3, #0
 8004154:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004158:	4629      	mov	r1, r5
 800415a:	024b      	lsls	r3, r1, #9
 800415c:	4621      	mov	r1, r4
 800415e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004162:	4621      	mov	r1, r4
 8004164:	024a      	lsls	r2, r1, #9
 8004166:	4610      	mov	r0, r2
 8004168:	4619      	mov	r1, r3
 800416a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800416e:	2200      	movs	r2, #0
 8004170:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004172:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8004174:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004178:	f7fc f844 	bl	8000204 <__aeabi_uldivmod>
 800417c:	4602      	mov	r2, r0
 800417e:	460b      	mov	r3, r1
 8004180:	4613      	mov	r3, r2
 8004182:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004186:	e065      	b.n	8004254 <HAL_RCC_GetSysClockFreq+0x420>
 8004188:	40023800 	.word	0x40023800
 800418c:	00f42400 	.word	0x00f42400
 8004190:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004194:	4b3d      	ldr	r3, [pc, #244]	@ (800428c <HAL_RCC_GetSysClockFreq+0x458>)
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	099b      	lsrs	r3, r3, #6
 800419a:	2200      	movs	r2, #0
 800419c:	4618      	mov	r0, r3
 800419e:	4611      	mov	r1, r2
 80041a0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80041a4:	653b      	str	r3, [r7, #80]	@ 0x50
 80041a6:	2300      	movs	r3, #0
 80041a8:	657b      	str	r3, [r7, #84]	@ 0x54
 80041aa:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80041ae:	4642      	mov	r2, r8
 80041b0:	464b      	mov	r3, r9
 80041b2:	f04f 0000 	mov.w	r0, #0
 80041b6:	f04f 0100 	mov.w	r1, #0
 80041ba:	0159      	lsls	r1, r3, #5
 80041bc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80041c0:	0150      	lsls	r0, r2, #5
 80041c2:	4602      	mov	r2, r0
 80041c4:	460b      	mov	r3, r1
 80041c6:	4641      	mov	r1, r8
 80041c8:	1a51      	subs	r1, r2, r1
 80041ca:	60b9      	str	r1, [r7, #8]
 80041cc:	4649      	mov	r1, r9
 80041ce:	eb63 0301 	sbc.w	r3, r3, r1
 80041d2:	60fb      	str	r3, [r7, #12]
 80041d4:	f04f 0200 	mov.w	r2, #0
 80041d8:	f04f 0300 	mov.w	r3, #0
 80041dc:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80041e0:	4659      	mov	r1, fp
 80041e2:	018b      	lsls	r3, r1, #6
 80041e4:	4651      	mov	r1, sl
 80041e6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80041ea:	4651      	mov	r1, sl
 80041ec:	018a      	lsls	r2, r1, #6
 80041ee:	4651      	mov	r1, sl
 80041f0:	1a54      	subs	r4, r2, r1
 80041f2:	4659      	mov	r1, fp
 80041f4:	eb63 0501 	sbc.w	r5, r3, r1
 80041f8:	f04f 0200 	mov.w	r2, #0
 80041fc:	f04f 0300 	mov.w	r3, #0
 8004200:	00eb      	lsls	r3, r5, #3
 8004202:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004206:	00e2      	lsls	r2, r4, #3
 8004208:	4614      	mov	r4, r2
 800420a:	461d      	mov	r5, r3
 800420c:	4643      	mov	r3, r8
 800420e:	18e3      	adds	r3, r4, r3
 8004210:	603b      	str	r3, [r7, #0]
 8004212:	464b      	mov	r3, r9
 8004214:	eb45 0303 	adc.w	r3, r5, r3
 8004218:	607b      	str	r3, [r7, #4]
 800421a:	f04f 0200 	mov.w	r2, #0
 800421e:	f04f 0300 	mov.w	r3, #0
 8004222:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004226:	4629      	mov	r1, r5
 8004228:	028b      	lsls	r3, r1, #10
 800422a:	4621      	mov	r1, r4
 800422c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004230:	4621      	mov	r1, r4
 8004232:	028a      	lsls	r2, r1, #10
 8004234:	4610      	mov	r0, r2
 8004236:	4619      	mov	r1, r3
 8004238:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800423c:	2200      	movs	r2, #0
 800423e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004240:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8004242:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004246:	f7fb ffdd 	bl	8000204 <__aeabi_uldivmod>
 800424a:	4602      	mov	r2, r0
 800424c:	460b      	mov	r3, r1
 800424e:	4613      	mov	r3, r2
 8004250:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004254:	4b0d      	ldr	r3, [pc, #52]	@ (800428c <HAL_RCC_GetSysClockFreq+0x458>)
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	0f1b      	lsrs	r3, r3, #28
 800425a:	f003 0307 	and.w	r3, r3, #7
 800425e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8004262:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004266:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800426a:	fbb2 f3f3 	udiv	r3, r2, r3
 800426e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004272:	e003      	b.n	800427c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004274:	4b06      	ldr	r3, [pc, #24]	@ (8004290 <HAL_RCC_GetSysClockFreq+0x45c>)
 8004276:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800427a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800427c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8004280:	4618      	mov	r0, r3
 8004282:	37b8      	adds	r7, #184	@ 0xb8
 8004284:	46bd      	mov	sp, r7
 8004286:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800428a:	bf00      	nop
 800428c:	40023800 	.word	0x40023800
 8004290:	00f42400 	.word	0x00f42400

08004294 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b086      	sub	sp, #24
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d101      	bne.n	80042a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80042a2:	2301      	movs	r3, #1
 80042a4:	e28d      	b.n	80047c2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f003 0301 	and.w	r3, r3, #1
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	f000 8083 	beq.w	80043ba <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80042b4:	4b94      	ldr	r3, [pc, #592]	@ (8004508 <HAL_RCC_OscConfig+0x274>)
 80042b6:	689b      	ldr	r3, [r3, #8]
 80042b8:	f003 030c 	and.w	r3, r3, #12
 80042bc:	2b04      	cmp	r3, #4
 80042be:	d019      	beq.n	80042f4 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80042c0:	4b91      	ldr	r3, [pc, #580]	@ (8004508 <HAL_RCC_OscConfig+0x274>)
 80042c2:	689b      	ldr	r3, [r3, #8]
 80042c4:	f003 030c 	and.w	r3, r3, #12
        || \
 80042c8:	2b08      	cmp	r3, #8
 80042ca:	d106      	bne.n	80042da <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80042cc:	4b8e      	ldr	r3, [pc, #568]	@ (8004508 <HAL_RCC_OscConfig+0x274>)
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80042d4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80042d8:	d00c      	beq.n	80042f4 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042da:	4b8b      	ldr	r3, [pc, #556]	@ (8004508 <HAL_RCC_OscConfig+0x274>)
 80042dc:	689b      	ldr	r3, [r3, #8]
 80042de:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80042e2:	2b0c      	cmp	r3, #12
 80042e4:	d112      	bne.n	800430c <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042e6:	4b88      	ldr	r3, [pc, #544]	@ (8004508 <HAL_RCC_OscConfig+0x274>)
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80042ee:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80042f2:	d10b      	bne.n	800430c <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042f4:	4b84      	ldr	r3, [pc, #528]	@ (8004508 <HAL_RCC_OscConfig+0x274>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d05b      	beq.n	80043b8 <HAL_RCC_OscConfig+0x124>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d157      	bne.n	80043b8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004308:	2301      	movs	r3, #1
 800430a:	e25a      	b.n	80047c2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004314:	d106      	bne.n	8004324 <HAL_RCC_OscConfig+0x90>
 8004316:	4b7c      	ldr	r3, [pc, #496]	@ (8004508 <HAL_RCC_OscConfig+0x274>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a7b      	ldr	r2, [pc, #492]	@ (8004508 <HAL_RCC_OscConfig+0x274>)
 800431c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004320:	6013      	str	r3, [r2, #0]
 8004322:	e01d      	b.n	8004360 <HAL_RCC_OscConfig+0xcc>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800432c:	d10c      	bne.n	8004348 <HAL_RCC_OscConfig+0xb4>
 800432e:	4b76      	ldr	r3, [pc, #472]	@ (8004508 <HAL_RCC_OscConfig+0x274>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a75      	ldr	r2, [pc, #468]	@ (8004508 <HAL_RCC_OscConfig+0x274>)
 8004334:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004338:	6013      	str	r3, [r2, #0]
 800433a:	4b73      	ldr	r3, [pc, #460]	@ (8004508 <HAL_RCC_OscConfig+0x274>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a72      	ldr	r2, [pc, #456]	@ (8004508 <HAL_RCC_OscConfig+0x274>)
 8004340:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004344:	6013      	str	r3, [r2, #0]
 8004346:	e00b      	b.n	8004360 <HAL_RCC_OscConfig+0xcc>
 8004348:	4b6f      	ldr	r3, [pc, #444]	@ (8004508 <HAL_RCC_OscConfig+0x274>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a6e      	ldr	r2, [pc, #440]	@ (8004508 <HAL_RCC_OscConfig+0x274>)
 800434e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004352:	6013      	str	r3, [r2, #0]
 8004354:	4b6c      	ldr	r3, [pc, #432]	@ (8004508 <HAL_RCC_OscConfig+0x274>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a6b      	ldr	r2, [pc, #428]	@ (8004508 <HAL_RCC_OscConfig+0x274>)
 800435a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800435e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d013      	beq.n	8004390 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004368:	f7fd f908 	bl	800157c <HAL_GetTick>
 800436c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800436e:	e008      	b.n	8004382 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004370:	f7fd f904 	bl	800157c <HAL_GetTick>
 8004374:	4602      	mov	r2, r0
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	1ad3      	subs	r3, r2, r3
 800437a:	2b64      	cmp	r3, #100	@ 0x64
 800437c:	d901      	bls.n	8004382 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800437e:	2303      	movs	r3, #3
 8004380:	e21f      	b.n	80047c2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004382:	4b61      	ldr	r3, [pc, #388]	@ (8004508 <HAL_RCC_OscConfig+0x274>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800438a:	2b00      	cmp	r3, #0
 800438c:	d0f0      	beq.n	8004370 <HAL_RCC_OscConfig+0xdc>
 800438e:	e014      	b.n	80043ba <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004390:	f7fd f8f4 	bl	800157c <HAL_GetTick>
 8004394:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004396:	e008      	b.n	80043aa <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004398:	f7fd f8f0 	bl	800157c <HAL_GetTick>
 800439c:	4602      	mov	r2, r0
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	1ad3      	subs	r3, r2, r3
 80043a2:	2b64      	cmp	r3, #100	@ 0x64
 80043a4:	d901      	bls.n	80043aa <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80043a6:	2303      	movs	r3, #3
 80043a8:	e20b      	b.n	80047c2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043aa:	4b57      	ldr	r3, [pc, #348]	@ (8004508 <HAL_RCC_OscConfig+0x274>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d1f0      	bne.n	8004398 <HAL_RCC_OscConfig+0x104>
 80043b6:	e000      	b.n	80043ba <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f003 0302 	and.w	r3, r3, #2
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d06f      	beq.n	80044a6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80043c6:	4b50      	ldr	r3, [pc, #320]	@ (8004508 <HAL_RCC_OscConfig+0x274>)
 80043c8:	689b      	ldr	r3, [r3, #8]
 80043ca:	f003 030c 	and.w	r3, r3, #12
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d017      	beq.n	8004402 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80043d2:	4b4d      	ldr	r3, [pc, #308]	@ (8004508 <HAL_RCC_OscConfig+0x274>)
 80043d4:	689b      	ldr	r3, [r3, #8]
 80043d6:	f003 030c 	and.w	r3, r3, #12
        || \
 80043da:	2b08      	cmp	r3, #8
 80043dc:	d105      	bne.n	80043ea <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80043de:	4b4a      	ldr	r3, [pc, #296]	@ (8004508 <HAL_RCC_OscConfig+0x274>)
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d00b      	beq.n	8004402 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80043ea:	4b47      	ldr	r3, [pc, #284]	@ (8004508 <HAL_RCC_OscConfig+0x274>)
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80043f2:	2b0c      	cmp	r3, #12
 80043f4:	d11c      	bne.n	8004430 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80043f6:	4b44      	ldr	r3, [pc, #272]	@ (8004508 <HAL_RCC_OscConfig+0x274>)
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d116      	bne.n	8004430 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004402:	4b41      	ldr	r3, [pc, #260]	@ (8004508 <HAL_RCC_OscConfig+0x274>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f003 0302 	and.w	r3, r3, #2
 800440a:	2b00      	cmp	r3, #0
 800440c:	d005      	beq.n	800441a <HAL_RCC_OscConfig+0x186>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	68db      	ldr	r3, [r3, #12]
 8004412:	2b01      	cmp	r3, #1
 8004414:	d001      	beq.n	800441a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	e1d3      	b.n	80047c2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800441a:	4b3b      	ldr	r3, [pc, #236]	@ (8004508 <HAL_RCC_OscConfig+0x274>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	691b      	ldr	r3, [r3, #16]
 8004426:	00db      	lsls	r3, r3, #3
 8004428:	4937      	ldr	r1, [pc, #220]	@ (8004508 <HAL_RCC_OscConfig+0x274>)
 800442a:	4313      	orrs	r3, r2
 800442c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800442e:	e03a      	b.n	80044a6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	68db      	ldr	r3, [r3, #12]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d020      	beq.n	800447a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004438:	4b34      	ldr	r3, [pc, #208]	@ (800450c <HAL_RCC_OscConfig+0x278>)
 800443a:	2201      	movs	r2, #1
 800443c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800443e:	f7fd f89d 	bl	800157c <HAL_GetTick>
 8004442:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004444:	e008      	b.n	8004458 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004446:	f7fd f899 	bl	800157c <HAL_GetTick>
 800444a:	4602      	mov	r2, r0
 800444c:	693b      	ldr	r3, [r7, #16]
 800444e:	1ad3      	subs	r3, r2, r3
 8004450:	2b02      	cmp	r3, #2
 8004452:	d901      	bls.n	8004458 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004454:	2303      	movs	r3, #3
 8004456:	e1b4      	b.n	80047c2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004458:	4b2b      	ldr	r3, [pc, #172]	@ (8004508 <HAL_RCC_OscConfig+0x274>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f003 0302 	and.w	r3, r3, #2
 8004460:	2b00      	cmp	r3, #0
 8004462:	d0f0      	beq.n	8004446 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004464:	4b28      	ldr	r3, [pc, #160]	@ (8004508 <HAL_RCC_OscConfig+0x274>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	691b      	ldr	r3, [r3, #16]
 8004470:	00db      	lsls	r3, r3, #3
 8004472:	4925      	ldr	r1, [pc, #148]	@ (8004508 <HAL_RCC_OscConfig+0x274>)
 8004474:	4313      	orrs	r3, r2
 8004476:	600b      	str	r3, [r1, #0]
 8004478:	e015      	b.n	80044a6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800447a:	4b24      	ldr	r3, [pc, #144]	@ (800450c <HAL_RCC_OscConfig+0x278>)
 800447c:	2200      	movs	r2, #0
 800447e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004480:	f7fd f87c 	bl	800157c <HAL_GetTick>
 8004484:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004486:	e008      	b.n	800449a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004488:	f7fd f878 	bl	800157c <HAL_GetTick>
 800448c:	4602      	mov	r2, r0
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	1ad3      	subs	r3, r2, r3
 8004492:	2b02      	cmp	r3, #2
 8004494:	d901      	bls.n	800449a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004496:	2303      	movs	r3, #3
 8004498:	e193      	b.n	80047c2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800449a:	4b1b      	ldr	r3, [pc, #108]	@ (8004508 <HAL_RCC_OscConfig+0x274>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f003 0302 	and.w	r3, r3, #2
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d1f0      	bne.n	8004488 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f003 0308 	and.w	r3, r3, #8
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d036      	beq.n	8004520 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	695b      	ldr	r3, [r3, #20]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d016      	beq.n	80044e8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80044ba:	4b15      	ldr	r3, [pc, #84]	@ (8004510 <HAL_RCC_OscConfig+0x27c>)
 80044bc:	2201      	movs	r2, #1
 80044be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044c0:	f7fd f85c 	bl	800157c <HAL_GetTick>
 80044c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044c6:	e008      	b.n	80044da <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044c8:	f7fd f858 	bl	800157c <HAL_GetTick>
 80044cc:	4602      	mov	r2, r0
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	1ad3      	subs	r3, r2, r3
 80044d2:	2b02      	cmp	r3, #2
 80044d4:	d901      	bls.n	80044da <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80044d6:	2303      	movs	r3, #3
 80044d8:	e173      	b.n	80047c2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044da:	4b0b      	ldr	r3, [pc, #44]	@ (8004508 <HAL_RCC_OscConfig+0x274>)
 80044dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80044de:	f003 0302 	and.w	r3, r3, #2
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d0f0      	beq.n	80044c8 <HAL_RCC_OscConfig+0x234>
 80044e6:	e01b      	b.n	8004520 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044e8:	4b09      	ldr	r3, [pc, #36]	@ (8004510 <HAL_RCC_OscConfig+0x27c>)
 80044ea:	2200      	movs	r2, #0
 80044ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044ee:	f7fd f845 	bl	800157c <HAL_GetTick>
 80044f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044f4:	e00e      	b.n	8004514 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044f6:	f7fd f841 	bl	800157c <HAL_GetTick>
 80044fa:	4602      	mov	r2, r0
 80044fc:	693b      	ldr	r3, [r7, #16]
 80044fe:	1ad3      	subs	r3, r2, r3
 8004500:	2b02      	cmp	r3, #2
 8004502:	d907      	bls.n	8004514 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004504:	2303      	movs	r3, #3
 8004506:	e15c      	b.n	80047c2 <HAL_RCC_OscConfig+0x52e>
 8004508:	40023800 	.word	0x40023800
 800450c:	42470000 	.word	0x42470000
 8004510:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004514:	4b8a      	ldr	r3, [pc, #552]	@ (8004740 <HAL_RCC_OscConfig+0x4ac>)
 8004516:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004518:	f003 0302 	and.w	r3, r3, #2
 800451c:	2b00      	cmp	r3, #0
 800451e:	d1ea      	bne.n	80044f6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f003 0304 	and.w	r3, r3, #4
 8004528:	2b00      	cmp	r3, #0
 800452a:	f000 8097 	beq.w	800465c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800452e:	2300      	movs	r3, #0
 8004530:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004532:	4b83      	ldr	r3, [pc, #524]	@ (8004740 <HAL_RCC_OscConfig+0x4ac>)
 8004534:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004536:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800453a:	2b00      	cmp	r3, #0
 800453c:	d10f      	bne.n	800455e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800453e:	2300      	movs	r3, #0
 8004540:	60bb      	str	r3, [r7, #8]
 8004542:	4b7f      	ldr	r3, [pc, #508]	@ (8004740 <HAL_RCC_OscConfig+0x4ac>)
 8004544:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004546:	4a7e      	ldr	r2, [pc, #504]	@ (8004740 <HAL_RCC_OscConfig+0x4ac>)
 8004548:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800454c:	6413      	str	r3, [r2, #64]	@ 0x40
 800454e:	4b7c      	ldr	r3, [pc, #496]	@ (8004740 <HAL_RCC_OscConfig+0x4ac>)
 8004550:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004552:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004556:	60bb      	str	r3, [r7, #8]
 8004558:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800455a:	2301      	movs	r3, #1
 800455c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800455e:	4b79      	ldr	r3, [pc, #484]	@ (8004744 <HAL_RCC_OscConfig+0x4b0>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004566:	2b00      	cmp	r3, #0
 8004568:	d118      	bne.n	800459c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800456a:	4b76      	ldr	r3, [pc, #472]	@ (8004744 <HAL_RCC_OscConfig+0x4b0>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a75      	ldr	r2, [pc, #468]	@ (8004744 <HAL_RCC_OscConfig+0x4b0>)
 8004570:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004574:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004576:	f7fd f801 	bl	800157c <HAL_GetTick>
 800457a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800457c:	e008      	b.n	8004590 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800457e:	f7fc fffd 	bl	800157c <HAL_GetTick>
 8004582:	4602      	mov	r2, r0
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	1ad3      	subs	r3, r2, r3
 8004588:	2b02      	cmp	r3, #2
 800458a:	d901      	bls.n	8004590 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800458c:	2303      	movs	r3, #3
 800458e:	e118      	b.n	80047c2 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004590:	4b6c      	ldr	r3, [pc, #432]	@ (8004744 <HAL_RCC_OscConfig+0x4b0>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004598:	2b00      	cmp	r3, #0
 800459a:	d0f0      	beq.n	800457e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	689b      	ldr	r3, [r3, #8]
 80045a0:	2b01      	cmp	r3, #1
 80045a2:	d106      	bne.n	80045b2 <HAL_RCC_OscConfig+0x31e>
 80045a4:	4b66      	ldr	r3, [pc, #408]	@ (8004740 <HAL_RCC_OscConfig+0x4ac>)
 80045a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045a8:	4a65      	ldr	r2, [pc, #404]	@ (8004740 <HAL_RCC_OscConfig+0x4ac>)
 80045aa:	f043 0301 	orr.w	r3, r3, #1
 80045ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80045b0:	e01c      	b.n	80045ec <HAL_RCC_OscConfig+0x358>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	689b      	ldr	r3, [r3, #8]
 80045b6:	2b05      	cmp	r3, #5
 80045b8:	d10c      	bne.n	80045d4 <HAL_RCC_OscConfig+0x340>
 80045ba:	4b61      	ldr	r3, [pc, #388]	@ (8004740 <HAL_RCC_OscConfig+0x4ac>)
 80045bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045be:	4a60      	ldr	r2, [pc, #384]	@ (8004740 <HAL_RCC_OscConfig+0x4ac>)
 80045c0:	f043 0304 	orr.w	r3, r3, #4
 80045c4:	6713      	str	r3, [r2, #112]	@ 0x70
 80045c6:	4b5e      	ldr	r3, [pc, #376]	@ (8004740 <HAL_RCC_OscConfig+0x4ac>)
 80045c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045ca:	4a5d      	ldr	r2, [pc, #372]	@ (8004740 <HAL_RCC_OscConfig+0x4ac>)
 80045cc:	f043 0301 	orr.w	r3, r3, #1
 80045d0:	6713      	str	r3, [r2, #112]	@ 0x70
 80045d2:	e00b      	b.n	80045ec <HAL_RCC_OscConfig+0x358>
 80045d4:	4b5a      	ldr	r3, [pc, #360]	@ (8004740 <HAL_RCC_OscConfig+0x4ac>)
 80045d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045d8:	4a59      	ldr	r2, [pc, #356]	@ (8004740 <HAL_RCC_OscConfig+0x4ac>)
 80045da:	f023 0301 	bic.w	r3, r3, #1
 80045de:	6713      	str	r3, [r2, #112]	@ 0x70
 80045e0:	4b57      	ldr	r3, [pc, #348]	@ (8004740 <HAL_RCC_OscConfig+0x4ac>)
 80045e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045e4:	4a56      	ldr	r2, [pc, #344]	@ (8004740 <HAL_RCC_OscConfig+0x4ac>)
 80045e6:	f023 0304 	bic.w	r3, r3, #4
 80045ea:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	689b      	ldr	r3, [r3, #8]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d015      	beq.n	8004620 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045f4:	f7fc ffc2 	bl	800157c <HAL_GetTick>
 80045f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045fa:	e00a      	b.n	8004612 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045fc:	f7fc ffbe 	bl	800157c <HAL_GetTick>
 8004600:	4602      	mov	r2, r0
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	1ad3      	subs	r3, r2, r3
 8004606:	f241 3288 	movw	r2, #5000	@ 0x1388
 800460a:	4293      	cmp	r3, r2
 800460c:	d901      	bls.n	8004612 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800460e:	2303      	movs	r3, #3
 8004610:	e0d7      	b.n	80047c2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004612:	4b4b      	ldr	r3, [pc, #300]	@ (8004740 <HAL_RCC_OscConfig+0x4ac>)
 8004614:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004616:	f003 0302 	and.w	r3, r3, #2
 800461a:	2b00      	cmp	r3, #0
 800461c:	d0ee      	beq.n	80045fc <HAL_RCC_OscConfig+0x368>
 800461e:	e014      	b.n	800464a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004620:	f7fc ffac 	bl	800157c <HAL_GetTick>
 8004624:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004626:	e00a      	b.n	800463e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004628:	f7fc ffa8 	bl	800157c <HAL_GetTick>
 800462c:	4602      	mov	r2, r0
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	1ad3      	subs	r3, r2, r3
 8004632:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004636:	4293      	cmp	r3, r2
 8004638:	d901      	bls.n	800463e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800463a:	2303      	movs	r3, #3
 800463c:	e0c1      	b.n	80047c2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800463e:	4b40      	ldr	r3, [pc, #256]	@ (8004740 <HAL_RCC_OscConfig+0x4ac>)
 8004640:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004642:	f003 0302 	and.w	r3, r3, #2
 8004646:	2b00      	cmp	r3, #0
 8004648:	d1ee      	bne.n	8004628 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800464a:	7dfb      	ldrb	r3, [r7, #23]
 800464c:	2b01      	cmp	r3, #1
 800464e:	d105      	bne.n	800465c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004650:	4b3b      	ldr	r3, [pc, #236]	@ (8004740 <HAL_RCC_OscConfig+0x4ac>)
 8004652:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004654:	4a3a      	ldr	r2, [pc, #232]	@ (8004740 <HAL_RCC_OscConfig+0x4ac>)
 8004656:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800465a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	699b      	ldr	r3, [r3, #24]
 8004660:	2b00      	cmp	r3, #0
 8004662:	f000 80ad 	beq.w	80047c0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004666:	4b36      	ldr	r3, [pc, #216]	@ (8004740 <HAL_RCC_OscConfig+0x4ac>)
 8004668:	689b      	ldr	r3, [r3, #8]
 800466a:	f003 030c 	and.w	r3, r3, #12
 800466e:	2b08      	cmp	r3, #8
 8004670:	d060      	beq.n	8004734 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	699b      	ldr	r3, [r3, #24]
 8004676:	2b02      	cmp	r3, #2
 8004678:	d145      	bne.n	8004706 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800467a:	4b33      	ldr	r3, [pc, #204]	@ (8004748 <HAL_RCC_OscConfig+0x4b4>)
 800467c:	2200      	movs	r2, #0
 800467e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004680:	f7fc ff7c 	bl	800157c <HAL_GetTick>
 8004684:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004686:	e008      	b.n	800469a <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004688:	f7fc ff78 	bl	800157c <HAL_GetTick>
 800468c:	4602      	mov	r2, r0
 800468e:	693b      	ldr	r3, [r7, #16]
 8004690:	1ad3      	subs	r3, r2, r3
 8004692:	2b02      	cmp	r3, #2
 8004694:	d901      	bls.n	800469a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004696:	2303      	movs	r3, #3
 8004698:	e093      	b.n	80047c2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800469a:	4b29      	ldr	r3, [pc, #164]	@ (8004740 <HAL_RCC_OscConfig+0x4ac>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d1f0      	bne.n	8004688 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	69da      	ldr	r2, [r3, #28]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6a1b      	ldr	r3, [r3, #32]
 80046ae:	431a      	orrs	r2, r3
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046b4:	019b      	lsls	r3, r3, #6
 80046b6:	431a      	orrs	r2, r3
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046bc:	085b      	lsrs	r3, r3, #1
 80046be:	3b01      	subs	r3, #1
 80046c0:	041b      	lsls	r3, r3, #16
 80046c2:	431a      	orrs	r2, r3
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046c8:	061b      	lsls	r3, r3, #24
 80046ca:	431a      	orrs	r2, r3
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046d0:	071b      	lsls	r3, r3, #28
 80046d2:	491b      	ldr	r1, [pc, #108]	@ (8004740 <HAL_RCC_OscConfig+0x4ac>)
 80046d4:	4313      	orrs	r3, r2
 80046d6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80046d8:	4b1b      	ldr	r3, [pc, #108]	@ (8004748 <HAL_RCC_OscConfig+0x4b4>)
 80046da:	2201      	movs	r2, #1
 80046dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046de:	f7fc ff4d 	bl	800157c <HAL_GetTick>
 80046e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046e4:	e008      	b.n	80046f8 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046e6:	f7fc ff49 	bl	800157c <HAL_GetTick>
 80046ea:	4602      	mov	r2, r0
 80046ec:	693b      	ldr	r3, [r7, #16]
 80046ee:	1ad3      	subs	r3, r2, r3
 80046f0:	2b02      	cmp	r3, #2
 80046f2:	d901      	bls.n	80046f8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80046f4:	2303      	movs	r3, #3
 80046f6:	e064      	b.n	80047c2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046f8:	4b11      	ldr	r3, [pc, #68]	@ (8004740 <HAL_RCC_OscConfig+0x4ac>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004700:	2b00      	cmp	r3, #0
 8004702:	d0f0      	beq.n	80046e6 <HAL_RCC_OscConfig+0x452>
 8004704:	e05c      	b.n	80047c0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004706:	4b10      	ldr	r3, [pc, #64]	@ (8004748 <HAL_RCC_OscConfig+0x4b4>)
 8004708:	2200      	movs	r2, #0
 800470a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800470c:	f7fc ff36 	bl	800157c <HAL_GetTick>
 8004710:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004712:	e008      	b.n	8004726 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004714:	f7fc ff32 	bl	800157c <HAL_GetTick>
 8004718:	4602      	mov	r2, r0
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	1ad3      	subs	r3, r2, r3
 800471e:	2b02      	cmp	r3, #2
 8004720:	d901      	bls.n	8004726 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004722:	2303      	movs	r3, #3
 8004724:	e04d      	b.n	80047c2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004726:	4b06      	ldr	r3, [pc, #24]	@ (8004740 <HAL_RCC_OscConfig+0x4ac>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800472e:	2b00      	cmp	r3, #0
 8004730:	d1f0      	bne.n	8004714 <HAL_RCC_OscConfig+0x480>
 8004732:	e045      	b.n	80047c0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	699b      	ldr	r3, [r3, #24]
 8004738:	2b01      	cmp	r3, #1
 800473a:	d107      	bne.n	800474c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800473c:	2301      	movs	r3, #1
 800473e:	e040      	b.n	80047c2 <HAL_RCC_OscConfig+0x52e>
 8004740:	40023800 	.word	0x40023800
 8004744:	40007000 	.word	0x40007000
 8004748:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800474c:	4b1f      	ldr	r3, [pc, #124]	@ (80047cc <HAL_RCC_OscConfig+0x538>)
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	699b      	ldr	r3, [r3, #24]
 8004756:	2b01      	cmp	r3, #1
 8004758:	d030      	beq.n	80047bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004764:	429a      	cmp	r2, r3
 8004766:	d129      	bne.n	80047bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004772:	429a      	cmp	r2, r3
 8004774:	d122      	bne.n	80047bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004776:	68fa      	ldr	r2, [r7, #12]
 8004778:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800477c:	4013      	ands	r3, r2
 800477e:	687a      	ldr	r2, [r7, #4]
 8004780:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004782:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004784:	4293      	cmp	r3, r2
 8004786:	d119      	bne.n	80047bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004792:	085b      	lsrs	r3, r3, #1
 8004794:	3b01      	subs	r3, #1
 8004796:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004798:	429a      	cmp	r2, r3
 800479a:	d10f      	bne.n	80047bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047a6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80047a8:	429a      	cmp	r2, r3
 80047aa:	d107      	bne.n	80047bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047b6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80047b8:	429a      	cmp	r2, r3
 80047ba:	d001      	beq.n	80047c0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80047bc:	2301      	movs	r3, #1
 80047be:	e000      	b.n	80047c2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80047c0:	2300      	movs	r3, #0
}
 80047c2:	4618      	mov	r0, r3
 80047c4:	3718      	adds	r7, #24
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bd80      	pop	{r7, pc}
 80047ca:	bf00      	nop
 80047cc:	40023800 	.word	0x40023800

080047d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b082      	sub	sp, #8
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d101      	bne.n	80047e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80047de:	2301      	movs	r3, #1
 80047e0:	e041      	b.n	8004866 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80047e8:	b2db      	uxtb	r3, r3
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d106      	bne.n	80047fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2200      	movs	r2, #0
 80047f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80047f6:	6878      	ldr	r0, [r7, #4]
 80047f8:	f7fc fca8 	bl	800114c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2202      	movs	r2, #2
 8004800:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681a      	ldr	r2, [r3, #0]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	3304      	adds	r3, #4
 800480c:	4619      	mov	r1, r3
 800480e:	4610      	mov	r0, r2
 8004810:	f000 faca 	bl	8004da8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2201      	movs	r2, #1
 8004818:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2201      	movs	r2, #1
 8004820:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2201      	movs	r2, #1
 8004828:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2201      	movs	r2, #1
 8004830:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2201      	movs	r2, #1
 8004838:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2201      	movs	r2, #1
 8004840:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2201      	movs	r2, #1
 8004848:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2201      	movs	r2, #1
 8004850:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2201      	movs	r2, #1
 8004858:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2201      	movs	r2, #1
 8004860:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004864:	2300      	movs	r3, #0
}
 8004866:	4618      	mov	r0, r3
 8004868:	3708      	adds	r7, #8
 800486a:	46bd      	mov	sp, r7
 800486c:	bd80      	pop	{r7, pc}
	...

08004870 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004870:	b480      	push	{r7}
 8004872:	b085      	sub	sp, #20
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800487e:	b2db      	uxtb	r3, r3
 8004880:	2b01      	cmp	r3, #1
 8004882:	d001      	beq.n	8004888 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004884:	2301      	movs	r3, #1
 8004886:	e04e      	b.n	8004926 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2202      	movs	r2, #2
 800488c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	68da      	ldr	r2, [r3, #12]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f042 0201 	orr.w	r2, r2, #1
 800489e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a23      	ldr	r2, [pc, #140]	@ (8004934 <HAL_TIM_Base_Start_IT+0xc4>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d022      	beq.n	80048f0 <HAL_TIM_Base_Start_IT+0x80>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048b2:	d01d      	beq.n	80048f0 <HAL_TIM_Base_Start_IT+0x80>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a1f      	ldr	r2, [pc, #124]	@ (8004938 <HAL_TIM_Base_Start_IT+0xc8>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d018      	beq.n	80048f0 <HAL_TIM_Base_Start_IT+0x80>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a1e      	ldr	r2, [pc, #120]	@ (800493c <HAL_TIM_Base_Start_IT+0xcc>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d013      	beq.n	80048f0 <HAL_TIM_Base_Start_IT+0x80>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a1c      	ldr	r2, [pc, #112]	@ (8004940 <HAL_TIM_Base_Start_IT+0xd0>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d00e      	beq.n	80048f0 <HAL_TIM_Base_Start_IT+0x80>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a1b      	ldr	r2, [pc, #108]	@ (8004944 <HAL_TIM_Base_Start_IT+0xd4>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d009      	beq.n	80048f0 <HAL_TIM_Base_Start_IT+0x80>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a19      	ldr	r2, [pc, #100]	@ (8004948 <HAL_TIM_Base_Start_IT+0xd8>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d004      	beq.n	80048f0 <HAL_TIM_Base_Start_IT+0x80>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a18      	ldr	r2, [pc, #96]	@ (800494c <HAL_TIM_Base_Start_IT+0xdc>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d111      	bne.n	8004914 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	689b      	ldr	r3, [r3, #8]
 80048f6:	f003 0307 	and.w	r3, r3, #7
 80048fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	2b06      	cmp	r3, #6
 8004900:	d010      	beq.n	8004924 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	681a      	ldr	r2, [r3, #0]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f042 0201 	orr.w	r2, r2, #1
 8004910:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004912:	e007      	b.n	8004924 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	681a      	ldr	r2, [r3, #0]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f042 0201 	orr.w	r2, r2, #1
 8004922:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004924:	2300      	movs	r3, #0
}
 8004926:	4618      	mov	r0, r3
 8004928:	3714      	adds	r7, #20
 800492a:	46bd      	mov	sp, r7
 800492c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004930:	4770      	bx	lr
 8004932:	bf00      	nop
 8004934:	40010000 	.word	0x40010000
 8004938:	40000400 	.word	0x40000400
 800493c:	40000800 	.word	0x40000800
 8004940:	40000c00 	.word	0x40000c00
 8004944:	40010400 	.word	0x40010400
 8004948:	40014000 	.word	0x40014000
 800494c:	40001800 	.word	0x40001800

08004950 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b084      	sub	sp, #16
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	68db      	ldr	r3, [r3, #12]
 800495e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	691b      	ldr	r3, [r3, #16]
 8004966:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	f003 0302 	and.w	r3, r3, #2
 800496e:	2b00      	cmp	r3, #0
 8004970:	d020      	beq.n	80049b4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	f003 0302 	and.w	r3, r3, #2
 8004978:	2b00      	cmp	r3, #0
 800497a:	d01b      	beq.n	80049b4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f06f 0202 	mvn.w	r2, #2
 8004984:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2201      	movs	r2, #1
 800498a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	699b      	ldr	r3, [r3, #24]
 8004992:	f003 0303 	and.w	r3, r3, #3
 8004996:	2b00      	cmp	r3, #0
 8004998:	d003      	beq.n	80049a2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800499a:	6878      	ldr	r0, [r7, #4]
 800499c:	f000 f9e5 	bl	8004d6a <HAL_TIM_IC_CaptureCallback>
 80049a0:	e005      	b.n	80049ae <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80049a2:	6878      	ldr	r0, [r7, #4]
 80049a4:	f000 f9d7 	bl	8004d56 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049a8:	6878      	ldr	r0, [r7, #4]
 80049aa:	f000 f9e8 	bl	8004d7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2200      	movs	r2, #0
 80049b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	f003 0304 	and.w	r3, r3, #4
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d020      	beq.n	8004a00 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	f003 0304 	and.w	r3, r3, #4
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d01b      	beq.n	8004a00 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f06f 0204 	mvn.w	r2, #4
 80049d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2202      	movs	r2, #2
 80049d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	699b      	ldr	r3, [r3, #24]
 80049de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d003      	beq.n	80049ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049e6:	6878      	ldr	r0, [r7, #4]
 80049e8:	f000 f9bf 	bl	8004d6a <HAL_TIM_IC_CaptureCallback>
 80049ec:	e005      	b.n	80049fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049ee:	6878      	ldr	r0, [r7, #4]
 80049f0:	f000 f9b1 	bl	8004d56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049f4:	6878      	ldr	r0, [r7, #4]
 80049f6:	f000 f9c2 	bl	8004d7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2200      	movs	r2, #0
 80049fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	f003 0308 	and.w	r3, r3, #8
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d020      	beq.n	8004a4c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	f003 0308 	and.w	r3, r3, #8
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d01b      	beq.n	8004a4c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f06f 0208 	mvn.w	r2, #8
 8004a1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2204      	movs	r2, #4
 8004a22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	69db      	ldr	r3, [r3, #28]
 8004a2a:	f003 0303 	and.w	r3, r3, #3
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d003      	beq.n	8004a3a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a32:	6878      	ldr	r0, [r7, #4]
 8004a34:	f000 f999 	bl	8004d6a <HAL_TIM_IC_CaptureCallback>
 8004a38:	e005      	b.n	8004a46 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a3a:	6878      	ldr	r0, [r7, #4]
 8004a3c:	f000 f98b 	bl	8004d56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a40:	6878      	ldr	r0, [r7, #4]
 8004a42:	f000 f99c 	bl	8004d7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	f003 0310 	and.w	r3, r3, #16
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d020      	beq.n	8004a98 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	f003 0310 	and.w	r3, r3, #16
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d01b      	beq.n	8004a98 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f06f 0210 	mvn.w	r2, #16
 8004a68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2208      	movs	r2, #8
 8004a6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	69db      	ldr	r3, [r3, #28]
 8004a76:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d003      	beq.n	8004a86 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a7e:	6878      	ldr	r0, [r7, #4]
 8004a80:	f000 f973 	bl	8004d6a <HAL_TIM_IC_CaptureCallback>
 8004a84:	e005      	b.n	8004a92 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a86:	6878      	ldr	r0, [r7, #4]
 8004a88:	f000 f965 	bl	8004d56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a8c:	6878      	ldr	r0, [r7, #4]
 8004a8e:	f000 f976 	bl	8004d7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2200      	movs	r2, #0
 8004a96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	f003 0301 	and.w	r3, r3, #1
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d00c      	beq.n	8004abc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	f003 0301 	and.w	r3, r3, #1
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d007      	beq.n	8004abc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f06f 0201 	mvn.w	r2, #1
 8004ab4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004ab6:	6878      	ldr	r0, [r7, #4]
 8004ab8:	f000 f943 	bl	8004d42 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d00c      	beq.n	8004ae0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d007      	beq.n	8004ae0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004ad8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004ada:	6878      	ldr	r0, [r7, #4]
 8004adc:	f000 fbbc 	bl	8005258 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d00c      	beq.n	8004b04 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d007      	beq.n	8004b04 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004afc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004afe:	6878      	ldr	r0, [r7, #4]
 8004b00:	f000 f947 	bl	8004d92 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	f003 0320 	and.w	r3, r3, #32
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d00c      	beq.n	8004b28 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	f003 0320 	and.w	r3, r3, #32
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d007      	beq.n	8004b28 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f06f 0220 	mvn.w	r2, #32
 8004b20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004b22:	6878      	ldr	r0, [r7, #4]
 8004b24:	f000 fb8e 	bl	8005244 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004b28:	bf00      	nop
 8004b2a:	3710      	adds	r7, #16
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bd80      	pop	{r7, pc}

08004b30 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b084      	sub	sp, #16
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
 8004b38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b44:	2b01      	cmp	r3, #1
 8004b46:	d101      	bne.n	8004b4c <HAL_TIM_ConfigClockSource+0x1c>
 8004b48:	2302      	movs	r3, #2
 8004b4a:	e0b4      	b.n	8004cb6 <HAL_TIM_ConfigClockSource+0x186>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2201      	movs	r2, #1
 8004b50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2202      	movs	r2, #2
 8004b58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	689b      	ldr	r3, [r3, #8]
 8004b62:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004b6a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004b72:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	68ba      	ldr	r2, [r7, #8]
 8004b7a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b84:	d03e      	beq.n	8004c04 <HAL_TIM_ConfigClockSource+0xd4>
 8004b86:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b8a:	f200 8087 	bhi.w	8004c9c <HAL_TIM_ConfigClockSource+0x16c>
 8004b8e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b92:	f000 8086 	beq.w	8004ca2 <HAL_TIM_ConfigClockSource+0x172>
 8004b96:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b9a:	d87f      	bhi.n	8004c9c <HAL_TIM_ConfigClockSource+0x16c>
 8004b9c:	2b70      	cmp	r3, #112	@ 0x70
 8004b9e:	d01a      	beq.n	8004bd6 <HAL_TIM_ConfigClockSource+0xa6>
 8004ba0:	2b70      	cmp	r3, #112	@ 0x70
 8004ba2:	d87b      	bhi.n	8004c9c <HAL_TIM_ConfigClockSource+0x16c>
 8004ba4:	2b60      	cmp	r3, #96	@ 0x60
 8004ba6:	d050      	beq.n	8004c4a <HAL_TIM_ConfigClockSource+0x11a>
 8004ba8:	2b60      	cmp	r3, #96	@ 0x60
 8004baa:	d877      	bhi.n	8004c9c <HAL_TIM_ConfigClockSource+0x16c>
 8004bac:	2b50      	cmp	r3, #80	@ 0x50
 8004bae:	d03c      	beq.n	8004c2a <HAL_TIM_ConfigClockSource+0xfa>
 8004bb0:	2b50      	cmp	r3, #80	@ 0x50
 8004bb2:	d873      	bhi.n	8004c9c <HAL_TIM_ConfigClockSource+0x16c>
 8004bb4:	2b40      	cmp	r3, #64	@ 0x40
 8004bb6:	d058      	beq.n	8004c6a <HAL_TIM_ConfigClockSource+0x13a>
 8004bb8:	2b40      	cmp	r3, #64	@ 0x40
 8004bba:	d86f      	bhi.n	8004c9c <HAL_TIM_ConfigClockSource+0x16c>
 8004bbc:	2b30      	cmp	r3, #48	@ 0x30
 8004bbe:	d064      	beq.n	8004c8a <HAL_TIM_ConfigClockSource+0x15a>
 8004bc0:	2b30      	cmp	r3, #48	@ 0x30
 8004bc2:	d86b      	bhi.n	8004c9c <HAL_TIM_ConfigClockSource+0x16c>
 8004bc4:	2b20      	cmp	r3, #32
 8004bc6:	d060      	beq.n	8004c8a <HAL_TIM_ConfigClockSource+0x15a>
 8004bc8:	2b20      	cmp	r3, #32
 8004bca:	d867      	bhi.n	8004c9c <HAL_TIM_ConfigClockSource+0x16c>
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d05c      	beq.n	8004c8a <HAL_TIM_ConfigClockSource+0x15a>
 8004bd0:	2b10      	cmp	r3, #16
 8004bd2:	d05a      	beq.n	8004c8a <HAL_TIM_ConfigClockSource+0x15a>
 8004bd4:	e062      	b.n	8004c9c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004be6:	f000 fa90 	bl	800510a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	689b      	ldr	r3, [r3, #8]
 8004bf0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004bf2:	68bb      	ldr	r3, [r7, #8]
 8004bf4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004bf8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	68ba      	ldr	r2, [r7, #8]
 8004c00:	609a      	str	r2, [r3, #8]
      break;
 8004c02:	e04f      	b.n	8004ca4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004c14:	f000 fa79 	bl	800510a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	689a      	ldr	r2, [r3, #8]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004c26:	609a      	str	r2, [r3, #8]
      break;
 8004c28:	e03c      	b.n	8004ca4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c36:	461a      	mov	r2, r3
 8004c38:	f000 f9ed 	bl	8005016 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	2150      	movs	r1, #80	@ 0x50
 8004c42:	4618      	mov	r0, r3
 8004c44:	f000 fa46 	bl	80050d4 <TIM_ITRx_SetConfig>
      break;
 8004c48:	e02c      	b.n	8004ca4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c56:	461a      	mov	r2, r3
 8004c58:	f000 fa0c 	bl	8005074 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	2160      	movs	r1, #96	@ 0x60
 8004c62:	4618      	mov	r0, r3
 8004c64:	f000 fa36 	bl	80050d4 <TIM_ITRx_SetConfig>
      break;
 8004c68:	e01c      	b.n	8004ca4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c76:	461a      	mov	r2, r3
 8004c78:	f000 f9cd 	bl	8005016 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	2140      	movs	r1, #64	@ 0x40
 8004c82:	4618      	mov	r0, r3
 8004c84:	f000 fa26 	bl	80050d4 <TIM_ITRx_SetConfig>
      break;
 8004c88:	e00c      	b.n	8004ca4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681a      	ldr	r2, [r3, #0]
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4619      	mov	r1, r3
 8004c94:	4610      	mov	r0, r2
 8004c96:	f000 fa1d 	bl	80050d4 <TIM_ITRx_SetConfig>
      break;
 8004c9a:	e003      	b.n	8004ca4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	73fb      	strb	r3, [r7, #15]
      break;
 8004ca0:	e000      	b.n	8004ca4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004ca2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2200      	movs	r2, #0
 8004cb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004cb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	3710      	adds	r7, #16
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	bd80      	pop	{r7, pc}

08004cbe <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004cbe:	b580      	push	{r7, lr}
 8004cc0:	b082      	sub	sp, #8
 8004cc2:	af00      	add	r7, sp, #0
 8004cc4:	6078      	str	r0, [r7, #4]
 8004cc6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004cce:	2b01      	cmp	r3, #1
 8004cd0:	d101      	bne.n	8004cd6 <HAL_TIM_SlaveConfigSynchro+0x18>
 8004cd2:	2302      	movs	r3, #2
 8004cd4:	e031      	b.n	8004d3a <HAL_TIM_SlaveConfigSynchro+0x7c>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2201      	movs	r2, #1
 8004cda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2202      	movs	r2, #2
 8004ce2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8004ce6:	6839      	ldr	r1, [r7, #0]
 8004ce8:	6878      	ldr	r0, [r7, #4]
 8004cea:	f000 f903 	bl	8004ef4 <TIM_SlaveTimer_SetConfig>
 8004cee:	4603      	mov	r3, r0
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d009      	beq.n	8004d08 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2200      	movs	r2, #0
 8004d00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8004d04:	2301      	movs	r3, #1
 8004d06:	e018      	b.n	8004d3a <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	68da      	ldr	r2, [r3, #12]
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004d16:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	68da      	ldr	r2, [r3, #12]
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004d26:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2201      	movs	r2, #1
 8004d2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2200      	movs	r2, #0
 8004d34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004d38:	2300      	movs	r3, #0
}
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	3708      	adds	r7, #8
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	bd80      	pop	{r7, pc}

08004d42 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d42:	b480      	push	{r7}
 8004d44:	b083      	sub	sp, #12
 8004d46:	af00      	add	r7, sp, #0
 8004d48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004d4a:	bf00      	nop
 8004d4c:	370c      	adds	r7, #12
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d54:	4770      	bx	lr

08004d56 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d56:	b480      	push	{r7}
 8004d58:	b083      	sub	sp, #12
 8004d5a:	af00      	add	r7, sp, #0
 8004d5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004d5e:	bf00      	nop
 8004d60:	370c      	adds	r7, #12
 8004d62:	46bd      	mov	sp, r7
 8004d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d68:	4770      	bx	lr

08004d6a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004d6a:	b480      	push	{r7}
 8004d6c:	b083      	sub	sp, #12
 8004d6e:	af00      	add	r7, sp, #0
 8004d70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004d72:	bf00      	nop
 8004d74:	370c      	adds	r7, #12
 8004d76:	46bd      	mov	sp, r7
 8004d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7c:	4770      	bx	lr

08004d7e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004d7e:	b480      	push	{r7}
 8004d80:	b083      	sub	sp, #12
 8004d82:	af00      	add	r7, sp, #0
 8004d84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004d86:	bf00      	nop
 8004d88:	370c      	adds	r7, #12
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d90:	4770      	bx	lr

08004d92 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004d92:	b480      	push	{r7}
 8004d94:	b083      	sub	sp, #12
 8004d96:	af00      	add	r7, sp, #0
 8004d98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004d9a:	bf00      	nop
 8004d9c:	370c      	adds	r7, #12
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da4:	4770      	bx	lr
	...

08004da8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004da8:	b480      	push	{r7}
 8004daa:	b085      	sub	sp, #20
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
 8004db0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	4a43      	ldr	r2, [pc, #268]	@ (8004ec8 <TIM_Base_SetConfig+0x120>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d013      	beq.n	8004de8 <TIM_Base_SetConfig+0x40>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004dc6:	d00f      	beq.n	8004de8 <TIM_Base_SetConfig+0x40>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	4a40      	ldr	r2, [pc, #256]	@ (8004ecc <TIM_Base_SetConfig+0x124>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d00b      	beq.n	8004de8 <TIM_Base_SetConfig+0x40>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	4a3f      	ldr	r2, [pc, #252]	@ (8004ed0 <TIM_Base_SetConfig+0x128>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d007      	beq.n	8004de8 <TIM_Base_SetConfig+0x40>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	4a3e      	ldr	r2, [pc, #248]	@ (8004ed4 <TIM_Base_SetConfig+0x12c>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d003      	beq.n	8004de8 <TIM_Base_SetConfig+0x40>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	4a3d      	ldr	r2, [pc, #244]	@ (8004ed8 <TIM_Base_SetConfig+0x130>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d108      	bne.n	8004dfa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004dee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	68fa      	ldr	r2, [r7, #12]
 8004df6:	4313      	orrs	r3, r2
 8004df8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	4a32      	ldr	r2, [pc, #200]	@ (8004ec8 <TIM_Base_SetConfig+0x120>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d02b      	beq.n	8004e5a <TIM_Base_SetConfig+0xb2>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e08:	d027      	beq.n	8004e5a <TIM_Base_SetConfig+0xb2>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	4a2f      	ldr	r2, [pc, #188]	@ (8004ecc <TIM_Base_SetConfig+0x124>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d023      	beq.n	8004e5a <TIM_Base_SetConfig+0xb2>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	4a2e      	ldr	r2, [pc, #184]	@ (8004ed0 <TIM_Base_SetConfig+0x128>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d01f      	beq.n	8004e5a <TIM_Base_SetConfig+0xb2>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	4a2d      	ldr	r2, [pc, #180]	@ (8004ed4 <TIM_Base_SetConfig+0x12c>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d01b      	beq.n	8004e5a <TIM_Base_SetConfig+0xb2>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	4a2c      	ldr	r2, [pc, #176]	@ (8004ed8 <TIM_Base_SetConfig+0x130>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d017      	beq.n	8004e5a <TIM_Base_SetConfig+0xb2>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	4a2b      	ldr	r2, [pc, #172]	@ (8004edc <TIM_Base_SetConfig+0x134>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d013      	beq.n	8004e5a <TIM_Base_SetConfig+0xb2>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	4a2a      	ldr	r2, [pc, #168]	@ (8004ee0 <TIM_Base_SetConfig+0x138>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d00f      	beq.n	8004e5a <TIM_Base_SetConfig+0xb2>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	4a29      	ldr	r2, [pc, #164]	@ (8004ee4 <TIM_Base_SetConfig+0x13c>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d00b      	beq.n	8004e5a <TIM_Base_SetConfig+0xb2>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	4a28      	ldr	r2, [pc, #160]	@ (8004ee8 <TIM_Base_SetConfig+0x140>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d007      	beq.n	8004e5a <TIM_Base_SetConfig+0xb2>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	4a27      	ldr	r2, [pc, #156]	@ (8004eec <TIM_Base_SetConfig+0x144>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d003      	beq.n	8004e5a <TIM_Base_SetConfig+0xb2>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	4a26      	ldr	r2, [pc, #152]	@ (8004ef0 <TIM_Base_SetConfig+0x148>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d108      	bne.n	8004e6c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	68db      	ldr	r3, [r3, #12]
 8004e66:	68fa      	ldr	r2, [r7, #12]
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	695b      	ldr	r3, [r3, #20]
 8004e76:	4313      	orrs	r3, r2
 8004e78:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	689a      	ldr	r2, [r3, #8]
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	681a      	ldr	r2, [r3, #0]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	4a0e      	ldr	r2, [pc, #56]	@ (8004ec8 <TIM_Base_SetConfig+0x120>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d003      	beq.n	8004e9a <TIM_Base_SetConfig+0xf2>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	4a10      	ldr	r2, [pc, #64]	@ (8004ed8 <TIM_Base_SetConfig+0x130>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d103      	bne.n	8004ea2 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	691a      	ldr	r2, [r3, #16]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f043 0204 	orr.w	r2, r3, #4
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2201      	movs	r2, #1
 8004eb2:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	68fa      	ldr	r2, [r7, #12]
 8004eb8:	601a      	str	r2, [r3, #0]
}
 8004eba:	bf00      	nop
 8004ebc:	3714      	adds	r7, #20
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec4:	4770      	bx	lr
 8004ec6:	bf00      	nop
 8004ec8:	40010000 	.word	0x40010000
 8004ecc:	40000400 	.word	0x40000400
 8004ed0:	40000800 	.word	0x40000800
 8004ed4:	40000c00 	.word	0x40000c00
 8004ed8:	40010400 	.word	0x40010400
 8004edc:	40014000 	.word	0x40014000
 8004ee0:	40014400 	.word	0x40014400
 8004ee4:	40014800 	.word	0x40014800
 8004ee8:	40001800 	.word	0x40001800
 8004eec:	40001c00 	.word	0x40001c00
 8004ef0:	40002000 	.word	0x40002000

08004ef4 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b086      	sub	sp, #24
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
 8004efc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004efe:	2300      	movs	r3, #0
 8004f00:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	689b      	ldr	r3, [r3, #8]
 8004f08:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004f0a:	693b      	ldr	r3, [r7, #16]
 8004f0c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f10:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	685b      	ldr	r3, [r3, #4]
 8004f16:	693a      	ldr	r2, [r7, #16]
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	f023 0307 	bic.w	r3, r3, #7
 8004f22:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	693a      	ldr	r2, [r7, #16]
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	693a      	ldr	r2, [r7, #16]
 8004f34:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	685b      	ldr	r3, [r3, #4]
 8004f3a:	2b70      	cmp	r3, #112	@ 0x70
 8004f3c:	d01a      	beq.n	8004f74 <TIM_SlaveTimer_SetConfig+0x80>
 8004f3e:	2b70      	cmp	r3, #112	@ 0x70
 8004f40:	d860      	bhi.n	8005004 <TIM_SlaveTimer_SetConfig+0x110>
 8004f42:	2b60      	cmp	r3, #96	@ 0x60
 8004f44:	d054      	beq.n	8004ff0 <TIM_SlaveTimer_SetConfig+0xfc>
 8004f46:	2b60      	cmp	r3, #96	@ 0x60
 8004f48:	d85c      	bhi.n	8005004 <TIM_SlaveTimer_SetConfig+0x110>
 8004f4a:	2b50      	cmp	r3, #80	@ 0x50
 8004f4c:	d046      	beq.n	8004fdc <TIM_SlaveTimer_SetConfig+0xe8>
 8004f4e:	2b50      	cmp	r3, #80	@ 0x50
 8004f50:	d858      	bhi.n	8005004 <TIM_SlaveTimer_SetConfig+0x110>
 8004f52:	2b40      	cmp	r3, #64	@ 0x40
 8004f54:	d019      	beq.n	8004f8a <TIM_SlaveTimer_SetConfig+0x96>
 8004f56:	2b40      	cmp	r3, #64	@ 0x40
 8004f58:	d854      	bhi.n	8005004 <TIM_SlaveTimer_SetConfig+0x110>
 8004f5a:	2b30      	cmp	r3, #48	@ 0x30
 8004f5c:	d055      	beq.n	800500a <TIM_SlaveTimer_SetConfig+0x116>
 8004f5e:	2b30      	cmp	r3, #48	@ 0x30
 8004f60:	d850      	bhi.n	8005004 <TIM_SlaveTimer_SetConfig+0x110>
 8004f62:	2b20      	cmp	r3, #32
 8004f64:	d051      	beq.n	800500a <TIM_SlaveTimer_SetConfig+0x116>
 8004f66:	2b20      	cmp	r3, #32
 8004f68:	d84c      	bhi.n	8005004 <TIM_SlaveTimer_SetConfig+0x110>
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d04d      	beq.n	800500a <TIM_SlaveTimer_SetConfig+0x116>
 8004f6e:	2b10      	cmp	r3, #16
 8004f70:	d04b      	beq.n	800500a <TIM_SlaveTimer_SetConfig+0x116>
 8004f72:	e047      	b.n	8005004 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8004f84:	f000 f8c1 	bl	800510a <TIM_ETR_SetConfig>
      break;
 8004f88:	e040      	b.n	800500c <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	2b05      	cmp	r3, #5
 8004f90:	d101      	bne.n	8004f96 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8004f92:	2301      	movs	r3, #1
 8004f94:	e03b      	b.n	800500e <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	6a1b      	ldr	r3, [r3, #32]
 8004f9c:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	6a1a      	ldr	r2, [r3, #32]
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f022 0201 	bic.w	r2, r2, #1
 8004fac:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	699b      	ldr	r3, [r3, #24]
 8004fb4:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004fb6:	68bb      	ldr	r3, [r7, #8]
 8004fb8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004fbc:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	691b      	ldr	r3, [r3, #16]
 8004fc2:	011b      	lsls	r3, r3, #4
 8004fc4:	68ba      	ldr	r2, [r7, #8]
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	68ba      	ldr	r2, [r7, #8]
 8004fd0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	68fa      	ldr	r2, [r7, #12]
 8004fd8:	621a      	str	r2, [r3, #32]
      break;
 8004fda:	e017      	b.n	800500c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fe8:	461a      	mov	r2, r3
 8004fea:	f000 f814 	bl	8005016 <TIM_TI1_ConfigInputStage>
      break;
 8004fee:	e00d      	b.n	800500c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ffc:	461a      	mov	r2, r3
 8004ffe:	f000 f839 	bl	8005074 <TIM_TI2_ConfigInputStage>
      break;
 8005002:	e003      	b.n	800500c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8005004:	2301      	movs	r3, #1
 8005006:	75fb      	strb	r3, [r7, #23]
      break;
 8005008:	e000      	b.n	800500c <TIM_SlaveTimer_SetConfig+0x118>
      break;
 800500a:	bf00      	nop
  }

  return status;
 800500c:	7dfb      	ldrb	r3, [r7, #23]
}
 800500e:	4618      	mov	r0, r3
 8005010:	3718      	adds	r7, #24
 8005012:	46bd      	mov	sp, r7
 8005014:	bd80      	pop	{r7, pc}

08005016 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005016:	b480      	push	{r7}
 8005018:	b087      	sub	sp, #28
 800501a:	af00      	add	r7, sp, #0
 800501c:	60f8      	str	r0, [r7, #12]
 800501e:	60b9      	str	r1, [r7, #8]
 8005020:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	6a1b      	ldr	r3, [r3, #32]
 8005026:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	6a1b      	ldr	r3, [r3, #32]
 800502c:	f023 0201 	bic.w	r2, r3, #1
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	699b      	ldr	r3, [r3, #24]
 8005038:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800503a:	693b      	ldr	r3, [r7, #16]
 800503c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005040:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	011b      	lsls	r3, r3, #4
 8005046:	693a      	ldr	r2, [r7, #16]
 8005048:	4313      	orrs	r3, r2
 800504a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	f023 030a 	bic.w	r3, r3, #10
 8005052:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005054:	697a      	ldr	r2, [r7, #20]
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	4313      	orrs	r3, r2
 800505a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	693a      	ldr	r2, [r7, #16]
 8005060:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	697a      	ldr	r2, [r7, #20]
 8005066:	621a      	str	r2, [r3, #32]
}
 8005068:	bf00      	nop
 800506a:	371c      	adds	r7, #28
 800506c:	46bd      	mov	sp, r7
 800506e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005072:	4770      	bx	lr

08005074 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005074:	b480      	push	{r7}
 8005076:	b087      	sub	sp, #28
 8005078:	af00      	add	r7, sp, #0
 800507a:	60f8      	str	r0, [r7, #12]
 800507c:	60b9      	str	r1, [r7, #8]
 800507e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	6a1b      	ldr	r3, [r3, #32]
 8005084:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	6a1b      	ldr	r3, [r3, #32]
 800508a:	f023 0210 	bic.w	r2, r3, #16
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	699b      	ldr	r3, [r3, #24]
 8005096:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005098:	693b      	ldr	r3, [r7, #16]
 800509a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800509e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	031b      	lsls	r3, r3, #12
 80050a4:	693a      	ldr	r2, [r7, #16]
 80050a6:	4313      	orrs	r3, r2
 80050a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80050b0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	011b      	lsls	r3, r3, #4
 80050b6:	697a      	ldr	r2, [r7, #20]
 80050b8:	4313      	orrs	r3, r2
 80050ba:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	693a      	ldr	r2, [r7, #16]
 80050c0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	697a      	ldr	r2, [r7, #20]
 80050c6:	621a      	str	r2, [r3, #32]
}
 80050c8:	bf00      	nop
 80050ca:	371c      	adds	r7, #28
 80050cc:	46bd      	mov	sp, r7
 80050ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d2:	4770      	bx	lr

080050d4 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80050d4:	b480      	push	{r7}
 80050d6:	b085      	sub	sp, #20
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
 80050dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	689b      	ldr	r3, [r3, #8]
 80050e2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050ea:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80050ec:	683a      	ldr	r2, [r7, #0]
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	4313      	orrs	r3, r2
 80050f2:	f043 0307 	orr.w	r3, r3, #7
 80050f6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	68fa      	ldr	r2, [r7, #12]
 80050fc:	609a      	str	r2, [r3, #8]
}
 80050fe:	bf00      	nop
 8005100:	3714      	adds	r7, #20
 8005102:	46bd      	mov	sp, r7
 8005104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005108:	4770      	bx	lr

0800510a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800510a:	b480      	push	{r7}
 800510c:	b087      	sub	sp, #28
 800510e:	af00      	add	r7, sp, #0
 8005110:	60f8      	str	r0, [r7, #12]
 8005112:	60b9      	str	r1, [r7, #8]
 8005114:	607a      	str	r2, [r7, #4]
 8005116:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	689b      	ldr	r3, [r3, #8]
 800511c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005124:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	021a      	lsls	r2, r3, #8
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	431a      	orrs	r2, r3
 800512e:	68bb      	ldr	r3, [r7, #8]
 8005130:	4313      	orrs	r3, r2
 8005132:	697a      	ldr	r2, [r7, #20]
 8005134:	4313      	orrs	r3, r2
 8005136:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	697a      	ldr	r2, [r7, #20]
 800513c:	609a      	str	r2, [r3, #8]
}
 800513e:	bf00      	nop
 8005140:	371c      	adds	r7, #28
 8005142:	46bd      	mov	sp, r7
 8005144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005148:	4770      	bx	lr
	...

0800514c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800514c:	b480      	push	{r7}
 800514e:	b085      	sub	sp, #20
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
 8005154:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800515c:	2b01      	cmp	r3, #1
 800515e:	d101      	bne.n	8005164 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005160:	2302      	movs	r3, #2
 8005162:	e05a      	b.n	800521a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2201      	movs	r2, #1
 8005168:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2202      	movs	r2, #2
 8005170:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	685b      	ldr	r3, [r3, #4]
 800517a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	689b      	ldr	r3, [r3, #8]
 8005182:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800518a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	68fa      	ldr	r2, [r7, #12]
 8005192:	4313      	orrs	r3, r2
 8005194:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	68fa      	ldr	r2, [r7, #12]
 800519c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	4a21      	ldr	r2, [pc, #132]	@ (8005228 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d022      	beq.n	80051ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051b0:	d01d      	beq.n	80051ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4a1d      	ldr	r2, [pc, #116]	@ (800522c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d018      	beq.n	80051ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4a1b      	ldr	r2, [pc, #108]	@ (8005230 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d013      	beq.n	80051ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4a1a      	ldr	r2, [pc, #104]	@ (8005234 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d00e      	beq.n	80051ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4a18      	ldr	r2, [pc, #96]	@ (8005238 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d009      	beq.n	80051ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	4a17      	ldr	r2, [pc, #92]	@ (800523c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d004      	beq.n	80051ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4a15      	ldr	r2, [pc, #84]	@ (8005240 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d10c      	bne.n	8005208 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80051f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	685b      	ldr	r3, [r3, #4]
 80051fa:	68ba      	ldr	r2, [r7, #8]
 80051fc:	4313      	orrs	r3, r2
 80051fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	68ba      	ldr	r2, [r7, #8]
 8005206:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2201      	movs	r2, #1
 800520c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2200      	movs	r2, #0
 8005214:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005218:	2300      	movs	r3, #0
}
 800521a:	4618      	mov	r0, r3
 800521c:	3714      	adds	r7, #20
 800521e:	46bd      	mov	sp, r7
 8005220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005224:	4770      	bx	lr
 8005226:	bf00      	nop
 8005228:	40010000 	.word	0x40010000
 800522c:	40000400 	.word	0x40000400
 8005230:	40000800 	.word	0x40000800
 8005234:	40000c00 	.word	0x40000c00
 8005238:	40010400 	.word	0x40010400
 800523c:	40014000 	.word	0x40014000
 8005240:	40001800 	.word	0x40001800

08005244 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005244:	b480      	push	{r7}
 8005246:	b083      	sub	sp, #12
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800524c:	bf00      	nop
 800524e:	370c      	adds	r7, #12
 8005250:	46bd      	mov	sp, r7
 8005252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005256:	4770      	bx	lr

08005258 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005258:	b480      	push	{r7}
 800525a:	b083      	sub	sp, #12
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005260:	bf00      	nop
 8005262:	370c      	adds	r7, #12
 8005264:	46bd      	mov	sp, r7
 8005266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526a:	4770      	bx	lr

0800526c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b082      	sub	sp, #8
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d101      	bne.n	800527e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800527a:	2301      	movs	r3, #1
 800527c:	e042      	b.n	8005304 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005284:	b2db      	uxtb	r3, r3
 8005286:	2b00      	cmp	r3, #0
 8005288:	d106      	bne.n	8005298 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2200      	movs	r2, #0
 800528e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005292:	6878      	ldr	r0, [r7, #4]
 8005294:	f7fb ff82 	bl	800119c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2224      	movs	r2, #36	@ 0x24
 800529c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	68da      	ldr	r2, [r3, #12]
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80052ae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80052b0:	6878      	ldr	r0, [r7, #4]
 80052b2:	f000 f97f 	bl	80055b4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	691a      	ldr	r2, [r3, #16]
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80052c4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	695a      	ldr	r2, [r3, #20]
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80052d4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	68da      	ldr	r2, [r3, #12]
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80052e4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2200      	movs	r2, #0
 80052ea:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2220      	movs	r2, #32
 80052f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2220      	movs	r2, #32
 80052f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2200      	movs	r2, #0
 8005300:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005302:	2300      	movs	r3, #0
}
 8005304:	4618      	mov	r0, r3
 8005306:	3708      	adds	r7, #8
 8005308:	46bd      	mov	sp, r7
 800530a:	bd80      	pop	{r7, pc}

0800530c <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b08a      	sub	sp, #40	@ 0x28
 8005310:	af02      	add	r7, sp, #8
 8005312:	60f8      	str	r0, [r7, #12]
 8005314:	60b9      	str	r1, [r7, #8]
 8005316:	603b      	str	r3, [r7, #0]
 8005318:	4613      	mov	r3, r2
 800531a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800531c:	2300      	movs	r3, #0
 800531e:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005326:	b2db      	uxtb	r3, r3
 8005328:	2b20      	cmp	r3, #32
 800532a:	f040 8081 	bne.w	8005430 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d002      	beq.n	800533a <HAL_UART_Receive+0x2e>
 8005334:	88fb      	ldrh	r3, [r7, #6]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d101      	bne.n	800533e <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800533a:	2301      	movs	r3, #1
 800533c:	e079      	b.n	8005432 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	2200      	movs	r2, #0
 8005342:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	2222      	movs	r2, #34	@ 0x22
 8005348:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	2200      	movs	r2, #0
 8005350:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005352:	f7fc f913 	bl	800157c <HAL_GetTick>
 8005356:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	88fa      	ldrh	r2, [r7, #6]
 800535c:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	88fa      	ldrh	r2, [r7, #6]
 8005362:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	689b      	ldr	r3, [r3, #8]
 8005368:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800536c:	d108      	bne.n	8005380 <HAL_UART_Receive+0x74>
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	691b      	ldr	r3, [r3, #16]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d104      	bne.n	8005380 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8005376:	2300      	movs	r3, #0
 8005378:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800537a:	68bb      	ldr	r3, [r7, #8]
 800537c:	61bb      	str	r3, [r7, #24]
 800537e:	e003      	b.n	8005388 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005384:	2300      	movs	r3, #0
 8005386:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8005388:	e047      	b.n	800541a <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	9300      	str	r3, [sp, #0]
 800538e:	697b      	ldr	r3, [r7, #20]
 8005390:	2200      	movs	r2, #0
 8005392:	2120      	movs	r1, #32
 8005394:	68f8      	ldr	r0, [r7, #12]
 8005396:	f000 f850 	bl	800543a <UART_WaitOnFlagUntilTimeout>
 800539a:	4603      	mov	r3, r0
 800539c:	2b00      	cmp	r3, #0
 800539e:	d005      	beq.n	80053ac <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	2220      	movs	r2, #32
 80053a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 80053a8:	2303      	movs	r3, #3
 80053aa:	e042      	b.n	8005432 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 80053ac:	69fb      	ldr	r3, [r7, #28]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d10c      	bne.n	80053cc <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	685b      	ldr	r3, [r3, #4]
 80053b8:	b29b      	uxth	r3, r3
 80053ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053be:	b29a      	uxth	r2, r3
 80053c0:	69bb      	ldr	r3, [r7, #24]
 80053c2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80053c4:	69bb      	ldr	r3, [r7, #24]
 80053c6:	3302      	adds	r3, #2
 80053c8:	61bb      	str	r3, [r7, #24]
 80053ca:	e01f      	b.n	800540c <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	689b      	ldr	r3, [r3, #8]
 80053d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80053d4:	d007      	beq.n	80053e6 <HAL_UART_Receive+0xda>
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	689b      	ldr	r3, [r3, #8]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d10a      	bne.n	80053f4 <HAL_UART_Receive+0xe8>
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	691b      	ldr	r3, [r3, #16]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d106      	bne.n	80053f4 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	685b      	ldr	r3, [r3, #4]
 80053ec:	b2da      	uxtb	r2, r3
 80053ee:	69fb      	ldr	r3, [r7, #28]
 80053f0:	701a      	strb	r2, [r3, #0]
 80053f2:	e008      	b.n	8005406 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	685b      	ldr	r3, [r3, #4]
 80053fa:	b2db      	uxtb	r3, r3
 80053fc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005400:	b2da      	uxtb	r2, r3
 8005402:	69fb      	ldr	r3, [r7, #28]
 8005404:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8005406:	69fb      	ldr	r3, [r7, #28]
 8005408:	3301      	adds	r3, #1
 800540a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005410:	b29b      	uxth	r3, r3
 8005412:	3b01      	subs	r3, #1
 8005414:	b29a      	uxth	r2, r3
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800541e:	b29b      	uxth	r3, r3
 8005420:	2b00      	cmp	r3, #0
 8005422:	d1b2      	bne.n	800538a <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	2220      	movs	r2, #32
 8005428:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 800542c:	2300      	movs	r3, #0
 800542e:	e000      	b.n	8005432 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8005430:	2302      	movs	r3, #2
  }
}
 8005432:	4618      	mov	r0, r3
 8005434:	3720      	adds	r7, #32
 8005436:	46bd      	mov	sp, r7
 8005438:	bd80      	pop	{r7, pc}

0800543a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800543a:	b580      	push	{r7, lr}
 800543c:	b086      	sub	sp, #24
 800543e:	af00      	add	r7, sp, #0
 8005440:	60f8      	str	r0, [r7, #12]
 8005442:	60b9      	str	r1, [r7, #8]
 8005444:	603b      	str	r3, [r7, #0]
 8005446:	4613      	mov	r3, r2
 8005448:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800544a:	e03b      	b.n	80054c4 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800544c:	6a3b      	ldr	r3, [r7, #32]
 800544e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005452:	d037      	beq.n	80054c4 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005454:	f7fc f892 	bl	800157c <HAL_GetTick>
 8005458:	4602      	mov	r2, r0
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	1ad3      	subs	r3, r2, r3
 800545e:	6a3a      	ldr	r2, [r7, #32]
 8005460:	429a      	cmp	r2, r3
 8005462:	d302      	bcc.n	800546a <UART_WaitOnFlagUntilTimeout+0x30>
 8005464:	6a3b      	ldr	r3, [r7, #32]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d101      	bne.n	800546e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800546a:	2303      	movs	r3, #3
 800546c:	e03a      	b.n	80054e4 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	68db      	ldr	r3, [r3, #12]
 8005474:	f003 0304 	and.w	r3, r3, #4
 8005478:	2b00      	cmp	r3, #0
 800547a:	d023      	beq.n	80054c4 <UART_WaitOnFlagUntilTimeout+0x8a>
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	2b80      	cmp	r3, #128	@ 0x80
 8005480:	d020      	beq.n	80054c4 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	2b40      	cmp	r3, #64	@ 0x40
 8005486:	d01d      	beq.n	80054c4 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f003 0308 	and.w	r3, r3, #8
 8005492:	2b08      	cmp	r3, #8
 8005494:	d116      	bne.n	80054c4 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005496:	2300      	movs	r3, #0
 8005498:	617b      	str	r3, [r7, #20]
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	617b      	str	r3, [r7, #20]
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	685b      	ldr	r3, [r3, #4]
 80054a8:	617b      	str	r3, [r7, #20]
 80054aa:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80054ac:	68f8      	ldr	r0, [r7, #12]
 80054ae:	f000 f81d 	bl	80054ec <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	2208      	movs	r2, #8
 80054b6:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	2200      	movs	r2, #0
 80054bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80054c0:	2301      	movs	r3, #1
 80054c2:	e00f      	b.n	80054e4 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	681a      	ldr	r2, [r3, #0]
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	4013      	ands	r3, r2
 80054ce:	68ba      	ldr	r2, [r7, #8]
 80054d0:	429a      	cmp	r2, r3
 80054d2:	bf0c      	ite	eq
 80054d4:	2301      	moveq	r3, #1
 80054d6:	2300      	movne	r3, #0
 80054d8:	b2db      	uxtb	r3, r3
 80054da:	461a      	mov	r2, r3
 80054dc:	79fb      	ldrb	r3, [r7, #7]
 80054de:	429a      	cmp	r2, r3
 80054e0:	d0b4      	beq.n	800544c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80054e2:	2300      	movs	r3, #0
}
 80054e4:	4618      	mov	r0, r3
 80054e6:	3718      	adds	r7, #24
 80054e8:	46bd      	mov	sp, r7
 80054ea:	bd80      	pop	{r7, pc}

080054ec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80054ec:	b480      	push	{r7}
 80054ee:	b095      	sub	sp, #84	@ 0x54
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	330c      	adds	r3, #12
 80054fa:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054fe:	e853 3f00 	ldrex	r3, [r3]
 8005502:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005504:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005506:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800550a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	330c      	adds	r3, #12
 8005512:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005514:	643a      	str	r2, [r7, #64]	@ 0x40
 8005516:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005518:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800551a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800551c:	e841 2300 	strex	r3, r2, [r1]
 8005520:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005522:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005524:	2b00      	cmp	r3, #0
 8005526:	d1e5      	bne.n	80054f4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	3314      	adds	r3, #20
 800552e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005530:	6a3b      	ldr	r3, [r7, #32]
 8005532:	e853 3f00 	ldrex	r3, [r3]
 8005536:	61fb      	str	r3, [r7, #28]
   return(result);
 8005538:	69fb      	ldr	r3, [r7, #28]
 800553a:	f023 0301 	bic.w	r3, r3, #1
 800553e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	3314      	adds	r3, #20
 8005546:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005548:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800554a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800554c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800554e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005550:	e841 2300 	strex	r3, r2, [r1]
 8005554:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005558:	2b00      	cmp	r3, #0
 800555a:	d1e5      	bne.n	8005528 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005560:	2b01      	cmp	r3, #1
 8005562:	d119      	bne.n	8005598 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	330c      	adds	r3, #12
 800556a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	e853 3f00 	ldrex	r3, [r3]
 8005572:	60bb      	str	r3, [r7, #8]
   return(result);
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	f023 0310 	bic.w	r3, r3, #16
 800557a:	647b      	str	r3, [r7, #68]	@ 0x44
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	330c      	adds	r3, #12
 8005582:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005584:	61ba      	str	r2, [r7, #24]
 8005586:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005588:	6979      	ldr	r1, [r7, #20]
 800558a:	69ba      	ldr	r2, [r7, #24]
 800558c:	e841 2300 	strex	r3, r2, [r1]
 8005590:	613b      	str	r3, [r7, #16]
   return(result);
 8005592:	693b      	ldr	r3, [r7, #16]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d1e5      	bne.n	8005564 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2220      	movs	r2, #32
 800559c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2200      	movs	r2, #0
 80055a4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80055a6:	bf00      	nop
 80055a8:	3754      	adds	r7, #84	@ 0x54
 80055aa:	46bd      	mov	sp, r7
 80055ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b0:	4770      	bx	lr
	...

080055b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80055b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80055b8:	b0c0      	sub	sp, #256	@ 0x100
 80055ba:	af00      	add	r7, sp, #0
 80055bc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80055c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	691b      	ldr	r3, [r3, #16]
 80055c8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80055cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055d0:	68d9      	ldr	r1, [r3, #12]
 80055d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055d6:	681a      	ldr	r2, [r3, #0]
 80055d8:	ea40 0301 	orr.w	r3, r0, r1
 80055dc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80055de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055e2:	689a      	ldr	r2, [r3, #8]
 80055e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055e8:	691b      	ldr	r3, [r3, #16]
 80055ea:	431a      	orrs	r2, r3
 80055ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055f0:	695b      	ldr	r3, [r3, #20]
 80055f2:	431a      	orrs	r2, r3
 80055f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055f8:	69db      	ldr	r3, [r3, #28]
 80055fa:	4313      	orrs	r3, r2
 80055fc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005600:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	68db      	ldr	r3, [r3, #12]
 8005608:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800560c:	f021 010c 	bic.w	r1, r1, #12
 8005610:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005614:	681a      	ldr	r2, [r3, #0]
 8005616:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800561a:	430b      	orrs	r3, r1
 800561c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800561e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	695b      	ldr	r3, [r3, #20]
 8005626:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800562a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800562e:	6999      	ldr	r1, [r3, #24]
 8005630:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005634:	681a      	ldr	r2, [r3, #0]
 8005636:	ea40 0301 	orr.w	r3, r0, r1
 800563a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800563c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005640:	681a      	ldr	r2, [r3, #0]
 8005642:	4b8f      	ldr	r3, [pc, #572]	@ (8005880 <UART_SetConfig+0x2cc>)
 8005644:	429a      	cmp	r2, r3
 8005646:	d005      	beq.n	8005654 <UART_SetConfig+0xa0>
 8005648:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800564c:	681a      	ldr	r2, [r3, #0]
 800564e:	4b8d      	ldr	r3, [pc, #564]	@ (8005884 <UART_SetConfig+0x2d0>)
 8005650:	429a      	cmp	r2, r3
 8005652:	d104      	bne.n	800565e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005654:	f7fe f8b0 	bl	80037b8 <HAL_RCC_GetPCLK2Freq>
 8005658:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800565c:	e003      	b.n	8005666 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800565e:	f7fe f897 	bl	8003790 <HAL_RCC_GetPCLK1Freq>
 8005662:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005666:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800566a:	69db      	ldr	r3, [r3, #28]
 800566c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005670:	f040 810c 	bne.w	800588c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005674:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005678:	2200      	movs	r2, #0
 800567a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800567e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005682:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005686:	4622      	mov	r2, r4
 8005688:	462b      	mov	r3, r5
 800568a:	1891      	adds	r1, r2, r2
 800568c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800568e:	415b      	adcs	r3, r3
 8005690:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005692:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005696:	4621      	mov	r1, r4
 8005698:	eb12 0801 	adds.w	r8, r2, r1
 800569c:	4629      	mov	r1, r5
 800569e:	eb43 0901 	adc.w	r9, r3, r1
 80056a2:	f04f 0200 	mov.w	r2, #0
 80056a6:	f04f 0300 	mov.w	r3, #0
 80056aa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80056ae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80056b2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80056b6:	4690      	mov	r8, r2
 80056b8:	4699      	mov	r9, r3
 80056ba:	4623      	mov	r3, r4
 80056bc:	eb18 0303 	adds.w	r3, r8, r3
 80056c0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80056c4:	462b      	mov	r3, r5
 80056c6:	eb49 0303 	adc.w	r3, r9, r3
 80056ca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80056ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056d2:	685b      	ldr	r3, [r3, #4]
 80056d4:	2200      	movs	r2, #0
 80056d6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80056da:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80056de:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80056e2:	460b      	mov	r3, r1
 80056e4:	18db      	adds	r3, r3, r3
 80056e6:	653b      	str	r3, [r7, #80]	@ 0x50
 80056e8:	4613      	mov	r3, r2
 80056ea:	eb42 0303 	adc.w	r3, r2, r3
 80056ee:	657b      	str	r3, [r7, #84]	@ 0x54
 80056f0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80056f4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80056f8:	f7fa fd84 	bl	8000204 <__aeabi_uldivmod>
 80056fc:	4602      	mov	r2, r0
 80056fe:	460b      	mov	r3, r1
 8005700:	4b61      	ldr	r3, [pc, #388]	@ (8005888 <UART_SetConfig+0x2d4>)
 8005702:	fba3 2302 	umull	r2, r3, r3, r2
 8005706:	095b      	lsrs	r3, r3, #5
 8005708:	011c      	lsls	r4, r3, #4
 800570a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800570e:	2200      	movs	r2, #0
 8005710:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005714:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005718:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800571c:	4642      	mov	r2, r8
 800571e:	464b      	mov	r3, r9
 8005720:	1891      	adds	r1, r2, r2
 8005722:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005724:	415b      	adcs	r3, r3
 8005726:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005728:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800572c:	4641      	mov	r1, r8
 800572e:	eb12 0a01 	adds.w	sl, r2, r1
 8005732:	4649      	mov	r1, r9
 8005734:	eb43 0b01 	adc.w	fp, r3, r1
 8005738:	f04f 0200 	mov.w	r2, #0
 800573c:	f04f 0300 	mov.w	r3, #0
 8005740:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005744:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005748:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800574c:	4692      	mov	sl, r2
 800574e:	469b      	mov	fp, r3
 8005750:	4643      	mov	r3, r8
 8005752:	eb1a 0303 	adds.w	r3, sl, r3
 8005756:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800575a:	464b      	mov	r3, r9
 800575c:	eb4b 0303 	adc.w	r3, fp, r3
 8005760:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005764:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005768:	685b      	ldr	r3, [r3, #4]
 800576a:	2200      	movs	r2, #0
 800576c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005770:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005774:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005778:	460b      	mov	r3, r1
 800577a:	18db      	adds	r3, r3, r3
 800577c:	643b      	str	r3, [r7, #64]	@ 0x40
 800577e:	4613      	mov	r3, r2
 8005780:	eb42 0303 	adc.w	r3, r2, r3
 8005784:	647b      	str	r3, [r7, #68]	@ 0x44
 8005786:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800578a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800578e:	f7fa fd39 	bl	8000204 <__aeabi_uldivmod>
 8005792:	4602      	mov	r2, r0
 8005794:	460b      	mov	r3, r1
 8005796:	4611      	mov	r1, r2
 8005798:	4b3b      	ldr	r3, [pc, #236]	@ (8005888 <UART_SetConfig+0x2d4>)
 800579a:	fba3 2301 	umull	r2, r3, r3, r1
 800579e:	095b      	lsrs	r3, r3, #5
 80057a0:	2264      	movs	r2, #100	@ 0x64
 80057a2:	fb02 f303 	mul.w	r3, r2, r3
 80057a6:	1acb      	subs	r3, r1, r3
 80057a8:	00db      	lsls	r3, r3, #3
 80057aa:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80057ae:	4b36      	ldr	r3, [pc, #216]	@ (8005888 <UART_SetConfig+0x2d4>)
 80057b0:	fba3 2302 	umull	r2, r3, r3, r2
 80057b4:	095b      	lsrs	r3, r3, #5
 80057b6:	005b      	lsls	r3, r3, #1
 80057b8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80057bc:	441c      	add	r4, r3
 80057be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80057c2:	2200      	movs	r2, #0
 80057c4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80057c8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80057cc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80057d0:	4642      	mov	r2, r8
 80057d2:	464b      	mov	r3, r9
 80057d4:	1891      	adds	r1, r2, r2
 80057d6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80057d8:	415b      	adcs	r3, r3
 80057da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80057dc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80057e0:	4641      	mov	r1, r8
 80057e2:	1851      	adds	r1, r2, r1
 80057e4:	6339      	str	r1, [r7, #48]	@ 0x30
 80057e6:	4649      	mov	r1, r9
 80057e8:	414b      	adcs	r3, r1
 80057ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80057ec:	f04f 0200 	mov.w	r2, #0
 80057f0:	f04f 0300 	mov.w	r3, #0
 80057f4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80057f8:	4659      	mov	r1, fp
 80057fa:	00cb      	lsls	r3, r1, #3
 80057fc:	4651      	mov	r1, sl
 80057fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005802:	4651      	mov	r1, sl
 8005804:	00ca      	lsls	r2, r1, #3
 8005806:	4610      	mov	r0, r2
 8005808:	4619      	mov	r1, r3
 800580a:	4603      	mov	r3, r0
 800580c:	4642      	mov	r2, r8
 800580e:	189b      	adds	r3, r3, r2
 8005810:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005814:	464b      	mov	r3, r9
 8005816:	460a      	mov	r2, r1
 8005818:	eb42 0303 	adc.w	r3, r2, r3
 800581c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005820:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005824:	685b      	ldr	r3, [r3, #4]
 8005826:	2200      	movs	r2, #0
 8005828:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800582c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005830:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005834:	460b      	mov	r3, r1
 8005836:	18db      	adds	r3, r3, r3
 8005838:	62bb      	str	r3, [r7, #40]	@ 0x28
 800583a:	4613      	mov	r3, r2
 800583c:	eb42 0303 	adc.w	r3, r2, r3
 8005840:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005842:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005846:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800584a:	f7fa fcdb 	bl	8000204 <__aeabi_uldivmod>
 800584e:	4602      	mov	r2, r0
 8005850:	460b      	mov	r3, r1
 8005852:	4b0d      	ldr	r3, [pc, #52]	@ (8005888 <UART_SetConfig+0x2d4>)
 8005854:	fba3 1302 	umull	r1, r3, r3, r2
 8005858:	095b      	lsrs	r3, r3, #5
 800585a:	2164      	movs	r1, #100	@ 0x64
 800585c:	fb01 f303 	mul.w	r3, r1, r3
 8005860:	1ad3      	subs	r3, r2, r3
 8005862:	00db      	lsls	r3, r3, #3
 8005864:	3332      	adds	r3, #50	@ 0x32
 8005866:	4a08      	ldr	r2, [pc, #32]	@ (8005888 <UART_SetConfig+0x2d4>)
 8005868:	fba2 2303 	umull	r2, r3, r2, r3
 800586c:	095b      	lsrs	r3, r3, #5
 800586e:	f003 0207 	and.w	r2, r3, #7
 8005872:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	4422      	add	r2, r4
 800587a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800587c:	e106      	b.n	8005a8c <UART_SetConfig+0x4d8>
 800587e:	bf00      	nop
 8005880:	40011000 	.word	0x40011000
 8005884:	40011400 	.word	0x40011400
 8005888:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800588c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005890:	2200      	movs	r2, #0
 8005892:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005896:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800589a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800589e:	4642      	mov	r2, r8
 80058a0:	464b      	mov	r3, r9
 80058a2:	1891      	adds	r1, r2, r2
 80058a4:	6239      	str	r1, [r7, #32]
 80058a6:	415b      	adcs	r3, r3
 80058a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80058aa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80058ae:	4641      	mov	r1, r8
 80058b0:	1854      	adds	r4, r2, r1
 80058b2:	4649      	mov	r1, r9
 80058b4:	eb43 0501 	adc.w	r5, r3, r1
 80058b8:	f04f 0200 	mov.w	r2, #0
 80058bc:	f04f 0300 	mov.w	r3, #0
 80058c0:	00eb      	lsls	r3, r5, #3
 80058c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80058c6:	00e2      	lsls	r2, r4, #3
 80058c8:	4614      	mov	r4, r2
 80058ca:	461d      	mov	r5, r3
 80058cc:	4643      	mov	r3, r8
 80058ce:	18e3      	adds	r3, r4, r3
 80058d0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80058d4:	464b      	mov	r3, r9
 80058d6:	eb45 0303 	adc.w	r3, r5, r3
 80058da:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80058de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058e2:	685b      	ldr	r3, [r3, #4]
 80058e4:	2200      	movs	r2, #0
 80058e6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80058ea:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80058ee:	f04f 0200 	mov.w	r2, #0
 80058f2:	f04f 0300 	mov.w	r3, #0
 80058f6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80058fa:	4629      	mov	r1, r5
 80058fc:	008b      	lsls	r3, r1, #2
 80058fe:	4621      	mov	r1, r4
 8005900:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005904:	4621      	mov	r1, r4
 8005906:	008a      	lsls	r2, r1, #2
 8005908:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800590c:	f7fa fc7a 	bl	8000204 <__aeabi_uldivmod>
 8005910:	4602      	mov	r2, r0
 8005912:	460b      	mov	r3, r1
 8005914:	4b60      	ldr	r3, [pc, #384]	@ (8005a98 <UART_SetConfig+0x4e4>)
 8005916:	fba3 2302 	umull	r2, r3, r3, r2
 800591a:	095b      	lsrs	r3, r3, #5
 800591c:	011c      	lsls	r4, r3, #4
 800591e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005922:	2200      	movs	r2, #0
 8005924:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005928:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800592c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005930:	4642      	mov	r2, r8
 8005932:	464b      	mov	r3, r9
 8005934:	1891      	adds	r1, r2, r2
 8005936:	61b9      	str	r1, [r7, #24]
 8005938:	415b      	adcs	r3, r3
 800593a:	61fb      	str	r3, [r7, #28]
 800593c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005940:	4641      	mov	r1, r8
 8005942:	1851      	adds	r1, r2, r1
 8005944:	6139      	str	r1, [r7, #16]
 8005946:	4649      	mov	r1, r9
 8005948:	414b      	adcs	r3, r1
 800594a:	617b      	str	r3, [r7, #20]
 800594c:	f04f 0200 	mov.w	r2, #0
 8005950:	f04f 0300 	mov.w	r3, #0
 8005954:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005958:	4659      	mov	r1, fp
 800595a:	00cb      	lsls	r3, r1, #3
 800595c:	4651      	mov	r1, sl
 800595e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005962:	4651      	mov	r1, sl
 8005964:	00ca      	lsls	r2, r1, #3
 8005966:	4610      	mov	r0, r2
 8005968:	4619      	mov	r1, r3
 800596a:	4603      	mov	r3, r0
 800596c:	4642      	mov	r2, r8
 800596e:	189b      	adds	r3, r3, r2
 8005970:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005974:	464b      	mov	r3, r9
 8005976:	460a      	mov	r2, r1
 8005978:	eb42 0303 	adc.w	r3, r2, r3
 800597c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005980:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005984:	685b      	ldr	r3, [r3, #4]
 8005986:	2200      	movs	r2, #0
 8005988:	67bb      	str	r3, [r7, #120]	@ 0x78
 800598a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800598c:	f04f 0200 	mov.w	r2, #0
 8005990:	f04f 0300 	mov.w	r3, #0
 8005994:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005998:	4649      	mov	r1, r9
 800599a:	008b      	lsls	r3, r1, #2
 800599c:	4641      	mov	r1, r8
 800599e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80059a2:	4641      	mov	r1, r8
 80059a4:	008a      	lsls	r2, r1, #2
 80059a6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80059aa:	f7fa fc2b 	bl	8000204 <__aeabi_uldivmod>
 80059ae:	4602      	mov	r2, r0
 80059b0:	460b      	mov	r3, r1
 80059b2:	4611      	mov	r1, r2
 80059b4:	4b38      	ldr	r3, [pc, #224]	@ (8005a98 <UART_SetConfig+0x4e4>)
 80059b6:	fba3 2301 	umull	r2, r3, r3, r1
 80059ba:	095b      	lsrs	r3, r3, #5
 80059bc:	2264      	movs	r2, #100	@ 0x64
 80059be:	fb02 f303 	mul.w	r3, r2, r3
 80059c2:	1acb      	subs	r3, r1, r3
 80059c4:	011b      	lsls	r3, r3, #4
 80059c6:	3332      	adds	r3, #50	@ 0x32
 80059c8:	4a33      	ldr	r2, [pc, #204]	@ (8005a98 <UART_SetConfig+0x4e4>)
 80059ca:	fba2 2303 	umull	r2, r3, r2, r3
 80059ce:	095b      	lsrs	r3, r3, #5
 80059d0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80059d4:	441c      	add	r4, r3
 80059d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80059da:	2200      	movs	r2, #0
 80059dc:	673b      	str	r3, [r7, #112]	@ 0x70
 80059de:	677a      	str	r2, [r7, #116]	@ 0x74
 80059e0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80059e4:	4642      	mov	r2, r8
 80059e6:	464b      	mov	r3, r9
 80059e8:	1891      	adds	r1, r2, r2
 80059ea:	60b9      	str	r1, [r7, #8]
 80059ec:	415b      	adcs	r3, r3
 80059ee:	60fb      	str	r3, [r7, #12]
 80059f0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80059f4:	4641      	mov	r1, r8
 80059f6:	1851      	adds	r1, r2, r1
 80059f8:	6039      	str	r1, [r7, #0]
 80059fa:	4649      	mov	r1, r9
 80059fc:	414b      	adcs	r3, r1
 80059fe:	607b      	str	r3, [r7, #4]
 8005a00:	f04f 0200 	mov.w	r2, #0
 8005a04:	f04f 0300 	mov.w	r3, #0
 8005a08:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005a0c:	4659      	mov	r1, fp
 8005a0e:	00cb      	lsls	r3, r1, #3
 8005a10:	4651      	mov	r1, sl
 8005a12:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005a16:	4651      	mov	r1, sl
 8005a18:	00ca      	lsls	r2, r1, #3
 8005a1a:	4610      	mov	r0, r2
 8005a1c:	4619      	mov	r1, r3
 8005a1e:	4603      	mov	r3, r0
 8005a20:	4642      	mov	r2, r8
 8005a22:	189b      	adds	r3, r3, r2
 8005a24:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005a26:	464b      	mov	r3, r9
 8005a28:	460a      	mov	r2, r1
 8005a2a:	eb42 0303 	adc.w	r3, r2, r3
 8005a2e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005a30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a34:	685b      	ldr	r3, [r3, #4]
 8005a36:	2200      	movs	r2, #0
 8005a38:	663b      	str	r3, [r7, #96]	@ 0x60
 8005a3a:	667a      	str	r2, [r7, #100]	@ 0x64
 8005a3c:	f04f 0200 	mov.w	r2, #0
 8005a40:	f04f 0300 	mov.w	r3, #0
 8005a44:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005a48:	4649      	mov	r1, r9
 8005a4a:	008b      	lsls	r3, r1, #2
 8005a4c:	4641      	mov	r1, r8
 8005a4e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005a52:	4641      	mov	r1, r8
 8005a54:	008a      	lsls	r2, r1, #2
 8005a56:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005a5a:	f7fa fbd3 	bl	8000204 <__aeabi_uldivmod>
 8005a5e:	4602      	mov	r2, r0
 8005a60:	460b      	mov	r3, r1
 8005a62:	4b0d      	ldr	r3, [pc, #52]	@ (8005a98 <UART_SetConfig+0x4e4>)
 8005a64:	fba3 1302 	umull	r1, r3, r3, r2
 8005a68:	095b      	lsrs	r3, r3, #5
 8005a6a:	2164      	movs	r1, #100	@ 0x64
 8005a6c:	fb01 f303 	mul.w	r3, r1, r3
 8005a70:	1ad3      	subs	r3, r2, r3
 8005a72:	011b      	lsls	r3, r3, #4
 8005a74:	3332      	adds	r3, #50	@ 0x32
 8005a76:	4a08      	ldr	r2, [pc, #32]	@ (8005a98 <UART_SetConfig+0x4e4>)
 8005a78:	fba2 2303 	umull	r2, r3, r2, r3
 8005a7c:	095b      	lsrs	r3, r3, #5
 8005a7e:	f003 020f 	and.w	r2, r3, #15
 8005a82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	4422      	add	r2, r4
 8005a8a:	609a      	str	r2, [r3, #8]
}
 8005a8c:	bf00      	nop
 8005a8e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005a92:	46bd      	mov	sp, r7
 8005a94:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005a98:	51eb851f 	.word	0x51eb851f

08005a9c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005a9c:	b084      	sub	sp, #16
 8005a9e:	b580      	push	{r7, lr}
 8005aa0:	b084      	sub	sp, #16
 8005aa2:	af00      	add	r7, sp, #0
 8005aa4:	6078      	str	r0, [r7, #4]
 8005aa6:	f107 001c 	add.w	r0, r7, #28
 8005aaa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005aae:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8005ab2:	2b01      	cmp	r3, #1
 8005ab4:	d123      	bne.n	8005afe <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005aba:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	68db      	ldr	r3, [r3, #12]
 8005ac6:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8005aca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005ace:	687a      	ldr	r2, [r7, #4]
 8005ad0:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	68db      	ldr	r3, [r3, #12]
 8005ad6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005ade:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005ae2:	2b01      	cmp	r3, #1
 8005ae4:	d105      	bne.n	8005af2 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	68db      	ldr	r3, [r3, #12]
 8005aea:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005af2:	6878      	ldr	r0, [r7, #4]
 8005af4:	f001 fae2 	bl	80070bc <USB_CoreReset>
 8005af8:	4603      	mov	r3, r0
 8005afa:	73fb      	strb	r3, [r7, #15]
 8005afc:	e01b      	b.n	8005b36 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	68db      	ldr	r3, [r3, #12]
 8005b02:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005b0a:	6878      	ldr	r0, [r7, #4]
 8005b0c:	f001 fad6 	bl	80070bc <USB_CoreReset>
 8005b10:	4603      	mov	r3, r0
 8005b12:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005b14:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d106      	bne.n	8005b2a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b20:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	639a      	str	r2, [r3, #56]	@ 0x38
 8005b28:	e005      	b.n	8005b36 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b2e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005b36:	7fbb      	ldrb	r3, [r7, #30]
 8005b38:	2b01      	cmp	r3, #1
 8005b3a:	d10b      	bne.n	8005b54 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	689b      	ldr	r3, [r3, #8]
 8005b40:	f043 0206 	orr.w	r2, r3, #6
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	689b      	ldr	r3, [r3, #8]
 8005b4c:	f043 0220 	orr.w	r2, r3, #32
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005b54:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b56:	4618      	mov	r0, r3
 8005b58:	3710      	adds	r7, #16
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005b60:	b004      	add	sp, #16
 8005b62:	4770      	bx	lr

08005b64 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005b64:	b480      	push	{r7}
 8005b66:	b087      	sub	sp, #28
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	60f8      	str	r0, [r7, #12]
 8005b6c:	60b9      	str	r1, [r7, #8]
 8005b6e:	4613      	mov	r3, r2
 8005b70:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005b72:	79fb      	ldrb	r3, [r7, #7]
 8005b74:	2b02      	cmp	r3, #2
 8005b76:	d165      	bne.n	8005c44 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	4a41      	ldr	r2, [pc, #260]	@ (8005c80 <USB_SetTurnaroundTime+0x11c>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d906      	bls.n	8005b8e <USB_SetTurnaroundTime+0x2a>
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	4a40      	ldr	r2, [pc, #256]	@ (8005c84 <USB_SetTurnaroundTime+0x120>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d202      	bcs.n	8005b8e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005b88:	230f      	movs	r3, #15
 8005b8a:	617b      	str	r3, [r7, #20]
 8005b8c:	e062      	b.n	8005c54 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	4a3c      	ldr	r2, [pc, #240]	@ (8005c84 <USB_SetTurnaroundTime+0x120>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d306      	bcc.n	8005ba4 <USB_SetTurnaroundTime+0x40>
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	4a3b      	ldr	r2, [pc, #236]	@ (8005c88 <USB_SetTurnaroundTime+0x124>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d202      	bcs.n	8005ba4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005b9e:	230e      	movs	r3, #14
 8005ba0:	617b      	str	r3, [r7, #20]
 8005ba2:	e057      	b.n	8005c54 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005ba4:	68bb      	ldr	r3, [r7, #8]
 8005ba6:	4a38      	ldr	r2, [pc, #224]	@ (8005c88 <USB_SetTurnaroundTime+0x124>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d306      	bcc.n	8005bba <USB_SetTurnaroundTime+0x56>
 8005bac:	68bb      	ldr	r3, [r7, #8]
 8005bae:	4a37      	ldr	r2, [pc, #220]	@ (8005c8c <USB_SetTurnaroundTime+0x128>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d202      	bcs.n	8005bba <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005bb4:	230d      	movs	r3, #13
 8005bb6:	617b      	str	r3, [r7, #20]
 8005bb8:	e04c      	b.n	8005c54 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	4a33      	ldr	r2, [pc, #204]	@ (8005c8c <USB_SetTurnaroundTime+0x128>)
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d306      	bcc.n	8005bd0 <USB_SetTurnaroundTime+0x6c>
 8005bc2:	68bb      	ldr	r3, [r7, #8]
 8005bc4:	4a32      	ldr	r2, [pc, #200]	@ (8005c90 <USB_SetTurnaroundTime+0x12c>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d802      	bhi.n	8005bd0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005bca:	230c      	movs	r3, #12
 8005bcc:	617b      	str	r3, [r7, #20]
 8005bce:	e041      	b.n	8005c54 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	4a2f      	ldr	r2, [pc, #188]	@ (8005c90 <USB_SetTurnaroundTime+0x12c>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d906      	bls.n	8005be6 <USB_SetTurnaroundTime+0x82>
 8005bd8:	68bb      	ldr	r3, [r7, #8]
 8005bda:	4a2e      	ldr	r2, [pc, #184]	@ (8005c94 <USB_SetTurnaroundTime+0x130>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d802      	bhi.n	8005be6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005be0:	230b      	movs	r3, #11
 8005be2:	617b      	str	r3, [r7, #20]
 8005be4:	e036      	b.n	8005c54 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005be6:	68bb      	ldr	r3, [r7, #8]
 8005be8:	4a2a      	ldr	r2, [pc, #168]	@ (8005c94 <USB_SetTurnaroundTime+0x130>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d906      	bls.n	8005bfc <USB_SetTurnaroundTime+0x98>
 8005bee:	68bb      	ldr	r3, [r7, #8]
 8005bf0:	4a29      	ldr	r2, [pc, #164]	@ (8005c98 <USB_SetTurnaroundTime+0x134>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d802      	bhi.n	8005bfc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005bf6:	230a      	movs	r3, #10
 8005bf8:	617b      	str	r3, [r7, #20]
 8005bfa:	e02b      	b.n	8005c54 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	4a26      	ldr	r2, [pc, #152]	@ (8005c98 <USB_SetTurnaroundTime+0x134>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d906      	bls.n	8005c12 <USB_SetTurnaroundTime+0xae>
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	4a25      	ldr	r2, [pc, #148]	@ (8005c9c <USB_SetTurnaroundTime+0x138>)
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d202      	bcs.n	8005c12 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005c0c:	2309      	movs	r3, #9
 8005c0e:	617b      	str	r3, [r7, #20]
 8005c10:	e020      	b.n	8005c54 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	4a21      	ldr	r2, [pc, #132]	@ (8005c9c <USB_SetTurnaroundTime+0x138>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d306      	bcc.n	8005c28 <USB_SetTurnaroundTime+0xc4>
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	4a20      	ldr	r2, [pc, #128]	@ (8005ca0 <USB_SetTurnaroundTime+0x13c>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d802      	bhi.n	8005c28 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005c22:	2308      	movs	r3, #8
 8005c24:	617b      	str	r3, [r7, #20]
 8005c26:	e015      	b.n	8005c54 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005c28:	68bb      	ldr	r3, [r7, #8]
 8005c2a:	4a1d      	ldr	r2, [pc, #116]	@ (8005ca0 <USB_SetTurnaroundTime+0x13c>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d906      	bls.n	8005c3e <USB_SetTurnaroundTime+0xda>
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	4a1c      	ldr	r2, [pc, #112]	@ (8005ca4 <USB_SetTurnaroundTime+0x140>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d202      	bcs.n	8005c3e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005c38:	2307      	movs	r3, #7
 8005c3a:	617b      	str	r3, [r7, #20]
 8005c3c:	e00a      	b.n	8005c54 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005c3e:	2306      	movs	r3, #6
 8005c40:	617b      	str	r3, [r7, #20]
 8005c42:	e007      	b.n	8005c54 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005c44:	79fb      	ldrb	r3, [r7, #7]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d102      	bne.n	8005c50 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005c4a:	2309      	movs	r3, #9
 8005c4c:	617b      	str	r3, [r7, #20]
 8005c4e:	e001      	b.n	8005c54 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005c50:	2309      	movs	r3, #9
 8005c52:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	68db      	ldr	r3, [r3, #12]
 8005c58:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	68da      	ldr	r2, [r3, #12]
 8005c64:	697b      	ldr	r3, [r7, #20]
 8005c66:	029b      	lsls	r3, r3, #10
 8005c68:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8005c6c:	431a      	orrs	r2, r3
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005c72:	2300      	movs	r3, #0
}
 8005c74:	4618      	mov	r0, r3
 8005c76:	371c      	adds	r7, #28
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7e:	4770      	bx	lr
 8005c80:	00d8acbf 	.word	0x00d8acbf
 8005c84:	00e4e1c0 	.word	0x00e4e1c0
 8005c88:	00f42400 	.word	0x00f42400
 8005c8c:	01067380 	.word	0x01067380
 8005c90:	011a499f 	.word	0x011a499f
 8005c94:	01312cff 	.word	0x01312cff
 8005c98:	014ca43f 	.word	0x014ca43f
 8005c9c:	016e3600 	.word	0x016e3600
 8005ca0:	01a6ab1f 	.word	0x01a6ab1f
 8005ca4:	01e84800 	.word	0x01e84800

08005ca8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005ca8:	b480      	push	{r7}
 8005caa:	b083      	sub	sp, #12
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	689b      	ldr	r3, [r3, #8]
 8005cb4:	f043 0201 	orr.w	r2, r3, #1
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005cbc:	2300      	movs	r3, #0
}
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	370c      	adds	r7, #12
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc8:	4770      	bx	lr

08005cca <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005cca:	b480      	push	{r7}
 8005ccc:	b083      	sub	sp, #12
 8005cce:	af00      	add	r7, sp, #0
 8005cd0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	689b      	ldr	r3, [r3, #8]
 8005cd6:	f023 0201 	bic.w	r2, r3, #1
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005cde:	2300      	movs	r3, #0
}
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	370c      	adds	r7, #12
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cea:	4770      	bx	lr

08005cec <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005cec:	b580      	push	{r7, lr}
 8005cee:	b084      	sub	sp, #16
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
 8005cf4:	460b      	mov	r3, r1
 8005cf6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	68db      	ldr	r3, [r3, #12]
 8005d00:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005d08:	78fb      	ldrb	r3, [r7, #3]
 8005d0a:	2b01      	cmp	r3, #1
 8005d0c:	d115      	bne.n	8005d3a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	68db      	ldr	r3, [r3, #12]
 8005d12:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005d1a:	200a      	movs	r0, #10
 8005d1c:	f7fb fc3a 	bl	8001594 <HAL_Delay>
      ms += 10U;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	330a      	adds	r3, #10
 8005d24:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005d26:	6878      	ldr	r0, [r7, #4]
 8005d28:	f001 f939 	bl	8006f9e <USB_GetMode>
 8005d2c:	4603      	mov	r3, r0
 8005d2e:	2b01      	cmp	r3, #1
 8005d30:	d01e      	beq.n	8005d70 <USB_SetCurrentMode+0x84>
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	2bc7      	cmp	r3, #199	@ 0xc7
 8005d36:	d9f0      	bls.n	8005d1a <USB_SetCurrentMode+0x2e>
 8005d38:	e01a      	b.n	8005d70 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005d3a:	78fb      	ldrb	r3, [r7, #3]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d115      	bne.n	8005d6c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	68db      	ldr	r3, [r3, #12]
 8005d44:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005d4c:	200a      	movs	r0, #10
 8005d4e:	f7fb fc21 	bl	8001594 <HAL_Delay>
      ms += 10U;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	330a      	adds	r3, #10
 8005d56:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005d58:	6878      	ldr	r0, [r7, #4]
 8005d5a:	f001 f920 	bl	8006f9e <USB_GetMode>
 8005d5e:	4603      	mov	r3, r0
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d005      	beq.n	8005d70 <USB_SetCurrentMode+0x84>
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	2bc7      	cmp	r3, #199	@ 0xc7
 8005d68:	d9f0      	bls.n	8005d4c <USB_SetCurrentMode+0x60>
 8005d6a:	e001      	b.n	8005d70 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	e005      	b.n	8005d7c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	2bc8      	cmp	r3, #200	@ 0xc8
 8005d74:	d101      	bne.n	8005d7a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005d76:	2301      	movs	r3, #1
 8005d78:	e000      	b.n	8005d7c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005d7a:	2300      	movs	r3, #0
}
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	3710      	adds	r7, #16
 8005d80:	46bd      	mov	sp, r7
 8005d82:	bd80      	pop	{r7, pc}

08005d84 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005d84:	b084      	sub	sp, #16
 8005d86:	b580      	push	{r7, lr}
 8005d88:	b086      	sub	sp, #24
 8005d8a:	af00      	add	r7, sp, #0
 8005d8c:	6078      	str	r0, [r7, #4]
 8005d8e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8005d92:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005d96:	2300      	movs	r3, #0
 8005d98:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005d9e:	2300      	movs	r3, #0
 8005da0:	613b      	str	r3, [r7, #16]
 8005da2:	e009      	b.n	8005db8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005da4:	687a      	ldr	r2, [r7, #4]
 8005da6:	693b      	ldr	r3, [r7, #16]
 8005da8:	3340      	adds	r3, #64	@ 0x40
 8005daa:	009b      	lsls	r3, r3, #2
 8005dac:	4413      	add	r3, r2
 8005dae:	2200      	movs	r2, #0
 8005db0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005db2:	693b      	ldr	r3, [r7, #16]
 8005db4:	3301      	adds	r3, #1
 8005db6:	613b      	str	r3, [r7, #16]
 8005db8:	693b      	ldr	r3, [r7, #16]
 8005dba:	2b0e      	cmp	r3, #14
 8005dbc:	d9f2      	bls.n	8005da4 <USB_DevInit+0x20>

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005dbe:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d11c      	bne.n	8005e00 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005dcc:	685b      	ldr	r3, [r3, #4]
 8005dce:	68fa      	ldr	r2, [r7, #12]
 8005dd0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005dd4:	f043 0302 	orr.w	r3, r3, #2
 8005dd8:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dde:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	601a      	str	r2, [r3, #0]
 8005dfe:	e005      	b.n	8005e0c <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e04:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005e12:	461a      	mov	r2, r3
 8005e14:	2300      	movs	r3, #0
 8005e16:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005e18:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8005e1c:	2b01      	cmp	r3, #1
 8005e1e:	d10d      	bne.n	8005e3c <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005e20:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d104      	bne.n	8005e32 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005e28:	2100      	movs	r1, #0
 8005e2a:	6878      	ldr	r0, [r7, #4]
 8005e2c:	f000 f968 	bl	8006100 <USB_SetDevSpeed>
 8005e30:	e008      	b.n	8005e44 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005e32:	2101      	movs	r1, #1
 8005e34:	6878      	ldr	r0, [r7, #4]
 8005e36:	f000 f963 	bl	8006100 <USB_SetDevSpeed>
 8005e3a:	e003      	b.n	8005e44 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005e3c:	2103      	movs	r1, #3
 8005e3e:	6878      	ldr	r0, [r7, #4]
 8005e40:	f000 f95e 	bl	8006100 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005e44:	2110      	movs	r1, #16
 8005e46:	6878      	ldr	r0, [r7, #4]
 8005e48:	f000 f8fa 	bl	8006040 <USB_FlushTxFifo>
 8005e4c:	4603      	mov	r3, r0
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d001      	beq.n	8005e56 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8005e52:	2301      	movs	r3, #1
 8005e54:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005e56:	6878      	ldr	r0, [r7, #4]
 8005e58:	f000 f924 	bl	80060a4 <USB_FlushRxFifo>
 8005e5c:	4603      	mov	r3, r0
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d001      	beq.n	8005e66 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8005e62:	2301      	movs	r3, #1
 8005e64:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e6c:	461a      	mov	r2, r3
 8005e6e:	2300      	movs	r3, #0
 8005e70:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e78:	461a      	mov	r2, r3
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e84:	461a      	mov	r2, r3
 8005e86:	2300      	movs	r3, #0
 8005e88:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	613b      	str	r3, [r7, #16]
 8005e8e:	e043      	b.n	8005f18 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005e90:	693b      	ldr	r3, [r7, #16]
 8005e92:	015a      	lsls	r2, r3, #5
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	4413      	add	r3, r2
 8005e98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005ea2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005ea6:	d118      	bne.n	8005eda <USB_DevInit+0x156>
    {
      if (i == 0U)
 8005ea8:	693b      	ldr	r3, [r7, #16]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d10a      	bne.n	8005ec4 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005eae:	693b      	ldr	r3, [r7, #16]
 8005eb0:	015a      	lsls	r2, r3, #5
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	4413      	add	r3, r2
 8005eb6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005eba:	461a      	mov	r2, r3
 8005ebc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005ec0:	6013      	str	r3, [r2, #0]
 8005ec2:	e013      	b.n	8005eec <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005ec4:	693b      	ldr	r3, [r7, #16]
 8005ec6:	015a      	lsls	r2, r3, #5
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	4413      	add	r3, r2
 8005ecc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ed0:	461a      	mov	r2, r3
 8005ed2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005ed6:	6013      	str	r3, [r2, #0]
 8005ed8:	e008      	b.n	8005eec <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005eda:	693b      	ldr	r3, [r7, #16]
 8005edc:	015a      	lsls	r2, r3, #5
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	4413      	add	r3, r2
 8005ee2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ee6:	461a      	mov	r2, r3
 8005ee8:	2300      	movs	r3, #0
 8005eea:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005eec:	693b      	ldr	r3, [r7, #16]
 8005eee:	015a      	lsls	r2, r3, #5
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	4413      	add	r3, r2
 8005ef4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ef8:	461a      	mov	r2, r3
 8005efa:	2300      	movs	r3, #0
 8005efc:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005efe:	693b      	ldr	r3, [r7, #16]
 8005f00:	015a      	lsls	r2, r3, #5
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	4413      	add	r3, r2
 8005f06:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f0a:	461a      	mov	r2, r3
 8005f0c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005f10:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005f12:	693b      	ldr	r3, [r7, #16]
 8005f14:	3301      	adds	r3, #1
 8005f16:	613b      	str	r3, [r7, #16]
 8005f18:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005f1c:	461a      	mov	r2, r3
 8005f1e:	693b      	ldr	r3, [r7, #16]
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d3b5      	bcc.n	8005e90 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005f24:	2300      	movs	r3, #0
 8005f26:	613b      	str	r3, [r7, #16]
 8005f28:	e043      	b.n	8005fb2 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005f2a:	693b      	ldr	r3, [r7, #16]
 8005f2c:	015a      	lsls	r2, r3, #5
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	4413      	add	r3, r2
 8005f32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005f3c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005f40:	d118      	bne.n	8005f74 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8005f42:	693b      	ldr	r3, [r7, #16]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d10a      	bne.n	8005f5e <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005f48:	693b      	ldr	r3, [r7, #16]
 8005f4a:	015a      	lsls	r2, r3, #5
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	4413      	add	r3, r2
 8005f50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f54:	461a      	mov	r2, r3
 8005f56:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005f5a:	6013      	str	r3, [r2, #0]
 8005f5c:	e013      	b.n	8005f86 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005f5e:	693b      	ldr	r3, [r7, #16]
 8005f60:	015a      	lsls	r2, r3, #5
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	4413      	add	r3, r2
 8005f66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f6a:	461a      	mov	r2, r3
 8005f6c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005f70:	6013      	str	r3, [r2, #0]
 8005f72:	e008      	b.n	8005f86 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005f74:	693b      	ldr	r3, [r7, #16]
 8005f76:	015a      	lsls	r2, r3, #5
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	4413      	add	r3, r2
 8005f7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f80:	461a      	mov	r2, r3
 8005f82:	2300      	movs	r3, #0
 8005f84:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005f86:	693b      	ldr	r3, [r7, #16]
 8005f88:	015a      	lsls	r2, r3, #5
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	4413      	add	r3, r2
 8005f8e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f92:	461a      	mov	r2, r3
 8005f94:	2300      	movs	r3, #0
 8005f96:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005f98:	693b      	ldr	r3, [r7, #16]
 8005f9a:	015a      	lsls	r2, r3, #5
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	4413      	add	r3, r2
 8005fa0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005fa4:	461a      	mov	r2, r3
 8005fa6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005faa:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005fac:	693b      	ldr	r3, [r7, #16]
 8005fae:	3301      	adds	r3, #1
 8005fb0:	613b      	str	r3, [r7, #16]
 8005fb2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005fb6:	461a      	mov	r2, r3
 8005fb8:	693b      	ldr	r3, [r7, #16]
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d3b5      	bcc.n	8005f2a <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005fc4:	691b      	ldr	r3, [r3, #16]
 8005fc6:	68fa      	ldr	r2, [r7, #12]
 8005fc8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005fcc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005fd0:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8005fde:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005fe0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d105      	bne.n	8005ff4 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	699b      	ldr	r3, [r3, #24]
 8005fec:	f043 0210 	orr.w	r2, r3, #16
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	699a      	ldr	r2, [r3, #24]
 8005ff8:	4b10      	ldr	r3, [pc, #64]	@ (800603c <USB_DevInit+0x2b8>)
 8005ffa:	4313      	orrs	r3, r2
 8005ffc:	687a      	ldr	r2, [r7, #4]
 8005ffe:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006000:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8006004:	2b00      	cmp	r3, #0
 8006006:	d005      	beq.n	8006014 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	699b      	ldr	r3, [r3, #24]
 800600c:	f043 0208 	orr.w	r2, r3, #8
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006014:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006018:	2b01      	cmp	r3, #1
 800601a:	d107      	bne.n	800602c <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	699b      	ldr	r3, [r3, #24]
 8006020:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006024:	f043 0304 	orr.w	r3, r3, #4
 8006028:	687a      	ldr	r2, [r7, #4]
 800602a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800602c:	7dfb      	ldrb	r3, [r7, #23]
}
 800602e:	4618      	mov	r0, r3
 8006030:	3718      	adds	r7, #24
 8006032:	46bd      	mov	sp, r7
 8006034:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006038:	b004      	add	sp, #16
 800603a:	4770      	bx	lr
 800603c:	803c3800 	.word	0x803c3800

08006040 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006040:	b480      	push	{r7}
 8006042:	b085      	sub	sp, #20
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
 8006048:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800604a:	2300      	movs	r3, #0
 800604c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	3301      	adds	r3, #1
 8006052:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800605a:	d901      	bls.n	8006060 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800605c:	2303      	movs	r3, #3
 800605e:	e01b      	b.n	8006098 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	691b      	ldr	r3, [r3, #16]
 8006064:	2b00      	cmp	r3, #0
 8006066:	daf2      	bge.n	800604e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006068:	2300      	movs	r3, #0
 800606a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	019b      	lsls	r3, r3, #6
 8006070:	f043 0220 	orr.w	r2, r3, #32
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	3301      	adds	r3, #1
 800607c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006084:	d901      	bls.n	800608a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006086:	2303      	movs	r3, #3
 8006088:	e006      	b.n	8006098 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	691b      	ldr	r3, [r3, #16]
 800608e:	f003 0320 	and.w	r3, r3, #32
 8006092:	2b20      	cmp	r3, #32
 8006094:	d0f0      	beq.n	8006078 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006096:	2300      	movs	r3, #0
}
 8006098:	4618      	mov	r0, r3
 800609a:	3714      	adds	r7, #20
 800609c:	46bd      	mov	sp, r7
 800609e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a2:	4770      	bx	lr

080060a4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80060a4:	b480      	push	{r7}
 80060a6:	b085      	sub	sp, #20
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80060ac:	2300      	movs	r3, #0
 80060ae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	3301      	adds	r3, #1
 80060b4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80060bc:	d901      	bls.n	80060c2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80060be:	2303      	movs	r3, #3
 80060c0:	e018      	b.n	80060f4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	691b      	ldr	r3, [r3, #16]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	daf2      	bge.n	80060b0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80060ca:	2300      	movs	r3, #0
 80060cc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2210      	movs	r2, #16
 80060d2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	3301      	adds	r3, #1
 80060d8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80060e0:	d901      	bls.n	80060e6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80060e2:	2303      	movs	r3, #3
 80060e4:	e006      	b.n	80060f4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	691b      	ldr	r3, [r3, #16]
 80060ea:	f003 0310 	and.w	r3, r3, #16
 80060ee:	2b10      	cmp	r3, #16
 80060f0:	d0f0      	beq.n	80060d4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80060f2:	2300      	movs	r3, #0
}
 80060f4:	4618      	mov	r0, r3
 80060f6:	3714      	adds	r7, #20
 80060f8:	46bd      	mov	sp, r7
 80060fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fe:	4770      	bx	lr

08006100 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006100:	b480      	push	{r7}
 8006102:	b085      	sub	sp, #20
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
 8006108:	460b      	mov	r3, r1
 800610a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006116:	681a      	ldr	r2, [r3, #0]
 8006118:	78fb      	ldrb	r3, [r7, #3]
 800611a:	68f9      	ldr	r1, [r7, #12]
 800611c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006120:	4313      	orrs	r3, r2
 8006122:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006124:	2300      	movs	r3, #0
}
 8006126:	4618      	mov	r0, r3
 8006128:	3714      	adds	r7, #20
 800612a:	46bd      	mov	sp, r7
 800612c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006130:	4770      	bx	lr

08006132 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8006132:	b480      	push	{r7}
 8006134:	b087      	sub	sp, #28
 8006136:	af00      	add	r7, sp, #0
 8006138:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800613e:	693b      	ldr	r3, [r7, #16]
 8006140:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006144:	689b      	ldr	r3, [r3, #8]
 8006146:	f003 0306 	and.w	r3, r3, #6
 800614a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d102      	bne.n	8006158 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006152:	2300      	movs	r3, #0
 8006154:	75fb      	strb	r3, [r7, #23]
 8006156:	e00a      	b.n	800616e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	2b02      	cmp	r3, #2
 800615c:	d002      	beq.n	8006164 <USB_GetDevSpeed+0x32>
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	2b06      	cmp	r3, #6
 8006162:	d102      	bne.n	800616a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006164:	2302      	movs	r3, #2
 8006166:	75fb      	strb	r3, [r7, #23]
 8006168:	e001      	b.n	800616e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800616a:	230f      	movs	r3, #15
 800616c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800616e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006170:	4618      	mov	r0, r3
 8006172:	371c      	adds	r7, #28
 8006174:	46bd      	mov	sp, r7
 8006176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617a:	4770      	bx	lr

0800617c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800617c:	b480      	push	{r7}
 800617e:	b085      	sub	sp, #20
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
 8006184:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	781b      	ldrb	r3, [r3, #0]
 800618e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	785b      	ldrb	r3, [r3, #1]
 8006194:	2b01      	cmp	r3, #1
 8006196:	d13a      	bne.n	800620e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800619e:	69da      	ldr	r2, [r3, #28]
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	781b      	ldrb	r3, [r3, #0]
 80061a4:	f003 030f 	and.w	r3, r3, #15
 80061a8:	2101      	movs	r1, #1
 80061aa:	fa01 f303 	lsl.w	r3, r1, r3
 80061ae:	b29b      	uxth	r3, r3
 80061b0:	68f9      	ldr	r1, [r7, #12]
 80061b2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80061b6:	4313      	orrs	r3, r2
 80061b8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80061ba:	68bb      	ldr	r3, [r7, #8]
 80061bc:	015a      	lsls	r2, r3, #5
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	4413      	add	r3, r2
 80061c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d155      	bne.n	800627c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80061d0:	68bb      	ldr	r3, [r7, #8]
 80061d2:	015a      	lsls	r2, r3, #5
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	4413      	add	r3, r2
 80061d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061dc:	681a      	ldr	r2, [r3, #0]
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	689b      	ldr	r3, [r3, #8]
 80061e2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	791b      	ldrb	r3, [r3, #4]
 80061ea:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80061ec:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80061ee:	68bb      	ldr	r3, [r7, #8]
 80061f0:	059b      	lsls	r3, r3, #22
 80061f2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80061f4:	4313      	orrs	r3, r2
 80061f6:	68ba      	ldr	r2, [r7, #8]
 80061f8:	0151      	lsls	r1, r2, #5
 80061fa:	68fa      	ldr	r2, [r7, #12]
 80061fc:	440a      	add	r2, r1
 80061fe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006202:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006206:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800620a:	6013      	str	r3, [r2, #0]
 800620c:	e036      	b.n	800627c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006214:	69da      	ldr	r2, [r3, #28]
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	781b      	ldrb	r3, [r3, #0]
 800621a:	f003 030f 	and.w	r3, r3, #15
 800621e:	2101      	movs	r1, #1
 8006220:	fa01 f303 	lsl.w	r3, r1, r3
 8006224:	041b      	lsls	r3, r3, #16
 8006226:	68f9      	ldr	r1, [r7, #12]
 8006228:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800622c:	4313      	orrs	r3, r2
 800622e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	015a      	lsls	r2, r3, #5
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	4413      	add	r3, r2
 8006238:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006242:	2b00      	cmp	r3, #0
 8006244:	d11a      	bne.n	800627c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	015a      	lsls	r2, r3, #5
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	4413      	add	r3, r2
 800624e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006252:	681a      	ldr	r2, [r3, #0]
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	689b      	ldr	r3, [r3, #8]
 8006258:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	791b      	ldrb	r3, [r3, #4]
 8006260:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006262:	430b      	orrs	r3, r1
 8006264:	4313      	orrs	r3, r2
 8006266:	68ba      	ldr	r2, [r7, #8]
 8006268:	0151      	lsls	r1, r2, #5
 800626a:	68fa      	ldr	r2, [r7, #12]
 800626c:	440a      	add	r2, r1
 800626e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006272:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006276:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800627a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800627c:	2300      	movs	r3, #0
}
 800627e:	4618      	mov	r0, r3
 8006280:	3714      	adds	r7, #20
 8006282:	46bd      	mov	sp, r7
 8006284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006288:	4770      	bx	lr
	...

0800628c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800628c:	b480      	push	{r7}
 800628e:	b085      	sub	sp, #20
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
 8006294:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	781b      	ldrb	r3, [r3, #0]
 800629e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	785b      	ldrb	r3, [r3, #1]
 80062a4:	2b01      	cmp	r3, #1
 80062a6:	d161      	bne.n	800636c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80062a8:	68bb      	ldr	r3, [r7, #8]
 80062aa:	015a      	lsls	r2, r3, #5
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	4413      	add	r3, r2
 80062b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80062ba:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80062be:	d11f      	bne.n	8006300 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80062c0:	68bb      	ldr	r3, [r7, #8]
 80062c2:	015a      	lsls	r2, r3, #5
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	4413      	add	r3, r2
 80062c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	68ba      	ldr	r2, [r7, #8]
 80062d0:	0151      	lsls	r1, r2, #5
 80062d2:	68fa      	ldr	r2, [r7, #12]
 80062d4:	440a      	add	r2, r1
 80062d6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80062da:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80062de:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80062e0:	68bb      	ldr	r3, [r7, #8]
 80062e2:	015a      	lsls	r2, r3, #5
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	4413      	add	r3, r2
 80062e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	68ba      	ldr	r2, [r7, #8]
 80062f0:	0151      	lsls	r1, r2, #5
 80062f2:	68fa      	ldr	r2, [r7, #12]
 80062f4:	440a      	add	r2, r1
 80062f6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80062fa:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80062fe:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006306:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	781b      	ldrb	r3, [r3, #0]
 800630c:	f003 030f 	and.w	r3, r3, #15
 8006310:	2101      	movs	r1, #1
 8006312:	fa01 f303 	lsl.w	r3, r1, r3
 8006316:	b29b      	uxth	r3, r3
 8006318:	43db      	mvns	r3, r3
 800631a:	68f9      	ldr	r1, [r7, #12]
 800631c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006320:	4013      	ands	r3, r2
 8006322:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800632a:	69da      	ldr	r2, [r3, #28]
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	781b      	ldrb	r3, [r3, #0]
 8006330:	f003 030f 	and.w	r3, r3, #15
 8006334:	2101      	movs	r1, #1
 8006336:	fa01 f303 	lsl.w	r3, r1, r3
 800633a:	b29b      	uxth	r3, r3
 800633c:	43db      	mvns	r3, r3
 800633e:	68f9      	ldr	r1, [r7, #12]
 8006340:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006344:	4013      	ands	r3, r2
 8006346:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006348:	68bb      	ldr	r3, [r7, #8]
 800634a:	015a      	lsls	r2, r3, #5
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	4413      	add	r3, r2
 8006350:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006354:	681a      	ldr	r2, [r3, #0]
 8006356:	68bb      	ldr	r3, [r7, #8]
 8006358:	0159      	lsls	r1, r3, #5
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	440b      	add	r3, r1
 800635e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006362:	4619      	mov	r1, r3
 8006364:	4b35      	ldr	r3, [pc, #212]	@ (800643c <USB_DeactivateEndpoint+0x1b0>)
 8006366:	4013      	ands	r3, r2
 8006368:	600b      	str	r3, [r1, #0]
 800636a:	e060      	b.n	800642e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800636c:	68bb      	ldr	r3, [r7, #8]
 800636e:	015a      	lsls	r2, r3, #5
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	4413      	add	r3, r2
 8006374:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800637e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006382:	d11f      	bne.n	80063c4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006384:	68bb      	ldr	r3, [r7, #8]
 8006386:	015a      	lsls	r2, r3, #5
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	4413      	add	r3, r2
 800638c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	68ba      	ldr	r2, [r7, #8]
 8006394:	0151      	lsls	r1, r2, #5
 8006396:	68fa      	ldr	r2, [r7, #12]
 8006398:	440a      	add	r2, r1
 800639a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800639e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80063a2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80063a4:	68bb      	ldr	r3, [r7, #8]
 80063a6:	015a      	lsls	r2, r3, #5
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	4413      	add	r3, r2
 80063ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	68ba      	ldr	r2, [r7, #8]
 80063b4:	0151      	lsls	r1, r2, #5
 80063b6:	68fa      	ldr	r2, [r7, #12]
 80063b8:	440a      	add	r2, r1
 80063ba:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80063be:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80063c2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80063ca:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	781b      	ldrb	r3, [r3, #0]
 80063d0:	f003 030f 	and.w	r3, r3, #15
 80063d4:	2101      	movs	r1, #1
 80063d6:	fa01 f303 	lsl.w	r3, r1, r3
 80063da:	041b      	lsls	r3, r3, #16
 80063dc:	43db      	mvns	r3, r3
 80063de:	68f9      	ldr	r1, [r7, #12]
 80063e0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80063e4:	4013      	ands	r3, r2
 80063e6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80063ee:	69da      	ldr	r2, [r3, #28]
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	781b      	ldrb	r3, [r3, #0]
 80063f4:	f003 030f 	and.w	r3, r3, #15
 80063f8:	2101      	movs	r1, #1
 80063fa:	fa01 f303 	lsl.w	r3, r1, r3
 80063fe:	041b      	lsls	r3, r3, #16
 8006400:	43db      	mvns	r3, r3
 8006402:	68f9      	ldr	r1, [r7, #12]
 8006404:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006408:	4013      	ands	r3, r2
 800640a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800640c:	68bb      	ldr	r3, [r7, #8]
 800640e:	015a      	lsls	r2, r3, #5
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	4413      	add	r3, r2
 8006414:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006418:	681a      	ldr	r2, [r3, #0]
 800641a:	68bb      	ldr	r3, [r7, #8]
 800641c:	0159      	lsls	r1, r3, #5
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	440b      	add	r3, r1
 8006422:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006426:	4619      	mov	r1, r3
 8006428:	4b05      	ldr	r3, [pc, #20]	@ (8006440 <USB_DeactivateEndpoint+0x1b4>)
 800642a:	4013      	ands	r3, r2
 800642c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800642e:	2300      	movs	r3, #0
}
 8006430:	4618      	mov	r0, r3
 8006432:	3714      	adds	r7, #20
 8006434:	46bd      	mov	sp, r7
 8006436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643a:	4770      	bx	lr
 800643c:	ec337800 	.word	0xec337800
 8006440:	eff37800 	.word	0xeff37800

08006444 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006444:	b580      	push	{r7, lr}
 8006446:	b08a      	sub	sp, #40	@ 0x28
 8006448:	af02      	add	r7, sp, #8
 800644a:	60f8      	str	r0, [r7, #12]
 800644c:	60b9      	str	r1, [r7, #8]
 800644e:	4613      	mov	r3, r2
 8006450:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006456:	68bb      	ldr	r3, [r7, #8]
 8006458:	781b      	ldrb	r3, [r3, #0]
 800645a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800645c:	68bb      	ldr	r3, [r7, #8]
 800645e:	785b      	ldrb	r3, [r3, #1]
 8006460:	2b01      	cmp	r3, #1
 8006462:	f040 817f 	bne.w	8006764 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006466:	68bb      	ldr	r3, [r7, #8]
 8006468:	691b      	ldr	r3, [r3, #16]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d132      	bne.n	80064d4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800646e:	69bb      	ldr	r3, [r7, #24]
 8006470:	015a      	lsls	r2, r3, #5
 8006472:	69fb      	ldr	r3, [r7, #28]
 8006474:	4413      	add	r3, r2
 8006476:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800647a:	691b      	ldr	r3, [r3, #16]
 800647c:	69ba      	ldr	r2, [r7, #24]
 800647e:	0151      	lsls	r1, r2, #5
 8006480:	69fa      	ldr	r2, [r7, #28]
 8006482:	440a      	add	r2, r1
 8006484:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006488:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800648c:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006490:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006492:	69bb      	ldr	r3, [r7, #24]
 8006494:	015a      	lsls	r2, r3, #5
 8006496:	69fb      	ldr	r3, [r7, #28]
 8006498:	4413      	add	r3, r2
 800649a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800649e:	691b      	ldr	r3, [r3, #16]
 80064a0:	69ba      	ldr	r2, [r7, #24]
 80064a2:	0151      	lsls	r1, r2, #5
 80064a4:	69fa      	ldr	r2, [r7, #28]
 80064a6:	440a      	add	r2, r1
 80064a8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80064ac:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80064b0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80064b2:	69bb      	ldr	r3, [r7, #24]
 80064b4:	015a      	lsls	r2, r3, #5
 80064b6:	69fb      	ldr	r3, [r7, #28]
 80064b8:	4413      	add	r3, r2
 80064ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80064be:	691b      	ldr	r3, [r3, #16]
 80064c0:	69ba      	ldr	r2, [r7, #24]
 80064c2:	0151      	lsls	r1, r2, #5
 80064c4:	69fa      	ldr	r2, [r7, #28]
 80064c6:	440a      	add	r2, r1
 80064c8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80064cc:	0cdb      	lsrs	r3, r3, #19
 80064ce:	04db      	lsls	r3, r3, #19
 80064d0:	6113      	str	r3, [r2, #16]
 80064d2:	e097      	b.n	8006604 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80064d4:	69bb      	ldr	r3, [r7, #24]
 80064d6:	015a      	lsls	r2, r3, #5
 80064d8:	69fb      	ldr	r3, [r7, #28]
 80064da:	4413      	add	r3, r2
 80064dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80064e0:	691b      	ldr	r3, [r3, #16]
 80064e2:	69ba      	ldr	r2, [r7, #24]
 80064e4:	0151      	lsls	r1, r2, #5
 80064e6:	69fa      	ldr	r2, [r7, #28]
 80064e8:	440a      	add	r2, r1
 80064ea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80064ee:	0cdb      	lsrs	r3, r3, #19
 80064f0:	04db      	lsls	r3, r3, #19
 80064f2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80064f4:	69bb      	ldr	r3, [r7, #24]
 80064f6:	015a      	lsls	r2, r3, #5
 80064f8:	69fb      	ldr	r3, [r7, #28]
 80064fa:	4413      	add	r3, r2
 80064fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006500:	691b      	ldr	r3, [r3, #16]
 8006502:	69ba      	ldr	r2, [r7, #24]
 8006504:	0151      	lsls	r1, r2, #5
 8006506:	69fa      	ldr	r2, [r7, #28]
 8006508:	440a      	add	r2, r1
 800650a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800650e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006512:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006516:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8006518:	69bb      	ldr	r3, [r7, #24]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d11a      	bne.n	8006554 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800651e:	68bb      	ldr	r3, [r7, #8]
 8006520:	691a      	ldr	r2, [r3, #16]
 8006522:	68bb      	ldr	r3, [r7, #8]
 8006524:	689b      	ldr	r3, [r3, #8]
 8006526:	429a      	cmp	r2, r3
 8006528:	d903      	bls.n	8006532 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800652a:	68bb      	ldr	r3, [r7, #8]
 800652c:	689a      	ldr	r2, [r3, #8]
 800652e:	68bb      	ldr	r3, [r7, #8]
 8006530:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006532:	69bb      	ldr	r3, [r7, #24]
 8006534:	015a      	lsls	r2, r3, #5
 8006536:	69fb      	ldr	r3, [r7, #28]
 8006538:	4413      	add	r3, r2
 800653a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800653e:	691b      	ldr	r3, [r3, #16]
 8006540:	69ba      	ldr	r2, [r7, #24]
 8006542:	0151      	lsls	r1, r2, #5
 8006544:	69fa      	ldr	r2, [r7, #28]
 8006546:	440a      	add	r2, r1
 8006548:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800654c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006550:	6113      	str	r3, [r2, #16]
 8006552:	e044      	b.n	80065de <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006554:	68bb      	ldr	r3, [r7, #8]
 8006556:	691a      	ldr	r2, [r3, #16]
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	689b      	ldr	r3, [r3, #8]
 800655c:	4413      	add	r3, r2
 800655e:	1e5a      	subs	r2, r3, #1
 8006560:	68bb      	ldr	r3, [r7, #8]
 8006562:	689b      	ldr	r3, [r3, #8]
 8006564:	fbb2 f3f3 	udiv	r3, r2, r3
 8006568:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 800656a:	69bb      	ldr	r3, [r7, #24]
 800656c:	015a      	lsls	r2, r3, #5
 800656e:	69fb      	ldr	r3, [r7, #28]
 8006570:	4413      	add	r3, r2
 8006572:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006576:	691a      	ldr	r2, [r3, #16]
 8006578:	8afb      	ldrh	r3, [r7, #22]
 800657a:	04d9      	lsls	r1, r3, #19
 800657c:	4ba4      	ldr	r3, [pc, #656]	@ (8006810 <USB_EPStartXfer+0x3cc>)
 800657e:	400b      	ands	r3, r1
 8006580:	69b9      	ldr	r1, [r7, #24]
 8006582:	0148      	lsls	r0, r1, #5
 8006584:	69f9      	ldr	r1, [r7, #28]
 8006586:	4401      	add	r1, r0
 8006588:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800658c:	4313      	orrs	r3, r2
 800658e:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8006590:	68bb      	ldr	r3, [r7, #8]
 8006592:	791b      	ldrb	r3, [r3, #4]
 8006594:	2b01      	cmp	r3, #1
 8006596:	d122      	bne.n	80065de <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006598:	69bb      	ldr	r3, [r7, #24]
 800659a:	015a      	lsls	r2, r3, #5
 800659c:	69fb      	ldr	r3, [r7, #28]
 800659e:	4413      	add	r3, r2
 80065a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80065a4:	691b      	ldr	r3, [r3, #16]
 80065a6:	69ba      	ldr	r2, [r7, #24]
 80065a8:	0151      	lsls	r1, r2, #5
 80065aa:	69fa      	ldr	r2, [r7, #28]
 80065ac:	440a      	add	r2, r1
 80065ae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80065b2:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80065b6:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 80065b8:	69bb      	ldr	r3, [r7, #24]
 80065ba:	015a      	lsls	r2, r3, #5
 80065bc:	69fb      	ldr	r3, [r7, #28]
 80065be:	4413      	add	r3, r2
 80065c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80065c4:	691a      	ldr	r2, [r3, #16]
 80065c6:	8afb      	ldrh	r3, [r7, #22]
 80065c8:	075b      	lsls	r3, r3, #29
 80065ca:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 80065ce:	69b9      	ldr	r1, [r7, #24]
 80065d0:	0148      	lsls	r0, r1, #5
 80065d2:	69f9      	ldr	r1, [r7, #28]
 80065d4:	4401      	add	r1, r0
 80065d6:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80065da:	4313      	orrs	r3, r2
 80065dc:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80065de:	69bb      	ldr	r3, [r7, #24]
 80065e0:	015a      	lsls	r2, r3, #5
 80065e2:	69fb      	ldr	r3, [r7, #28]
 80065e4:	4413      	add	r3, r2
 80065e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80065ea:	691a      	ldr	r2, [r3, #16]
 80065ec:	68bb      	ldr	r3, [r7, #8]
 80065ee:	691b      	ldr	r3, [r3, #16]
 80065f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80065f4:	69b9      	ldr	r1, [r7, #24]
 80065f6:	0148      	lsls	r0, r1, #5
 80065f8:	69f9      	ldr	r1, [r7, #28]
 80065fa:	4401      	add	r1, r0
 80065fc:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006600:	4313      	orrs	r3, r2
 8006602:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006604:	79fb      	ldrb	r3, [r7, #7]
 8006606:	2b01      	cmp	r3, #1
 8006608:	d14b      	bne.n	80066a2 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800660a:	68bb      	ldr	r3, [r7, #8]
 800660c:	69db      	ldr	r3, [r3, #28]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d009      	beq.n	8006626 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006612:	69bb      	ldr	r3, [r7, #24]
 8006614:	015a      	lsls	r2, r3, #5
 8006616:	69fb      	ldr	r3, [r7, #28]
 8006618:	4413      	add	r3, r2
 800661a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800661e:	461a      	mov	r2, r3
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	69db      	ldr	r3, [r3, #28]
 8006624:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006626:	68bb      	ldr	r3, [r7, #8]
 8006628:	791b      	ldrb	r3, [r3, #4]
 800662a:	2b01      	cmp	r3, #1
 800662c:	d128      	bne.n	8006680 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800662e:	69fb      	ldr	r3, [r7, #28]
 8006630:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006634:	689b      	ldr	r3, [r3, #8]
 8006636:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800663a:	2b00      	cmp	r3, #0
 800663c:	d110      	bne.n	8006660 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800663e:	69bb      	ldr	r3, [r7, #24]
 8006640:	015a      	lsls	r2, r3, #5
 8006642:	69fb      	ldr	r3, [r7, #28]
 8006644:	4413      	add	r3, r2
 8006646:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	69ba      	ldr	r2, [r7, #24]
 800664e:	0151      	lsls	r1, r2, #5
 8006650:	69fa      	ldr	r2, [r7, #28]
 8006652:	440a      	add	r2, r1
 8006654:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006658:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800665c:	6013      	str	r3, [r2, #0]
 800665e:	e00f      	b.n	8006680 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006660:	69bb      	ldr	r3, [r7, #24]
 8006662:	015a      	lsls	r2, r3, #5
 8006664:	69fb      	ldr	r3, [r7, #28]
 8006666:	4413      	add	r3, r2
 8006668:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	69ba      	ldr	r2, [r7, #24]
 8006670:	0151      	lsls	r1, r2, #5
 8006672:	69fa      	ldr	r2, [r7, #28]
 8006674:	440a      	add	r2, r1
 8006676:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800667a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800667e:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006680:	69bb      	ldr	r3, [r7, #24]
 8006682:	015a      	lsls	r2, r3, #5
 8006684:	69fb      	ldr	r3, [r7, #28]
 8006686:	4413      	add	r3, r2
 8006688:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	69ba      	ldr	r2, [r7, #24]
 8006690:	0151      	lsls	r1, r2, #5
 8006692:	69fa      	ldr	r2, [r7, #28]
 8006694:	440a      	add	r2, r1
 8006696:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800669a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800669e:	6013      	str	r3, [r2, #0]
 80066a0:	e166      	b.n	8006970 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80066a2:	69bb      	ldr	r3, [r7, #24]
 80066a4:	015a      	lsls	r2, r3, #5
 80066a6:	69fb      	ldr	r3, [r7, #28]
 80066a8:	4413      	add	r3, r2
 80066aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	69ba      	ldr	r2, [r7, #24]
 80066b2:	0151      	lsls	r1, r2, #5
 80066b4:	69fa      	ldr	r2, [r7, #28]
 80066b6:	440a      	add	r2, r1
 80066b8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80066bc:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80066c0:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80066c2:	68bb      	ldr	r3, [r7, #8]
 80066c4:	791b      	ldrb	r3, [r3, #4]
 80066c6:	2b01      	cmp	r3, #1
 80066c8:	d015      	beq.n	80066f6 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80066ca:	68bb      	ldr	r3, [r7, #8]
 80066cc:	691b      	ldr	r3, [r3, #16]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	f000 814e 	beq.w	8006970 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80066d4:	69fb      	ldr	r3, [r7, #28]
 80066d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80066da:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80066dc:	68bb      	ldr	r3, [r7, #8]
 80066de:	781b      	ldrb	r3, [r3, #0]
 80066e0:	f003 030f 	and.w	r3, r3, #15
 80066e4:	2101      	movs	r1, #1
 80066e6:	fa01 f303 	lsl.w	r3, r1, r3
 80066ea:	69f9      	ldr	r1, [r7, #28]
 80066ec:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80066f0:	4313      	orrs	r3, r2
 80066f2:	634b      	str	r3, [r1, #52]	@ 0x34
 80066f4:	e13c      	b.n	8006970 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80066f6:	69fb      	ldr	r3, [r7, #28]
 80066f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80066fc:	689b      	ldr	r3, [r3, #8]
 80066fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006702:	2b00      	cmp	r3, #0
 8006704:	d110      	bne.n	8006728 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006706:	69bb      	ldr	r3, [r7, #24]
 8006708:	015a      	lsls	r2, r3, #5
 800670a:	69fb      	ldr	r3, [r7, #28]
 800670c:	4413      	add	r3, r2
 800670e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	69ba      	ldr	r2, [r7, #24]
 8006716:	0151      	lsls	r1, r2, #5
 8006718:	69fa      	ldr	r2, [r7, #28]
 800671a:	440a      	add	r2, r1
 800671c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006720:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006724:	6013      	str	r3, [r2, #0]
 8006726:	e00f      	b.n	8006748 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006728:	69bb      	ldr	r3, [r7, #24]
 800672a:	015a      	lsls	r2, r3, #5
 800672c:	69fb      	ldr	r3, [r7, #28]
 800672e:	4413      	add	r3, r2
 8006730:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	69ba      	ldr	r2, [r7, #24]
 8006738:	0151      	lsls	r1, r2, #5
 800673a:	69fa      	ldr	r2, [r7, #28]
 800673c:	440a      	add	r2, r1
 800673e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006742:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006746:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006748:	68bb      	ldr	r3, [r7, #8]
 800674a:	68d9      	ldr	r1, [r3, #12]
 800674c:	68bb      	ldr	r3, [r7, #8]
 800674e:	781a      	ldrb	r2, [r3, #0]
 8006750:	68bb      	ldr	r3, [r7, #8]
 8006752:	691b      	ldr	r3, [r3, #16]
 8006754:	b298      	uxth	r0, r3
 8006756:	79fb      	ldrb	r3, [r7, #7]
 8006758:	9300      	str	r3, [sp, #0]
 800675a:	4603      	mov	r3, r0
 800675c:	68f8      	ldr	r0, [r7, #12]
 800675e:	f000 f9b9 	bl	8006ad4 <USB_WritePacket>
 8006762:	e105      	b.n	8006970 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006764:	69bb      	ldr	r3, [r7, #24]
 8006766:	015a      	lsls	r2, r3, #5
 8006768:	69fb      	ldr	r3, [r7, #28]
 800676a:	4413      	add	r3, r2
 800676c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006770:	691b      	ldr	r3, [r3, #16]
 8006772:	69ba      	ldr	r2, [r7, #24]
 8006774:	0151      	lsls	r1, r2, #5
 8006776:	69fa      	ldr	r2, [r7, #28]
 8006778:	440a      	add	r2, r1
 800677a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800677e:	0cdb      	lsrs	r3, r3, #19
 8006780:	04db      	lsls	r3, r3, #19
 8006782:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006784:	69bb      	ldr	r3, [r7, #24]
 8006786:	015a      	lsls	r2, r3, #5
 8006788:	69fb      	ldr	r3, [r7, #28]
 800678a:	4413      	add	r3, r2
 800678c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006790:	691b      	ldr	r3, [r3, #16]
 8006792:	69ba      	ldr	r2, [r7, #24]
 8006794:	0151      	lsls	r1, r2, #5
 8006796:	69fa      	ldr	r2, [r7, #28]
 8006798:	440a      	add	r2, r1
 800679a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800679e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80067a2:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80067a6:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 80067a8:	69bb      	ldr	r3, [r7, #24]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d132      	bne.n	8006814 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 80067ae:	68bb      	ldr	r3, [r7, #8]
 80067b0:	691b      	ldr	r3, [r3, #16]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d003      	beq.n	80067be <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 80067b6:	68bb      	ldr	r3, [r7, #8]
 80067b8:	689a      	ldr	r2, [r3, #8]
 80067ba:	68bb      	ldr	r3, [r7, #8]
 80067bc:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80067be:	68bb      	ldr	r3, [r7, #8]
 80067c0:	689a      	ldr	r2, [r3, #8]
 80067c2:	68bb      	ldr	r3, [r7, #8]
 80067c4:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80067c6:	69bb      	ldr	r3, [r7, #24]
 80067c8:	015a      	lsls	r2, r3, #5
 80067ca:	69fb      	ldr	r3, [r7, #28]
 80067cc:	4413      	add	r3, r2
 80067ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067d2:	691a      	ldr	r2, [r3, #16]
 80067d4:	68bb      	ldr	r3, [r7, #8]
 80067d6:	6a1b      	ldr	r3, [r3, #32]
 80067d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80067dc:	69b9      	ldr	r1, [r7, #24]
 80067de:	0148      	lsls	r0, r1, #5
 80067e0:	69f9      	ldr	r1, [r7, #28]
 80067e2:	4401      	add	r1, r0
 80067e4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80067e8:	4313      	orrs	r3, r2
 80067ea:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80067ec:	69bb      	ldr	r3, [r7, #24]
 80067ee:	015a      	lsls	r2, r3, #5
 80067f0:	69fb      	ldr	r3, [r7, #28]
 80067f2:	4413      	add	r3, r2
 80067f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067f8:	691b      	ldr	r3, [r3, #16]
 80067fa:	69ba      	ldr	r2, [r7, #24]
 80067fc:	0151      	lsls	r1, r2, #5
 80067fe:	69fa      	ldr	r2, [r7, #28]
 8006800:	440a      	add	r2, r1
 8006802:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006806:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800680a:	6113      	str	r3, [r2, #16]
 800680c:	e062      	b.n	80068d4 <USB_EPStartXfer+0x490>
 800680e:	bf00      	nop
 8006810:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8006814:	68bb      	ldr	r3, [r7, #8]
 8006816:	691b      	ldr	r3, [r3, #16]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d123      	bne.n	8006864 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800681c:	69bb      	ldr	r3, [r7, #24]
 800681e:	015a      	lsls	r2, r3, #5
 8006820:	69fb      	ldr	r3, [r7, #28]
 8006822:	4413      	add	r3, r2
 8006824:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006828:	691a      	ldr	r2, [r3, #16]
 800682a:	68bb      	ldr	r3, [r7, #8]
 800682c:	689b      	ldr	r3, [r3, #8]
 800682e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006832:	69b9      	ldr	r1, [r7, #24]
 8006834:	0148      	lsls	r0, r1, #5
 8006836:	69f9      	ldr	r1, [r7, #28]
 8006838:	4401      	add	r1, r0
 800683a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800683e:	4313      	orrs	r3, r2
 8006840:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006842:	69bb      	ldr	r3, [r7, #24]
 8006844:	015a      	lsls	r2, r3, #5
 8006846:	69fb      	ldr	r3, [r7, #28]
 8006848:	4413      	add	r3, r2
 800684a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800684e:	691b      	ldr	r3, [r3, #16]
 8006850:	69ba      	ldr	r2, [r7, #24]
 8006852:	0151      	lsls	r1, r2, #5
 8006854:	69fa      	ldr	r2, [r7, #28]
 8006856:	440a      	add	r2, r1
 8006858:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800685c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006860:	6113      	str	r3, [r2, #16]
 8006862:	e037      	b.n	80068d4 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006864:	68bb      	ldr	r3, [r7, #8]
 8006866:	691a      	ldr	r2, [r3, #16]
 8006868:	68bb      	ldr	r3, [r7, #8]
 800686a:	689b      	ldr	r3, [r3, #8]
 800686c:	4413      	add	r3, r2
 800686e:	1e5a      	subs	r2, r3, #1
 8006870:	68bb      	ldr	r3, [r7, #8]
 8006872:	689b      	ldr	r3, [r3, #8]
 8006874:	fbb2 f3f3 	udiv	r3, r2, r3
 8006878:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800687a:	68bb      	ldr	r3, [r7, #8]
 800687c:	689b      	ldr	r3, [r3, #8]
 800687e:	8afa      	ldrh	r2, [r7, #22]
 8006880:	fb03 f202 	mul.w	r2, r3, r2
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006888:	69bb      	ldr	r3, [r7, #24]
 800688a:	015a      	lsls	r2, r3, #5
 800688c:	69fb      	ldr	r3, [r7, #28]
 800688e:	4413      	add	r3, r2
 8006890:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006894:	691a      	ldr	r2, [r3, #16]
 8006896:	8afb      	ldrh	r3, [r7, #22]
 8006898:	04d9      	lsls	r1, r3, #19
 800689a:	4b38      	ldr	r3, [pc, #224]	@ (800697c <USB_EPStartXfer+0x538>)
 800689c:	400b      	ands	r3, r1
 800689e:	69b9      	ldr	r1, [r7, #24]
 80068a0:	0148      	lsls	r0, r1, #5
 80068a2:	69f9      	ldr	r1, [r7, #28]
 80068a4:	4401      	add	r1, r0
 80068a6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80068aa:	4313      	orrs	r3, r2
 80068ac:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80068ae:	69bb      	ldr	r3, [r7, #24]
 80068b0:	015a      	lsls	r2, r3, #5
 80068b2:	69fb      	ldr	r3, [r7, #28]
 80068b4:	4413      	add	r3, r2
 80068b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068ba:	691a      	ldr	r2, [r3, #16]
 80068bc:	68bb      	ldr	r3, [r7, #8]
 80068be:	6a1b      	ldr	r3, [r3, #32]
 80068c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80068c4:	69b9      	ldr	r1, [r7, #24]
 80068c6:	0148      	lsls	r0, r1, #5
 80068c8:	69f9      	ldr	r1, [r7, #28]
 80068ca:	4401      	add	r1, r0
 80068cc:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80068d0:	4313      	orrs	r3, r2
 80068d2:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80068d4:	79fb      	ldrb	r3, [r7, #7]
 80068d6:	2b01      	cmp	r3, #1
 80068d8:	d10d      	bne.n	80068f6 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80068da:	68bb      	ldr	r3, [r7, #8]
 80068dc:	68db      	ldr	r3, [r3, #12]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d009      	beq.n	80068f6 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80068e2:	68bb      	ldr	r3, [r7, #8]
 80068e4:	68d9      	ldr	r1, [r3, #12]
 80068e6:	69bb      	ldr	r3, [r7, #24]
 80068e8:	015a      	lsls	r2, r3, #5
 80068ea:	69fb      	ldr	r3, [r7, #28]
 80068ec:	4413      	add	r3, r2
 80068ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068f2:	460a      	mov	r2, r1
 80068f4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80068f6:	68bb      	ldr	r3, [r7, #8]
 80068f8:	791b      	ldrb	r3, [r3, #4]
 80068fa:	2b01      	cmp	r3, #1
 80068fc:	d128      	bne.n	8006950 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80068fe:	69fb      	ldr	r3, [r7, #28]
 8006900:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006904:	689b      	ldr	r3, [r3, #8]
 8006906:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800690a:	2b00      	cmp	r3, #0
 800690c:	d110      	bne.n	8006930 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800690e:	69bb      	ldr	r3, [r7, #24]
 8006910:	015a      	lsls	r2, r3, #5
 8006912:	69fb      	ldr	r3, [r7, #28]
 8006914:	4413      	add	r3, r2
 8006916:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	69ba      	ldr	r2, [r7, #24]
 800691e:	0151      	lsls	r1, r2, #5
 8006920:	69fa      	ldr	r2, [r7, #28]
 8006922:	440a      	add	r2, r1
 8006924:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006928:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800692c:	6013      	str	r3, [r2, #0]
 800692e:	e00f      	b.n	8006950 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006930:	69bb      	ldr	r3, [r7, #24]
 8006932:	015a      	lsls	r2, r3, #5
 8006934:	69fb      	ldr	r3, [r7, #28]
 8006936:	4413      	add	r3, r2
 8006938:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	69ba      	ldr	r2, [r7, #24]
 8006940:	0151      	lsls	r1, r2, #5
 8006942:	69fa      	ldr	r2, [r7, #28]
 8006944:	440a      	add	r2, r1
 8006946:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800694a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800694e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006950:	69bb      	ldr	r3, [r7, #24]
 8006952:	015a      	lsls	r2, r3, #5
 8006954:	69fb      	ldr	r3, [r7, #28]
 8006956:	4413      	add	r3, r2
 8006958:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	69ba      	ldr	r2, [r7, #24]
 8006960:	0151      	lsls	r1, r2, #5
 8006962:	69fa      	ldr	r2, [r7, #28]
 8006964:	440a      	add	r2, r1
 8006966:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800696a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800696e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006970:	2300      	movs	r3, #0
}
 8006972:	4618      	mov	r0, r3
 8006974:	3720      	adds	r7, #32
 8006976:	46bd      	mov	sp, r7
 8006978:	bd80      	pop	{r7, pc}
 800697a:	bf00      	nop
 800697c:	1ff80000 	.word	0x1ff80000

08006980 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006980:	b480      	push	{r7}
 8006982:	b087      	sub	sp, #28
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
 8006988:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800698a:	2300      	movs	r3, #0
 800698c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800698e:	2300      	movs	r3, #0
 8006990:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	785b      	ldrb	r3, [r3, #1]
 800699a:	2b01      	cmp	r3, #1
 800699c:	d14a      	bne.n	8006a34 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	781b      	ldrb	r3, [r3, #0]
 80069a2:	015a      	lsls	r2, r3, #5
 80069a4:	693b      	ldr	r3, [r7, #16]
 80069a6:	4413      	add	r3, r2
 80069a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80069b2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80069b6:	f040 8086 	bne.w	8006ac6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	781b      	ldrb	r3, [r3, #0]
 80069be:	015a      	lsls	r2, r3, #5
 80069c0:	693b      	ldr	r3, [r7, #16]
 80069c2:	4413      	add	r3, r2
 80069c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	683a      	ldr	r2, [r7, #0]
 80069cc:	7812      	ldrb	r2, [r2, #0]
 80069ce:	0151      	lsls	r1, r2, #5
 80069d0:	693a      	ldr	r2, [r7, #16]
 80069d2:	440a      	add	r2, r1
 80069d4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80069d8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80069dc:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	781b      	ldrb	r3, [r3, #0]
 80069e2:	015a      	lsls	r2, r3, #5
 80069e4:	693b      	ldr	r3, [r7, #16]
 80069e6:	4413      	add	r3, r2
 80069e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	683a      	ldr	r2, [r7, #0]
 80069f0:	7812      	ldrb	r2, [r2, #0]
 80069f2:	0151      	lsls	r1, r2, #5
 80069f4:	693a      	ldr	r2, [r7, #16]
 80069f6:	440a      	add	r2, r1
 80069f8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80069fc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006a00:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	3301      	adds	r3, #1
 8006a06:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	f242 7210 	movw	r2, #10000	@ 0x2710
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d902      	bls.n	8006a18 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8006a12:	2301      	movs	r3, #1
 8006a14:	75fb      	strb	r3, [r7, #23]
          break;
 8006a16:	e056      	b.n	8006ac6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	781b      	ldrb	r3, [r3, #0]
 8006a1c:	015a      	lsls	r2, r3, #5
 8006a1e:	693b      	ldr	r3, [r7, #16]
 8006a20:	4413      	add	r3, r2
 8006a22:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006a2c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006a30:	d0e7      	beq.n	8006a02 <USB_EPStopXfer+0x82>
 8006a32:	e048      	b.n	8006ac6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	781b      	ldrb	r3, [r3, #0]
 8006a38:	015a      	lsls	r2, r3, #5
 8006a3a:	693b      	ldr	r3, [r7, #16]
 8006a3c:	4413      	add	r3, r2
 8006a3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006a48:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006a4c:	d13b      	bne.n	8006ac6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	781b      	ldrb	r3, [r3, #0]
 8006a52:	015a      	lsls	r2, r3, #5
 8006a54:	693b      	ldr	r3, [r7, #16]
 8006a56:	4413      	add	r3, r2
 8006a58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	683a      	ldr	r2, [r7, #0]
 8006a60:	7812      	ldrb	r2, [r2, #0]
 8006a62:	0151      	lsls	r1, r2, #5
 8006a64:	693a      	ldr	r2, [r7, #16]
 8006a66:	440a      	add	r2, r1
 8006a68:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006a6c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006a70:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	781b      	ldrb	r3, [r3, #0]
 8006a76:	015a      	lsls	r2, r3, #5
 8006a78:	693b      	ldr	r3, [r7, #16]
 8006a7a:	4413      	add	r3, r2
 8006a7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	683a      	ldr	r2, [r7, #0]
 8006a84:	7812      	ldrb	r2, [r2, #0]
 8006a86:	0151      	lsls	r1, r2, #5
 8006a88:	693a      	ldr	r2, [r7, #16]
 8006a8a:	440a      	add	r2, r1
 8006a8c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006a90:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006a94:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	3301      	adds	r3, #1
 8006a9a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d902      	bls.n	8006aac <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8006aa6:	2301      	movs	r3, #1
 8006aa8:	75fb      	strb	r3, [r7, #23]
          break;
 8006aaa:	e00c      	b.n	8006ac6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	781b      	ldrb	r3, [r3, #0]
 8006ab0:	015a      	lsls	r2, r3, #5
 8006ab2:	693b      	ldr	r3, [r7, #16]
 8006ab4:	4413      	add	r3, r2
 8006ab6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006ac0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006ac4:	d0e7      	beq.n	8006a96 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8006ac6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ac8:	4618      	mov	r0, r3
 8006aca:	371c      	adds	r7, #28
 8006acc:	46bd      	mov	sp, r7
 8006ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad2:	4770      	bx	lr

08006ad4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006ad4:	b480      	push	{r7}
 8006ad6:	b089      	sub	sp, #36	@ 0x24
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	60f8      	str	r0, [r7, #12]
 8006adc:	60b9      	str	r1, [r7, #8]
 8006ade:	4611      	mov	r1, r2
 8006ae0:	461a      	mov	r2, r3
 8006ae2:	460b      	mov	r3, r1
 8006ae4:	71fb      	strb	r3, [r7, #7]
 8006ae6:	4613      	mov	r3, r2
 8006ae8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006aee:	68bb      	ldr	r3, [r7, #8]
 8006af0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006af2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d123      	bne.n	8006b42 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006afa:	88bb      	ldrh	r3, [r7, #4]
 8006afc:	3303      	adds	r3, #3
 8006afe:	089b      	lsrs	r3, r3, #2
 8006b00:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006b02:	2300      	movs	r3, #0
 8006b04:	61bb      	str	r3, [r7, #24]
 8006b06:	e018      	b.n	8006b3a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006b08:	79fb      	ldrb	r3, [r7, #7]
 8006b0a:	031a      	lsls	r2, r3, #12
 8006b0c:	697b      	ldr	r3, [r7, #20]
 8006b0e:	4413      	add	r3, r2
 8006b10:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006b14:	461a      	mov	r2, r3
 8006b16:	69fb      	ldr	r3, [r7, #28]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006b1c:	69fb      	ldr	r3, [r7, #28]
 8006b1e:	3301      	adds	r3, #1
 8006b20:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006b22:	69fb      	ldr	r3, [r7, #28]
 8006b24:	3301      	adds	r3, #1
 8006b26:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006b28:	69fb      	ldr	r3, [r7, #28]
 8006b2a:	3301      	adds	r3, #1
 8006b2c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006b2e:	69fb      	ldr	r3, [r7, #28]
 8006b30:	3301      	adds	r3, #1
 8006b32:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006b34:	69bb      	ldr	r3, [r7, #24]
 8006b36:	3301      	adds	r3, #1
 8006b38:	61bb      	str	r3, [r7, #24]
 8006b3a:	69ba      	ldr	r2, [r7, #24]
 8006b3c:	693b      	ldr	r3, [r7, #16]
 8006b3e:	429a      	cmp	r2, r3
 8006b40:	d3e2      	bcc.n	8006b08 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006b42:	2300      	movs	r3, #0
}
 8006b44:	4618      	mov	r0, r3
 8006b46:	3724      	adds	r7, #36	@ 0x24
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4e:	4770      	bx	lr

08006b50 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006b50:	b480      	push	{r7}
 8006b52:	b08b      	sub	sp, #44	@ 0x2c
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	60f8      	str	r0, [r7, #12]
 8006b58:	60b9      	str	r1, [r7, #8]
 8006b5a:	4613      	mov	r3, r2
 8006b5c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006b62:	68bb      	ldr	r3, [r7, #8]
 8006b64:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006b66:	88fb      	ldrh	r3, [r7, #6]
 8006b68:	089b      	lsrs	r3, r3, #2
 8006b6a:	b29b      	uxth	r3, r3
 8006b6c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006b6e:	88fb      	ldrh	r3, [r7, #6]
 8006b70:	f003 0303 	and.w	r3, r3, #3
 8006b74:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006b76:	2300      	movs	r3, #0
 8006b78:	623b      	str	r3, [r7, #32]
 8006b7a:	e014      	b.n	8006ba6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006b7c:	69bb      	ldr	r3, [r7, #24]
 8006b7e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006b82:	681a      	ldr	r2, [r3, #0]
 8006b84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b86:	601a      	str	r2, [r3, #0]
    pDest++;
 8006b88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b8a:	3301      	adds	r3, #1
 8006b8c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006b8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b90:	3301      	adds	r3, #1
 8006b92:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006b94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b96:	3301      	adds	r3, #1
 8006b98:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006b9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b9c:	3301      	adds	r3, #1
 8006b9e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8006ba0:	6a3b      	ldr	r3, [r7, #32]
 8006ba2:	3301      	adds	r3, #1
 8006ba4:	623b      	str	r3, [r7, #32]
 8006ba6:	6a3a      	ldr	r2, [r7, #32]
 8006ba8:	697b      	ldr	r3, [r7, #20]
 8006baa:	429a      	cmp	r2, r3
 8006bac:	d3e6      	bcc.n	8006b7c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006bae:	8bfb      	ldrh	r3, [r7, #30]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d01e      	beq.n	8006bf2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006bb8:	69bb      	ldr	r3, [r7, #24]
 8006bba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006bbe:	461a      	mov	r2, r3
 8006bc0:	f107 0310 	add.w	r3, r7, #16
 8006bc4:	6812      	ldr	r2, [r2, #0]
 8006bc6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006bc8:	693a      	ldr	r2, [r7, #16]
 8006bca:	6a3b      	ldr	r3, [r7, #32]
 8006bcc:	b2db      	uxtb	r3, r3
 8006bce:	00db      	lsls	r3, r3, #3
 8006bd0:	fa22 f303 	lsr.w	r3, r2, r3
 8006bd4:	b2da      	uxtb	r2, r3
 8006bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bd8:	701a      	strb	r2, [r3, #0]
      i++;
 8006bda:	6a3b      	ldr	r3, [r7, #32]
 8006bdc:	3301      	adds	r3, #1
 8006bde:	623b      	str	r3, [r7, #32]
      pDest++;
 8006be0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006be2:	3301      	adds	r3, #1
 8006be4:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8006be6:	8bfb      	ldrh	r3, [r7, #30]
 8006be8:	3b01      	subs	r3, #1
 8006bea:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006bec:	8bfb      	ldrh	r3, [r7, #30]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d1ea      	bne.n	8006bc8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006bf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	372c      	adds	r7, #44	@ 0x2c
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfe:	4770      	bx	lr

08006c00 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006c00:	b480      	push	{r7}
 8006c02:	b085      	sub	sp, #20
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
 8006c08:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	781b      	ldrb	r3, [r3, #0]
 8006c12:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	785b      	ldrb	r3, [r3, #1]
 8006c18:	2b01      	cmp	r3, #1
 8006c1a:	d12c      	bne.n	8006c76 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006c1c:	68bb      	ldr	r3, [r7, #8]
 8006c1e:	015a      	lsls	r2, r3, #5
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	4413      	add	r3, r2
 8006c24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	db12      	blt.n	8006c54 <USB_EPSetStall+0x54>
 8006c2e:	68bb      	ldr	r3, [r7, #8]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d00f      	beq.n	8006c54 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006c34:	68bb      	ldr	r3, [r7, #8]
 8006c36:	015a      	lsls	r2, r3, #5
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	4413      	add	r3, r2
 8006c3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	68ba      	ldr	r2, [r7, #8]
 8006c44:	0151      	lsls	r1, r2, #5
 8006c46:	68fa      	ldr	r2, [r7, #12]
 8006c48:	440a      	add	r2, r1
 8006c4a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006c4e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006c52:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006c54:	68bb      	ldr	r3, [r7, #8]
 8006c56:	015a      	lsls	r2, r3, #5
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	4413      	add	r3, r2
 8006c5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	68ba      	ldr	r2, [r7, #8]
 8006c64:	0151      	lsls	r1, r2, #5
 8006c66:	68fa      	ldr	r2, [r7, #12]
 8006c68:	440a      	add	r2, r1
 8006c6a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006c6e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006c72:	6013      	str	r3, [r2, #0]
 8006c74:	e02b      	b.n	8006cce <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006c76:	68bb      	ldr	r3, [r7, #8]
 8006c78:	015a      	lsls	r2, r3, #5
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	4413      	add	r3, r2
 8006c7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	db12      	blt.n	8006cae <USB_EPSetStall+0xae>
 8006c88:	68bb      	ldr	r3, [r7, #8]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d00f      	beq.n	8006cae <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006c8e:	68bb      	ldr	r3, [r7, #8]
 8006c90:	015a      	lsls	r2, r3, #5
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	4413      	add	r3, r2
 8006c96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	68ba      	ldr	r2, [r7, #8]
 8006c9e:	0151      	lsls	r1, r2, #5
 8006ca0:	68fa      	ldr	r2, [r7, #12]
 8006ca2:	440a      	add	r2, r1
 8006ca4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006ca8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006cac:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006cae:	68bb      	ldr	r3, [r7, #8]
 8006cb0:	015a      	lsls	r2, r3, #5
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	4413      	add	r3, r2
 8006cb6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	68ba      	ldr	r2, [r7, #8]
 8006cbe:	0151      	lsls	r1, r2, #5
 8006cc0:	68fa      	ldr	r2, [r7, #12]
 8006cc2:	440a      	add	r2, r1
 8006cc4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006cc8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006ccc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006cce:	2300      	movs	r3, #0
}
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	3714      	adds	r7, #20
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cda:	4770      	bx	lr

08006cdc <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006cdc:	b480      	push	{r7}
 8006cde:	b085      	sub	sp, #20
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
 8006ce4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	781b      	ldrb	r3, [r3, #0]
 8006cee:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	785b      	ldrb	r3, [r3, #1]
 8006cf4:	2b01      	cmp	r3, #1
 8006cf6:	d128      	bne.n	8006d4a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006cf8:	68bb      	ldr	r3, [r7, #8]
 8006cfa:	015a      	lsls	r2, r3, #5
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	4413      	add	r3, r2
 8006d00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	68ba      	ldr	r2, [r7, #8]
 8006d08:	0151      	lsls	r1, r2, #5
 8006d0a:	68fa      	ldr	r2, [r7, #12]
 8006d0c:	440a      	add	r2, r1
 8006d0e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006d12:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006d16:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	791b      	ldrb	r3, [r3, #4]
 8006d1c:	2b03      	cmp	r3, #3
 8006d1e:	d003      	beq.n	8006d28 <USB_EPClearStall+0x4c>
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	791b      	ldrb	r3, [r3, #4]
 8006d24:	2b02      	cmp	r3, #2
 8006d26:	d138      	bne.n	8006d9a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006d28:	68bb      	ldr	r3, [r7, #8]
 8006d2a:	015a      	lsls	r2, r3, #5
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	4413      	add	r3, r2
 8006d30:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	68ba      	ldr	r2, [r7, #8]
 8006d38:	0151      	lsls	r1, r2, #5
 8006d3a:	68fa      	ldr	r2, [r7, #12]
 8006d3c:	440a      	add	r2, r1
 8006d3e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006d42:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006d46:	6013      	str	r3, [r2, #0]
 8006d48:	e027      	b.n	8006d9a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006d4a:	68bb      	ldr	r3, [r7, #8]
 8006d4c:	015a      	lsls	r2, r3, #5
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	4413      	add	r3, r2
 8006d52:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	68ba      	ldr	r2, [r7, #8]
 8006d5a:	0151      	lsls	r1, r2, #5
 8006d5c:	68fa      	ldr	r2, [r7, #12]
 8006d5e:	440a      	add	r2, r1
 8006d60:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006d64:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006d68:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	791b      	ldrb	r3, [r3, #4]
 8006d6e:	2b03      	cmp	r3, #3
 8006d70:	d003      	beq.n	8006d7a <USB_EPClearStall+0x9e>
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	791b      	ldrb	r3, [r3, #4]
 8006d76:	2b02      	cmp	r3, #2
 8006d78:	d10f      	bne.n	8006d9a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006d7a:	68bb      	ldr	r3, [r7, #8]
 8006d7c:	015a      	lsls	r2, r3, #5
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	4413      	add	r3, r2
 8006d82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	68ba      	ldr	r2, [r7, #8]
 8006d8a:	0151      	lsls	r1, r2, #5
 8006d8c:	68fa      	ldr	r2, [r7, #12]
 8006d8e:	440a      	add	r2, r1
 8006d90:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006d94:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006d98:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006d9a:	2300      	movs	r3, #0
}
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	3714      	adds	r7, #20
 8006da0:	46bd      	mov	sp, r7
 8006da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da6:	4770      	bx	lr

08006da8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006da8:	b480      	push	{r7}
 8006daa:	b085      	sub	sp, #20
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
 8006db0:	460b      	mov	r3, r1
 8006db2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	68fa      	ldr	r2, [r7, #12]
 8006dc2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006dc6:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8006dca:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006dd2:	681a      	ldr	r2, [r3, #0]
 8006dd4:	78fb      	ldrb	r3, [r7, #3]
 8006dd6:	011b      	lsls	r3, r3, #4
 8006dd8:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8006ddc:	68f9      	ldr	r1, [r7, #12]
 8006dde:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006de2:	4313      	orrs	r3, r2
 8006de4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006de6:	2300      	movs	r3, #0
}
 8006de8:	4618      	mov	r0, r3
 8006dea:	3714      	adds	r7, #20
 8006dec:	46bd      	mov	sp, r7
 8006dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df2:	4770      	bx	lr

08006df4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006df4:	b480      	push	{r7}
 8006df6:	b085      	sub	sp, #20
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	68fa      	ldr	r2, [r7, #12]
 8006e0a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006e0e:	f023 0303 	bic.w	r3, r3, #3
 8006e12:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e1a:	685b      	ldr	r3, [r3, #4]
 8006e1c:	68fa      	ldr	r2, [r7, #12]
 8006e1e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006e22:	f023 0302 	bic.w	r3, r3, #2
 8006e26:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006e28:	2300      	movs	r3, #0
}
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	3714      	adds	r7, #20
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e34:	4770      	bx	lr

08006e36 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006e36:	b480      	push	{r7}
 8006e38:	b085      	sub	sp, #20
 8006e3a:	af00      	add	r7, sp, #0
 8006e3c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	68fa      	ldr	r2, [r7, #12]
 8006e4c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006e50:	f023 0303 	bic.w	r3, r3, #3
 8006e54:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e5c:	685b      	ldr	r3, [r3, #4]
 8006e5e:	68fa      	ldr	r2, [r7, #12]
 8006e60:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006e64:	f043 0302 	orr.w	r3, r3, #2
 8006e68:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006e6a:	2300      	movs	r3, #0
}
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	3714      	adds	r7, #20
 8006e70:	46bd      	mov	sp, r7
 8006e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e76:	4770      	bx	lr

08006e78 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8006e78:	b480      	push	{r7}
 8006e7a:	b085      	sub	sp, #20
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	695b      	ldr	r3, [r3, #20]
 8006e84:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	699b      	ldr	r3, [r3, #24]
 8006e8a:	68fa      	ldr	r2, [r7, #12]
 8006e8c:	4013      	ands	r3, r2
 8006e8e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006e90:	68fb      	ldr	r3, [r7, #12]
}
 8006e92:	4618      	mov	r0, r3
 8006e94:	3714      	adds	r7, #20
 8006e96:	46bd      	mov	sp, r7
 8006e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9c:	4770      	bx	lr

08006e9e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006e9e:	b480      	push	{r7}
 8006ea0:	b085      	sub	sp, #20
 8006ea2:	af00      	add	r7, sp, #0
 8006ea4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006eb0:	699b      	ldr	r3, [r3, #24]
 8006eb2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006eba:	69db      	ldr	r3, [r3, #28]
 8006ebc:	68ba      	ldr	r2, [r7, #8]
 8006ebe:	4013      	ands	r3, r2
 8006ec0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006ec2:	68bb      	ldr	r3, [r7, #8]
 8006ec4:	0c1b      	lsrs	r3, r3, #16
}
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	3714      	adds	r7, #20
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed0:	4770      	bx	lr

08006ed2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006ed2:	b480      	push	{r7}
 8006ed4:	b085      	sub	sp, #20
 8006ed6:	af00      	add	r7, sp, #0
 8006ed8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ee4:	699b      	ldr	r3, [r3, #24]
 8006ee6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006eee:	69db      	ldr	r3, [r3, #28]
 8006ef0:	68ba      	ldr	r2, [r7, #8]
 8006ef2:	4013      	ands	r3, r2
 8006ef4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006ef6:	68bb      	ldr	r3, [r7, #8]
 8006ef8:	b29b      	uxth	r3, r3
}
 8006efa:	4618      	mov	r0, r3
 8006efc:	3714      	adds	r7, #20
 8006efe:	46bd      	mov	sp, r7
 8006f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f04:	4770      	bx	lr

08006f06 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006f06:	b480      	push	{r7}
 8006f08:	b085      	sub	sp, #20
 8006f0a:	af00      	add	r7, sp, #0
 8006f0c:	6078      	str	r0, [r7, #4]
 8006f0e:	460b      	mov	r3, r1
 8006f10:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006f16:	78fb      	ldrb	r3, [r7, #3]
 8006f18:	015a      	lsls	r2, r3, #5
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	4413      	add	r3, r2
 8006f1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f22:	689b      	ldr	r3, [r3, #8]
 8006f24:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006f2c:	695b      	ldr	r3, [r3, #20]
 8006f2e:	68ba      	ldr	r2, [r7, #8]
 8006f30:	4013      	ands	r3, r2
 8006f32:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006f34:	68bb      	ldr	r3, [r7, #8]
}
 8006f36:	4618      	mov	r0, r3
 8006f38:	3714      	adds	r7, #20
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f40:	4770      	bx	lr

08006f42 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006f42:	b480      	push	{r7}
 8006f44:	b087      	sub	sp, #28
 8006f46:	af00      	add	r7, sp, #0
 8006f48:	6078      	str	r0, [r7, #4]
 8006f4a:	460b      	mov	r3, r1
 8006f4c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006f52:	697b      	ldr	r3, [r7, #20]
 8006f54:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006f58:	691b      	ldr	r3, [r3, #16]
 8006f5a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006f5c:	697b      	ldr	r3, [r7, #20]
 8006f5e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006f62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f64:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006f66:	78fb      	ldrb	r3, [r7, #3]
 8006f68:	f003 030f 	and.w	r3, r3, #15
 8006f6c:	68fa      	ldr	r2, [r7, #12]
 8006f6e:	fa22 f303 	lsr.w	r3, r2, r3
 8006f72:	01db      	lsls	r3, r3, #7
 8006f74:	b2db      	uxtb	r3, r3
 8006f76:	693a      	ldr	r2, [r7, #16]
 8006f78:	4313      	orrs	r3, r2
 8006f7a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006f7c:	78fb      	ldrb	r3, [r7, #3]
 8006f7e:	015a      	lsls	r2, r3, #5
 8006f80:	697b      	ldr	r3, [r7, #20]
 8006f82:	4413      	add	r3, r2
 8006f84:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f88:	689b      	ldr	r3, [r3, #8]
 8006f8a:	693a      	ldr	r2, [r7, #16]
 8006f8c:	4013      	ands	r3, r2
 8006f8e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006f90:	68bb      	ldr	r3, [r7, #8]
}
 8006f92:	4618      	mov	r0, r3
 8006f94:	371c      	adds	r7, #28
 8006f96:	46bd      	mov	sp, r7
 8006f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9c:	4770      	bx	lr

08006f9e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006f9e:	b480      	push	{r7}
 8006fa0:	b083      	sub	sp, #12
 8006fa2:	af00      	add	r7, sp, #0
 8006fa4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	695b      	ldr	r3, [r3, #20]
 8006faa:	f003 0301 	and.w	r3, r3, #1
}
 8006fae:	4618      	mov	r0, r3
 8006fb0:	370c      	adds	r7, #12
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb8:	4770      	bx	lr

08006fba <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8006fba:	b480      	push	{r7}
 8006fbc:	b085      	sub	sp, #20
 8006fbe:	af00      	add	r7, sp, #0
 8006fc0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	68fa      	ldr	r2, [r7, #12]
 8006fd0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006fd4:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8006fd8:	f023 0307 	bic.w	r3, r3, #7
 8006fdc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006fe4:	685b      	ldr	r3, [r3, #4]
 8006fe6:	68fa      	ldr	r2, [r7, #12]
 8006fe8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006fec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006ff0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006ff2:	2300      	movs	r3, #0
}
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	3714      	adds	r7, #20
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffe:	4770      	bx	lr

08007000 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8007000:	b480      	push	{r7}
 8007002:	b087      	sub	sp, #28
 8007004:	af00      	add	r7, sp, #0
 8007006:	60f8      	str	r0, [r7, #12]
 8007008:	460b      	mov	r3, r1
 800700a:	607a      	str	r2, [r7, #4]
 800700c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	333c      	adds	r3, #60	@ 0x3c
 8007016:	3304      	adds	r3, #4
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800701c:	693b      	ldr	r3, [r7, #16]
 800701e:	4a26      	ldr	r2, [pc, #152]	@ (80070b8 <USB_EP0_OutStart+0xb8>)
 8007020:	4293      	cmp	r3, r2
 8007022:	d90a      	bls.n	800703a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007024:	697b      	ldr	r3, [r7, #20]
 8007026:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007030:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007034:	d101      	bne.n	800703a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007036:	2300      	movs	r3, #0
 8007038:	e037      	b.n	80070aa <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800703a:	697b      	ldr	r3, [r7, #20]
 800703c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007040:	461a      	mov	r2, r3
 8007042:	2300      	movs	r3, #0
 8007044:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007046:	697b      	ldr	r3, [r7, #20]
 8007048:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800704c:	691b      	ldr	r3, [r3, #16]
 800704e:	697a      	ldr	r2, [r7, #20]
 8007050:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007054:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007058:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800705a:	697b      	ldr	r3, [r7, #20]
 800705c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007060:	691b      	ldr	r3, [r3, #16]
 8007062:	697a      	ldr	r2, [r7, #20]
 8007064:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007068:	f043 0318 	orr.w	r3, r3, #24
 800706c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800706e:	697b      	ldr	r3, [r7, #20]
 8007070:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007074:	691b      	ldr	r3, [r3, #16]
 8007076:	697a      	ldr	r2, [r7, #20]
 8007078:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800707c:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8007080:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007082:	7afb      	ldrb	r3, [r7, #11]
 8007084:	2b01      	cmp	r3, #1
 8007086:	d10f      	bne.n	80070a8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007088:	697b      	ldr	r3, [r7, #20]
 800708a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800708e:	461a      	mov	r2, r3
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007094:	697b      	ldr	r3, [r7, #20]
 8007096:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	697a      	ldr	r2, [r7, #20]
 800709e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80070a2:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 80070a6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80070a8:	2300      	movs	r3, #0
}
 80070aa:	4618      	mov	r0, r3
 80070ac:	371c      	adds	r7, #28
 80070ae:	46bd      	mov	sp, r7
 80070b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b4:	4770      	bx	lr
 80070b6:	bf00      	nop
 80070b8:	4f54300a 	.word	0x4f54300a

080070bc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80070bc:	b480      	push	{r7}
 80070be:	b085      	sub	sp, #20
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80070c4:	2300      	movs	r3, #0
 80070c6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	3301      	adds	r3, #1
 80070cc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80070d4:	d901      	bls.n	80070da <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80070d6:	2303      	movs	r3, #3
 80070d8:	e022      	b.n	8007120 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	691b      	ldr	r3, [r3, #16]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	daf2      	bge.n	80070c8 <USB_CoreReset+0xc>

  count = 10U;
 80070e2:	230a      	movs	r3, #10
 80070e4:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 80070e6:	e002      	b.n	80070ee <USB_CoreReset+0x32>
  {
    count--;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	3b01      	subs	r3, #1
 80070ec:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d1f9      	bne.n	80070e8 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	691b      	ldr	r3, [r3, #16]
 80070f8:	f043 0201 	orr.w	r2, r3, #1
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	3301      	adds	r3, #1
 8007104:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800710c:	d901      	bls.n	8007112 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 800710e:	2303      	movs	r3, #3
 8007110:	e006      	b.n	8007120 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	691b      	ldr	r3, [r3, #16]
 8007116:	f003 0301 	and.w	r3, r3, #1
 800711a:	2b01      	cmp	r3, #1
 800711c:	d0f0      	beq.n	8007100 <USB_CoreReset+0x44>

  return HAL_OK;
 800711e:	2300      	movs	r3, #0
}
 8007120:	4618      	mov	r0, r3
 8007122:	3714      	adds	r7, #20
 8007124:	46bd      	mov	sp, r7
 8007126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712a:	4770      	bx	lr

0800712c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800712c:	b580      	push	{r7, lr}
 800712e:	b084      	sub	sp, #16
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
 8007134:	460b      	mov	r3, r1
 8007136:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007138:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800713c:	f002 fd70 	bl	8009c20 <USBD_static_malloc>
 8007140:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d109      	bne.n	800715c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	32b0      	adds	r2, #176	@ 0xb0
 8007152:	2100      	movs	r1, #0
 8007154:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8007158:	2302      	movs	r3, #2
 800715a:	e0d4      	b.n	8007306 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800715c:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8007160:	2100      	movs	r1, #0
 8007162:	68f8      	ldr	r0, [r7, #12]
 8007164:	f002 fda0 	bl	8009ca8 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	32b0      	adds	r2, #176	@ 0xb0
 8007172:	68f9      	ldr	r1, [r7, #12]
 8007174:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	32b0      	adds	r2, #176	@ 0xb0
 8007182:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	7c1b      	ldrb	r3, [r3, #16]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d138      	bne.n	8007206 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007194:	4b5e      	ldr	r3, [pc, #376]	@ (8007310 <USBD_CDC_Init+0x1e4>)
 8007196:	7819      	ldrb	r1, [r3, #0]
 8007198:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800719c:	2202      	movs	r2, #2
 800719e:	6878      	ldr	r0, [r7, #4]
 80071a0:	f002 fbcd 	bl	800993e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80071a4:	4b5a      	ldr	r3, [pc, #360]	@ (8007310 <USBD_CDC_Init+0x1e4>)
 80071a6:	781b      	ldrb	r3, [r3, #0]
 80071a8:	f003 020f 	and.w	r2, r3, #15
 80071ac:	6879      	ldr	r1, [r7, #4]
 80071ae:	4613      	mov	r3, r2
 80071b0:	009b      	lsls	r3, r3, #2
 80071b2:	4413      	add	r3, r2
 80071b4:	009b      	lsls	r3, r3, #2
 80071b6:	440b      	add	r3, r1
 80071b8:	3323      	adds	r3, #35	@ 0x23
 80071ba:	2201      	movs	r2, #1
 80071bc:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80071be:	4b55      	ldr	r3, [pc, #340]	@ (8007314 <USBD_CDC_Init+0x1e8>)
 80071c0:	7819      	ldrb	r1, [r3, #0]
 80071c2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80071c6:	2202      	movs	r2, #2
 80071c8:	6878      	ldr	r0, [r7, #4]
 80071ca:	f002 fbb8 	bl	800993e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80071ce:	4b51      	ldr	r3, [pc, #324]	@ (8007314 <USBD_CDC_Init+0x1e8>)
 80071d0:	781b      	ldrb	r3, [r3, #0]
 80071d2:	f003 020f 	and.w	r2, r3, #15
 80071d6:	6879      	ldr	r1, [r7, #4]
 80071d8:	4613      	mov	r3, r2
 80071da:	009b      	lsls	r3, r3, #2
 80071dc:	4413      	add	r3, r2
 80071de:	009b      	lsls	r3, r3, #2
 80071e0:	440b      	add	r3, r1
 80071e2:	f203 1363 	addw	r3, r3, #355	@ 0x163
 80071e6:	2201      	movs	r2, #1
 80071e8:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80071ea:	4b4b      	ldr	r3, [pc, #300]	@ (8007318 <USBD_CDC_Init+0x1ec>)
 80071ec:	781b      	ldrb	r3, [r3, #0]
 80071ee:	f003 020f 	and.w	r2, r3, #15
 80071f2:	6879      	ldr	r1, [r7, #4]
 80071f4:	4613      	mov	r3, r2
 80071f6:	009b      	lsls	r3, r3, #2
 80071f8:	4413      	add	r3, r2
 80071fa:	009b      	lsls	r3, r3, #2
 80071fc:	440b      	add	r3, r1
 80071fe:	331c      	adds	r3, #28
 8007200:	2210      	movs	r2, #16
 8007202:	601a      	str	r2, [r3, #0]
 8007204:	e035      	b.n	8007272 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007206:	4b42      	ldr	r3, [pc, #264]	@ (8007310 <USBD_CDC_Init+0x1e4>)
 8007208:	7819      	ldrb	r1, [r3, #0]
 800720a:	2340      	movs	r3, #64	@ 0x40
 800720c:	2202      	movs	r2, #2
 800720e:	6878      	ldr	r0, [r7, #4]
 8007210:	f002 fb95 	bl	800993e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007214:	4b3e      	ldr	r3, [pc, #248]	@ (8007310 <USBD_CDC_Init+0x1e4>)
 8007216:	781b      	ldrb	r3, [r3, #0]
 8007218:	f003 020f 	and.w	r2, r3, #15
 800721c:	6879      	ldr	r1, [r7, #4]
 800721e:	4613      	mov	r3, r2
 8007220:	009b      	lsls	r3, r3, #2
 8007222:	4413      	add	r3, r2
 8007224:	009b      	lsls	r3, r3, #2
 8007226:	440b      	add	r3, r1
 8007228:	3323      	adds	r3, #35	@ 0x23
 800722a:	2201      	movs	r2, #1
 800722c:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800722e:	4b39      	ldr	r3, [pc, #228]	@ (8007314 <USBD_CDC_Init+0x1e8>)
 8007230:	7819      	ldrb	r1, [r3, #0]
 8007232:	2340      	movs	r3, #64	@ 0x40
 8007234:	2202      	movs	r2, #2
 8007236:	6878      	ldr	r0, [r7, #4]
 8007238:	f002 fb81 	bl	800993e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800723c:	4b35      	ldr	r3, [pc, #212]	@ (8007314 <USBD_CDC_Init+0x1e8>)
 800723e:	781b      	ldrb	r3, [r3, #0]
 8007240:	f003 020f 	and.w	r2, r3, #15
 8007244:	6879      	ldr	r1, [r7, #4]
 8007246:	4613      	mov	r3, r2
 8007248:	009b      	lsls	r3, r3, #2
 800724a:	4413      	add	r3, r2
 800724c:	009b      	lsls	r3, r3, #2
 800724e:	440b      	add	r3, r1
 8007250:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8007254:	2201      	movs	r2, #1
 8007256:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007258:	4b2f      	ldr	r3, [pc, #188]	@ (8007318 <USBD_CDC_Init+0x1ec>)
 800725a:	781b      	ldrb	r3, [r3, #0]
 800725c:	f003 020f 	and.w	r2, r3, #15
 8007260:	6879      	ldr	r1, [r7, #4]
 8007262:	4613      	mov	r3, r2
 8007264:	009b      	lsls	r3, r3, #2
 8007266:	4413      	add	r3, r2
 8007268:	009b      	lsls	r3, r3, #2
 800726a:	440b      	add	r3, r1
 800726c:	331c      	adds	r3, #28
 800726e:	2210      	movs	r2, #16
 8007270:	601a      	str	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007272:	4b29      	ldr	r3, [pc, #164]	@ (8007318 <USBD_CDC_Init+0x1ec>)
 8007274:	7819      	ldrb	r1, [r3, #0]
 8007276:	2308      	movs	r3, #8
 8007278:	2203      	movs	r2, #3
 800727a:	6878      	ldr	r0, [r7, #4]
 800727c:	f002 fb5f 	bl	800993e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8007280:	4b25      	ldr	r3, [pc, #148]	@ (8007318 <USBD_CDC_Init+0x1ec>)
 8007282:	781b      	ldrb	r3, [r3, #0]
 8007284:	f003 020f 	and.w	r2, r3, #15
 8007288:	6879      	ldr	r1, [r7, #4]
 800728a:	4613      	mov	r3, r2
 800728c:	009b      	lsls	r3, r3, #2
 800728e:	4413      	add	r3, r2
 8007290:	009b      	lsls	r3, r3, #2
 8007292:	440b      	add	r3, r1
 8007294:	3323      	adds	r3, #35	@ 0x23
 8007296:	2201      	movs	r2, #1
 8007298:	701a      	strb	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	2200      	movs	r2, #0
 800729e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80072a8:	687a      	ldr	r2, [r7, #4]
 80072aa:	33b0      	adds	r3, #176	@ 0xb0
 80072ac:	009b      	lsls	r3, r3, #2
 80072ae:	4413      	add	r3, r2
 80072b0:	685b      	ldr	r3, [r3, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	2200      	movs	r2, #0
 80072ba:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	2200      	movs	r2, #0
 80072c2:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d101      	bne.n	80072d4 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80072d0:	2302      	movs	r3, #2
 80072d2:	e018      	b.n	8007306 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	7c1b      	ldrb	r3, [r3, #16]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d10a      	bne.n	80072f2 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80072dc:	4b0d      	ldr	r3, [pc, #52]	@ (8007314 <USBD_CDC_Init+0x1e8>)
 80072de:	7819      	ldrb	r1, [r3, #0]
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80072e6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80072ea:	6878      	ldr	r0, [r7, #4]
 80072ec:	f002 fc16 	bl	8009b1c <USBD_LL_PrepareReceive>
 80072f0:	e008      	b.n	8007304 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80072f2:	4b08      	ldr	r3, [pc, #32]	@ (8007314 <USBD_CDC_Init+0x1e8>)
 80072f4:	7819      	ldrb	r1, [r3, #0]
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80072fc:	2340      	movs	r3, #64	@ 0x40
 80072fe:	6878      	ldr	r0, [r7, #4]
 8007300:	f002 fc0c 	bl	8009b1c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007304:	2300      	movs	r3, #0
}
 8007306:	4618      	mov	r0, r3
 8007308:	3710      	adds	r7, #16
 800730a:	46bd      	mov	sp, r7
 800730c:	bd80      	pop	{r7, pc}
 800730e:	bf00      	nop
 8007310:	200000a3 	.word	0x200000a3
 8007314:	200000a4 	.word	0x200000a4
 8007318:	200000a5 	.word	0x200000a5

0800731c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800731c:	b580      	push	{r7, lr}
 800731e:	b082      	sub	sp, #8
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
 8007324:	460b      	mov	r3, r1
 8007326:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8007328:	4b3a      	ldr	r3, [pc, #232]	@ (8007414 <USBD_CDC_DeInit+0xf8>)
 800732a:	781b      	ldrb	r3, [r3, #0]
 800732c:	4619      	mov	r1, r3
 800732e:	6878      	ldr	r0, [r7, #4]
 8007330:	f002 fb2b 	bl	800998a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8007334:	4b37      	ldr	r3, [pc, #220]	@ (8007414 <USBD_CDC_DeInit+0xf8>)
 8007336:	781b      	ldrb	r3, [r3, #0]
 8007338:	f003 020f 	and.w	r2, r3, #15
 800733c:	6879      	ldr	r1, [r7, #4]
 800733e:	4613      	mov	r3, r2
 8007340:	009b      	lsls	r3, r3, #2
 8007342:	4413      	add	r3, r2
 8007344:	009b      	lsls	r3, r3, #2
 8007346:	440b      	add	r3, r1
 8007348:	3323      	adds	r3, #35	@ 0x23
 800734a:	2200      	movs	r2, #0
 800734c:	701a      	strb	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800734e:	4b32      	ldr	r3, [pc, #200]	@ (8007418 <USBD_CDC_DeInit+0xfc>)
 8007350:	781b      	ldrb	r3, [r3, #0]
 8007352:	4619      	mov	r1, r3
 8007354:	6878      	ldr	r0, [r7, #4]
 8007356:	f002 fb18 	bl	800998a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800735a:	4b2f      	ldr	r3, [pc, #188]	@ (8007418 <USBD_CDC_DeInit+0xfc>)
 800735c:	781b      	ldrb	r3, [r3, #0]
 800735e:	f003 020f 	and.w	r2, r3, #15
 8007362:	6879      	ldr	r1, [r7, #4]
 8007364:	4613      	mov	r3, r2
 8007366:	009b      	lsls	r3, r3, #2
 8007368:	4413      	add	r3, r2
 800736a:	009b      	lsls	r3, r3, #2
 800736c:	440b      	add	r3, r1
 800736e:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8007372:	2200      	movs	r2, #0
 8007374:	701a      	strb	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8007376:	4b29      	ldr	r3, [pc, #164]	@ (800741c <USBD_CDC_DeInit+0x100>)
 8007378:	781b      	ldrb	r3, [r3, #0]
 800737a:	4619      	mov	r1, r3
 800737c:	6878      	ldr	r0, [r7, #4]
 800737e:	f002 fb04 	bl	800998a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8007382:	4b26      	ldr	r3, [pc, #152]	@ (800741c <USBD_CDC_DeInit+0x100>)
 8007384:	781b      	ldrb	r3, [r3, #0]
 8007386:	f003 020f 	and.w	r2, r3, #15
 800738a:	6879      	ldr	r1, [r7, #4]
 800738c:	4613      	mov	r3, r2
 800738e:	009b      	lsls	r3, r3, #2
 8007390:	4413      	add	r3, r2
 8007392:	009b      	lsls	r3, r3, #2
 8007394:	440b      	add	r3, r1
 8007396:	3323      	adds	r3, #35	@ 0x23
 8007398:	2200      	movs	r2, #0
 800739a:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800739c:	4b1f      	ldr	r3, [pc, #124]	@ (800741c <USBD_CDC_DeInit+0x100>)
 800739e:	781b      	ldrb	r3, [r3, #0]
 80073a0:	f003 020f 	and.w	r2, r3, #15
 80073a4:	6879      	ldr	r1, [r7, #4]
 80073a6:	4613      	mov	r3, r2
 80073a8:	009b      	lsls	r3, r3, #2
 80073aa:	4413      	add	r3, r2
 80073ac:	009b      	lsls	r3, r3, #2
 80073ae:	440b      	add	r3, r1
 80073b0:	331c      	adds	r3, #28
 80073b2:	2200      	movs	r2, #0
 80073b4:	601a      	str	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	32b0      	adds	r2, #176	@ 0xb0
 80073c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d01f      	beq.n	8007408 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80073ce:	687a      	ldr	r2, [r7, #4]
 80073d0:	33b0      	adds	r3, #176	@ 0xb0
 80073d2:	009b      	lsls	r3, r3, #2
 80073d4:	4413      	add	r3, r2
 80073d6:	685b      	ldr	r3, [r3, #4]
 80073d8:	685b      	ldr	r3, [r3, #4]
 80073da:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	32b0      	adds	r2, #176	@ 0xb0
 80073e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073ea:	4618      	mov	r0, r3
 80073ec:	f002 fc26 	bl	8009c3c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	32b0      	adds	r2, #176	@ 0xb0
 80073fa:	2100      	movs	r1, #0
 80073fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2200      	movs	r2, #0
 8007404:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007408:	2300      	movs	r3, #0
}
 800740a:	4618      	mov	r0, r3
 800740c:	3708      	adds	r7, #8
 800740e:	46bd      	mov	sp, r7
 8007410:	bd80      	pop	{r7, pc}
 8007412:	bf00      	nop
 8007414:	200000a3 	.word	0x200000a3
 8007418:	200000a4 	.word	0x200000a4
 800741c:	200000a5 	.word	0x200000a5

08007420 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007420:	b580      	push	{r7, lr}
 8007422:	b086      	sub	sp, #24
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
 8007428:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	32b0      	adds	r2, #176	@ 0xb0
 8007434:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007438:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800743a:	2300      	movs	r3, #0
 800743c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800743e:	2300      	movs	r3, #0
 8007440:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007442:	2300      	movs	r3, #0
 8007444:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007446:	693b      	ldr	r3, [r7, #16]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d101      	bne.n	8007450 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800744c:	2303      	movs	r3, #3
 800744e:	e0bf      	b.n	80075d0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	781b      	ldrb	r3, [r3, #0]
 8007454:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007458:	2b00      	cmp	r3, #0
 800745a:	d050      	beq.n	80074fe <USBD_CDC_Setup+0xde>
 800745c:	2b20      	cmp	r3, #32
 800745e:	f040 80af 	bne.w	80075c0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	88db      	ldrh	r3, [r3, #6]
 8007466:	2b00      	cmp	r3, #0
 8007468:	d03a      	beq.n	80074e0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	781b      	ldrb	r3, [r3, #0]
 800746e:	b25b      	sxtb	r3, r3
 8007470:	2b00      	cmp	r3, #0
 8007472:	da1b      	bge.n	80074ac <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800747a:	687a      	ldr	r2, [r7, #4]
 800747c:	33b0      	adds	r3, #176	@ 0xb0
 800747e:	009b      	lsls	r3, r3, #2
 8007480:	4413      	add	r3, r2
 8007482:	685b      	ldr	r3, [r3, #4]
 8007484:	689b      	ldr	r3, [r3, #8]
 8007486:	683a      	ldr	r2, [r7, #0]
 8007488:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800748a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800748c:	683a      	ldr	r2, [r7, #0]
 800748e:	88d2      	ldrh	r2, [r2, #6]
 8007490:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007492:	683b      	ldr	r3, [r7, #0]
 8007494:	88db      	ldrh	r3, [r3, #6]
 8007496:	2b07      	cmp	r3, #7
 8007498:	bf28      	it	cs
 800749a:	2307      	movcs	r3, #7
 800749c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800749e:	693b      	ldr	r3, [r7, #16]
 80074a0:	89fa      	ldrh	r2, [r7, #14]
 80074a2:	4619      	mov	r1, r3
 80074a4:	6878      	ldr	r0, [r7, #4]
 80074a6:	f001 fdd1 	bl	800904c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80074aa:	e090      	b.n	80075ce <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	785a      	ldrb	r2, [r3, #1]
 80074b0:	693b      	ldr	r3, [r7, #16]
 80074b2:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	88db      	ldrh	r3, [r3, #6]
 80074ba:	2b3f      	cmp	r3, #63	@ 0x3f
 80074bc:	d803      	bhi.n	80074c6 <USBD_CDC_Setup+0xa6>
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	88db      	ldrh	r3, [r3, #6]
 80074c2:	b2da      	uxtb	r2, r3
 80074c4:	e000      	b.n	80074c8 <USBD_CDC_Setup+0xa8>
 80074c6:	2240      	movs	r2, #64	@ 0x40
 80074c8:	693b      	ldr	r3, [r7, #16]
 80074ca:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80074ce:	6939      	ldr	r1, [r7, #16]
 80074d0:	693b      	ldr	r3, [r7, #16]
 80074d2:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 80074d6:	461a      	mov	r2, r3
 80074d8:	6878      	ldr	r0, [r7, #4]
 80074da:	f001 fde6 	bl	80090aa <USBD_CtlPrepareRx>
      break;
 80074de:	e076      	b.n	80075ce <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80074e6:	687a      	ldr	r2, [r7, #4]
 80074e8:	33b0      	adds	r3, #176	@ 0xb0
 80074ea:	009b      	lsls	r3, r3, #2
 80074ec:	4413      	add	r3, r2
 80074ee:	685b      	ldr	r3, [r3, #4]
 80074f0:	689b      	ldr	r3, [r3, #8]
 80074f2:	683a      	ldr	r2, [r7, #0]
 80074f4:	7850      	ldrb	r0, [r2, #1]
 80074f6:	2200      	movs	r2, #0
 80074f8:	6839      	ldr	r1, [r7, #0]
 80074fa:	4798      	blx	r3
      break;
 80074fc:	e067      	b.n	80075ce <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	785b      	ldrb	r3, [r3, #1]
 8007502:	2b0b      	cmp	r3, #11
 8007504:	d851      	bhi.n	80075aa <USBD_CDC_Setup+0x18a>
 8007506:	a201      	add	r2, pc, #4	@ (adr r2, 800750c <USBD_CDC_Setup+0xec>)
 8007508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800750c:	0800753d 	.word	0x0800753d
 8007510:	080075b9 	.word	0x080075b9
 8007514:	080075ab 	.word	0x080075ab
 8007518:	080075ab 	.word	0x080075ab
 800751c:	080075ab 	.word	0x080075ab
 8007520:	080075ab 	.word	0x080075ab
 8007524:	080075ab 	.word	0x080075ab
 8007528:	080075ab 	.word	0x080075ab
 800752c:	080075ab 	.word	0x080075ab
 8007530:	080075ab 	.word	0x080075ab
 8007534:	08007567 	.word	0x08007567
 8007538:	08007591 	.word	0x08007591
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007542:	b2db      	uxtb	r3, r3
 8007544:	2b03      	cmp	r3, #3
 8007546:	d107      	bne.n	8007558 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007548:	f107 030a 	add.w	r3, r7, #10
 800754c:	2202      	movs	r2, #2
 800754e:	4619      	mov	r1, r3
 8007550:	6878      	ldr	r0, [r7, #4]
 8007552:	f001 fd7b 	bl	800904c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007556:	e032      	b.n	80075be <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007558:	6839      	ldr	r1, [r7, #0]
 800755a:	6878      	ldr	r0, [r7, #4]
 800755c:	f001 fcf9 	bl	8008f52 <USBD_CtlError>
            ret = USBD_FAIL;
 8007560:	2303      	movs	r3, #3
 8007562:	75fb      	strb	r3, [r7, #23]
          break;
 8007564:	e02b      	b.n	80075be <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800756c:	b2db      	uxtb	r3, r3
 800756e:	2b03      	cmp	r3, #3
 8007570:	d107      	bne.n	8007582 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007572:	f107 030d 	add.w	r3, r7, #13
 8007576:	2201      	movs	r2, #1
 8007578:	4619      	mov	r1, r3
 800757a:	6878      	ldr	r0, [r7, #4]
 800757c:	f001 fd66 	bl	800904c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007580:	e01d      	b.n	80075be <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007582:	6839      	ldr	r1, [r7, #0]
 8007584:	6878      	ldr	r0, [r7, #4]
 8007586:	f001 fce4 	bl	8008f52 <USBD_CtlError>
            ret = USBD_FAIL;
 800758a:	2303      	movs	r3, #3
 800758c:	75fb      	strb	r3, [r7, #23]
          break;
 800758e:	e016      	b.n	80075be <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007596:	b2db      	uxtb	r3, r3
 8007598:	2b03      	cmp	r3, #3
 800759a:	d00f      	beq.n	80075bc <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800759c:	6839      	ldr	r1, [r7, #0]
 800759e:	6878      	ldr	r0, [r7, #4]
 80075a0:	f001 fcd7 	bl	8008f52 <USBD_CtlError>
            ret = USBD_FAIL;
 80075a4:	2303      	movs	r3, #3
 80075a6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80075a8:	e008      	b.n	80075bc <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80075aa:	6839      	ldr	r1, [r7, #0]
 80075ac:	6878      	ldr	r0, [r7, #4]
 80075ae:	f001 fcd0 	bl	8008f52 <USBD_CtlError>
          ret = USBD_FAIL;
 80075b2:	2303      	movs	r3, #3
 80075b4:	75fb      	strb	r3, [r7, #23]
          break;
 80075b6:	e002      	b.n	80075be <USBD_CDC_Setup+0x19e>
          break;
 80075b8:	bf00      	nop
 80075ba:	e008      	b.n	80075ce <USBD_CDC_Setup+0x1ae>
          break;
 80075bc:	bf00      	nop
      }
      break;
 80075be:	e006      	b.n	80075ce <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80075c0:	6839      	ldr	r1, [r7, #0]
 80075c2:	6878      	ldr	r0, [r7, #4]
 80075c4:	f001 fcc5 	bl	8008f52 <USBD_CtlError>
      ret = USBD_FAIL;
 80075c8:	2303      	movs	r3, #3
 80075ca:	75fb      	strb	r3, [r7, #23]
      break;
 80075cc:	bf00      	nop
  }

  return (uint8_t)ret;
 80075ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80075d0:	4618      	mov	r0, r3
 80075d2:	3718      	adds	r7, #24
 80075d4:	46bd      	mov	sp, r7
 80075d6:	bd80      	pop	{r7, pc}

080075d8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80075d8:	b580      	push	{r7, lr}
 80075da:	b084      	sub	sp, #16
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
 80075e0:	460b      	mov	r3, r1
 80075e2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80075ea:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	32b0      	adds	r2, #176	@ 0xb0
 80075f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d101      	bne.n	8007602 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80075fe:	2303      	movs	r3, #3
 8007600:	e065      	b.n	80076ce <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	32b0      	adds	r2, #176	@ 0xb0
 800760c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007610:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007612:	78fb      	ldrb	r3, [r7, #3]
 8007614:	f003 020f 	and.w	r2, r3, #15
 8007618:	6879      	ldr	r1, [r7, #4]
 800761a:	4613      	mov	r3, r2
 800761c:	009b      	lsls	r3, r3, #2
 800761e:	4413      	add	r3, r2
 8007620:	009b      	lsls	r3, r3, #2
 8007622:	440b      	add	r3, r1
 8007624:	3314      	adds	r3, #20
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d02f      	beq.n	800768c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800762c:	78fb      	ldrb	r3, [r7, #3]
 800762e:	f003 020f 	and.w	r2, r3, #15
 8007632:	6879      	ldr	r1, [r7, #4]
 8007634:	4613      	mov	r3, r2
 8007636:	009b      	lsls	r3, r3, #2
 8007638:	4413      	add	r3, r2
 800763a:	009b      	lsls	r3, r3, #2
 800763c:	440b      	add	r3, r1
 800763e:	3314      	adds	r3, #20
 8007640:	681a      	ldr	r2, [r3, #0]
 8007642:	78fb      	ldrb	r3, [r7, #3]
 8007644:	f003 010f 	and.w	r1, r3, #15
 8007648:	68f8      	ldr	r0, [r7, #12]
 800764a:	460b      	mov	r3, r1
 800764c:	00db      	lsls	r3, r3, #3
 800764e:	440b      	add	r3, r1
 8007650:	009b      	lsls	r3, r3, #2
 8007652:	4403      	add	r3, r0
 8007654:	331c      	adds	r3, #28
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	fbb2 f1f3 	udiv	r1, r2, r3
 800765c:	fb01 f303 	mul.w	r3, r1, r3
 8007660:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007662:	2b00      	cmp	r3, #0
 8007664:	d112      	bne.n	800768c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8007666:	78fb      	ldrb	r3, [r7, #3]
 8007668:	f003 020f 	and.w	r2, r3, #15
 800766c:	6879      	ldr	r1, [r7, #4]
 800766e:	4613      	mov	r3, r2
 8007670:	009b      	lsls	r3, r3, #2
 8007672:	4413      	add	r3, r2
 8007674:	009b      	lsls	r3, r3, #2
 8007676:	440b      	add	r3, r1
 8007678:	3314      	adds	r3, #20
 800767a:	2200      	movs	r2, #0
 800767c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800767e:	78f9      	ldrb	r1, [r7, #3]
 8007680:	2300      	movs	r3, #0
 8007682:	2200      	movs	r2, #0
 8007684:	6878      	ldr	r0, [r7, #4]
 8007686:	f002 fa28 	bl	8009ada <USBD_LL_Transmit>
 800768a:	e01f      	b.n	80076cc <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800768c:	68bb      	ldr	r3, [r7, #8]
 800768e:	2200      	movs	r2, #0
 8007690:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800769a:	687a      	ldr	r2, [r7, #4]
 800769c:	33b0      	adds	r3, #176	@ 0xb0
 800769e:	009b      	lsls	r3, r3, #2
 80076a0:	4413      	add	r3, r2
 80076a2:	685b      	ldr	r3, [r3, #4]
 80076a4:	691b      	ldr	r3, [r3, #16]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d010      	beq.n	80076cc <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80076b0:	687a      	ldr	r2, [r7, #4]
 80076b2:	33b0      	adds	r3, #176	@ 0xb0
 80076b4:	009b      	lsls	r3, r3, #2
 80076b6:	4413      	add	r3, r2
 80076b8:	685b      	ldr	r3, [r3, #4]
 80076ba:	691b      	ldr	r3, [r3, #16]
 80076bc:	68ba      	ldr	r2, [r7, #8]
 80076be:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 80076c2:	68ba      	ldr	r2, [r7, #8]
 80076c4:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 80076c8:	78fa      	ldrb	r2, [r7, #3]
 80076ca:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80076cc:	2300      	movs	r3, #0
}
 80076ce:	4618      	mov	r0, r3
 80076d0:	3710      	adds	r7, #16
 80076d2:	46bd      	mov	sp, r7
 80076d4:	bd80      	pop	{r7, pc}

080076d6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80076d6:	b580      	push	{r7, lr}
 80076d8:	b084      	sub	sp, #16
 80076da:	af00      	add	r7, sp, #0
 80076dc:	6078      	str	r0, [r7, #4]
 80076de:	460b      	mov	r3, r1
 80076e0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	32b0      	adds	r2, #176	@ 0xb0
 80076ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076f0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	32b0      	adds	r2, #176	@ 0xb0
 80076fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d101      	bne.n	8007708 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007704:	2303      	movs	r3, #3
 8007706:	e01a      	b.n	800773e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007708:	78fb      	ldrb	r3, [r7, #3]
 800770a:	4619      	mov	r1, r3
 800770c:	6878      	ldr	r0, [r7, #4]
 800770e:	f002 fa26 	bl	8009b5e <USBD_LL_GetRxDataSize>
 8007712:	4602      	mov	r2, r0
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007720:	687a      	ldr	r2, [r7, #4]
 8007722:	33b0      	adds	r3, #176	@ 0xb0
 8007724:	009b      	lsls	r3, r3, #2
 8007726:	4413      	add	r3, r2
 8007728:	685b      	ldr	r3, [r3, #4]
 800772a:	68db      	ldr	r3, [r3, #12]
 800772c:	68fa      	ldr	r2, [r7, #12]
 800772e:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8007732:	68fa      	ldr	r2, [r7, #12]
 8007734:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8007738:	4611      	mov	r1, r2
 800773a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800773c:	2300      	movs	r3, #0
}
 800773e:	4618      	mov	r0, r3
 8007740:	3710      	adds	r7, #16
 8007742:	46bd      	mov	sp, r7
 8007744:	bd80      	pop	{r7, pc}

08007746 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007746:	b580      	push	{r7, lr}
 8007748:	b084      	sub	sp, #16
 800774a:	af00      	add	r7, sp, #0
 800774c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	32b0      	adds	r2, #176	@ 0xb0
 8007758:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800775c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d101      	bne.n	8007768 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007764:	2303      	movs	r3, #3
 8007766:	e024      	b.n	80077b2 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800776e:	687a      	ldr	r2, [r7, #4]
 8007770:	33b0      	adds	r3, #176	@ 0xb0
 8007772:	009b      	lsls	r3, r3, #2
 8007774:	4413      	add	r3, r2
 8007776:	685b      	ldr	r3, [r3, #4]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d019      	beq.n	80077b0 <USBD_CDC_EP0_RxReady+0x6a>
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8007782:	2bff      	cmp	r3, #255	@ 0xff
 8007784:	d014      	beq.n	80077b0 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800778c:	687a      	ldr	r2, [r7, #4]
 800778e:	33b0      	adds	r3, #176	@ 0xb0
 8007790:	009b      	lsls	r3, r3, #2
 8007792:	4413      	add	r3, r2
 8007794:	685b      	ldr	r3, [r3, #4]
 8007796:	689b      	ldr	r3, [r3, #8]
 8007798:	68fa      	ldr	r2, [r7, #12]
 800779a:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800779e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80077a0:	68fa      	ldr	r2, [r7, #12]
 80077a2:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80077a6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	22ff      	movs	r2, #255	@ 0xff
 80077ac:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 80077b0:	2300      	movs	r3, #0
}
 80077b2:	4618      	mov	r0, r3
 80077b4:	3710      	adds	r7, #16
 80077b6:	46bd      	mov	sp, r7
 80077b8:	bd80      	pop	{r7, pc}
	...

080077bc <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b086      	sub	sp, #24
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80077c4:	2182      	movs	r1, #130	@ 0x82
 80077c6:	4818      	ldr	r0, [pc, #96]	@ (8007828 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80077c8:	f000 fd62 	bl	8008290 <USBD_GetEpDesc>
 80077cc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80077ce:	2101      	movs	r1, #1
 80077d0:	4815      	ldr	r0, [pc, #84]	@ (8007828 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80077d2:	f000 fd5d 	bl	8008290 <USBD_GetEpDesc>
 80077d6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80077d8:	2181      	movs	r1, #129	@ 0x81
 80077da:	4813      	ldr	r0, [pc, #76]	@ (8007828 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80077dc:	f000 fd58 	bl	8008290 <USBD_GetEpDesc>
 80077e0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80077e2:	697b      	ldr	r3, [r7, #20]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d002      	beq.n	80077ee <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80077e8:	697b      	ldr	r3, [r7, #20]
 80077ea:	2210      	movs	r2, #16
 80077ec:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80077ee:	693b      	ldr	r3, [r7, #16]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d006      	beq.n	8007802 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80077f4:	693b      	ldr	r3, [r7, #16]
 80077f6:	2200      	movs	r2, #0
 80077f8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80077fc:	711a      	strb	r2, [r3, #4]
 80077fe:	2200      	movs	r2, #0
 8007800:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d006      	beq.n	8007816 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	2200      	movs	r2, #0
 800780c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007810:	711a      	strb	r2, [r3, #4]
 8007812:	2200      	movs	r2, #0
 8007814:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	2243      	movs	r2, #67	@ 0x43
 800781a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800781c:	4b02      	ldr	r3, [pc, #8]	@ (8007828 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800781e:	4618      	mov	r0, r3
 8007820:	3718      	adds	r7, #24
 8007822:	46bd      	mov	sp, r7
 8007824:	bd80      	pop	{r7, pc}
 8007826:	bf00      	nop
 8007828:	20000060 	.word	0x20000060

0800782c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800782c:	b580      	push	{r7, lr}
 800782e:	b086      	sub	sp, #24
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007834:	2182      	movs	r1, #130	@ 0x82
 8007836:	4818      	ldr	r0, [pc, #96]	@ (8007898 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007838:	f000 fd2a 	bl	8008290 <USBD_GetEpDesc>
 800783c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800783e:	2101      	movs	r1, #1
 8007840:	4815      	ldr	r0, [pc, #84]	@ (8007898 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007842:	f000 fd25 	bl	8008290 <USBD_GetEpDesc>
 8007846:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007848:	2181      	movs	r1, #129	@ 0x81
 800784a:	4813      	ldr	r0, [pc, #76]	@ (8007898 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800784c:	f000 fd20 	bl	8008290 <USBD_GetEpDesc>
 8007850:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007852:	697b      	ldr	r3, [r7, #20]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d002      	beq.n	800785e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8007858:	697b      	ldr	r3, [r7, #20]
 800785a:	2210      	movs	r2, #16
 800785c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800785e:	693b      	ldr	r3, [r7, #16]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d006      	beq.n	8007872 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007864:	693b      	ldr	r3, [r7, #16]
 8007866:	2200      	movs	r2, #0
 8007868:	711a      	strb	r2, [r3, #4]
 800786a:	2200      	movs	r2, #0
 800786c:	f042 0202 	orr.w	r2, r2, #2
 8007870:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d006      	beq.n	8007886 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	2200      	movs	r2, #0
 800787c:	711a      	strb	r2, [r3, #4]
 800787e:	2200      	movs	r2, #0
 8007880:	f042 0202 	orr.w	r2, r2, #2
 8007884:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	2243      	movs	r2, #67	@ 0x43
 800788a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800788c:	4b02      	ldr	r3, [pc, #8]	@ (8007898 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800788e:	4618      	mov	r0, r3
 8007890:	3718      	adds	r7, #24
 8007892:	46bd      	mov	sp, r7
 8007894:	bd80      	pop	{r7, pc}
 8007896:	bf00      	nop
 8007898:	20000060 	.word	0x20000060

0800789c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800789c:	b580      	push	{r7, lr}
 800789e:	b086      	sub	sp, #24
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80078a4:	2182      	movs	r1, #130	@ 0x82
 80078a6:	4818      	ldr	r0, [pc, #96]	@ (8007908 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80078a8:	f000 fcf2 	bl	8008290 <USBD_GetEpDesc>
 80078ac:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80078ae:	2101      	movs	r1, #1
 80078b0:	4815      	ldr	r0, [pc, #84]	@ (8007908 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80078b2:	f000 fced 	bl	8008290 <USBD_GetEpDesc>
 80078b6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80078b8:	2181      	movs	r1, #129	@ 0x81
 80078ba:	4813      	ldr	r0, [pc, #76]	@ (8007908 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80078bc:	f000 fce8 	bl	8008290 <USBD_GetEpDesc>
 80078c0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80078c2:	697b      	ldr	r3, [r7, #20]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d002      	beq.n	80078ce <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80078c8:	697b      	ldr	r3, [r7, #20]
 80078ca:	2210      	movs	r2, #16
 80078cc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80078ce:	693b      	ldr	r3, [r7, #16]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d006      	beq.n	80078e2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80078d4:	693b      	ldr	r3, [r7, #16]
 80078d6:	2200      	movs	r2, #0
 80078d8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80078dc:	711a      	strb	r2, [r3, #4]
 80078de:	2200      	movs	r2, #0
 80078e0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d006      	beq.n	80078f6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	2200      	movs	r2, #0
 80078ec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80078f0:	711a      	strb	r2, [r3, #4]
 80078f2:	2200      	movs	r2, #0
 80078f4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	2243      	movs	r2, #67	@ 0x43
 80078fa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80078fc:	4b02      	ldr	r3, [pc, #8]	@ (8007908 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80078fe:	4618      	mov	r0, r3
 8007900:	3718      	adds	r7, #24
 8007902:	46bd      	mov	sp, r7
 8007904:	bd80      	pop	{r7, pc}
 8007906:	bf00      	nop
 8007908:	20000060 	.word	0x20000060

0800790c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800790c:	b480      	push	{r7}
 800790e:	b083      	sub	sp, #12
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	220a      	movs	r2, #10
 8007918:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800791a:	4b03      	ldr	r3, [pc, #12]	@ (8007928 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800791c:	4618      	mov	r0, r3
 800791e:	370c      	adds	r7, #12
 8007920:	46bd      	mov	sp, r7
 8007922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007926:	4770      	bx	lr
 8007928:	2000001c 	.word	0x2000001c

0800792c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800792c:	b480      	push	{r7}
 800792e:	b083      	sub	sp, #12
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
 8007934:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007936:	683b      	ldr	r3, [r7, #0]
 8007938:	2b00      	cmp	r3, #0
 800793a:	d101      	bne.n	8007940 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800793c:	2303      	movs	r3, #3
 800793e:	e009      	b.n	8007954 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007946:	687a      	ldr	r2, [r7, #4]
 8007948:	33b0      	adds	r3, #176	@ 0xb0
 800794a:	009b      	lsls	r3, r3, #2
 800794c:	4413      	add	r3, r2
 800794e:	683a      	ldr	r2, [r7, #0]
 8007950:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8007952:	2300      	movs	r3, #0
}
 8007954:	4618      	mov	r0, r3
 8007956:	370c      	adds	r7, #12
 8007958:	46bd      	mov	sp, r7
 800795a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795e:	4770      	bx	lr

08007960 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007960:	b480      	push	{r7}
 8007962:	b087      	sub	sp, #28
 8007964:	af00      	add	r7, sp, #0
 8007966:	60f8      	str	r0, [r7, #12]
 8007968:	60b9      	str	r1, [r7, #8]
 800796a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	32b0      	adds	r2, #176	@ 0xb0
 8007976:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800797a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800797c:	697b      	ldr	r3, [r7, #20]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d101      	bne.n	8007986 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007982:	2303      	movs	r3, #3
 8007984:	e008      	b.n	8007998 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8007986:	697b      	ldr	r3, [r7, #20]
 8007988:	68ba      	ldr	r2, [r7, #8]
 800798a:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800798e:	697b      	ldr	r3, [r7, #20]
 8007990:	687a      	ldr	r2, [r7, #4]
 8007992:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8007996:	2300      	movs	r3, #0
}
 8007998:	4618      	mov	r0, r3
 800799a:	371c      	adds	r7, #28
 800799c:	46bd      	mov	sp, r7
 800799e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a2:	4770      	bx	lr

080079a4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80079a4:	b480      	push	{r7}
 80079a6:	b085      	sub	sp, #20
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
 80079ac:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	32b0      	adds	r2, #176	@ 0xb0
 80079b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079bc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d101      	bne.n	80079c8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80079c4:	2303      	movs	r3, #3
 80079c6:	e004      	b.n	80079d2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	683a      	ldr	r2, [r7, #0]
 80079cc:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 80079d0:	2300      	movs	r3, #0
}
 80079d2:	4618      	mov	r0, r3
 80079d4:	3714      	adds	r7, #20
 80079d6:	46bd      	mov	sp, r7
 80079d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079dc:	4770      	bx	lr
	...

080079e0 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b084      	sub	sp, #16
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	32b0      	adds	r2, #176	@ 0xb0
 80079f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079f6:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 80079f8:	2301      	movs	r3, #1
 80079fa:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80079fc:	68bb      	ldr	r3, [r7, #8]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d101      	bne.n	8007a06 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007a02:	2303      	movs	r3, #3
 8007a04:	e025      	b.n	8007a52 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8007a06:	68bb      	ldr	r3, [r7, #8]
 8007a08:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d11f      	bne.n	8007a50 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007a10:	68bb      	ldr	r3, [r7, #8]
 8007a12:	2201      	movs	r2, #1
 8007a14:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8007a18:	4b10      	ldr	r3, [pc, #64]	@ (8007a5c <USBD_CDC_TransmitPacket+0x7c>)
 8007a1a:	781b      	ldrb	r3, [r3, #0]
 8007a1c:	f003 020f 	and.w	r2, r3, #15
 8007a20:	68bb      	ldr	r3, [r7, #8]
 8007a22:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8007a26:	6878      	ldr	r0, [r7, #4]
 8007a28:	4613      	mov	r3, r2
 8007a2a:	009b      	lsls	r3, r3, #2
 8007a2c:	4413      	add	r3, r2
 8007a2e:	009b      	lsls	r3, r3, #2
 8007a30:	4403      	add	r3, r0
 8007a32:	3314      	adds	r3, #20
 8007a34:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8007a36:	4b09      	ldr	r3, [pc, #36]	@ (8007a5c <USBD_CDC_TransmitPacket+0x7c>)
 8007a38:	7819      	ldrb	r1, [r3, #0]
 8007a3a:	68bb      	ldr	r3, [r7, #8]
 8007a3c:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8007a40:	68bb      	ldr	r3, [r7, #8]
 8007a42:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8007a46:	6878      	ldr	r0, [r7, #4]
 8007a48:	f002 f847 	bl	8009ada <USBD_LL_Transmit>

    ret = USBD_OK;
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8007a50:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a52:	4618      	mov	r0, r3
 8007a54:	3710      	adds	r7, #16
 8007a56:	46bd      	mov	sp, r7
 8007a58:	bd80      	pop	{r7, pc}
 8007a5a:	bf00      	nop
 8007a5c:	200000a3 	.word	0x200000a3

08007a60 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007a60:	b580      	push	{r7, lr}
 8007a62:	b084      	sub	sp, #16
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	32b0      	adds	r2, #176	@ 0xb0
 8007a72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a76:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	32b0      	adds	r2, #176	@ 0xb0
 8007a82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d101      	bne.n	8007a8e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8007a8a:	2303      	movs	r3, #3
 8007a8c:	e018      	b.n	8007ac0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	7c1b      	ldrb	r3, [r3, #16]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d10a      	bne.n	8007aac <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007a96:	4b0c      	ldr	r3, [pc, #48]	@ (8007ac8 <USBD_CDC_ReceivePacket+0x68>)
 8007a98:	7819      	ldrb	r1, [r3, #0]
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007aa0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007aa4:	6878      	ldr	r0, [r7, #4]
 8007aa6:	f002 f839 	bl	8009b1c <USBD_LL_PrepareReceive>
 8007aaa:	e008      	b.n	8007abe <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007aac:	4b06      	ldr	r3, [pc, #24]	@ (8007ac8 <USBD_CDC_ReceivePacket+0x68>)
 8007aae:	7819      	ldrb	r1, [r3, #0]
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007ab6:	2340      	movs	r3, #64	@ 0x40
 8007ab8:	6878      	ldr	r0, [r7, #4]
 8007aba:	f002 f82f 	bl	8009b1c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007abe:	2300      	movs	r3, #0
}
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	3710      	adds	r7, #16
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	bd80      	pop	{r7, pc}
 8007ac8:	200000a4 	.word	0x200000a4

08007acc <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007acc:	b580      	push	{r7, lr}
 8007ace:	b086      	sub	sp, #24
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	60f8      	str	r0, [r7, #12]
 8007ad4:	60b9      	str	r1, [r7, #8]
 8007ad6:	4613      	mov	r3, r2
 8007ad8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d101      	bne.n	8007ae4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007ae0:	2303      	movs	r3, #3
 8007ae2:	e01f      	b.n	8007b24 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	2200      	movs	r2, #0
 8007af0:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	2200      	movs	r2, #0
 8007af8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007afc:	68bb      	ldr	r3, [r7, #8]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d003      	beq.n	8007b0a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	68ba      	ldr	r2, [r7, #8]
 8007b06:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	2201      	movs	r2, #1
 8007b0e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	79fa      	ldrb	r2, [r7, #7]
 8007b16:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007b18:	68f8      	ldr	r0, [r7, #12]
 8007b1a:	f001 fea9 	bl	8009870 <USBD_LL_Init>
 8007b1e:	4603      	mov	r3, r0
 8007b20:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007b22:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b24:	4618      	mov	r0, r3
 8007b26:	3718      	adds	r7, #24
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	bd80      	pop	{r7, pc}

08007b2c <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b084      	sub	sp, #16
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
 8007b34:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007b36:	2300      	movs	r3, #0
 8007b38:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007b3a:	683b      	ldr	r3, [r7, #0]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d101      	bne.n	8007b44 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007b40:	2303      	movs	r3, #3
 8007b42:	e025      	b.n	8007b90 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	683a      	ldr	r2, [r7, #0]
 8007b48:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	32ae      	adds	r2, #174	@ 0xae
 8007b56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d00f      	beq.n	8007b80 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	32ae      	adds	r2, #174	@ 0xae
 8007b6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b70:	f107 020e 	add.w	r2, r7, #14
 8007b74:	4610      	mov	r0, r2
 8007b76:	4798      	blx	r3
 8007b78:	4602      	mov	r2, r0
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8007b86:	1c5a      	adds	r2, r3, #1
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8007b8e:	2300      	movs	r3, #0
}
 8007b90:	4618      	mov	r0, r3
 8007b92:	3710      	adds	r7, #16
 8007b94:	46bd      	mov	sp, r7
 8007b96:	bd80      	pop	{r7, pc}

08007b98 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	b082      	sub	sp, #8
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007ba0:	6878      	ldr	r0, [r7, #4]
 8007ba2:	f001 feb1 	bl	8009908 <USBD_LL_Start>
 8007ba6:	4603      	mov	r3, r0
}
 8007ba8:	4618      	mov	r0, r3
 8007baa:	3708      	adds	r7, #8
 8007bac:	46bd      	mov	sp, r7
 8007bae:	bd80      	pop	{r7, pc}

08007bb0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007bb0:	b480      	push	{r7}
 8007bb2:	b083      	sub	sp, #12
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007bb8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8007bba:	4618      	mov	r0, r3
 8007bbc:	370c      	adds	r7, #12
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc4:	4770      	bx	lr

08007bc6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007bc6:	b580      	push	{r7, lr}
 8007bc8:	b084      	sub	sp, #16
 8007bca:	af00      	add	r7, sp, #0
 8007bcc:	6078      	str	r0, [r7, #4]
 8007bce:	460b      	mov	r3, r1
 8007bd0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d009      	beq.n	8007bf4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	78fa      	ldrb	r2, [r7, #3]
 8007bea:	4611      	mov	r1, r2
 8007bec:	6878      	ldr	r0, [r7, #4]
 8007bee:	4798      	blx	r3
 8007bf0:	4603      	mov	r3, r0
 8007bf2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007bf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	3710      	adds	r7, #16
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	bd80      	pop	{r7, pc}

08007bfe <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007bfe:	b580      	push	{r7, lr}
 8007c00:	b084      	sub	sp, #16
 8007c02:	af00      	add	r7, sp, #0
 8007c04:	6078      	str	r0, [r7, #4]
 8007c06:	460b      	mov	r3, r1
 8007c08:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007c14:	685b      	ldr	r3, [r3, #4]
 8007c16:	78fa      	ldrb	r2, [r7, #3]
 8007c18:	4611      	mov	r1, r2
 8007c1a:	6878      	ldr	r0, [r7, #4]
 8007c1c:	4798      	blx	r3
 8007c1e:	4603      	mov	r3, r0
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d001      	beq.n	8007c28 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007c24:	2303      	movs	r3, #3
 8007c26:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007c28:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	3710      	adds	r7, #16
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	bd80      	pop	{r7, pc}

08007c32 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007c32:	b580      	push	{r7, lr}
 8007c34:	b084      	sub	sp, #16
 8007c36:	af00      	add	r7, sp, #0
 8007c38:	6078      	str	r0, [r7, #4]
 8007c3a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007c42:	6839      	ldr	r1, [r7, #0]
 8007c44:	4618      	mov	r0, r3
 8007c46:	f001 f94a 	bl	8008ede <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	2201      	movs	r2, #1
 8007c4e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8007c58:	461a      	mov	r2, r3
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007c66:	f003 031f 	and.w	r3, r3, #31
 8007c6a:	2b02      	cmp	r3, #2
 8007c6c:	d01a      	beq.n	8007ca4 <USBD_LL_SetupStage+0x72>
 8007c6e:	2b02      	cmp	r3, #2
 8007c70:	d822      	bhi.n	8007cb8 <USBD_LL_SetupStage+0x86>
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d002      	beq.n	8007c7c <USBD_LL_SetupStage+0x4a>
 8007c76:	2b01      	cmp	r3, #1
 8007c78:	d00a      	beq.n	8007c90 <USBD_LL_SetupStage+0x5e>
 8007c7a:	e01d      	b.n	8007cb8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007c82:	4619      	mov	r1, r3
 8007c84:	6878      	ldr	r0, [r7, #4]
 8007c86:	f000 fb75 	bl	8008374 <USBD_StdDevReq>
 8007c8a:	4603      	mov	r3, r0
 8007c8c:	73fb      	strb	r3, [r7, #15]
      break;
 8007c8e:	e020      	b.n	8007cd2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007c96:	4619      	mov	r1, r3
 8007c98:	6878      	ldr	r0, [r7, #4]
 8007c9a:	f000 fbdd 	bl	8008458 <USBD_StdItfReq>
 8007c9e:	4603      	mov	r3, r0
 8007ca0:	73fb      	strb	r3, [r7, #15]
      break;
 8007ca2:	e016      	b.n	8007cd2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007caa:	4619      	mov	r1, r3
 8007cac:	6878      	ldr	r0, [r7, #4]
 8007cae:	f000 fc3f 	bl	8008530 <USBD_StdEPReq>
 8007cb2:	4603      	mov	r3, r0
 8007cb4:	73fb      	strb	r3, [r7, #15]
      break;
 8007cb6:	e00c      	b.n	8007cd2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007cbe:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007cc2:	b2db      	uxtb	r3, r3
 8007cc4:	4619      	mov	r1, r3
 8007cc6:	6878      	ldr	r0, [r7, #4]
 8007cc8:	f001 fe7e 	bl	80099c8 <USBD_LL_StallEP>
 8007ccc:	4603      	mov	r3, r0
 8007cce:	73fb      	strb	r3, [r7, #15]
      break;
 8007cd0:	bf00      	nop
  }

  return ret;
 8007cd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	3710      	adds	r7, #16
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	bd80      	pop	{r7, pc}

08007cdc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	b086      	sub	sp, #24
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	60f8      	str	r0, [r7, #12]
 8007ce4:	460b      	mov	r3, r1
 8007ce6:	607a      	str	r2, [r7, #4]
 8007ce8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007cea:	2300      	movs	r3, #0
 8007cec:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 8007cee:	7afb      	ldrb	r3, [r7, #11]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d177      	bne.n	8007de4 <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8007cfa:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007d02:	2b03      	cmp	r3, #3
 8007d04:	f040 80a1 	bne.w	8007e4a <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 8007d08:	693b      	ldr	r3, [r7, #16]
 8007d0a:	685b      	ldr	r3, [r3, #4]
 8007d0c:	693a      	ldr	r2, [r7, #16]
 8007d0e:	8992      	ldrh	r2, [r2, #12]
 8007d10:	4293      	cmp	r3, r2
 8007d12:	d91c      	bls.n	8007d4e <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 8007d14:	693b      	ldr	r3, [r7, #16]
 8007d16:	685b      	ldr	r3, [r3, #4]
 8007d18:	693a      	ldr	r2, [r7, #16]
 8007d1a:	8992      	ldrh	r2, [r2, #12]
 8007d1c:	1a9a      	subs	r2, r3, r2
 8007d1e:	693b      	ldr	r3, [r7, #16]
 8007d20:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 8007d22:	693b      	ldr	r3, [r7, #16]
 8007d24:	691b      	ldr	r3, [r3, #16]
 8007d26:	693a      	ldr	r2, [r7, #16]
 8007d28:	8992      	ldrh	r2, [r2, #12]
 8007d2a:	441a      	add	r2, r3
 8007d2c:	693b      	ldr	r3, [r7, #16]
 8007d2e:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 8007d30:	693b      	ldr	r3, [r7, #16]
 8007d32:	6919      	ldr	r1, [r3, #16]
 8007d34:	693b      	ldr	r3, [r7, #16]
 8007d36:	899b      	ldrh	r3, [r3, #12]
 8007d38:	461a      	mov	r2, r3
 8007d3a:	693b      	ldr	r3, [r7, #16]
 8007d3c:	685b      	ldr	r3, [r3, #4]
 8007d3e:	4293      	cmp	r3, r2
 8007d40:	bf38      	it	cc
 8007d42:	4613      	movcc	r3, r2
 8007d44:	461a      	mov	r2, r3
 8007d46:	68f8      	ldr	r0, [r7, #12]
 8007d48:	f001 f9d0 	bl	80090ec <USBD_CtlContinueRx>
 8007d4c:	e07d      	b.n	8007e4a <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007d54:	f003 031f 	and.w	r3, r3, #31
 8007d58:	2b02      	cmp	r3, #2
 8007d5a:	d014      	beq.n	8007d86 <USBD_LL_DataOutStage+0xaa>
 8007d5c:	2b02      	cmp	r3, #2
 8007d5e:	d81d      	bhi.n	8007d9c <USBD_LL_DataOutStage+0xc0>
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d002      	beq.n	8007d6a <USBD_LL_DataOutStage+0x8e>
 8007d64:	2b01      	cmp	r3, #1
 8007d66:	d003      	beq.n	8007d70 <USBD_LL_DataOutStage+0x94>
 8007d68:	e018      	b.n	8007d9c <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	75bb      	strb	r3, [r7, #22]
            break;
 8007d6e:	e018      	b.n	8007da2 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8007d76:	b2db      	uxtb	r3, r3
 8007d78:	4619      	mov	r1, r3
 8007d7a:	68f8      	ldr	r0, [r7, #12]
 8007d7c:	f000 fa6e 	bl	800825c <USBD_CoreFindIF>
 8007d80:	4603      	mov	r3, r0
 8007d82:	75bb      	strb	r3, [r7, #22]
            break;
 8007d84:	e00d      	b.n	8007da2 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8007d8c:	b2db      	uxtb	r3, r3
 8007d8e:	4619      	mov	r1, r3
 8007d90:	68f8      	ldr	r0, [r7, #12]
 8007d92:	f000 fa70 	bl	8008276 <USBD_CoreFindEP>
 8007d96:	4603      	mov	r3, r0
 8007d98:	75bb      	strb	r3, [r7, #22]
            break;
 8007d9a:	e002      	b.n	8007da2 <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	75bb      	strb	r3, [r7, #22]
            break;
 8007da0:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007da2:	7dbb      	ldrb	r3, [r7, #22]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d119      	bne.n	8007ddc <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007dae:	b2db      	uxtb	r3, r3
 8007db0:	2b03      	cmp	r3, #3
 8007db2:	d113      	bne.n	8007ddc <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007db4:	7dba      	ldrb	r2, [r7, #22]
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	32ae      	adds	r2, #174	@ 0xae
 8007dba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dbe:	691b      	ldr	r3, [r3, #16]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d00b      	beq.n	8007ddc <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 8007dc4:	7dba      	ldrb	r2, [r7, #22]
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007dcc:	7dba      	ldrb	r2, [r7, #22]
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	32ae      	adds	r2, #174	@ 0xae
 8007dd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dd6:	691b      	ldr	r3, [r3, #16]
 8007dd8:	68f8      	ldr	r0, [r7, #12]
 8007dda:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007ddc:	68f8      	ldr	r0, [r7, #12]
 8007dde:	f001 f996 	bl	800910e <USBD_CtlSendStatus>
 8007de2:	e032      	b.n	8007e4a <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007de4:	7afb      	ldrb	r3, [r7, #11]
 8007de6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007dea:	b2db      	uxtb	r3, r3
 8007dec:	4619      	mov	r1, r3
 8007dee:	68f8      	ldr	r0, [r7, #12]
 8007df0:	f000 fa41 	bl	8008276 <USBD_CoreFindEP>
 8007df4:	4603      	mov	r3, r0
 8007df6:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007df8:	7dbb      	ldrb	r3, [r7, #22]
 8007dfa:	2bff      	cmp	r3, #255	@ 0xff
 8007dfc:	d025      	beq.n	8007e4a <USBD_LL_DataOutStage+0x16e>
 8007dfe:	7dbb      	ldrb	r3, [r7, #22]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d122      	bne.n	8007e4a <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007e0a:	b2db      	uxtb	r3, r3
 8007e0c:	2b03      	cmp	r3, #3
 8007e0e:	d117      	bne.n	8007e40 <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007e10:	7dba      	ldrb	r2, [r7, #22]
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	32ae      	adds	r2, #174	@ 0xae
 8007e16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e1a:	699b      	ldr	r3, [r3, #24]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d00f      	beq.n	8007e40 <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 8007e20:	7dba      	ldrb	r2, [r7, #22]
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007e28:	7dba      	ldrb	r2, [r7, #22]
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	32ae      	adds	r2, #174	@ 0xae
 8007e2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e32:	699b      	ldr	r3, [r3, #24]
 8007e34:	7afa      	ldrb	r2, [r7, #11]
 8007e36:	4611      	mov	r1, r2
 8007e38:	68f8      	ldr	r0, [r7, #12]
 8007e3a:	4798      	blx	r3
 8007e3c:	4603      	mov	r3, r0
 8007e3e:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007e40:	7dfb      	ldrb	r3, [r7, #23]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d001      	beq.n	8007e4a <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 8007e46:	7dfb      	ldrb	r3, [r7, #23]
 8007e48:	e000      	b.n	8007e4c <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 8007e4a:	2300      	movs	r3, #0
}
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	3718      	adds	r7, #24
 8007e50:	46bd      	mov	sp, r7
 8007e52:	bd80      	pop	{r7, pc}

08007e54 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007e54:	b580      	push	{r7, lr}
 8007e56:	b086      	sub	sp, #24
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	60f8      	str	r0, [r7, #12]
 8007e5c:	460b      	mov	r3, r1
 8007e5e:	607a      	str	r2, [r7, #4]
 8007e60:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 8007e62:	7afb      	ldrb	r3, [r7, #11]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d178      	bne.n	8007f5a <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	3314      	adds	r3, #20
 8007e6c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007e74:	2b02      	cmp	r3, #2
 8007e76:	d163      	bne.n	8007f40 <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 8007e78:	693b      	ldr	r3, [r7, #16]
 8007e7a:	685b      	ldr	r3, [r3, #4]
 8007e7c:	693a      	ldr	r2, [r7, #16]
 8007e7e:	8992      	ldrh	r2, [r2, #12]
 8007e80:	4293      	cmp	r3, r2
 8007e82:	d91c      	bls.n	8007ebe <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 8007e84:	693b      	ldr	r3, [r7, #16]
 8007e86:	685b      	ldr	r3, [r3, #4]
 8007e88:	693a      	ldr	r2, [r7, #16]
 8007e8a:	8992      	ldrh	r2, [r2, #12]
 8007e8c:	1a9a      	subs	r2, r3, r2
 8007e8e:	693b      	ldr	r3, [r7, #16]
 8007e90:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 8007e92:	693b      	ldr	r3, [r7, #16]
 8007e94:	691b      	ldr	r3, [r3, #16]
 8007e96:	693a      	ldr	r2, [r7, #16]
 8007e98:	8992      	ldrh	r2, [r2, #12]
 8007e9a:	441a      	add	r2, r3
 8007e9c:	693b      	ldr	r3, [r7, #16]
 8007e9e:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 8007ea0:	693b      	ldr	r3, [r7, #16]
 8007ea2:	6919      	ldr	r1, [r3, #16]
 8007ea4:	693b      	ldr	r3, [r7, #16]
 8007ea6:	685b      	ldr	r3, [r3, #4]
 8007ea8:	461a      	mov	r2, r3
 8007eaa:	68f8      	ldr	r0, [r7, #12]
 8007eac:	f001 f8ec 	bl	8009088 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	2100      	movs	r1, #0
 8007eb6:	68f8      	ldr	r0, [r7, #12]
 8007eb8:	f001 fe30 	bl	8009b1c <USBD_LL_PrepareReceive>
 8007ebc:	e040      	b.n	8007f40 <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007ebe:	693b      	ldr	r3, [r7, #16]
 8007ec0:	899b      	ldrh	r3, [r3, #12]
 8007ec2:	461a      	mov	r2, r3
 8007ec4:	693b      	ldr	r3, [r7, #16]
 8007ec6:	685b      	ldr	r3, [r3, #4]
 8007ec8:	429a      	cmp	r2, r3
 8007eca:	d11c      	bne.n	8007f06 <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 8007ecc:	693b      	ldr	r3, [r7, #16]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	693a      	ldr	r2, [r7, #16]
 8007ed2:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007ed4:	4293      	cmp	r3, r2
 8007ed6:	d316      	bcc.n	8007f06 <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 8007ed8:	693b      	ldr	r3, [r7, #16]
 8007eda:	681a      	ldr	r2, [r3, #0]
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007ee2:	429a      	cmp	r2, r3
 8007ee4:	d20f      	bcs.n	8007f06 <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	2100      	movs	r1, #0
 8007eea:	68f8      	ldr	r0, [r7, #12]
 8007eec:	f001 f8cc 	bl	8009088 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007ef8:	2300      	movs	r3, #0
 8007efa:	2200      	movs	r2, #0
 8007efc:	2100      	movs	r1, #0
 8007efe:	68f8      	ldr	r0, [r7, #12]
 8007f00:	f001 fe0c 	bl	8009b1c <USBD_LL_PrepareReceive>
 8007f04:	e01c      	b.n	8007f40 <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007f0c:	b2db      	uxtb	r3, r3
 8007f0e:	2b03      	cmp	r3, #3
 8007f10:	d10f      	bne.n	8007f32 <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007f18:	68db      	ldr	r3, [r3, #12]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d009      	beq.n	8007f32 <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	2200      	movs	r2, #0
 8007f22:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007f2c:	68db      	ldr	r3, [r3, #12]
 8007f2e:	68f8      	ldr	r0, [r7, #12]
 8007f30:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007f32:	2180      	movs	r1, #128	@ 0x80
 8007f34:	68f8      	ldr	r0, [r7, #12]
 8007f36:	f001 fd47 	bl	80099c8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007f3a:	68f8      	ldr	r0, [r7, #12]
 8007f3c:	f001 f8fa 	bl	8009134 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d03a      	beq.n	8007fc0 <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 8007f4a:	68f8      	ldr	r0, [r7, #12]
 8007f4c:	f7ff fe30 	bl	8007bb0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	2200      	movs	r2, #0
 8007f54:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8007f58:	e032      	b.n	8007fc0 <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007f5a:	7afb      	ldrb	r3, [r7, #11]
 8007f5c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007f60:	b2db      	uxtb	r3, r3
 8007f62:	4619      	mov	r1, r3
 8007f64:	68f8      	ldr	r0, [r7, #12]
 8007f66:	f000 f986 	bl	8008276 <USBD_CoreFindEP>
 8007f6a:	4603      	mov	r3, r0
 8007f6c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007f6e:	7dfb      	ldrb	r3, [r7, #23]
 8007f70:	2bff      	cmp	r3, #255	@ 0xff
 8007f72:	d025      	beq.n	8007fc0 <USBD_LL_DataInStage+0x16c>
 8007f74:	7dfb      	ldrb	r3, [r7, #23]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d122      	bne.n	8007fc0 <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007f80:	b2db      	uxtb	r3, r3
 8007f82:	2b03      	cmp	r3, #3
 8007f84:	d11c      	bne.n	8007fc0 <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007f86:	7dfa      	ldrb	r2, [r7, #23]
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	32ae      	adds	r2, #174	@ 0xae
 8007f8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f90:	695b      	ldr	r3, [r3, #20]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d014      	beq.n	8007fc0 <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 8007f96:	7dfa      	ldrb	r2, [r7, #23]
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007f9e:	7dfa      	ldrb	r2, [r7, #23]
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	32ae      	adds	r2, #174	@ 0xae
 8007fa4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fa8:	695b      	ldr	r3, [r3, #20]
 8007faa:	7afa      	ldrb	r2, [r7, #11]
 8007fac:	4611      	mov	r1, r2
 8007fae:	68f8      	ldr	r0, [r7, #12]
 8007fb0:	4798      	blx	r3
 8007fb2:	4603      	mov	r3, r0
 8007fb4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007fb6:	7dbb      	ldrb	r3, [r7, #22]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d001      	beq.n	8007fc0 <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 8007fbc:	7dbb      	ldrb	r3, [r7, #22]
 8007fbe:	e000      	b.n	8007fc2 <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 8007fc0:	2300      	movs	r3, #0
}
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	3718      	adds	r7, #24
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	bd80      	pop	{r7, pc}

08007fca <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007fca:	b580      	push	{r7, lr}
 8007fcc:	b084      	sub	sp, #16
 8007fce:	af00      	add	r7, sp, #0
 8007fd0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	2201      	movs	r2, #1
 8007fda:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	2200      	movs	r2, #0
 8007fe2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	2200      	movs	r2, #0
 8007fea:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	2200      	movs	r2, #0
 8007ff0:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008002:	2b00      	cmp	r3, #0
 8008004:	d014      	beq.n	8008030 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800800c:	685b      	ldr	r3, [r3, #4]
 800800e:	2b00      	cmp	r3, #0
 8008010:	d00e      	beq.n	8008030 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008018:	685b      	ldr	r3, [r3, #4]
 800801a:	687a      	ldr	r2, [r7, #4]
 800801c:	6852      	ldr	r2, [r2, #4]
 800801e:	b2d2      	uxtb	r2, r2
 8008020:	4611      	mov	r1, r2
 8008022:	6878      	ldr	r0, [r7, #4]
 8008024:	4798      	blx	r3
 8008026:	4603      	mov	r3, r0
 8008028:	2b00      	cmp	r3, #0
 800802a:	d001      	beq.n	8008030 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800802c:	2303      	movs	r3, #3
 800802e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008030:	2340      	movs	r3, #64	@ 0x40
 8008032:	2200      	movs	r2, #0
 8008034:	2100      	movs	r1, #0
 8008036:	6878      	ldr	r0, [r7, #4]
 8008038:	f001 fc81 	bl	800993e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2201      	movs	r2, #1
 8008040:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2240      	movs	r2, #64	@ 0x40
 8008048:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800804c:	2340      	movs	r3, #64	@ 0x40
 800804e:	2200      	movs	r2, #0
 8008050:	2180      	movs	r1, #128	@ 0x80
 8008052:	6878      	ldr	r0, [r7, #4]
 8008054:	f001 fc73 	bl	800993e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2201      	movs	r2, #1
 800805c:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	2240      	movs	r2, #64	@ 0x40
 8008064:	841a      	strh	r2, [r3, #32]

  return ret;
 8008066:	7bfb      	ldrb	r3, [r7, #15]
}
 8008068:	4618      	mov	r0, r3
 800806a:	3710      	adds	r7, #16
 800806c:	46bd      	mov	sp, r7
 800806e:	bd80      	pop	{r7, pc}

08008070 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008070:	b480      	push	{r7}
 8008072:	b083      	sub	sp, #12
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
 8008078:	460b      	mov	r3, r1
 800807a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	78fa      	ldrb	r2, [r7, #3]
 8008080:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008082:	2300      	movs	r3, #0
}
 8008084:	4618      	mov	r0, r3
 8008086:	370c      	adds	r7, #12
 8008088:	46bd      	mov	sp, r7
 800808a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808e:	4770      	bx	lr

08008090 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008090:	b480      	push	{r7}
 8008092:	b083      	sub	sp, #12
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800809e:	b2db      	uxtb	r3, r3
 80080a0:	2b04      	cmp	r3, #4
 80080a2:	d006      	beq.n	80080b2 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80080aa:	b2da      	uxtb	r2, r3
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	2204      	movs	r2, #4
 80080b6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80080ba:	2300      	movs	r3, #0
}
 80080bc:	4618      	mov	r0, r3
 80080be:	370c      	adds	r7, #12
 80080c0:	46bd      	mov	sp, r7
 80080c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c6:	4770      	bx	lr

080080c8 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80080c8:	b480      	push	{r7}
 80080ca:	b083      	sub	sp, #12
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80080d6:	b2db      	uxtb	r3, r3
 80080d8:	2b04      	cmp	r3, #4
 80080da:	d106      	bne.n	80080ea <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 80080e2:	b2da      	uxtb	r2, r3
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80080ea:	2300      	movs	r3, #0
}
 80080ec:	4618      	mov	r0, r3
 80080ee:	370c      	adds	r7, #12
 80080f0:	46bd      	mov	sp, r7
 80080f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f6:	4770      	bx	lr

080080f8 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80080f8:	b580      	push	{r7, lr}
 80080fa:	b082      	sub	sp, #8
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008106:	b2db      	uxtb	r3, r3
 8008108:	2b03      	cmp	r3, #3
 800810a:	d110      	bne.n	800812e <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008112:	2b00      	cmp	r3, #0
 8008114:	d00b      	beq.n	800812e <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800811c:	69db      	ldr	r3, [r3, #28]
 800811e:	2b00      	cmp	r3, #0
 8008120:	d005      	beq.n	800812e <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008128:	69db      	ldr	r3, [r3, #28]
 800812a:	6878      	ldr	r0, [r7, #4]
 800812c:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800812e:	2300      	movs	r3, #0
}
 8008130:	4618      	mov	r0, r3
 8008132:	3708      	adds	r7, #8
 8008134:	46bd      	mov	sp, r7
 8008136:	bd80      	pop	{r7, pc}

08008138 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008138:	b580      	push	{r7, lr}
 800813a:	b082      	sub	sp, #8
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
 8008140:	460b      	mov	r3, r1
 8008142:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	32ae      	adds	r2, #174	@ 0xae
 800814e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008152:	2b00      	cmp	r3, #0
 8008154:	d101      	bne.n	800815a <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8008156:	2303      	movs	r3, #3
 8008158:	e01c      	b.n	8008194 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008160:	b2db      	uxtb	r3, r3
 8008162:	2b03      	cmp	r3, #3
 8008164:	d115      	bne.n	8008192 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	32ae      	adds	r2, #174	@ 0xae
 8008170:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008174:	6a1b      	ldr	r3, [r3, #32]
 8008176:	2b00      	cmp	r3, #0
 8008178:	d00b      	beq.n	8008192 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	32ae      	adds	r2, #174	@ 0xae
 8008184:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008188:	6a1b      	ldr	r3, [r3, #32]
 800818a:	78fa      	ldrb	r2, [r7, #3]
 800818c:	4611      	mov	r1, r2
 800818e:	6878      	ldr	r0, [r7, #4]
 8008190:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008192:	2300      	movs	r3, #0
}
 8008194:	4618      	mov	r0, r3
 8008196:	3708      	adds	r7, #8
 8008198:	46bd      	mov	sp, r7
 800819a:	bd80      	pop	{r7, pc}

0800819c <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800819c:	b580      	push	{r7, lr}
 800819e:	b082      	sub	sp, #8
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
 80081a4:	460b      	mov	r3, r1
 80081a6:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	32ae      	adds	r2, #174	@ 0xae
 80081b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d101      	bne.n	80081be <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80081ba:	2303      	movs	r3, #3
 80081bc:	e01c      	b.n	80081f8 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80081c4:	b2db      	uxtb	r3, r3
 80081c6:	2b03      	cmp	r3, #3
 80081c8:	d115      	bne.n	80081f6 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	32ae      	adds	r2, #174	@ 0xae
 80081d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d00b      	beq.n	80081f6 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	32ae      	adds	r2, #174	@ 0xae
 80081e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081ee:	78fa      	ldrb	r2, [r7, #3]
 80081f0:	4611      	mov	r1, r2
 80081f2:	6878      	ldr	r0, [r7, #4]
 80081f4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80081f6:	2300      	movs	r3, #0
}
 80081f8:	4618      	mov	r0, r3
 80081fa:	3708      	adds	r7, #8
 80081fc:	46bd      	mov	sp, r7
 80081fe:	bd80      	pop	{r7, pc}

08008200 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008200:	b480      	push	{r7}
 8008202:	b083      	sub	sp, #12
 8008204:	af00      	add	r7, sp, #0
 8008206:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008208:	2300      	movs	r3, #0
}
 800820a:	4618      	mov	r0, r3
 800820c:	370c      	adds	r7, #12
 800820e:	46bd      	mov	sp, r7
 8008210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008214:	4770      	bx	lr

08008216 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008216:	b580      	push	{r7, lr}
 8008218:	b084      	sub	sp, #16
 800821a:	af00      	add	r7, sp, #0
 800821c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800821e:	2300      	movs	r3, #0
 8008220:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	2201      	movs	r2, #1
 8008226:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008230:	2b00      	cmp	r3, #0
 8008232:	d00e      	beq.n	8008252 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800823a:	685b      	ldr	r3, [r3, #4]
 800823c:	687a      	ldr	r2, [r7, #4]
 800823e:	6852      	ldr	r2, [r2, #4]
 8008240:	b2d2      	uxtb	r2, r2
 8008242:	4611      	mov	r1, r2
 8008244:	6878      	ldr	r0, [r7, #4]
 8008246:	4798      	blx	r3
 8008248:	4603      	mov	r3, r0
 800824a:	2b00      	cmp	r3, #0
 800824c:	d001      	beq.n	8008252 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800824e:	2303      	movs	r3, #3
 8008250:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008252:	7bfb      	ldrb	r3, [r7, #15]
}
 8008254:	4618      	mov	r0, r3
 8008256:	3710      	adds	r7, #16
 8008258:	46bd      	mov	sp, r7
 800825a:	bd80      	pop	{r7, pc}

0800825c <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800825c:	b480      	push	{r7}
 800825e:	b083      	sub	sp, #12
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
 8008264:	460b      	mov	r3, r1
 8008266:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008268:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800826a:	4618      	mov	r0, r3
 800826c:	370c      	adds	r7, #12
 800826e:	46bd      	mov	sp, r7
 8008270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008274:	4770      	bx	lr

08008276 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008276:	b480      	push	{r7}
 8008278:	b083      	sub	sp, #12
 800827a:	af00      	add	r7, sp, #0
 800827c:	6078      	str	r0, [r7, #4]
 800827e:	460b      	mov	r3, r1
 8008280:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008282:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008284:	4618      	mov	r0, r3
 8008286:	370c      	adds	r7, #12
 8008288:	46bd      	mov	sp, r7
 800828a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828e:	4770      	bx	lr

08008290 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8008290:	b580      	push	{r7, lr}
 8008292:	b086      	sub	sp, #24
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
 8008298:	460b      	mov	r3, r1
 800829a:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80082a4:	2300      	movs	r3, #0
 80082a6:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	885b      	ldrh	r3, [r3, #2]
 80082ac:	b29b      	uxth	r3, r3
 80082ae:	68fa      	ldr	r2, [r7, #12]
 80082b0:	7812      	ldrb	r2, [r2, #0]
 80082b2:	4293      	cmp	r3, r2
 80082b4:	d91f      	bls.n	80082f6 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	781b      	ldrb	r3, [r3, #0]
 80082ba:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80082bc:	e013      	b.n	80082e6 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80082be:	f107 030a 	add.w	r3, r7, #10
 80082c2:	4619      	mov	r1, r3
 80082c4:	6978      	ldr	r0, [r7, #20]
 80082c6:	f000 f81b 	bl	8008300 <USBD_GetNextDesc>
 80082ca:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80082cc:	697b      	ldr	r3, [r7, #20]
 80082ce:	785b      	ldrb	r3, [r3, #1]
 80082d0:	2b05      	cmp	r3, #5
 80082d2:	d108      	bne.n	80082e6 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80082d4:	697b      	ldr	r3, [r7, #20]
 80082d6:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80082d8:	693b      	ldr	r3, [r7, #16]
 80082da:	789b      	ldrb	r3, [r3, #2]
 80082dc:	78fa      	ldrb	r2, [r7, #3]
 80082de:	429a      	cmp	r2, r3
 80082e0:	d008      	beq.n	80082f4 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80082e2:	2300      	movs	r3, #0
 80082e4:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	885b      	ldrh	r3, [r3, #2]
 80082ea:	b29a      	uxth	r2, r3
 80082ec:	897b      	ldrh	r3, [r7, #10]
 80082ee:	429a      	cmp	r2, r3
 80082f0:	d8e5      	bhi.n	80082be <USBD_GetEpDesc+0x2e>
 80082f2:	e000      	b.n	80082f6 <USBD_GetEpDesc+0x66>
          break;
 80082f4:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80082f6:	693b      	ldr	r3, [r7, #16]
}
 80082f8:	4618      	mov	r0, r3
 80082fa:	3718      	adds	r7, #24
 80082fc:	46bd      	mov	sp, r7
 80082fe:	bd80      	pop	{r7, pc}

08008300 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008300:	b480      	push	{r7}
 8008302:	b085      	sub	sp, #20
 8008304:	af00      	add	r7, sp, #0
 8008306:	6078      	str	r0, [r7, #4]
 8008308:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800830e:	683b      	ldr	r3, [r7, #0]
 8008310:	881b      	ldrh	r3, [r3, #0]
 8008312:	68fa      	ldr	r2, [r7, #12]
 8008314:	7812      	ldrb	r2, [r2, #0]
 8008316:	4413      	add	r3, r2
 8008318:	b29a      	uxth	r2, r3
 800831a:	683b      	ldr	r3, [r7, #0]
 800831c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	781b      	ldrb	r3, [r3, #0]
 8008322:	461a      	mov	r2, r3
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	4413      	add	r3, r2
 8008328:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800832a:	68fb      	ldr	r3, [r7, #12]
}
 800832c:	4618      	mov	r0, r3
 800832e:	3714      	adds	r7, #20
 8008330:	46bd      	mov	sp, r7
 8008332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008336:	4770      	bx	lr

08008338 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008338:	b480      	push	{r7}
 800833a:	b087      	sub	sp, #28
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008344:	697b      	ldr	r3, [r7, #20]
 8008346:	781b      	ldrb	r3, [r3, #0]
 8008348:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800834a:	697b      	ldr	r3, [r7, #20]
 800834c:	3301      	adds	r3, #1
 800834e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008350:	697b      	ldr	r3, [r7, #20]
 8008352:	781b      	ldrb	r3, [r3, #0]
 8008354:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008356:	8a3b      	ldrh	r3, [r7, #16]
 8008358:	021b      	lsls	r3, r3, #8
 800835a:	b21a      	sxth	r2, r3
 800835c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008360:	4313      	orrs	r3, r2
 8008362:	b21b      	sxth	r3, r3
 8008364:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008366:	89fb      	ldrh	r3, [r7, #14]
}
 8008368:	4618      	mov	r0, r3
 800836a:	371c      	adds	r7, #28
 800836c:	46bd      	mov	sp, r7
 800836e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008372:	4770      	bx	lr

08008374 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008374:	b580      	push	{r7, lr}
 8008376:	b084      	sub	sp, #16
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]
 800837c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800837e:	2300      	movs	r3, #0
 8008380:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008382:	683b      	ldr	r3, [r7, #0]
 8008384:	781b      	ldrb	r3, [r3, #0]
 8008386:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800838a:	2b40      	cmp	r3, #64	@ 0x40
 800838c:	d005      	beq.n	800839a <USBD_StdDevReq+0x26>
 800838e:	2b40      	cmp	r3, #64	@ 0x40
 8008390:	d857      	bhi.n	8008442 <USBD_StdDevReq+0xce>
 8008392:	2b00      	cmp	r3, #0
 8008394:	d00f      	beq.n	80083b6 <USBD_StdDevReq+0x42>
 8008396:	2b20      	cmp	r3, #32
 8008398:	d153      	bne.n	8008442 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	32ae      	adds	r2, #174	@ 0xae
 80083a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083a8:	689b      	ldr	r3, [r3, #8]
 80083aa:	6839      	ldr	r1, [r7, #0]
 80083ac:	6878      	ldr	r0, [r7, #4]
 80083ae:	4798      	blx	r3
 80083b0:	4603      	mov	r3, r0
 80083b2:	73fb      	strb	r3, [r7, #15]
      break;
 80083b4:	e04a      	b.n	800844c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80083b6:	683b      	ldr	r3, [r7, #0]
 80083b8:	785b      	ldrb	r3, [r3, #1]
 80083ba:	2b09      	cmp	r3, #9
 80083bc:	d83b      	bhi.n	8008436 <USBD_StdDevReq+0xc2>
 80083be:	a201      	add	r2, pc, #4	@ (adr r2, 80083c4 <USBD_StdDevReq+0x50>)
 80083c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083c4:	08008419 	.word	0x08008419
 80083c8:	0800842d 	.word	0x0800842d
 80083cc:	08008437 	.word	0x08008437
 80083d0:	08008423 	.word	0x08008423
 80083d4:	08008437 	.word	0x08008437
 80083d8:	080083f7 	.word	0x080083f7
 80083dc:	080083ed 	.word	0x080083ed
 80083e0:	08008437 	.word	0x08008437
 80083e4:	0800840f 	.word	0x0800840f
 80083e8:	08008401 	.word	0x08008401
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80083ec:	6839      	ldr	r1, [r7, #0]
 80083ee:	6878      	ldr	r0, [r7, #4]
 80083f0:	f000 fa3e 	bl	8008870 <USBD_GetDescriptor>
          break;
 80083f4:	e024      	b.n	8008440 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80083f6:	6839      	ldr	r1, [r7, #0]
 80083f8:	6878      	ldr	r0, [r7, #4]
 80083fa:	f000 fbcd 	bl	8008b98 <USBD_SetAddress>
          break;
 80083fe:	e01f      	b.n	8008440 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008400:	6839      	ldr	r1, [r7, #0]
 8008402:	6878      	ldr	r0, [r7, #4]
 8008404:	f000 fc0c 	bl	8008c20 <USBD_SetConfig>
 8008408:	4603      	mov	r3, r0
 800840a:	73fb      	strb	r3, [r7, #15]
          break;
 800840c:	e018      	b.n	8008440 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800840e:	6839      	ldr	r1, [r7, #0]
 8008410:	6878      	ldr	r0, [r7, #4]
 8008412:	f000 fcaf 	bl	8008d74 <USBD_GetConfig>
          break;
 8008416:	e013      	b.n	8008440 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008418:	6839      	ldr	r1, [r7, #0]
 800841a:	6878      	ldr	r0, [r7, #4]
 800841c:	f000 fce0 	bl	8008de0 <USBD_GetStatus>
          break;
 8008420:	e00e      	b.n	8008440 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008422:	6839      	ldr	r1, [r7, #0]
 8008424:	6878      	ldr	r0, [r7, #4]
 8008426:	f000 fd0f 	bl	8008e48 <USBD_SetFeature>
          break;
 800842a:	e009      	b.n	8008440 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800842c:	6839      	ldr	r1, [r7, #0]
 800842e:	6878      	ldr	r0, [r7, #4]
 8008430:	f000 fd33 	bl	8008e9a <USBD_ClrFeature>
          break;
 8008434:	e004      	b.n	8008440 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8008436:	6839      	ldr	r1, [r7, #0]
 8008438:	6878      	ldr	r0, [r7, #4]
 800843a:	f000 fd8a 	bl	8008f52 <USBD_CtlError>
          break;
 800843e:	bf00      	nop
      }
      break;
 8008440:	e004      	b.n	800844c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8008442:	6839      	ldr	r1, [r7, #0]
 8008444:	6878      	ldr	r0, [r7, #4]
 8008446:	f000 fd84 	bl	8008f52 <USBD_CtlError>
      break;
 800844a:	bf00      	nop
  }

  return ret;
 800844c:	7bfb      	ldrb	r3, [r7, #15]
}
 800844e:	4618      	mov	r0, r3
 8008450:	3710      	adds	r7, #16
 8008452:	46bd      	mov	sp, r7
 8008454:	bd80      	pop	{r7, pc}
 8008456:	bf00      	nop

08008458 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008458:	b580      	push	{r7, lr}
 800845a:	b084      	sub	sp, #16
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
 8008460:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008462:	2300      	movs	r3, #0
 8008464:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008466:	683b      	ldr	r3, [r7, #0]
 8008468:	781b      	ldrb	r3, [r3, #0]
 800846a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800846e:	2b40      	cmp	r3, #64	@ 0x40
 8008470:	d005      	beq.n	800847e <USBD_StdItfReq+0x26>
 8008472:	2b40      	cmp	r3, #64	@ 0x40
 8008474:	d852      	bhi.n	800851c <USBD_StdItfReq+0xc4>
 8008476:	2b00      	cmp	r3, #0
 8008478:	d001      	beq.n	800847e <USBD_StdItfReq+0x26>
 800847a:	2b20      	cmp	r3, #32
 800847c:	d14e      	bne.n	800851c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008484:	b2db      	uxtb	r3, r3
 8008486:	3b01      	subs	r3, #1
 8008488:	2b02      	cmp	r3, #2
 800848a:	d840      	bhi.n	800850e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800848c:	683b      	ldr	r3, [r7, #0]
 800848e:	889b      	ldrh	r3, [r3, #4]
 8008490:	b2db      	uxtb	r3, r3
 8008492:	2b01      	cmp	r3, #1
 8008494:	d836      	bhi.n	8008504 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8008496:	683b      	ldr	r3, [r7, #0]
 8008498:	889b      	ldrh	r3, [r3, #4]
 800849a:	b2db      	uxtb	r3, r3
 800849c:	4619      	mov	r1, r3
 800849e:	6878      	ldr	r0, [r7, #4]
 80084a0:	f7ff fedc 	bl	800825c <USBD_CoreFindIF>
 80084a4:	4603      	mov	r3, r0
 80084a6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80084a8:	7bbb      	ldrb	r3, [r7, #14]
 80084aa:	2bff      	cmp	r3, #255	@ 0xff
 80084ac:	d01d      	beq.n	80084ea <USBD_StdItfReq+0x92>
 80084ae:	7bbb      	ldrb	r3, [r7, #14]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d11a      	bne.n	80084ea <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80084b4:	7bba      	ldrb	r2, [r7, #14]
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	32ae      	adds	r2, #174	@ 0xae
 80084ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084be:	689b      	ldr	r3, [r3, #8]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d00f      	beq.n	80084e4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80084c4:	7bba      	ldrb	r2, [r7, #14]
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80084cc:	7bba      	ldrb	r2, [r7, #14]
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	32ae      	adds	r2, #174	@ 0xae
 80084d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084d6:	689b      	ldr	r3, [r3, #8]
 80084d8:	6839      	ldr	r1, [r7, #0]
 80084da:	6878      	ldr	r0, [r7, #4]
 80084dc:	4798      	blx	r3
 80084de:	4603      	mov	r3, r0
 80084e0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80084e2:	e004      	b.n	80084ee <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80084e4:	2303      	movs	r3, #3
 80084e6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80084e8:	e001      	b.n	80084ee <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80084ea:	2303      	movs	r3, #3
 80084ec:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80084ee:	683b      	ldr	r3, [r7, #0]
 80084f0:	88db      	ldrh	r3, [r3, #6]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d110      	bne.n	8008518 <USBD_StdItfReq+0xc0>
 80084f6:	7bfb      	ldrb	r3, [r7, #15]
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d10d      	bne.n	8008518 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80084fc:	6878      	ldr	r0, [r7, #4]
 80084fe:	f000 fe06 	bl	800910e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008502:	e009      	b.n	8008518 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008504:	6839      	ldr	r1, [r7, #0]
 8008506:	6878      	ldr	r0, [r7, #4]
 8008508:	f000 fd23 	bl	8008f52 <USBD_CtlError>
          break;
 800850c:	e004      	b.n	8008518 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800850e:	6839      	ldr	r1, [r7, #0]
 8008510:	6878      	ldr	r0, [r7, #4]
 8008512:	f000 fd1e 	bl	8008f52 <USBD_CtlError>
          break;
 8008516:	e000      	b.n	800851a <USBD_StdItfReq+0xc2>
          break;
 8008518:	bf00      	nop
      }
      break;
 800851a:	e004      	b.n	8008526 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800851c:	6839      	ldr	r1, [r7, #0]
 800851e:	6878      	ldr	r0, [r7, #4]
 8008520:	f000 fd17 	bl	8008f52 <USBD_CtlError>
      break;
 8008524:	bf00      	nop
  }

  return ret;
 8008526:	7bfb      	ldrb	r3, [r7, #15]
}
 8008528:	4618      	mov	r0, r3
 800852a:	3710      	adds	r7, #16
 800852c:	46bd      	mov	sp, r7
 800852e:	bd80      	pop	{r7, pc}

08008530 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008530:	b580      	push	{r7, lr}
 8008532:	b084      	sub	sp, #16
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
 8008538:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800853a:	2300      	movs	r3, #0
 800853c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800853e:	683b      	ldr	r3, [r7, #0]
 8008540:	889b      	ldrh	r3, [r3, #4]
 8008542:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008544:	683b      	ldr	r3, [r7, #0]
 8008546:	781b      	ldrb	r3, [r3, #0]
 8008548:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800854c:	2b40      	cmp	r3, #64	@ 0x40
 800854e:	d007      	beq.n	8008560 <USBD_StdEPReq+0x30>
 8008550:	2b40      	cmp	r3, #64	@ 0x40
 8008552:	f200 8181 	bhi.w	8008858 <USBD_StdEPReq+0x328>
 8008556:	2b00      	cmp	r3, #0
 8008558:	d02a      	beq.n	80085b0 <USBD_StdEPReq+0x80>
 800855a:	2b20      	cmp	r3, #32
 800855c:	f040 817c 	bne.w	8008858 <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008560:	7bbb      	ldrb	r3, [r7, #14]
 8008562:	4619      	mov	r1, r3
 8008564:	6878      	ldr	r0, [r7, #4]
 8008566:	f7ff fe86 	bl	8008276 <USBD_CoreFindEP>
 800856a:	4603      	mov	r3, r0
 800856c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800856e:	7b7b      	ldrb	r3, [r7, #13]
 8008570:	2bff      	cmp	r3, #255	@ 0xff
 8008572:	f000 8176 	beq.w	8008862 <USBD_StdEPReq+0x332>
 8008576:	7b7b      	ldrb	r3, [r7, #13]
 8008578:	2b00      	cmp	r3, #0
 800857a:	f040 8172 	bne.w	8008862 <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 800857e:	7b7a      	ldrb	r2, [r7, #13]
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8008586:	7b7a      	ldrb	r2, [r7, #13]
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	32ae      	adds	r2, #174	@ 0xae
 800858c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008590:	689b      	ldr	r3, [r3, #8]
 8008592:	2b00      	cmp	r3, #0
 8008594:	f000 8165 	beq.w	8008862 <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008598:	7b7a      	ldrb	r2, [r7, #13]
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	32ae      	adds	r2, #174	@ 0xae
 800859e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085a2:	689b      	ldr	r3, [r3, #8]
 80085a4:	6839      	ldr	r1, [r7, #0]
 80085a6:	6878      	ldr	r0, [r7, #4]
 80085a8:	4798      	blx	r3
 80085aa:	4603      	mov	r3, r0
 80085ac:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80085ae:	e158      	b.n	8008862 <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80085b0:	683b      	ldr	r3, [r7, #0]
 80085b2:	785b      	ldrb	r3, [r3, #1]
 80085b4:	2b03      	cmp	r3, #3
 80085b6:	d008      	beq.n	80085ca <USBD_StdEPReq+0x9a>
 80085b8:	2b03      	cmp	r3, #3
 80085ba:	f300 8147 	bgt.w	800884c <USBD_StdEPReq+0x31c>
 80085be:	2b00      	cmp	r3, #0
 80085c0:	f000 809b 	beq.w	80086fa <USBD_StdEPReq+0x1ca>
 80085c4:	2b01      	cmp	r3, #1
 80085c6:	d03c      	beq.n	8008642 <USBD_StdEPReq+0x112>
 80085c8:	e140      	b.n	800884c <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80085d0:	b2db      	uxtb	r3, r3
 80085d2:	2b02      	cmp	r3, #2
 80085d4:	d002      	beq.n	80085dc <USBD_StdEPReq+0xac>
 80085d6:	2b03      	cmp	r3, #3
 80085d8:	d016      	beq.n	8008608 <USBD_StdEPReq+0xd8>
 80085da:	e02c      	b.n	8008636 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80085dc:	7bbb      	ldrb	r3, [r7, #14]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d00d      	beq.n	80085fe <USBD_StdEPReq+0xce>
 80085e2:	7bbb      	ldrb	r3, [r7, #14]
 80085e4:	2b80      	cmp	r3, #128	@ 0x80
 80085e6:	d00a      	beq.n	80085fe <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80085e8:	7bbb      	ldrb	r3, [r7, #14]
 80085ea:	4619      	mov	r1, r3
 80085ec:	6878      	ldr	r0, [r7, #4]
 80085ee:	f001 f9eb 	bl	80099c8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80085f2:	2180      	movs	r1, #128	@ 0x80
 80085f4:	6878      	ldr	r0, [r7, #4]
 80085f6:	f001 f9e7 	bl	80099c8 <USBD_LL_StallEP>
 80085fa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80085fc:	e020      	b.n	8008640 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80085fe:	6839      	ldr	r1, [r7, #0]
 8008600:	6878      	ldr	r0, [r7, #4]
 8008602:	f000 fca6 	bl	8008f52 <USBD_CtlError>
              break;
 8008606:	e01b      	b.n	8008640 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008608:	683b      	ldr	r3, [r7, #0]
 800860a:	885b      	ldrh	r3, [r3, #2]
 800860c:	2b00      	cmp	r3, #0
 800860e:	d10e      	bne.n	800862e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008610:	7bbb      	ldrb	r3, [r7, #14]
 8008612:	2b00      	cmp	r3, #0
 8008614:	d00b      	beq.n	800862e <USBD_StdEPReq+0xfe>
 8008616:	7bbb      	ldrb	r3, [r7, #14]
 8008618:	2b80      	cmp	r3, #128	@ 0x80
 800861a:	d008      	beq.n	800862e <USBD_StdEPReq+0xfe>
 800861c:	683b      	ldr	r3, [r7, #0]
 800861e:	88db      	ldrh	r3, [r3, #6]
 8008620:	2b00      	cmp	r3, #0
 8008622:	d104      	bne.n	800862e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008624:	7bbb      	ldrb	r3, [r7, #14]
 8008626:	4619      	mov	r1, r3
 8008628:	6878      	ldr	r0, [r7, #4]
 800862a:	f001 f9cd 	bl	80099c8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800862e:	6878      	ldr	r0, [r7, #4]
 8008630:	f000 fd6d 	bl	800910e <USBD_CtlSendStatus>

              break;
 8008634:	e004      	b.n	8008640 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8008636:	6839      	ldr	r1, [r7, #0]
 8008638:	6878      	ldr	r0, [r7, #4]
 800863a:	f000 fc8a 	bl	8008f52 <USBD_CtlError>
              break;
 800863e:	bf00      	nop
          }
          break;
 8008640:	e109      	b.n	8008856 <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008648:	b2db      	uxtb	r3, r3
 800864a:	2b02      	cmp	r3, #2
 800864c:	d002      	beq.n	8008654 <USBD_StdEPReq+0x124>
 800864e:	2b03      	cmp	r3, #3
 8008650:	d016      	beq.n	8008680 <USBD_StdEPReq+0x150>
 8008652:	e04b      	b.n	80086ec <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008654:	7bbb      	ldrb	r3, [r7, #14]
 8008656:	2b00      	cmp	r3, #0
 8008658:	d00d      	beq.n	8008676 <USBD_StdEPReq+0x146>
 800865a:	7bbb      	ldrb	r3, [r7, #14]
 800865c:	2b80      	cmp	r3, #128	@ 0x80
 800865e:	d00a      	beq.n	8008676 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008660:	7bbb      	ldrb	r3, [r7, #14]
 8008662:	4619      	mov	r1, r3
 8008664:	6878      	ldr	r0, [r7, #4]
 8008666:	f001 f9af 	bl	80099c8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800866a:	2180      	movs	r1, #128	@ 0x80
 800866c:	6878      	ldr	r0, [r7, #4]
 800866e:	f001 f9ab 	bl	80099c8 <USBD_LL_StallEP>
 8008672:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008674:	e040      	b.n	80086f8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8008676:	6839      	ldr	r1, [r7, #0]
 8008678:	6878      	ldr	r0, [r7, #4]
 800867a:	f000 fc6a 	bl	8008f52 <USBD_CtlError>
              break;
 800867e:	e03b      	b.n	80086f8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008680:	683b      	ldr	r3, [r7, #0]
 8008682:	885b      	ldrh	r3, [r3, #2]
 8008684:	2b00      	cmp	r3, #0
 8008686:	d136      	bne.n	80086f6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008688:	7bbb      	ldrb	r3, [r7, #14]
 800868a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800868e:	2b00      	cmp	r3, #0
 8008690:	d004      	beq.n	800869c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008692:	7bbb      	ldrb	r3, [r7, #14]
 8008694:	4619      	mov	r1, r3
 8008696:	6878      	ldr	r0, [r7, #4]
 8008698:	f001 f9b5 	bl	8009a06 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800869c:	6878      	ldr	r0, [r7, #4]
 800869e:	f000 fd36 	bl	800910e <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80086a2:	7bbb      	ldrb	r3, [r7, #14]
 80086a4:	4619      	mov	r1, r3
 80086a6:	6878      	ldr	r0, [r7, #4]
 80086a8:	f7ff fde5 	bl	8008276 <USBD_CoreFindEP>
 80086ac:	4603      	mov	r3, r0
 80086ae:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80086b0:	7b7b      	ldrb	r3, [r7, #13]
 80086b2:	2bff      	cmp	r3, #255	@ 0xff
 80086b4:	d01f      	beq.n	80086f6 <USBD_StdEPReq+0x1c6>
 80086b6:	7b7b      	ldrb	r3, [r7, #13]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d11c      	bne.n	80086f6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80086bc:	7b7a      	ldrb	r2, [r7, #13]
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80086c4:	7b7a      	ldrb	r2, [r7, #13]
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	32ae      	adds	r2, #174	@ 0xae
 80086ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086ce:	689b      	ldr	r3, [r3, #8]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d010      	beq.n	80086f6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80086d4:	7b7a      	ldrb	r2, [r7, #13]
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	32ae      	adds	r2, #174	@ 0xae
 80086da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086de:	689b      	ldr	r3, [r3, #8]
 80086e0:	6839      	ldr	r1, [r7, #0]
 80086e2:	6878      	ldr	r0, [r7, #4]
 80086e4:	4798      	blx	r3
 80086e6:	4603      	mov	r3, r0
 80086e8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80086ea:	e004      	b.n	80086f6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80086ec:	6839      	ldr	r1, [r7, #0]
 80086ee:	6878      	ldr	r0, [r7, #4]
 80086f0:	f000 fc2f 	bl	8008f52 <USBD_CtlError>
              break;
 80086f4:	e000      	b.n	80086f8 <USBD_StdEPReq+0x1c8>
              break;
 80086f6:	bf00      	nop
          }
          break;
 80086f8:	e0ad      	b.n	8008856 <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008700:	b2db      	uxtb	r3, r3
 8008702:	2b02      	cmp	r3, #2
 8008704:	d002      	beq.n	800870c <USBD_StdEPReq+0x1dc>
 8008706:	2b03      	cmp	r3, #3
 8008708:	d033      	beq.n	8008772 <USBD_StdEPReq+0x242>
 800870a:	e099      	b.n	8008840 <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800870c:	7bbb      	ldrb	r3, [r7, #14]
 800870e:	2b00      	cmp	r3, #0
 8008710:	d007      	beq.n	8008722 <USBD_StdEPReq+0x1f2>
 8008712:	7bbb      	ldrb	r3, [r7, #14]
 8008714:	2b80      	cmp	r3, #128	@ 0x80
 8008716:	d004      	beq.n	8008722 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008718:	6839      	ldr	r1, [r7, #0]
 800871a:	6878      	ldr	r0, [r7, #4]
 800871c:	f000 fc19 	bl	8008f52 <USBD_CtlError>
                break;
 8008720:	e093      	b.n	800884a <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008722:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008726:	2b00      	cmp	r3, #0
 8008728:	da0b      	bge.n	8008742 <USBD_StdEPReq+0x212>
 800872a:	7bbb      	ldrb	r3, [r7, #14]
 800872c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008730:	4613      	mov	r3, r2
 8008732:	009b      	lsls	r3, r3, #2
 8008734:	4413      	add	r3, r2
 8008736:	009b      	lsls	r3, r3, #2
 8008738:	3310      	adds	r3, #16
 800873a:	687a      	ldr	r2, [r7, #4]
 800873c:	4413      	add	r3, r2
 800873e:	3304      	adds	r3, #4
 8008740:	e00b      	b.n	800875a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008742:	7bbb      	ldrb	r3, [r7, #14]
 8008744:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008748:	4613      	mov	r3, r2
 800874a:	009b      	lsls	r3, r3, #2
 800874c:	4413      	add	r3, r2
 800874e:	009b      	lsls	r3, r3, #2
 8008750:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008754:	687a      	ldr	r2, [r7, #4]
 8008756:	4413      	add	r3, r2
 8008758:	3304      	adds	r3, #4
 800875a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800875c:	68bb      	ldr	r3, [r7, #8]
 800875e:	2200      	movs	r2, #0
 8008760:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008762:	68bb      	ldr	r3, [r7, #8]
 8008764:	330e      	adds	r3, #14
 8008766:	2202      	movs	r2, #2
 8008768:	4619      	mov	r1, r3
 800876a:	6878      	ldr	r0, [r7, #4]
 800876c:	f000 fc6e 	bl	800904c <USBD_CtlSendData>
              break;
 8008770:	e06b      	b.n	800884a <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008772:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008776:	2b00      	cmp	r3, #0
 8008778:	da11      	bge.n	800879e <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800877a:	7bbb      	ldrb	r3, [r7, #14]
 800877c:	f003 020f 	and.w	r2, r3, #15
 8008780:	6879      	ldr	r1, [r7, #4]
 8008782:	4613      	mov	r3, r2
 8008784:	009b      	lsls	r3, r3, #2
 8008786:	4413      	add	r3, r2
 8008788:	009b      	lsls	r3, r3, #2
 800878a:	440b      	add	r3, r1
 800878c:	3323      	adds	r3, #35	@ 0x23
 800878e:	781b      	ldrb	r3, [r3, #0]
 8008790:	2b00      	cmp	r3, #0
 8008792:	d117      	bne.n	80087c4 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 8008794:	6839      	ldr	r1, [r7, #0]
 8008796:	6878      	ldr	r0, [r7, #4]
 8008798:	f000 fbdb 	bl	8008f52 <USBD_CtlError>
                  break;
 800879c:	e055      	b.n	800884a <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800879e:	7bbb      	ldrb	r3, [r7, #14]
 80087a0:	f003 020f 	and.w	r2, r3, #15
 80087a4:	6879      	ldr	r1, [r7, #4]
 80087a6:	4613      	mov	r3, r2
 80087a8:	009b      	lsls	r3, r3, #2
 80087aa:	4413      	add	r3, r2
 80087ac:	009b      	lsls	r3, r3, #2
 80087ae:	440b      	add	r3, r1
 80087b0:	f203 1363 	addw	r3, r3, #355	@ 0x163
 80087b4:	781b      	ldrb	r3, [r3, #0]
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d104      	bne.n	80087c4 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 80087ba:	6839      	ldr	r1, [r7, #0]
 80087bc:	6878      	ldr	r0, [r7, #4]
 80087be:	f000 fbc8 	bl	8008f52 <USBD_CtlError>
                  break;
 80087c2:	e042      	b.n	800884a <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80087c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	da0b      	bge.n	80087e4 <USBD_StdEPReq+0x2b4>
 80087cc:	7bbb      	ldrb	r3, [r7, #14]
 80087ce:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80087d2:	4613      	mov	r3, r2
 80087d4:	009b      	lsls	r3, r3, #2
 80087d6:	4413      	add	r3, r2
 80087d8:	009b      	lsls	r3, r3, #2
 80087da:	3310      	adds	r3, #16
 80087dc:	687a      	ldr	r2, [r7, #4]
 80087de:	4413      	add	r3, r2
 80087e0:	3304      	adds	r3, #4
 80087e2:	e00b      	b.n	80087fc <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80087e4:	7bbb      	ldrb	r3, [r7, #14]
 80087e6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80087ea:	4613      	mov	r3, r2
 80087ec:	009b      	lsls	r3, r3, #2
 80087ee:	4413      	add	r3, r2
 80087f0:	009b      	lsls	r3, r3, #2
 80087f2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80087f6:	687a      	ldr	r2, [r7, #4]
 80087f8:	4413      	add	r3, r2
 80087fa:	3304      	adds	r3, #4
 80087fc:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80087fe:	7bbb      	ldrb	r3, [r7, #14]
 8008800:	2b00      	cmp	r3, #0
 8008802:	d002      	beq.n	800880a <USBD_StdEPReq+0x2da>
 8008804:	7bbb      	ldrb	r3, [r7, #14]
 8008806:	2b80      	cmp	r3, #128	@ 0x80
 8008808:	d103      	bne.n	8008812 <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 800880a:	68bb      	ldr	r3, [r7, #8]
 800880c:	2200      	movs	r2, #0
 800880e:	739a      	strb	r2, [r3, #14]
 8008810:	e00e      	b.n	8008830 <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008812:	7bbb      	ldrb	r3, [r7, #14]
 8008814:	4619      	mov	r1, r3
 8008816:	6878      	ldr	r0, [r7, #4]
 8008818:	f001 f914 	bl	8009a44 <USBD_LL_IsStallEP>
 800881c:	4603      	mov	r3, r0
 800881e:	2b00      	cmp	r3, #0
 8008820:	d003      	beq.n	800882a <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 8008822:	68bb      	ldr	r3, [r7, #8]
 8008824:	2201      	movs	r2, #1
 8008826:	739a      	strb	r2, [r3, #14]
 8008828:	e002      	b.n	8008830 <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 800882a:	68bb      	ldr	r3, [r7, #8]
 800882c:	2200      	movs	r2, #0
 800882e:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008830:	68bb      	ldr	r3, [r7, #8]
 8008832:	330e      	adds	r3, #14
 8008834:	2202      	movs	r2, #2
 8008836:	4619      	mov	r1, r3
 8008838:	6878      	ldr	r0, [r7, #4]
 800883a:	f000 fc07 	bl	800904c <USBD_CtlSendData>
              break;
 800883e:	e004      	b.n	800884a <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 8008840:	6839      	ldr	r1, [r7, #0]
 8008842:	6878      	ldr	r0, [r7, #4]
 8008844:	f000 fb85 	bl	8008f52 <USBD_CtlError>
              break;
 8008848:	bf00      	nop
          }
          break;
 800884a:	e004      	b.n	8008856 <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 800884c:	6839      	ldr	r1, [r7, #0]
 800884e:	6878      	ldr	r0, [r7, #4]
 8008850:	f000 fb7f 	bl	8008f52 <USBD_CtlError>
          break;
 8008854:	bf00      	nop
      }
      break;
 8008856:	e005      	b.n	8008864 <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 8008858:	6839      	ldr	r1, [r7, #0]
 800885a:	6878      	ldr	r0, [r7, #4]
 800885c:	f000 fb79 	bl	8008f52 <USBD_CtlError>
      break;
 8008860:	e000      	b.n	8008864 <USBD_StdEPReq+0x334>
      break;
 8008862:	bf00      	nop
  }

  return ret;
 8008864:	7bfb      	ldrb	r3, [r7, #15]
}
 8008866:	4618      	mov	r0, r3
 8008868:	3710      	adds	r7, #16
 800886a:	46bd      	mov	sp, r7
 800886c:	bd80      	pop	{r7, pc}
	...

08008870 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008870:	b580      	push	{r7, lr}
 8008872:	b084      	sub	sp, #16
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]
 8008878:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800887a:	2300      	movs	r3, #0
 800887c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800887e:	2300      	movs	r3, #0
 8008880:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008882:	2300      	movs	r3, #0
 8008884:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008886:	683b      	ldr	r3, [r7, #0]
 8008888:	885b      	ldrh	r3, [r3, #2]
 800888a:	0a1b      	lsrs	r3, r3, #8
 800888c:	b29b      	uxth	r3, r3
 800888e:	3b01      	subs	r3, #1
 8008890:	2b0e      	cmp	r3, #14
 8008892:	f200 8152 	bhi.w	8008b3a <USBD_GetDescriptor+0x2ca>
 8008896:	a201      	add	r2, pc, #4	@ (adr r2, 800889c <USBD_GetDescriptor+0x2c>)
 8008898:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800889c:	0800890d 	.word	0x0800890d
 80088a0:	08008925 	.word	0x08008925
 80088a4:	08008965 	.word	0x08008965
 80088a8:	08008b3b 	.word	0x08008b3b
 80088ac:	08008b3b 	.word	0x08008b3b
 80088b0:	08008adb 	.word	0x08008adb
 80088b4:	08008b07 	.word	0x08008b07
 80088b8:	08008b3b 	.word	0x08008b3b
 80088bc:	08008b3b 	.word	0x08008b3b
 80088c0:	08008b3b 	.word	0x08008b3b
 80088c4:	08008b3b 	.word	0x08008b3b
 80088c8:	08008b3b 	.word	0x08008b3b
 80088cc:	08008b3b 	.word	0x08008b3b
 80088d0:	08008b3b 	.word	0x08008b3b
 80088d4:	080088d9 	.word	0x080088d9
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80088de:	69db      	ldr	r3, [r3, #28]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d00b      	beq.n	80088fc <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80088ea:	69db      	ldr	r3, [r3, #28]
 80088ec:	687a      	ldr	r2, [r7, #4]
 80088ee:	7c12      	ldrb	r2, [r2, #16]
 80088f0:	f107 0108 	add.w	r1, r7, #8
 80088f4:	4610      	mov	r0, r2
 80088f6:	4798      	blx	r3
 80088f8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80088fa:	e126      	b.n	8008b4a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80088fc:	6839      	ldr	r1, [r7, #0]
 80088fe:	6878      	ldr	r0, [r7, #4]
 8008900:	f000 fb27 	bl	8008f52 <USBD_CtlError>
        err++;
 8008904:	7afb      	ldrb	r3, [r7, #11]
 8008906:	3301      	adds	r3, #1
 8008908:	72fb      	strb	r3, [r7, #11]
      break;
 800890a:	e11e      	b.n	8008b4a <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	687a      	ldr	r2, [r7, #4]
 8008916:	7c12      	ldrb	r2, [r2, #16]
 8008918:	f107 0108 	add.w	r1, r7, #8
 800891c:	4610      	mov	r0, r2
 800891e:	4798      	blx	r3
 8008920:	60f8      	str	r0, [r7, #12]
      break;
 8008922:	e112      	b.n	8008b4a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	7c1b      	ldrb	r3, [r3, #16]
 8008928:	2b00      	cmp	r3, #0
 800892a:	d10d      	bne.n	8008948 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008932:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008934:	f107 0208 	add.w	r2, r7, #8
 8008938:	4610      	mov	r0, r2
 800893a:	4798      	blx	r3
 800893c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	3301      	adds	r3, #1
 8008942:	2202      	movs	r2, #2
 8008944:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008946:	e100      	b.n	8008b4a <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800894e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008950:	f107 0208 	add.w	r2, r7, #8
 8008954:	4610      	mov	r0, r2
 8008956:	4798      	blx	r3
 8008958:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	3301      	adds	r3, #1
 800895e:	2202      	movs	r2, #2
 8008960:	701a      	strb	r2, [r3, #0]
      break;
 8008962:	e0f2      	b.n	8008b4a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008964:	683b      	ldr	r3, [r7, #0]
 8008966:	885b      	ldrh	r3, [r3, #2]
 8008968:	b2db      	uxtb	r3, r3
 800896a:	2b05      	cmp	r3, #5
 800896c:	f200 80ac 	bhi.w	8008ac8 <USBD_GetDescriptor+0x258>
 8008970:	a201      	add	r2, pc, #4	@ (adr r2, 8008978 <USBD_GetDescriptor+0x108>)
 8008972:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008976:	bf00      	nop
 8008978:	08008991 	.word	0x08008991
 800897c:	080089c5 	.word	0x080089c5
 8008980:	080089f9 	.word	0x080089f9
 8008984:	08008a2d 	.word	0x08008a2d
 8008988:	08008a61 	.word	0x08008a61
 800898c:	08008a95 	.word	0x08008a95
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008996:	685b      	ldr	r3, [r3, #4]
 8008998:	2b00      	cmp	r3, #0
 800899a:	d00b      	beq.n	80089b4 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80089a2:	685b      	ldr	r3, [r3, #4]
 80089a4:	687a      	ldr	r2, [r7, #4]
 80089a6:	7c12      	ldrb	r2, [r2, #16]
 80089a8:	f107 0108 	add.w	r1, r7, #8
 80089ac:	4610      	mov	r0, r2
 80089ae:	4798      	blx	r3
 80089b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80089b2:	e091      	b.n	8008ad8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80089b4:	6839      	ldr	r1, [r7, #0]
 80089b6:	6878      	ldr	r0, [r7, #4]
 80089b8:	f000 facb 	bl	8008f52 <USBD_CtlError>
            err++;
 80089bc:	7afb      	ldrb	r3, [r7, #11]
 80089be:	3301      	adds	r3, #1
 80089c0:	72fb      	strb	r3, [r7, #11]
          break;
 80089c2:	e089      	b.n	8008ad8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80089ca:	689b      	ldr	r3, [r3, #8]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d00b      	beq.n	80089e8 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80089d6:	689b      	ldr	r3, [r3, #8]
 80089d8:	687a      	ldr	r2, [r7, #4]
 80089da:	7c12      	ldrb	r2, [r2, #16]
 80089dc:	f107 0108 	add.w	r1, r7, #8
 80089e0:	4610      	mov	r0, r2
 80089e2:	4798      	blx	r3
 80089e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80089e6:	e077      	b.n	8008ad8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80089e8:	6839      	ldr	r1, [r7, #0]
 80089ea:	6878      	ldr	r0, [r7, #4]
 80089ec:	f000 fab1 	bl	8008f52 <USBD_CtlError>
            err++;
 80089f0:	7afb      	ldrb	r3, [r7, #11]
 80089f2:	3301      	adds	r3, #1
 80089f4:	72fb      	strb	r3, [r7, #11]
          break;
 80089f6:	e06f      	b.n	8008ad8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80089fe:	68db      	ldr	r3, [r3, #12]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d00b      	beq.n	8008a1c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008a0a:	68db      	ldr	r3, [r3, #12]
 8008a0c:	687a      	ldr	r2, [r7, #4]
 8008a0e:	7c12      	ldrb	r2, [r2, #16]
 8008a10:	f107 0108 	add.w	r1, r7, #8
 8008a14:	4610      	mov	r0, r2
 8008a16:	4798      	blx	r3
 8008a18:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008a1a:	e05d      	b.n	8008ad8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008a1c:	6839      	ldr	r1, [r7, #0]
 8008a1e:	6878      	ldr	r0, [r7, #4]
 8008a20:	f000 fa97 	bl	8008f52 <USBD_CtlError>
            err++;
 8008a24:	7afb      	ldrb	r3, [r7, #11]
 8008a26:	3301      	adds	r3, #1
 8008a28:	72fb      	strb	r3, [r7, #11]
          break;
 8008a2a:	e055      	b.n	8008ad8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008a32:	691b      	ldr	r3, [r3, #16]
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d00b      	beq.n	8008a50 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008a3e:	691b      	ldr	r3, [r3, #16]
 8008a40:	687a      	ldr	r2, [r7, #4]
 8008a42:	7c12      	ldrb	r2, [r2, #16]
 8008a44:	f107 0108 	add.w	r1, r7, #8
 8008a48:	4610      	mov	r0, r2
 8008a4a:	4798      	blx	r3
 8008a4c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008a4e:	e043      	b.n	8008ad8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008a50:	6839      	ldr	r1, [r7, #0]
 8008a52:	6878      	ldr	r0, [r7, #4]
 8008a54:	f000 fa7d 	bl	8008f52 <USBD_CtlError>
            err++;
 8008a58:	7afb      	ldrb	r3, [r7, #11]
 8008a5a:	3301      	adds	r3, #1
 8008a5c:	72fb      	strb	r3, [r7, #11]
          break;
 8008a5e:	e03b      	b.n	8008ad8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008a66:	695b      	ldr	r3, [r3, #20]
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d00b      	beq.n	8008a84 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008a72:	695b      	ldr	r3, [r3, #20]
 8008a74:	687a      	ldr	r2, [r7, #4]
 8008a76:	7c12      	ldrb	r2, [r2, #16]
 8008a78:	f107 0108 	add.w	r1, r7, #8
 8008a7c:	4610      	mov	r0, r2
 8008a7e:	4798      	blx	r3
 8008a80:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008a82:	e029      	b.n	8008ad8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008a84:	6839      	ldr	r1, [r7, #0]
 8008a86:	6878      	ldr	r0, [r7, #4]
 8008a88:	f000 fa63 	bl	8008f52 <USBD_CtlError>
            err++;
 8008a8c:	7afb      	ldrb	r3, [r7, #11]
 8008a8e:	3301      	adds	r3, #1
 8008a90:	72fb      	strb	r3, [r7, #11]
          break;
 8008a92:	e021      	b.n	8008ad8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008a9a:	699b      	ldr	r3, [r3, #24]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d00b      	beq.n	8008ab8 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008aa6:	699b      	ldr	r3, [r3, #24]
 8008aa8:	687a      	ldr	r2, [r7, #4]
 8008aaa:	7c12      	ldrb	r2, [r2, #16]
 8008aac:	f107 0108 	add.w	r1, r7, #8
 8008ab0:	4610      	mov	r0, r2
 8008ab2:	4798      	blx	r3
 8008ab4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008ab6:	e00f      	b.n	8008ad8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008ab8:	6839      	ldr	r1, [r7, #0]
 8008aba:	6878      	ldr	r0, [r7, #4]
 8008abc:	f000 fa49 	bl	8008f52 <USBD_CtlError>
            err++;
 8008ac0:	7afb      	ldrb	r3, [r7, #11]
 8008ac2:	3301      	adds	r3, #1
 8008ac4:	72fb      	strb	r3, [r7, #11]
          break;
 8008ac6:	e007      	b.n	8008ad8 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008ac8:	6839      	ldr	r1, [r7, #0]
 8008aca:	6878      	ldr	r0, [r7, #4]
 8008acc:	f000 fa41 	bl	8008f52 <USBD_CtlError>
          err++;
 8008ad0:	7afb      	ldrb	r3, [r7, #11]
 8008ad2:	3301      	adds	r3, #1
 8008ad4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8008ad6:	bf00      	nop
      }
      break;
 8008ad8:	e037      	b.n	8008b4a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	7c1b      	ldrb	r3, [r3, #16]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d109      	bne.n	8008af6 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008ae8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008aea:	f107 0208 	add.w	r2, r7, #8
 8008aee:	4610      	mov	r0, r2
 8008af0:	4798      	blx	r3
 8008af2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008af4:	e029      	b.n	8008b4a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008af6:	6839      	ldr	r1, [r7, #0]
 8008af8:	6878      	ldr	r0, [r7, #4]
 8008afa:	f000 fa2a 	bl	8008f52 <USBD_CtlError>
        err++;
 8008afe:	7afb      	ldrb	r3, [r7, #11]
 8008b00:	3301      	adds	r3, #1
 8008b02:	72fb      	strb	r3, [r7, #11]
      break;
 8008b04:	e021      	b.n	8008b4a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	7c1b      	ldrb	r3, [r3, #16]
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d10d      	bne.n	8008b2a <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b16:	f107 0208 	add.w	r2, r7, #8
 8008b1a:	4610      	mov	r0, r2
 8008b1c:	4798      	blx	r3
 8008b1e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	3301      	adds	r3, #1
 8008b24:	2207      	movs	r2, #7
 8008b26:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008b28:	e00f      	b.n	8008b4a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008b2a:	6839      	ldr	r1, [r7, #0]
 8008b2c:	6878      	ldr	r0, [r7, #4]
 8008b2e:	f000 fa10 	bl	8008f52 <USBD_CtlError>
        err++;
 8008b32:	7afb      	ldrb	r3, [r7, #11]
 8008b34:	3301      	adds	r3, #1
 8008b36:	72fb      	strb	r3, [r7, #11]
      break;
 8008b38:	e007      	b.n	8008b4a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8008b3a:	6839      	ldr	r1, [r7, #0]
 8008b3c:	6878      	ldr	r0, [r7, #4]
 8008b3e:	f000 fa08 	bl	8008f52 <USBD_CtlError>
      err++;
 8008b42:	7afb      	ldrb	r3, [r7, #11]
 8008b44:	3301      	adds	r3, #1
 8008b46:	72fb      	strb	r3, [r7, #11]
      break;
 8008b48:	bf00      	nop
  }

  if (err != 0U)
 8008b4a:	7afb      	ldrb	r3, [r7, #11]
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d11e      	bne.n	8008b8e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8008b50:	683b      	ldr	r3, [r7, #0]
 8008b52:	88db      	ldrh	r3, [r3, #6]
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d016      	beq.n	8008b86 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8008b58:	893b      	ldrh	r3, [r7, #8]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d00e      	beq.n	8008b7c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8008b5e:	683b      	ldr	r3, [r7, #0]
 8008b60:	88da      	ldrh	r2, [r3, #6]
 8008b62:	893b      	ldrh	r3, [r7, #8]
 8008b64:	4293      	cmp	r3, r2
 8008b66:	bf28      	it	cs
 8008b68:	4613      	movcs	r3, r2
 8008b6a:	b29b      	uxth	r3, r3
 8008b6c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008b6e:	893b      	ldrh	r3, [r7, #8]
 8008b70:	461a      	mov	r2, r3
 8008b72:	68f9      	ldr	r1, [r7, #12]
 8008b74:	6878      	ldr	r0, [r7, #4]
 8008b76:	f000 fa69 	bl	800904c <USBD_CtlSendData>
 8008b7a:	e009      	b.n	8008b90 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008b7c:	6839      	ldr	r1, [r7, #0]
 8008b7e:	6878      	ldr	r0, [r7, #4]
 8008b80:	f000 f9e7 	bl	8008f52 <USBD_CtlError>
 8008b84:	e004      	b.n	8008b90 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008b86:	6878      	ldr	r0, [r7, #4]
 8008b88:	f000 fac1 	bl	800910e <USBD_CtlSendStatus>
 8008b8c:	e000      	b.n	8008b90 <USBD_GetDescriptor+0x320>
    return;
 8008b8e:	bf00      	nop
  }
}
 8008b90:	3710      	adds	r7, #16
 8008b92:	46bd      	mov	sp, r7
 8008b94:	bd80      	pop	{r7, pc}
 8008b96:	bf00      	nop

08008b98 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b98:	b580      	push	{r7, lr}
 8008b9a:	b084      	sub	sp, #16
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	6078      	str	r0, [r7, #4]
 8008ba0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008ba2:	683b      	ldr	r3, [r7, #0]
 8008ba4:	889b      	ldrh	r3, [r3, #4]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d131      	bne.n	8008c0e <USBD_SetAddress+0x76>
 8008baa:	683b      	ldr	r3, [r7, #0]
 8008bac:	88db      	ldrh	r3, [r3, #6]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d12d      	bne.n	8008c0e <USBD_SetAddress+0x76>
 8008bb2:	683b      	ldr	r3, [r7, #0]
 8008bb4:	885b      	ldrh	r3, [r3, #2]
 8008bb6:	2b7f      	cmp	r3, #127	@ 0x7f
 8008bb8:	d829      	bhi.n	8008c0e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008bba:	683b      	ldr	r3, [r7, #0]
 8008bbc:	885b      	ldrh	r3, [r3, #2]
 8008bbe:	b2db      	uxtb	r3, r3
 8008bc0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008bc4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008bcc:	b2db      	uxtb	r3, r3
 8008bce:	2b03      	cmp	r3, #3
 8008bd0:	d104      	bne.n	8008bdc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008bd2:	6839      	ldr	r1, [r7, #0]
 8008bd4:	6878      	ldr	r0, [r7, #4]
 8008bd6:	f000 f9bc 	bl	8008f52 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008bda:	e01d      	b.n	8008c18 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	7bfa      	ldrb	r2, [r7, #15]
 8008be0:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008be4:	7bfb      	ldrb	r3, [r7, #15]
 8008be6:	4619      	mov	r1, r3
 8008be8:	6878      	ldr	r0, [r7, #4]
 8008bea:	f000 ff57 	bl	8009a9c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008bee:	6878      	ldr	r0, [r7, #4]
 8008bf0:	f000 fa8d 	bl	800910e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008bf4:	7bfb      	ldrb	r3, [r7, #15]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d004      	beq.n	8008c04 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	2202      	movs	r2, #2
 8008bfe:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c02:	e009      	b.n	8008c18 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	2201      	movs	r2, #1
 8008c08:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c0c:	e004      	b.n	8008c18 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008c0e:	6839      	ldr	r1, [r7, #0]
 8008c10:	6878      	ldr	r0, [r7, #4]
 8008c12:	f000 f99e 	bl	8008f52 <USBD_CtlError>
  }
}
 8008c16:	bf00      	nop
 8008c18:	bf00      	nop
 8008c1a:	3710      	adds	r7, #16
 8008c1c:	46bd      	mov	sp, r7
 8008c1e:	bd80      	pop	{r7, pc}

08008c20 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c20:	b580      	push	{r7, lr}
 8008c22:	b084      	sub	sp, #16
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	6078      	str	r0, [r7, #4]
 8008c28:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008c2e:	683b      	ldr	r3, [r7, #0]
 8008c30:	885b      	ldrh	r3, [r3, #2]
 8008c32:	b2da      	uxtb	r2, r3
 8008c34:	4b4e      	ldr	r3, [pc, #312]	@ (8008d70 <USBD_SetConfig+0x150>)
 8008c36:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008c38:	4b4d      	ldr	r3, [pc, #308]	@ (8008d70 <USBD_SetConfig+0x150>)
 8008c3a:	781b      	ldrb	r3, [r3, #0]
 8008c3c:	2b01      	cmp	r3, #1
 8008c3e:	d905      	bls.n	8008c4c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008c40:	6839      	ldr	r1, [r7, #0]
 8008c42:	6878      	ldr	r0, [r7, #4]
 8008c44:	f000 f985 	bl	8008f52 <USBD_CtlError>
    return USBD_FAIL;
 8008c48:	2303      	movs	r3, #3
 8008c4a:	e08c      	b.n	8008d66 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008c52:	b2db      	uxtb	r3, r3
 8008c54:	2b02      	cmp	r3, #2
 8008c56:	d002      	beq.n	8008c5e <USBD_SetConfig+0x3e>
 8008c58:	2b03      	cmp	r3, #3
 8008c5a:	d029      	beq.n	8008cb0 <USBD_SetConfig+0x90>
 8008c5c:	e075      	b.n	8008d4a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008c5e:	4b44      	ldr	r3, [pc, #272]	@ (8008d70 <USBD_SetConfig+0x150>)
 8008c60:	781b      	ldrb	r3, [r3, #0]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d020      	beq.n	8008ca8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8008c66:	4b42      	ldr	r3, [pc, #264]	@ (8008d70 <USBD_SetConfig+0x150>)
 8008c68:	781b      	ldrb	r3, [r3, #0]
 8008c6a:	461a      	mov	r2, r3
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008c70:	4b3f      	ldr	r3, [pc, #252]	@ (8008d70 <USBD_SetConfig+0x150>)
 8008c72:	781b      	ldrb	r3, [r3, #0]
 8008c74:	4619      	mov	r1, r3
 8008c76:	6878      	ldr	r0, [r7, #4]
 8008c78:	f7fe ffa5 	bl	8007bc6 <USBD_SetClassConfig>
 8008c7c:	4603      	mov	r3, r0
 8008c7e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008c80:	7bfb      	ldrb	r3, [r7, #15]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d008      	beq.n	8008c98 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8008c86:	6839      	ldr	r1, [r7, #0]
 8008c88:	6878      	ldr	r0, [r7, #4]
 8008c8a:	f000 f962 	bl	8008f52 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	2202      	movs	r2, #2
 8008c92:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008c96:	e065      	b.n	8008d64 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008c98:	6878      	ldr	r0, [r7, #4]
 8008c9a:	f000 fa38 	bl	800910e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	2203      	movs	r2, #3
 8008ca2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8008ca6:	e05d      	b.n	8008d64 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008ca8:	6878      	ldr	r0, [r7, #4]
 8008caa:	f000 fa30 	bl	800910e <USBD_CtlSendStatus>
      break;
 8008cae:	e059      	b.n	8008d64 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008cb0:	4b2f      	ldr	r3, [pc, #188]	@ (8008d70 <USBD_SetConfig+0x150>)
 8008cb2:	781b      	ldrb	r3, [r3, #0]
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d112      	bne.n	8008cde <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	2202      	movs	r2, #2
 8008cbc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8008cc0:	4b2b      	ldr	r3, [pc, #172]	@ (8008d70 <USBD_SetConfig+0x150>)
 8008cc2:	781b      	ldrb	r3, [r3, #0]
 8008cc4:	461a      	mov	r2, r3
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008cca:	4b29      	ldr	r3, [pc, #164]	@ (8008d70 <USBD_SetConfig+0x150>)
 8008ccc:	781b      	ldrb	r3, [r3, #0]
 8008cce:	4619      	mov	r1, r3
 8008cd0:	6878      	ldr	r0, [r7, #4]
 8008cd2:	f7fe ff94 	bl	8007bfe <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008cd6:	6878      	ldr	r0, [r7, #4]
 8008cd8:	f000 fa19 	bl	800910e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008cdc:	e042      	b.n	8008d64 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8008cde:	4b24      	ldr	r3, [pc, #144]	@ (8008d70 <USBD_SetConfig+0x150>)
 8008ce0:	781b      	ldrb	r3, [r3, #0]
 8008ce2:	461a      	mov	r2, r3
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	685b      	ldr	r3, [r3, #4]
 8008ce8:	429a      	cmp	r2, r3
 8008cea:	d02a      	beq.n	8008d42 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	685b      	ldr	r3, [r3, #4]
 8008cf0:	b2db      	uxtb	r3, r3
 8008cf2:	4619      	mov	r1, r3
 8008cf4:	6878      	ldr	r0, [r7, #4]
 8008cf6:	f7fe ff82 	bl	8007bfe <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008cfa:	4b1d      	ldr	r3, [pc, #116]	@ (8008d70 <USBD_SetConfig+0x150>)
 8008cfc:	781b      	ldrb	r3, [r3, #0]
 8008cfe:	461a      	mov	r2, r3
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008d04:	4b1a      	ldr	r3, [pc, #104]	@ (8008d70 <USBD_SetConfig+0x150>)
 8008d06:	781b      	ldrb	r3, [r3, #0]
 8008d08:	4619      	mov	r1, r3
 8008d0a:	6878      	ldr	r0, [r7, #4]
 8008d0c:	f7fe ff5b 	bl	8007bc6 <USBD_SetClassConfig>
 8008d10:	4603      	mov	r3, r0
 8008d12:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008d14:	7bfb      	ldrb	r3, [r7, #15]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d00f      	beq.n	8008d3a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008d1a:	6839      	ldr	r1, [r7, #0]
 8008d1c:	6878      	ldr	r0, [r7, #4]
 8008d1e:	f000 f918 	bl	8008f52 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	685b      	ldr	r3, [r3, #4]
 8008d26:	b2db      	uxtb	r3, r3
 8008d28:	4619      	mov	r1, r3
 8008d2a:	6878      	ldr	r0, [r7, #4]
 8008d2c:	f7fe ff67 	bl	8007bfe <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	2202      	movs	r2, #2
 8008d34:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8008d38:	e014      	b.n	8008d64 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008d3a:	6878      	ldr	r0, [r7, #4]
 8008d3c:	f000 f9e7 	bl	800910e <USBD_CtlSendStatus>
      break;
 8008d40:	e010      	b.n	8008d64 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008d42:	6878      	ldr	r0, [r7, #4]
 8008d44:	f000 f9e3 	bl	800910e <USBD_CtlSendStatus>
      break;
 8008d48:	e00c      	b.n	8008d64 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008d4a:	6839      	ldr	r1, [r7, #0]
 8008d4c:	6878      	ldr	r0, [r7, #4]
 8008d4e:	f000 f900 	bl	8008f52 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008d52:	4b07      	ldr	r3, [pc, #28]	@ (8008d70 <USBD_SetConfig+0x150>)
 8008d54:	781b      	ldrb	r3, [r3, #0]
 8008d56:	4619      	mov	r1, r3
 8008d58:	6878      	ldr	r0, [r7, #4]
 8008d5a:	f7fe ff50 	bl	8007bfe <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008d5e:	2303      	movs	r3, #3
 8008d60:	73fb      	strb	r3, [r7, #15]
      break;
 8008d62:	bf00      	nop
  }

  return ret;
 8008d64:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d66:	4618      	mov	r0, r3
 8008d68:	3710      	adds	r7, #16
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	bd80      	pop	{r7, pc}
 8008d6e:	bf00      	nop
 8008d70:	20000300 	.word	0x20000300

08008d74 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d74:	b580      	push	{r7, lr}
 8008d76:	b082      	sub	sp, #8
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]
 8008d7c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008d7e:	683b      	ldr	r3, [r7, #0]
 8008d80:	88db      	ldrh	r3, [r3, #6]
 8008d82:	2b01      	cmp	r3, #1
 8008d84:	d004      	beq.n	8008d90 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008d86:	6839      	ldr	r1, [r7, #0]
 8008d88:	6878      	ldr	r0, [r7, #4]
 8008d8a:	f000 f8e2 	bl	8008f52 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008d8e:	e023      	b.n	8008dd8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008d96:	b2db      	uxtb	r3, r3
 8008d98:	2b02      	cmp	r3, #2
 8008d9a:	dc02      	bgt.n	8008da2 <USBD_GetConfig+0x2e>
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	dc03      	bgt.n	8008da8 <USBD_GetConfig+0x34>
 8008da0:	e015      	b.n	8008dce <USBD_GetConfig+0x5a>
 8008da2:	2b03      	cmp	r3, #3
 8008da4:	d00b      	beq.n	8008dbe <USBD_GetConfig+0x4a>
 8008da6:	e012      	b.n	8008dce <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	2200      	movs	r2, #0
 8008dac:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	3308      	adds	r3, #8
 8008db2:	2201      	movs	r2, #1
 8008db4:	4619      	mov	r1, r3
 8008db6:	6878      	ldr	r0, [r7, #4]
 8008db8:	f000 f948 	bl	800904c <USBD_CtlSendData>
        break;
 8008dbc:	e00c      	b.n	8008dd8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	3304      	adds	r3, #4
 8008dc2:	2201      	movs	r2, #1
 8008dc4:	4619      	mov	r1, r3
 8008dc6:	6878      	ldr	r0, [r7, #4]
 8008dc8:	f000 f940 	bl	800904c <USBD_CtlSendData>
        break;
 8008dcc:	e004      	b.n	8008dd8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008dce:	6839      	ldr	r1, [r7, #0]
 8008dd0:	6878      	ldr	r0, [r7, #4]
 8008dd2:	f000 f8be 	bl	8008f52 <USBD_CtlError>
        break;
 8008dd6:	bf00      	nop
}
 8008dd8:	bf00      	nop
 8008dda:	3708      	adds	r7, #8
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	bd80      	pop	{r7, pc}

08008de0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008de0:	b580      	push	{r7, lr}
 8008de2:	b082      	sub	sp, #8
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	6078      	str	r0, [r7, #4]
 8008de8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008df0:	b2db      	uxtb	r3, r3
 8008df2:	3b01      	subs	r3, #1
 8008df4:	2b02      	cmp	r3, #2
 8008df6:	d81e      	bhi.n	8008e36 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008df8:	683b      	ldr	r3, [r7, #0]
 8008dfa:	88db      	ldrh	r3, [r3, #6]
 8008dfc:	2b02      	cmp	r3, #2
 8008dfe:	d004      	beq.n	8008e0a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008e00:	6839      	ldr	r1, [r7, #0]
 8008e02:	6878      	ldr	r0, [r7, #4]
 8008e04:	f000 f8a5 	bl	8008f52 <USBD_CtlError>
        break;
 8008e08:	e01a      	b.n	8008e40 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	2201      	movs	r2, #1
 8008e0e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d005      	beq.n	8008e26 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	68db      	ldr	r3, [r3, #12]
 8008e1e:	f043 0202 	orr.w	r2, r3, #2
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	330c      	adds	r3, #12
 8008e2a:	2202      	movs	r2, #2
 8008e2c:	4619      	mov	r1, r3
 8008e2e:	6878      	ldr	r0, [r7, #4]
 8008e30:	f000 f90c 	bl	800904c <USBD_CtlSendData>
      break;
 8008e34:	e004      	b.n	8008e40 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008e36:	6839      	ldr	r1, [r7, #0]
 8008e38:	6878      	ldr	r0, [r7, #4]
 8008e3a:	f000 f88a 	bl	8008f52 <USBD_CtlError>
      break;
 8008e3e:	bf00      	nop
  }
}
 8008e40:	bf00      	nop
 8008e42:	3708      	adds	r7, #8
 8008e44:	46bd      	mov	sp, r7
 8008e46:	bd80      	pop	{r7, pc}

08008e48 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e48:	b580      	push	{r7, lr}
 8008e4a:	b082      	sub	sp, #8
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	6078      	str	r0, [r7, #4]
 8008e50:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008e52:	683b      	ldr	r3, [r7, #0]
 8008e54:	885b      	ldrh	r3, [r3, #2]
 8008e56:	2b01      	cmp	r3, #1
 8008e58:	d107      	bne.n	8008e6a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	2201      	movs	r2, #1
 8008e5e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008e62:	6878      	ldr	r0, [r7, #4]
 8008e64:	f000 f953 	bl	800910e <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008e68:	e013      	b.n	8008e92 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008e6a:	683b      	ldr	r3, [r7, #0]
 8008e6c:	885b      	ldrh	r3, [r3, #2]
 8008e6e:	2b02      	cmp	r3, #2
 8008e70:	d10b      	bne.n	8008e8a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8008e72:	683b      	ldr	r3, [r7, #0]
 8008e74:	889b      	ldrh	r3, [r3, #4]
 8008e76:	0a1b      	lsrs	r3, r3, #8
 8008e78:	b29b      	uxth	r3, r3
 8008e7a:	b2da      	uxtb	r2, r3
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008e82:	6878      	ldr	r0, [r7, #4]
 8008e84:	f000 f943 	bl	800910e <USBD_CtlSendStatus>
}
 8008e88:	e003      	b.n	8008e92 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008e8a:	6839      	ldr	r1, [r7, #0]
 8008e8c:	6878      	ldr	r0, [r7, #4]
 8008e8e:	f000 f860 	bl	8008f52 <USBD_CtlError>
}
 8008e92:	bf00      	nop
 8008e94:	3708      	adds	r7, #8
 8008e96:	46bd      	mov	sp, r7
 8008e98:	bd80      	pop	{r7, pc}

08008e9a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e9a:	b580      	push	{r7, lr}
 8008e9c:	b082      	sub	sp, #8
 8008e9e:	af00      	add	r7, sp, #0
 8008ea0:	6078      	str	r0, [r7, #4]
 8008ea2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008eaa:	b2db      	uxtb	r3, r3
 8008eac:	3b01      	subs	r3, #1
 8008eae:	2b02      	cmp	r3, #2
 8008eb0:	d80b      	bhi.n	8008eca <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008eb2:	683b      	ldr	r3, [r7, #0]
 8008eb4:	885b      	ldrh	r3, [r3, #2]
 8008eb6:	2b01      	cmp	r3, #1
 8008eb8:	d10c      	bne.n	8008ed4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	2200      	movs	r2, #0
 8008ebe:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008ec2:	6878      	ldr	r0, [r7, #4]
 8008ec4:	f000 f923 	bl	800910e <USBD_CtlSendStatus>
      }
      break;
 8008ec8:	e004      	b.n	8008ed4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008eca:	6839      	ldr	r1, [r7, #0]
 8008ecc:	6878      	ldr	r0, [r7, #4]
 8008ece:	f000 f840 	bl	8008f52 <USBD_CtlError>
      break;
 8008ed2:	e000      	b.n	8008ed6 <USBD_ClrFeature+0x3c>
      break;
 8008ed4:	bf00      	nop
  }
}
 8008ed6:	bf00      	nop
 8008ed8:	3708      	adds	r7, #8
 8008eda:	46bd      	mov	sp, r7
 8008edc:	bd80      	pop	{r7, pc}

08008ede <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008ede:	b580      	push	{r7, lr}
 8008ee0:	b084      	sub	sp, #16
 8008ee2:	af00      	add	r7, sp, #0
 8008ee4:	6078      	str	r0, [r7, #4]
 8008ee6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008ee8:	683b      	ldr	r3, [r7, #0]
 8008eea:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	781a      	ldrb	r2, [r3, #0]
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	3301      	adds	r3, #1
 8008ef8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	781a      	ldrb	r2, [r3, #0]
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	3301      	adds	r3, #1
 8008f06:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008f08:	68f8      	ldr	r0, [r7, #12]
 8008f0a:	f7ff fa15 	bl	8008338 <SWAPBYTE>
 8008f0e:	4603      	mov	r3, r0
 8008f10:	461a      	mov	r2, r3
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	3301      	adds	r3, #1
 8008f1a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	3301      	adds	r3, #1
 8008f20:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008f22:	68f8      	ldr	r0, [r7, #12]
 8008f24:	f7ff fa08 	bl	8008338 <SWAPBYTE>
 8008f28:	4603      	mov	r3, r0
 8008f2a:	461a      	mov	r2, r3
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	3301      	adds	r3, #1
 8008f34:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	3301      	adds	r3, #1
 8008f3a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008f3c:	68f8      	ldr	r0, [r7, #12]
 8008f3e:	f7ff f9fb 	bl	8008338 <SWAPBYTE>
 8008f42:	4603      	mov	r3, r0
 8008f44:	461a      	mov	r2, r3
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	80da      	strh	r2, [r3, #6]
}
 8008f4a:	bf00      	nop
 8008f4c:	3710      	adds	r7, #16
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	bd80      	pop	{r7, pc}

08008f52 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f52:	b580      	push	{r7, lr}
 8008f54:	b082      	sub	sp, #8
 8008f56:	af00      	add	r7, sp, #0
 8008f58:	6078      	str	r0, [r7, #4]
 8008f5a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008f5c:	2180      	movs	r1, #128	@ 0x80
 8008f5e:	6878      	ldr	r0, [r7, #4]
 8008f60:	f000 fd32 	bl	80099c8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008f64:	2100      	movs	r1, #0
 8008f66:	6878      	ldr	r0, [r7, #4]
 8008f68:	f000 fd2e 	bl	80099c8 <USBD_LL_StallEP>
}
 8008f6c:	bf00      	nop
 8008f6e:	3708      	adds	r7, #8
 8008f70:	46bd      	mov	sp, r7
 8008f72:	bd80      	pop	{r7, pc}

08008f74 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008f74:	b580      	push	{r7, lr}
 8008f76:	b086      	sub	sp, #24
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	60f8      	str	r0, [r7, #12]
 8008f7c:	60b9      	str	r1, [r7, #8]
 8008f7e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008f80:	2300      	movs	r3, #0
 8008f82:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d042      	beq.n	8009010 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8008f8e:	6938      	ldr	r0, [r7, #16]
 8008f90:	f000 f842 	bl	8009018 <USBD_GetLen>
 8008f94:	4603      	mov	r3, r0
 8008f96:	3301      	adds	r3, #1
 8008f98:	005b      	lsls	r3, r3, #1
 8008f9a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008f9e:	d808      	bhi.n	8008fb2 <USBD_GetString+0x3e>
 8008fa0:	6938      	ldr	r0, [r7, #16]
 8008fa2:	f000 f839 	bl	8009018 <USBD_GetLen>
 8008fa6:	4603      	mov	r3, r0
 8008fa8:	3301      	adds	r3, #1
 8008faa:	b29b      	uxth	r3, r3
 8008fac:	005b      	lsls	r3, r3, #1
 8008fae:	b29a      	uxth	r2, r3
 8008fb0:	e001      	b.n	8008fb6 <USBD_GetString+0x42>
 8008fb2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008fba:	7dfb      	ldrb	r3, [r7, #23]
 8008fbc:	68ba      	ldr	r2, [r7, #8]
 8008fbe:	4413      	add	r3, r2
 8008fc0:	687a      	ldr	r2, [r7, #4]
 8008fc2:	7812      	ldrb	r2, [r2, #0]
 8008fc4:	701a      	strb	r2, [r3, #0]
  idx++;
 8008fc6:	7dfb      	ldrb	r3, [r7, #23]
 8008fc8:	3301      	adds	r3, #1
 8008fca:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008fcc:	7dfb      	ldrb	r3, [r7, #23]
 8008fce:	68ba      	ldr	r2, [r7, #8]
 8008fd0:	4413      	add	r3, r2
 8008fd2:	2203      	movs	r2, #3
 8008fd4:	701a      	strb	r2, [r3, #0]
  idx++;
 8008fd6:	7dfb      	ldrb	r3, [r7, #23]
 8008fd8:	3301      	adds	r3, #1
 8008fda:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008fdc:	e013      	b.n	8009006 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8008fde:	7dfb      	ldrb	r3, [r7, #23]
 8008fe0:	68ba      	ldr	r2, [r7, #8]
 8008fe2:	4413      	add	r3, r2
 8008fe4:	693a      	ldr	r2, [r7, #16]
 8008fe6:	7812      	ldrb	r2, [r2, #0]
 8008fe8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008fea:	693b      	ldr	r3, [r7, #16]
 8008fec:	3301      	adds	r3, #1
 8008fee:	613b      	str	r3, [r7, #16]
    idx++;
 8008ff0:	7dfb      	ldrb	r3, [r7, #23]
 8008ff2:	3301      	adds	r3, #1
 8008ff4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008ff6:	7dfb      	ldrb	r3, [r7, #23]
 8008ff8:	68ba      	ldr	r2, [r7, #8]
 8008ffa:	4413      	add	r3, r2
 8008ffc:	2200      	movs	r2, #0
 8008ffe:	701a      	strb	r2, [r3, #0]
    idx++;
 8009000:	7dfb      	ldrb	r3, [r7, #23]
 8009002:	3301      	adds	r3, #1
 8009004:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009006:	693b      	ldr	r3, [r7, #16]
 8009008:	781b      	ldrb	r3, [r3, #0]
 800900a:	2b00      	cmp	r3, #0
 800900c:	d1e7      	bne.n	8008fde <USBD_GetString+0x6a>
 800900e:	e000      	b.n	8009012 <USBD_GetString+0x9e>
    return;
 8009010:	bf00      	nop
  }
}
 8009012:	3718      	adds	r7, #24
 8009014:	46bd      	mov	sp, r7
 8009016:	bd80      	pop	{r7, pc}

08009018 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009018:	b480      	push	{r7}
 800901a:	b085      	sub	sp, #20
 800901c:	af00      	add	r7, sp, #0
 800901e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009020:	2300      	movs	r3, #0
 8009022:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009028:	e005      	b.n	8009036 <USBD_GetLen+0x1e>
  {
    len++;
 800902a:	7bfb      	ldrb	r3, [r7, #15]
 800902c:	3301      	adds	r3, #1
 800902e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009030:	68bb      	ldr	r3, [r7, #8]
 8009032:	3301      	adds	r3, #1
 8009034:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009036:	68bb      	ldr	r3, [r7, #8]
 8009038:	781b      	ldrb	r3, [r3, #0]
 800903a:	2b00      	cmp	r3, #0
 800903c:	d1f5      	bne.n	800902a <USBD_GetLen+0x12>
  }

  return len;
 800903e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009040:	4618      	mov	r0, r3
 8009042:	3714      	adds	r7, #20
 8009044:	46bd      	mov	sp, r7
 8009046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904a:	4770      	bx	lr

0800904c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800904c:	b580      	push	{r7, lr}
 800904e:	b084      	sub	sp, #16
 8009050:	af00      	add	r7, sp, #0
 8009052:	60f8      	str	r0, [r7, #12]
 8009054:	60b9      	str	r1, [r7, #8]
 8009056:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	2202      	movs	r2, #2
 800905c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	687a      	ldr	r2, [r7, #4]
 8009064:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	68ba      	ldr	r2, [r7, #8]
 800906a:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	687a      	ldr	r2, [r7, #4]
 8009070:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	68ba      	ldr	r2, [r7, #8]
 8009076:	2100      	movs	r1, #0
 8009078:	68f8      	ldr	r0, [r7, #12]
 800907a:	f000 fd2e 	bl	8009ada <USBD_LL_Transmit>

  return USBD_OK;
 800907e:	2300      	movs	r3, #0
}
 8009080:	4618      	mov	r0, r3
 8009082:	3710      	adds	r7, #16
 8009084:	46bd      	mov	sp, r7
 8009086:	bd80      	pop	{r7, pc}

08009088 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009088:	b580      	push	{r7, lr}
 800908a:	b084      	sub	sp, #16
 800908c:	af00      	add	r7, sp, #0
 800908e:	60f8      	str	r0, [r7, #12]
 8009090:	60b9      	str	r1, [r7, #8]
 8009092:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	68ba      	ldr	r2, [r7, #8]
 8009098:	2100      	movs	r1, #0
 800909a:	68f8      	ldr	r0, [r7, #12]
 800909c:	f000 fd1d 	bl	8009ada <USBD_LL_Transmit>

  return USBD_OK;
 80090a0:	2300      	movs	r3, #0
}
 80090a2:	4618      	mov	r0, r3
 80090a4:	3710      	adds	r7, #16
 80090a6:	46bd      	mov	sp, r7
 80090a8:	bd80      	pop	{r7, pc}

080090aa <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80090aa:	b580      	push	{r7, lr}
 80090ac:	b084      	sub	sp, #16
 80090ae:	af00      	add	r7, sp, #0
 80090b0:	60f8      	str	r0, [r7, #12]
 80090b2:	60b9      	str	r1, [r7, #8]
 80090b4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	2203      	movs	r2, #3
 80090ba:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	687a      	ldr	r2, [r7, #4]
 80090c2:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
  pdev->ep_out[0].pbuffer = pbuf;
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	68ba      	ldr	r2, [r7, #8]
 80090ca:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	687a      	ldr	r2, [r7, #4]
 80090d2:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	68ba      	ldr	r2, [r7, #8]
 80090da:	2100      	movs	r1, #0
 80090dc:	68f8      	ldr	r0, [r7, #12]
 80090de:	f000 fd1d 	bl	8009b1c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80090e2:	2300      	movs	r3, #0
}
 80090e4:	4618      	mov	r0, r3
 80090e6:	3710      	adds	r7, #16
 80090e8:	46bd      	mov	sp, r7
 80090ea:	bd80      	pop	{r7, pc}

080090ec <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80090ec:	b580      	push	{r7, lr}
 80090ee:	b084      	sub	sp, #16
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	60f8      	str	r0, [r7, #12]
 80090f4:	60b9      	str	r1, [r7, #8]
 80090f6:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	68ba      	ldr	r2, [r7, #8]
 80090fc:	2100      	movs	r1, #0
 80090fe:	68f8      	ldr	r0, [r7, #12]
 8009100:	f000 fd0c 	bl	8009b1c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009104:	2300      	movs	r3, #0
}
 8009106:	4618      	mov	r0, r3
 8009108:	3710      	adds	r7, #16
 800910a:	46bd      	mov	sp, r7
 800910c:	bd80      	pop	{r7, pc}

0800910e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800910e:	b580      	push	{r7, lr}
 8009110:	b082      	sub	sp, #8
 8009112:	af00      	add	r7, sp, #0
 8009114:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	2204      	movs	r2, #4
 800911a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800911e:	2300      	movs	r3, #0
 8009120:	2200      	movs	r2, #0
 8009122:	2100      	movs	r1, #0
 8009124:	6878      	ldr	r0, [r7, #4]
 8009126:	f000 fcd8 	bl	8009ada <USBD_LL_Transmit>

  return USBD_OK;
 800912a:	2300      	movs	r3, #0
}
 800912c:	4618      	mov	r0, r3
 800912e:	3708      	adds	r7, #8
 8009130:	46bd      	mov	sp, r7
 8009132:	bd80      	pop	{r7, pc}

08009134 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009134:	b580      	push	{r7, lr}
 8009136:	b082      	sub	sp, #8
 8009138:	af00      	add	r7, sp, #0
 800913a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	2205      	movs	r2, #5
 8009140:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009144:	2300      	movs	r3, #0
 8009146:	2200      	movs	r2, #0
 8009148:	2100      	movs	r1, #0
 800914a:	6878      	ldr	r0, [r7, #4]
 800914c:	f000 fce6 	bl	8009b1c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009150:	2300      	movs	r3, #0
}
 8009152:	4618      	mov	r0, r3
 8009154:	3708      	adds	r7, #8
 8009156:	46bd      	mov	sp, r7
 8009158:	bd80      	pop	{r7, pc}
	...

0800915c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800915c:	b580      	push	{r7, lr}
 800915e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009160:	2200      	movs	r2, #0
 8009162:	4912      	ldr	r1, [pc, #72]	@ (80091ac <MX_USB_DEVICE_Init+0x50>)
 8009164:	4812      	ldr	r0, [pc, #72]	@ (80091b0 <MX_USB_DEVICE_Init+0x54>)
 8009166:	f7fe fcb1 	bl	8007acc <USBD_Init>
 800916a:	4603      	mov	r3, r0
 800916c:	2b00      	cmp	r3, #0
 800916e:	d001      	beq.n	8009174 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009170:	f7f7 ff7a 	bl	8001068 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009174:	490f      	ldr	r1, [pc, #60]	@ (80091b4 <MX_USB_DEVICE_Init+0x58>)
 8009176:	480e      	ldr	r0, [pc, #56]	@ (80091b0 <MX_USB_DEVICE_Init+0x54>)
 8009178:	f7fe fcd8 	bl	8007b2c <USBD_RegisterClass>
 800917c:	4603      	mov	r3, r0
 800917e:	2b00      	cmp	r3, #0
 8009180:	d001      	beq.n	8009186 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009182:	f7f7 ff71 	bl	8001068 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009186:	490c      	ldr	r1, [pc, #48]	@ (80091b8 <MX_USB_DEVICE_Init+0x5c>)
 8009188:	4809      	ldr	r0, [pc, #36]	@ (80091b0 <MX_USB_DEVICE_Init+0x54>)
 800918a:	f7fe fbcf 	bl	800792c <USBD_CDC_RegisterInterface>
 800918e:	4603      	mov	r3, r0
 8009190:	2b00      	cmp	r3, #0
 8009192:	d001      	beq.n	8009198 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009194:	f7f7 ff68 	bl	8001068 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009198:	4805      	ldr	r0, [pc, #20]	@ (80091b0 <MX_USB_DEVICE_Init+0x54>)
 800919a:	f7fe fcfd 	bl	8007b98 <USBD_Start>
 800919e:	4603      	mov	r3, r0
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d001      	beq.n	80091a8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80091a4:	f7f7 ff60 	bl	8001068 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80091a8:	bf00      	nop
 80091aa:	bd80      	pop	{r7, pc}
 80091ac:	200000bc 	.word	0x200000bc
 80091b0:	20000304 	.word	0x20000304
 80091b4:	20000028 	.word	0x20000028
 80091b8:	200000a8 	.word	0x200000a8

080091bc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80091bc:	b580      	push	{r7, lr}
 80091be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80091c0:	2200      	movs	r2, #0
 80091c2:	4905      	ldr	r1, [pc, #20]	@ (80091d8 <CDC_Init_FS+0x1c>)
 80091c4:	4805      	ldr	r0, [pc, #20]	@ (80091dc <CDC_Init_FS+0x20>)
 80091c6:	f7fe fbcb 	bl	8007960 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80091ca:	4905      	ldr	r1, [pc, #20]	@ (80091e0 <CDC_Init_FS+0x24>)
 80091cc:	4803      	ldr	r0, [pc, #12]	@ (80091dc <CDC_Init_FS+0x20>)
 80091ce:	f7fe fbe9 	bl	80079a4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80091d2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80091d4:	4618      	mov	r0, r3
 80091d6:	bd80      	pop	{r7, pc}
 80091d8:	20000de0 	.word	0x20000de0
 80091dc:	20000304 	.word	0x20000304
 80091e0:	200005e0 	.word	0x200005e0

080091e4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80091e4:	b480      	push	{r7}
 80091e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80091e8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80091ea:	4618      	mov	r0, r3
 80091ec:	46bd      	mov	sp, r7
 80091ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f2:	4770      	bx	lr

080091f4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80091f4:	b480      	push	{r7}
 80091f6:	b083      	sub	sp, #12
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	4603      	mov	r3, r0
 80091fc:	6039      	str	r1, [r7, #0]
 80091fe:	71fb      	strb	r3, [r7, #7]
 8009200:	4613      	mov	r3, r2
 8009202:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009204:	79fb      	ldrb	r3, [r7, #7]
 8009206:	2b23      	cmp	r3, #35	@ 0x23
 8009208:	d84a      	bhi.n	80092a0 <CDC_Control_FS+0xac>
 800920a:	a201      	add	r2, pc, #4	@ (adr r2, 8009210 <CDC_Control_FS+0x1c>)
 800920c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009210:	080092a1 	.word	0x080092a1
 8009214:	080092a1 	.word	0x080092a1
 8009218:	080092a1 	.word	0x080092a1
 800921c:	080092a1 	.word	0x080092a1
 8009220:	080092a1 	.word	0x080092a1
 8009224:	080092a1 	.word	0x080092a1
 8009228:	080092a1 	.word	0x080092a1
 800922c:	080092a1 	.word	0x080092a1
 8009230:	080092a1 	.word	0x080092a1
 8009234:	080092a1 	.word	0x080092a1
 8009238:	080092a1 	.word	0x080092a1
 800923c:	080092a1 	.word	0x080092a1
 8009240:	080092a1 	.word	0x080092a1
 8009244:	080092a1 	.word	0x080092a1
 8009248:	080092a1 	.word	0x080092a1
 800924c:	080092a1 	.word	0x080092a1
 8009250:	080092a1 	.word	0x080092a1
 8009254:	080092a1 	.word	0x080092a1
 8009258:	080092a1 	.word	0x080092a1
 800925c:	080092a1 	.word	0x080092a1
 8009260:	080092a1 	.word	0x080092a1
 8009264:	080092a1 	.word	0x080092a1
 8009268:	080092a1 	.word	0x080092a1
 800926c:	080092a1 	.word	0x080092a1
 8009270:	080092a1 	.word	0x080092a1
 8009274:	080092a1 	.word	0x080092a1
 8009278:	080092a1 	.word	0x080092a1
 800927c:	080092a1 	.word	0x080092a1
 8009280:	080092a1 	.word	0x080092a1
 8009284:	080092a1 	.word	0x080092a1
 8009288:	080092a1 	.word	0x080092a1
 800928c:	080092a1 	.word	0x080092a1
 8009290:	080092a1 	.word	0x080092a1
 8009294:	080092a1 	.word	0x080092a1
 8009298:	080092a1 	.word	0x080092a1
 800929c:	080092a1 	.word	0x080092a1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80092a0:	bf00      	nop
  }

  return (USBD_OK);
 80092a2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80092a4:	4618      	mov	r0, r3
 80092a6:	370c      	adds	r7, #12
 80092a8:	46bd      	mov	sp, r7
 80092aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ae:	4770      	bx	lr

080092b0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80092b0:	b580      	push	{r7, lr}
 80092b2:	b082      	sub	sp, #8
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	6078      	str	r0, [r7, #4]
 80092b8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80092ba:	6879      	ldr	r1, [r7, #4]
 80092bc:	480f      	ldr	r0, [pc, #60]	@ (80092fc <CDC_Receive_FS+0x4c>)
 80092be:	f7fe fb71 	bl	80079a4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80092c2:	480e      	ldr	r0, [pc, #56]	@ (80092fc <CDC_Receive_FS+0x4c>)
 80092c4:	f7fe fbcc 	bl	8007a60 <USBD_CDC_ReceivePacket>

  rx_buff[0] = Buf[0];
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	781a      	ldrb	r2, [r3, #0]
 80092cc:	4b0c      	ldr	r3, [pc, #48]	@ (8009300 <CDC_Receive_FS+0x50>)
 80092ce:	701a      	strb	r2, [r3, #0]
  rx_buff[1] = Buf[1];
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	785a      	ldrb	r2, [r3, #1]
 80092d4:	4b0a      	ldr	r3, [pc, #40]	@ (8009300 <CDC_Receive_FS+0x50>)
 80092d6:	705a      	strb	r2, [r3, #1]
  rx_buff[2] = Buf[2];
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	789a      	ldrb	r2, [r3, #2]
 80092dc:	4b08      	ldr	r3, [pc, #32]	@ (8009300 <CDC_Receive_FS+0x50>)
 80092de:	709a      	strb	r2, [r3, #2]
  rx_buff[3] = Buf[3];
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	78da      	ldrb	r2, [r3, #3]
 80092e4:	4b06      	ldr	r3, [pc, #24]	@ (8009300 <CDC_Receive_FS+0x50>)
 80092e6:	70da      	strb	r2, [r3, #3]
  rx_buff[4] = Buf[4];
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	791a      	ldrb	r2, [r3, #4]
 80092ec:	4b04      	ldr	r3, [pc, #16]	@ (8009300 <CDC_Receive_FS+0x50>)
 80092ee:	711a      	strb	r2, [r3, #4]

  return (USBD_OK);
 80092f0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80092f2:	4618      	mov	r0, r3
 80092f4:	3708      	adds	r7, #8
 80092f6:	46bd      	mov	sp, r7
 80092f8:	bd80      	pop	{r7, pc}
 80092fa:	bf00      	nop
 80092fc:	20000304 	.word	0x20000304
 8009300:	20000138 	.word	0x20000138

08009304 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009304:	b580      	push	{r7, lr}
 8009306:	b084      	sub	sp, #16
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
 800930c:	460b      	mov	r3, r1
 800930e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009310:	2300      	movs	r3, #0
 8009312:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009314:	4b0d      	ldr	r3, [pc, #52]	@ (800934c <CDC_Transmit_FS+0x48>)
 8009316:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800931a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800931c:	68bb      	ldr	r3, [r7, #8]
 800931e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8009322:	2b00      	cmp	r3, #0
 8009324:	d001      	beq.n	800932a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8009326:	2301      	movs	r3, #1
 8009328:	e00b      	b.n	8009342 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800932a:	887b      	ldrh	r3, [r7, #2]
 800932c:	461a      	mov	r2, r3
 800932e:	6879      	ldr	r1, [r7, #4]
 8009330:	4806      	ldr	r0, [pc, #24]	@ (800934c <CDC_Transmit_FS+0x48>)
 8009332:	f7fe fb15 	bl	8007960 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009336:	4805      	ldr	r0, [pc, #20]	@ (800934c <CDC_Transmit_FS+0x48>)
 8009338:	f7fe fb52 	bl	80079e0 <USBD_CDC_TransmitPacket>
 800933c:	4603      	mov	r3, r0
 800933e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009340:	7bfb      	ldrb	r3, [r7, #15]
}
 8009342:	4618      	mov	r0, r3
 8009344:	3710      	adds	r7, #16
 8009346:	46bd      	mov	sp, r7
 8009348:	bd80      	pop	{r7, pc}
 800934a:	bf00      	nop
 800934c:	20000304 	.word	0x20000304

08009350 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009350:	b480      	push	{r7}
 8009352:	b087      	sub	sp, #28
 8009354:	af00      	add	r7, sp, #0
 8009356:	60f8      	str	r0, [r7, #12]
 8009358:	60b9      	str	r1, [r7, #8]
 800935a:	4613      	mov	r3, r2
 800935c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800935e:	2300      	movs	r3, #0
 8009360:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8009362:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009366:	4618      	mov	r0, r3
 8009368:	371c      	adds	r7, #28
 800936a:	46bd      	mov	sp, r7
 800936c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009370:	4770      	bx	lr
	...

08009374 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009374:	b480      	push	{r7}
 8009376:	b083      	sub	sp, #12
 8009378:	af00      	add	r7, sp, #0
 800937a:	4603      	mov	r3, r0
 800937c:	6039      	str	r1, [r7, #0]
 800937e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009380:	683b      	ldr	r3, [r7, #0]
 8009382:	2212      	movs	r2, #18
 8009384:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009386:	4b03      	ldr	r3, [pc, #12]	@ (8009394 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009388:	4618      	mov	r0, r3
 800938a:	370c      	adds	r7, #12
 800938c:	46bd      	mov	sp, r7
 800938e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009392:	4770      	bx	lr
 8009394:	200000dc 	.word	0x200000dc

08009398 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009398:	b480      	push	{r7}
 800939a:	b083      	sub	sp, #12
 800939c:	af00      	add	r7, sp, #0
 800939e:	4603      	mov	r3, r0
 80093a0:	6039      	str	r1, [r7, #0]
 80093a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80093a4:	683b      	ldr	r3, [r7, #0]
 80093a6:	2204      	movs	r2, #4
 80093a8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80093aa:	4b03      	ldr	r3, [pc, #12]	@ (80093b8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80093ac:	4618      	mov	r0, r3
 80093ae:	370c      	adds	r7, #12
 80093b0:	46bd      	mov	sp, r7
 80093b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b6:	4770      	bx	lr
 80093b8:	200000fc 	.word	0x200000fc

080093bc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80093bc:	b580      	push	{r7, lr}
 80093be:	b082      	sub	sp, #8
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	4603      	mov	r3, r0
 80093c4:	6039      	str	r1, [r7, #0]
 80093c6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80093c8:	79fb      	ldrb	r3, [r7, #7]
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d105      	bne.n	80093da <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80093ce:	683a      	ldr	r2, [r7, #0]
 80093d0:	4907      	ldr	r1, [pc, #28]	@ (80093f0 <USBD_FS_ProductStrDescriptor+0x34>)
 80093d2:	4808      	ldr	r0, [pc, #32]	@ (80093f4 <USBD_FS_ProductStrDescriptor+0x38>)
 80093d4:	f7ff fdce 	bl	8008f74 <USBD_GetString>
 80093d8:	e004      	b.n	80093e4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80093da:	683a      	ldr	r2, [r7, #0]
 80093dc:	4904      	ldr	r1, [pc, #16]	@ (80093f0 <USBD_FS_ProductStrDescriptor+0x34>)
 80093de:	4805      	ldr	r0, [pc, #20]	@ (80093f4 <USBD_FS_ProductStrDescriptor+0x38>)
 80093e0:	f7ff fdc8 	bl	8008f74 <USBD_GetString>
  }
  return USBD_StrDesc;
 80093e4:	4b02      	ldr	r3, [pc, #8]	@ (80093f0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80093e6:	4618      	mov	r0, r3
 80093e8:	3708      	adds	r7, #8
 80093ea:	46bd      	mov	sp, r7
 80093ec:	bd80      	pop	{r7, pc}
 80093ee:	bf00      	nop
 80093f0:	200015e0 	.word	0x200015e0
 80093f4:	08009d18 	.word	0x08009d18

080093f8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80093f8:	b580      	push	{r7, lr}
 80093fa:	b082      	sub	sp, #8
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	4603      	mov	r3, r0
 8009400:	6039      	str	r1, [r7, #0]
 8009402:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009404:	683a      	ldr	r2, [r7, #0]
 8009406:	4904      	ldr	r1, [pc, #16]	@ (8009418 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009408:	4804      	ldr	r0, [pc, #16]	@ (800941c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800940a:	f7ff fdb3 	bl	8008f74 <USBD_GetString>
  return USBD_StrDesc;
 800940e:	4b02      	ldr	r3, [pc, #8]	@ (8009418 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009410:	4618      	mov	r0, r3
 8009412:	3708      	adds	r7, #8
 8009414:	46bd      	mov	sp, r7
 8009416:	bd80      	pop	{r7, pc}
 8009418:	200015e0 	.word	0x200015e0
 800941c:	08009d30 	.word	0x08009d30

08009420 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009420:	b580      	push	{r7, lr}
 8009422:	b082      	sub	sp, #8
 8009424:	af00      	add	r7, sp, #0
 8009426:	4603      	mov	r3, r0
 8009428:	6039      	str	r1, [r7, #0]
 800942a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800942c:	683b      	ldr	r3, [r7, #0]
 800942e:	221a      	movs	r2, #26
 8009430:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009432:	f000 f855 	bl	80094e0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009436:	4b02      	ldr	r3, [pc, #8]	@ (8009440 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009438:	4618      	mov	r0, r3
 800943a:	3708      	adds	r7, #8
 800943c:	46bd      	mov	sp, r7
 800943e:	bd80      	pop	{r7, pc}
 8009440:	20000100 	.word	0x20000100

08009444 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009444:	b580      	push	{r7, lr}
 8009446:	b082      	sub	sp, #8
 8009448:	af00      	add	r7, sp, #0
 800944a:	4603      	mov	r3, r0
 800944c:	6039      	str	r1, [r7, #0]
 800944e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009450:	79fb      	ldrb	r3, [r7, #7]
 8009452:	2b00      	cmp	r3, #0
 8009454:	d105      	bne.n	8009462 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009456:	683a      	ldr	r2, [r7, #0]
 8009458:	4907      	ldr	r1, [pc, #28]	@ (8009478 <USBD_FS_ConfigStrDescriptor+0x34>)
 800945a:	4808      	ldr	r0, [pc, #32]	@ (800947c <USBD_FS_ConfigStrDescriptor+0x38>)
 800945c:	f7ff fd8a 	bl	8008f74 <USBD_GetString>
 8009460:	e004      	b.n	800946c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009462:	683a      	ldr	r2, [r7, #0]
 8009464:	4904      	ldr	r1, [pc, #16]	@ (8009478 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009466:	4805      	ldr	r0, [pc, #20]	@ (800947c <USBD_FS_ConfigStrDescriptor+0x38>)
 8009468:	f7ff fd84 	bl	8008f74 <USBD_GetString>
  }
  return USBD_StrDesc;
 800946c:	4b02      	ldr	r3, [pc, #8]	@ (8009478 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800946e:	4618      	mov	r0, r3
 8009470:	3708      	adds	r7, #8
 8009472:	46bd      	mov	sp, r7
 8009474:	bd80      	pop	{r7, pc}
 8009476:	bf00      	nop
 8009478:	200015e0 	.word	0x200015e0
 800947c:	08009d44 	.word	0x08009d44

08009480 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009480:	b580      	push	{r7, lr}
 8009482:	b082      	sub	sp, #8
 8009484:	af00      	add	r7, sp, #0
 8009486:	4603      	mov	r3, r0
 8009488:	6039      	str	r1, [r7, #0]
 800948a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800948c:	79fb      	ldrb	r3, [r7, #7]
 800948e:	2b00      	cmp	r3, #0
 8009490:	d105      	bne.n	800949e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009492:	683a      	ldr	r2, [r7, #0]
 8009494:	4907      	ldr	r1, [pc, #28]	@ (80094b4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009496:	4808      	ldr	r0, [pc, #32]	@ (80094b8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009498:	f7ff fd6c 	bl	8008f74 <USBD_GetString>
 800949c:	e004      	b.n	80094a8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800949e:	683a      	ldr	r2, [r7, #0]
 80094a0:	4904      	ldr	r1, [pc, #16]	@ (80094b4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80094a2:	4805      	ldr	r0, [pc, #20]	@ (80094b8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80094a4:	f7ff fd66 	bl	8008f74 <USBD_GetString>
  }
  return USBD_StrDesc;
 80094a8:	4b02      	ldr	r3, [pc, #8]	@ (80094b4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80094aa:	4618      	mov	r0, r3
 80094ac:	3708      	adds	r7, #8
 80094ae:	46bd      	mov	sp, r7
 80094b0:	bd80      	pop	{r7, pc}
 80094b2:	bf00      	nop
 80094b4:	200015e0 	.word	0x200015e0
 80094b8:	08009d50 	.word	0x08009d50

080094bc <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80094bc:	b480      	push	{r7}
 80094be:	b083      	sub	sp, #12
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	4603      	mov	r3, r0
 80094c4:	6039      	str	r1, [r7, #0]
 80094c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 80094c8:	683b      	ldr	r3, [r7, #0]
 80094ca:	220c      	movs	r2, #12
 80094cc:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 80094ce:	4b03      	ldr	r3, [pc, #12]	@ (80094dc <USBD_FS_USR_BOSDescriptor+0x20>)
}
 80094d0:	4618      	mov	r0, r3
 80094d2:	370c      	adds	r7, #12
 80094d4:	46bd      	mov	sp, r7
 80094d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094da:	4770      	bx	lr
 80094dc:	200000f0 	.word	0x200000f0

080094e0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80094e0:	b580      	push	{r7, lr}
 80094e2:	b084      	sub	sp, #16
 80094e4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80094e6:	4b0f      	ldr	r3, [pc, #60]	@ (8009524 <Get_SerialNum+0x44>)
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80094ec:	4b0e      	ldr	r3, [pc, #56]	@ (8009528 <Get_SerialNum+0x48>)
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80094f2:	4b0e      	ldr	r3, [pc, #56]	@ (800952c <Get_SerialNum+0x4c>)
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80094f8:	68fa      	ldr	r2, [r7, #12]
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	4413      	add	r3, r2
 80094fe:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	2b00      	cmp	r3, #0
 8009504:	d009      	beq.n	800951a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009506:	2208      	movs	r2, #8
 8009508:	4909      	ldr	r1, [pc, #36]	@ (8009530 <Get_SerialNum+0x50>)
 800950a:	68f8      	ldr	r0, [r7, #12]
 800950c:	f000 f814 	bl	8009538 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009510:	2204      	movs	r2, #4
 8009512:	4908      	ldr	r1, [pc, #32]	@ (8009534 <Get_SerialNum+0x54>)
 8009514:	68b8      	ldr	r0, [r7, #8]
 8009516:	f000 f80f 	bl	8009538 <IntToUnicode>
  }
}
 800951a:	bf00      	nop
 800951c:	3710      	adds	r7, #16
 800951e:	46bd      	mov	sp, r7
 8009520:	bd80      	pop	{r7, pc}
 8009522:	bf00      	nop
 8009524:	1fff7a10 	.word	0x1fff7a10
 8009528:	1fff7a14 	.word	0x1fff7a14
 800952c:	1fff7a18 	.word	0x1fff7a18
 8009530:	20000102 	.word	0x20000102
 8009534:	20000112 	.word	0x20000112

08009538 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009538:	b480      	push	{r7}
 800953a:	b087      	sub	sp, #28
 800953c:	af00      	add	r7, sp, #0
 800953e:	60f8      	str	r0, [r7, #12]
 8009540:	60b9      	str	r1, [r7, #8]
 8009542:	4613      	mov	r3, r2
 8009544:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009546:	2300      	movs	r3, #0
 8009548:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800954a:	2300      	movs	r3, #0
 800954c:	75fb      	strb	r3, [r7, #23]
 800954e:	e027      	b.n	80095a0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	0f1b      	lsrs	r3, r3, #28
 8009554:	2b09      	cmp	r3, #9
 8009556:	d80b      	bhi.n	8009570 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	0f1b      	lsrs	r3, r3, #28
 800955c:	b2da      	uxtb	r2, r3
 800955e:	7dfb      	ldrb	r3, [r7, #23]
 8009560:	005b      	lsls	r3, r3, #1
 8009562:	4619      	mov	r1, r3
 8009564:	68bb      	ldr	r3, [r7, #8]
 8009566:	440b      	add	r3, r1
 8009568:	3230      	adds	r2, #48	@ 0x30
 800956a:	b2d2      	uxtb	r2, r2
 800956c:	701a      	strb	r2, [r3, #0]
 800956e:	e00a      	b.n	8009586 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	0f1b      	lsrs	r3, r3, #28
 8009574:	b2da      	uxtb	r2, r3
 8009576:	7dfb      	ldrb	r3, [r7, #23]
 8009578:	005b      	lsls	r3, r3, #1
 800957a:	4619      	mov	r1, r3
 800957c:	68bb      	ldr	r3, [r7, #8]
 800957e:	440b      	add	r3, r1
 8009580:	3237      	adds	r2, #55	@ 0x37
 8009582:	b2d2      	uxtb	r2, r2
 8009584:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	011b      	lsls	r3, r3, #4
 800958a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800958c:	7dfb      	ldrb	r3, [r7, #23]
 800958e:	005b      	lsls	r3, r3, #1
 8009590:	3301      	adds	r3, #1
 8009592:	68ba      	ldr	r2, [r7, #8]
 8009594:	4413      	add	r3, r2
 8009596:	2200      	movs	r2, #0
 8009598:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800959a:	7dfb      	ldrb	r3, [r7, #23]
 800959c:	3301      	adds	r3, #1
 800959e:	75fb      	strb	r3, [r7, #23]
 80095a0:	7dfa      	ldrb	r2, [r7, #23]
 80095a2:	79fb      	ldrb	r3, [r7, #7]
 80095a4:	429a      	cmp	r2, r3
 80095a6:	d3d3      	bcc.n	8009550 <IntToUnicode+0x18>
  }
}
 80095a8:	bf00      	nop
 80095aa:	bf00      	nop
 80095ac:	371c      	adds	r7, #28
 80095ae:	46bd      	mov	sp, r7
 80095b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b4:	4770      	bx	lr
	...

080095b8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80095b8:	b580      	push	{r7, lr}
 80095ba:	b0a0      	sub	sp, #128	@ 0x80
 80095bc:	af00      	add	r7, sp, #0
 80095be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80095c0:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80095c4:	2200      	movs	r2, #0
 80095c6:	601a      	str	r2, [r3, #0]
 80095c8:	605a      	str	r2, [r3, #4]
 80095ca:	609a      	str	r2, [r3, #8]
 80095cc:	60da      	str	r2, [r3, #12]
 80095ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80095d0:	f107 0310 	add.w	r3, r7, #16
 80095d4:	225c      	movs	r2, #92	@ 0x5c
 80095d6:	2100      	movs	r1, #0
 80095d8:	4618      	mov	r0, r3
 80095da:	f000 fb65 	bl	8009ca8 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80095e6:	d149      	bne.n	800967c <HAL_PCD_MspInit+0xc4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80095e8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80095ec:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 80095ee:	2300      	movs	r3, #0
 80095f0:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80095f2:	f107 0310 	add.w	r3, r7, #16
 80095f6:	4618      	mov	r0, r3
 80095f8:	f7fa f8f2 	bl	80037e0 <HAL_RCCEx_PeriphCLKConfig>
 80095fc:	4603      	mov	r3, r0
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d001      	beq.n	8009606 <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 8009602:	f7f7 fd31 	bl	8001068 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009606:	2300      	movs	r3, #0
 8009608:	60fb      	str	r3, [r7, #12]
 800960a:	4b1e      	ldr	r3, [pc, #120]	@ (8009684 <HAL_PCD_MspInit+0xcc>)
 800960c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800960e:	4a1d      	ldr	r2, [pc, #116]	@ (8009684 <HAL_PCD_MspInit+0xcc>)
 8009610:	f043 0301 	orr.w	r3, r3, #1
 8009614:	6313      	str	r3, [r2, #48]	@ 0x30
 8009616:	4b1b      	ldr	r3, [pc, #108]	@ (8009684 <HAL_PCD_MspInit+0xcc>)
 8009618:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800961a:	f003 0301 	and.w	r3, r3, #1
 800961e:	60fb      	str	r3, [r7, #12]
 8009620:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8009622:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8009626:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009628:	2302      	movs	r3, #2
 800962a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800962c:	2300      	movs	r3, #0
 800962e:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009630:	2303      	movs	r3, #3
 8009632:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009634:	230a      	movs	r3, #10
 8009636:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009638:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800963c:	4619      	mov	r1, r3
 800963e:	4812      	ldr	r0, [pc, #72]	@ (8009688 <HAL_PCD_MspInit+0xd0>)
 8009640:	f7f8 fb50 	bl	8001ce4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009644:	4b0f      	ldr	r3, [pc, #60]	@ (8009684 <HAL_PCD_MspInit+0xcc>)
 8009646:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009648:	4a0e      	ldr	r2, [pc, #56]	@ (8009684 <HAL_PCD_MspInit+0xcc>)
 800964a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800964e:	6353      	str	r3, [r2, #52]	@ 0x34
 8009650:	2300      	movs	r3, #0
 8009652:	60bb      	str	r3, [r7, #8]
 8009654:	4b0b      	ldr	r3, [pc, #44]	@ (8009684 <HAL_PCD_MspInit+0xcc>)
 8009656:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009658:	4a0a      	ldr	r2, [pc, #40]	@ (8009684 <HAL_PCD_MspInit+0xcc>)
 800965a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800965e:	6453      	str	r3, [r2, #68]	@ 0x44
 8009660:	4b08      	ldr	r3, [pc, #32]	@ (8009684 <HAL_PCD_MspInit+0xcc>)
 8009662:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009664:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009668:	60bb      	str	r3, [r7, #8]
 800966a:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800966c:	2200      	movs	r2, #0
 800966e:	2100      	movs	r1, #0
 8009670:	2043      	movs	r0, #67	@ 0x43
 8009672:	f7f8 fb00 	bl	8001c76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009676:	2043      	movs	r0, #67	@ 0x43
 8009678:	f7f8 fb19 	bl	8001cae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800967c:	bf00      	nop
 800967e:	3780      	adds	r7, #128	@ 0x80
 8009680:	46bd      	mov	sp, r7
 8009682:	bd80      	pop	{r7, pc}
 8009684:	40023800 	.word	0x40023800
 8009688:	40020000 	.word	0x40020000

0800968c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800968c:	b580      	push	{r7, lr}
 800968e:	b082      	sub	sp, #8
 8009690:	af00      	add	r7, sp, #0
 8009692:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80096a0:	4619      	mov	r1, r3
 80096a2:	4610      	mov	r0, r2
 80096a4:	f7fe fac5 	bl	8007c32 <USBD_LL_SetupStage>
}
 80096a8:	bf00      	nop
 80096aa:	3708      	adds	r7, #8
 80096ac:	46bd      	mov	sp, r7
 80096ae:	bd80      	pop	{r7, pc}

080096b0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80096b0:	b580      	push	{r7, lr}
 80096b2:	b082      	sub	sp, #8
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	6078      	str	r0, [r7, #4]
 80096b8:	460b      	mov	r3, r1
 80096ba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80096c2:	78fa      	ldrb	r2, [r7, #3]
 80096c4:	6879      	ldr	r1, [r7, #4]
 80096c6:	4613      	mov	r3, r2
 80096c8:	00db      	lsls	r3, r3, #3
 80096ca:	4413      	add	r3, r2
 80096cc:	009b      	lsls	r3, r3, #2
 80096ce:	440b      	add	r3, r1
 80096d0:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80096d4:	681a      	ldr	r2, [r3, #0]
 80096d6:	78fb      	ldrb	r3, [r7, #3]
 80096d8:	4619      	mov	r1, r3
 80096da:	f7fe faff 	bl	8007cdc <USBD_LL_DataOutStage>
}
 80096de:	bf00      	nop
 80096e0:	3708      	adds	r7, #8
 80096e2:	46bd      	mov	sp, r7
 80096e4:	bd80      	pop	{r7, pc}

080096e6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80096e6:	b580      	push	{r7, lr}
 80096e8:	b082      	sub	sp, #8
 80096ea:	af00      	add	r7, sp, #0
 80096ec:	6078      	str	r0, [r7, #4]
 80096ee:	460b      	mov	r3, r1
 80096f0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80096f8:	78fa      	ldrb	r2, [r7, #3]
 80096fa:	6879      	ldr	r1, [r7, #4]
 80096fc:	4613      	mov	r3, r2
 80096fe:	00db      	lsls	r3, r3, #3
 8009700:	4413      	add	r3, r2
 8009702:	009b      	lsls	r3, r3, #2
 8009704:	440b      	add	r3, r1
 8009706:	3320      	adds	r3, #32
 8009708:	681a      	ldr	r2, [r3, #0]
 800970a:	78fb      	ldrb	r3, [r7, #3]
 800970c:	4619      	mov	r1, r3
 800970e:	f7fe fba1 	bl	8007e54 <USBD_LL_DataInStage>
}
 8009712:	bf00      	nop
 8009714:	3708      	adds	r7, #8
 8009716:	46bd      	mov	sp, r7
 8009718:	bd80      	pop	{r7, pc}

0800971a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800971a:	b580      	push	{r7, lr}
 800971c:	b082      	sub	sp, #8
 800971e:	af00      	add	r7, sp, #0
 8009720:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009728:	4618      	mov	r0, r3
 800972a:	f7fe fce5 	bl	80080f8 <USBD_LL_SOF>
}
 800972e:	bf00      	nop
 8009730:	3708      	adds	r7, #8
 8009732:	46bd      	mov	sp, r7
 8009734:	bd80      	pop	{r7, pc}

08009736 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009736:	b580      	push	{r7, lr}
 8009738:	b084      	sub	sp, #16
 800973a:	af00      	add	r7, sp, #0
 800973c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800973e:	2301      	movs	r3, #1
 8009740:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	79db      	ldrb	r3, [r3, #7]
 8009746:	2b00      	cmp	r3, #0
 8009748:	d102      	bne.n	8009750 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800974a:	2300      	movs	r3, #0
 800974c:	73fb      	strb	r3, [r7, #15]
 800974e:	e008      	b.n	8009762 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	79db      	ldrb	r3, [r3, #7]
 8009754:	2b02      	cmp	r3, #2
 8009756:	d102      	bne.n	800975e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8009758:	2301      	movs	r3, #1
 800975a:	73fb      	strb	r3, [r7, #15]
 800975c:	e001      	b.n	8009762 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800975e:	f7f7 fc83 	bl	8001068 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009768:	7bfa      	ldrb	r2, [r7, #15]
 800976a:	4611      	mov	r1, r2
 800976c:	4618      	mov	r0, r3
 800976e:	f7fe fc7f 	bl	8008070 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009778:	4618      	mov	r0, r3
 800977a:	f7fe fc26 	bl	8007fca <USBD_LL_Reset>
}
 800977e:	bf00      	nop
 8009780:	3710      	adds	r7, #16
 8009782:	46bd      	mov	sp, r7
 8009784:	bd80      	pop	{r7, pc}
	...

08009788 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009788:	b580      	push	{r7, lr}
 800978a:	b082      	sub	sp, #8
 800978c:	af00      	add	r7, sp, #0
 800978e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009796:	4618      	mov	r0, r3
 8009798:	f7fe fc7a 	bl	8008090 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	687a      	ldr	r2, [r7, #4]
 80097a8:	6812      	ldr	r2, [r2, #0]
 80097aa:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80097ae:	f043 0301 	orr.w	r3, r3, #1
 80097b2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	7adb      	ldrb	r3, [r3, #11]
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d005      	beq.n	80097c8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80097bc:	4b04      	ldr	r3, [pc, #16]	@ (80097d0 <HAL_PCD_SuspendCallback+0x48>)
 80097be:	691b      	ldr	r3, [r3, #16]
 80097c0:	4a03      	ldr	r2, [pc, #12]	@ (80097d0 <HAL_PCD_SuspendCallback+0x48>)
 80097c2:	f043 0306 	orr.w	r3, r3, #6
 80097c6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80097c8:	bf00      	nop
 80097ca:	3708      	adds	r7, #8
 80097cc:	46bd      	mov	sp, r7
 80097ce:	bd80      	pop	{r7, pc}
 80097d0:	e000ed00 	.word	0xe000ed00

080097d4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80097d4:	b580      	push	{r7, lr}
 80097d6:	b082      	sub	sp, #8
 80097d8:	af00      	add	r7, sp, #0
 80097da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80097e2:	4618      	mov	r0, r3
 80097e4:	f7fe fc70 	bl	80080c8 <USBD_LL_Resume>
}
 80097e8:	bf00      	nop
 80097ea:	3708      	adds	r7, #8
 80097ec:	46bd      	mov	sp, r7
 80097ee:	bd80      	pop	{r7, pc}

080097f0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80097f0:	b580      	push	{r7, lr}
 80097f2:	b082      	sub	sp, #8
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	6078      	str	r0, [r7, #4]
 80097f8:	460b      	mov	r3, r1
 80097fa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009802:	78fa      	ldrb	r2, [r7, #3]
 8009804:	4611      	mov	r1, r2
 8009806:	4618      	mov	r0, r3
 8009808:	f7fe fcc8 	bl	800819c <USBD_LL_IsoOUTIncomplete>
}
 800980c:	bf00      	nop
 800980e:	3708      	adds	r7, #8
 8009810:	46bd      	mov	sp, r7
 8009812:	bd80      	pop	{r7, pc}

08009814 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009814:	b580      	push	{r7, lr}
 8009816:	b082      	sub	sp, #8
 8009818:	af00      	add	r7, sp, #0
 800981a:	6078      	str	r0, [r7, #4]
 800981c:	460b      	mov	r3, r1
 800981e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009826:	78fa      	ldrb	r2, [r7, #3]
 8009828:	4611      	mov	r1, r2
 800982a:	4618      	mov	r0, r3
 800982c:	f7fe fc84 	bl	8008138 <USBD_LL_IsoINIncomplete>
}
 8009830:	bf00      	nop
 8009832:	3708      	adds	r7, #8
 8009834:	46bd      	mov	sp, r7
 8009836:	bd80      	pop	{r7, pc}

08009838 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009838:	b580      	push	{r7, lr}
 800983a:	b082      	sub	sp, #8
 800983c:	af00      	add	r7, sp, #0
 800983e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009846:	4618      	mov	r0, r3
 8009848:	f7fe fcda 	bl	8008200 <USBD_LL_DevConnected>
}
 800984c:	bf00      	nop
 800984e:	3708      	adds	r7, #8
 8009850:	46bd      	mov	sp, r7
 8009852:	bd80      	pop	{r7, pc}

08009854 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009854:	b580      	push	{r7, lr}
 8009856:	b082      	sub	sp, #8
 8009858:	af00      	add	r7, sp, #0
 800985a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009862:	4618      	mov	r0, r3
 8009864:	f7fe fcd7 	bl	8008216 <USBD_LL_DevDisconnected>
}
 8009868:	bf00      	nop
 800986a:	3708      	adds	r7, #8
 800986c:	46bd      	mov	sp, r7
 800986e:	bd80      	pop	{r7, pc}

08009870 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009870:	b580      	push	{r7, lr}
 8009872:	b082      	sub	sp, #8
 8009874:	af00      	add	r7, sp, #0
 8009876:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	781b      	ldrb	r3, [r3, #0]
 800987c:	2b00      	cmp	r3, #0
 800987e:	d13c      	bne.n	80098fa <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009880:	4a20      	ldr	r2, [pc, #128]	@ (8009904 <USBD_LL_Init+0x94>)
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	4a1e      	ldr	r2, [pc, #120]	@ (8009904 <USBD_LL_Init+0x94>)
 800988c:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009890:	4b1c      	ldr	r3, [pc, #112]	@ (8009904 <USBD_LL_Init+0x94>)
 8009892:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8009896:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8009898:	4b1a      	ldr	r3, [pc, #104]	@ (8009904 <USBD_LL_Init+0x94>)
 800989a:	2206      	movs	r2, #6
 800989c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800989e:	4b19      	ldr	r3, [pc, #100]	@ (8009904 <USBD_LL_Init+0x94>)
 80098a0:	2202      	movs	r2, #2
 80098a2:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80098a4:	4b17      	ldr	r3, [pc, #92]	@ (8009904 <USBD_LL_Init+0x94>)
 80098a6:	2200      	movs	r2, #0
 80098a8:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80098aa:	4b16      	ldr	r3, [pc, #88]	@ (8009904 <USBD_LL_Init+0x94>)
 80098ac:	2202      	movs	r2, #2
 80098ae:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80098b0:	4b14      	ldr	r3, [pc, #80]	@ (8009904 <USBD_LL_Init+0x94>)
 80098b2:	2200      	movs	r2, #0
 80098b4:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80098b6:	4b13      	ldr	r3, [pc, #76]	@ (8009904 <USBD_LL_Init+0x94>)
 80098b8:	2200      	movs	r2, #0
 80098ba:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80098bc:	4b11      	ldr	r3, [pc, #68]	@ (8009904 <USBD_LL_Init+0x94>)
 80098be:	2200      	movs	r2, #0
 80098c0:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80098c2:	4b10      	ldr	r3, [pc, #64]	@ (8009904 <USBD_LL_Init+0x94>)
 80098c4:	2200      	movs	r2, #0
 80098c6:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80098c8:	4b0e      	ldr	r3, [pc, #56]	@ (8009904 <USBD_LL_Init+0x94>)
 80098ca:	2200      	movs	r2, #0
 80098cc:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80098ce:	480d      	ldr	r0, [pc, #52]	@ (8009904 <USBD_LL_Init+0x94>)
 80098d0:	f7f8 fbcd 	bl	800206e <HAL_PCD_Init>
 80098d4:	4603      	mov	r3, r0
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d001      	beq.n	80098de <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80098da:	f7f7 fbc5 	bl	8001068 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80098de:	2180      	movs	r1, #128	@ 0x80
 80098e0:	4808      	ldr	r0, [pc, #32]	@ (8009904 <USBD_LL_Init+0x94>)
 80098e2:	f7f9 fe2e 	bl	8003542 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80098e6:	2240      	movs	r2, #64	@ 0x40
 80098e8:	2100      	movs	r1, #0
 80098ea:	4806      	ldr	r0, [pc, #24]	@ (8009904 <USBD_LL_Init+0x94>)
 80098ec:	f7f9 fde2 	bl	80034b4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80098f0:	2280      	movs	r2, #128	@ 0x80
 80098f2:	2101      	movs	r1, #1
 80098f4:	4803      	ldr	r0, [pc, #12]	@ (8009904 <USBD_LL_Init+0x94>)
 80098f6:	f7f9 fddd 	bl	80034b4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80098fa:	2300      	movs	r3, #0
}
 80098fc:	4618      	mov	r0, r3
 80098fe:	3708      	adds	r7, #8
 8009900:	46bd      	mov	sp, r7
 8009902:	bd80      	pop	{r7, pc}
 8009904:	200017e0 	.word	0x200017e0

08009908 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009908:	b580      	push	{r7, lr}
 800990a:	b084      	sub	sp, #16
 800990c:	af00      	add	r7, sp, #0
 800990e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009910:	2300      	movs	r3, #0
 8009912:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009914:	2300      	movs	r3, #0
 8009916:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800991e:	4618      	mov	r0, r3
 8009920:	f7f8 fcbb 	bl	800229a <HAL_PCD_Start>
 8009924:	4603      	mov	r3, r0
 8009926:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009928:	7bfb      	ldrb	r3, [r7, #15]
 800992a:	4618      	mov	r0, r3
 800992c:	f000 f990 	bl	8009c50 <USBD_Get_USB_Status>
 8009930:	4603      	mov	r3, r0
 8009932:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009934:	7bbb      	ldrb	r3, [r7, #14]
}
 8009936:	4618      	mov	r0, r3
 8009938:	3710      	adds	r7, #16
 800993a:	46bd      	mov	sp, r7
 800993c:	bd80      	pop	{r7, pc}

0800993e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800993e:	b580      	push	{r7, lr}
 8009940:	b084      	sub	sp, #16
 8009942:	af00      	add	r7, sp, #0
 8009944:	6078      	str	r0, [r7, #4]
 8009946:	4608      	mov	r0, r1
 8009948:	4611      	mov	r1, r2
 800994a:	461a      	mov	r2, r3
 800994c:	4603      	mov	r3, r0
 800994e:	70fb      	strb	r3, [r7, #3]
 8009950:	460b      	mov	r3, r1
 8009952:	70bb      	strb	r3, [r7, #2]
 8009954:	4613      	mov	r3, r2
 8009956:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009958:	2300      	movs	r3, #0
 800995a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800995c:	2300      	movs	r3, #0
 800995e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8009966:	78bb      	ldrb	r3, [r7, #2]
 8009968:	883a      	ldrh	r2, [r7, #0]
 800996a:	78f9      	ldrb	r1, [r7, #3]
 800996c:	f7f9 f9bc 	bl	8002ce8 <HAL_PCD_EP_Open>
 8009970:	4603      	mov	r3, r0
 8009972:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009974:	7bfb      	ldrb	r3, [r7, #15]
 8009976:	4618      	mov	r0, r3
 8009978:	f000 f96a 	bl	8009c50 <USBD_Get_USB_Status>
 800997c:	4603      	mov	r3, r0
 800997e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009980:	7bbb      	ldrb	r3, [r7, #14]
}
 8009982:	4618      	mov	r0, r3
 8009984:	3710      	adds	r7, #16
 8009986:	46bd      	mov	sp, r7
 8009988:	bd80      	pop	{r7, pc}

0800998a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800998a:	b580      	push	{r7, lr}
 800998c:	b084      	sub	sp, #16
 800998e:	af00      	add	r7, sp, #0
 8009990:	6078      	str	r0, [r7, #4]
 8009992:	460b      	mov	r3, r1
 8009994:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009996:	2300      	movs	r3, #0
 8009998:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800999a:	2300      	movs	r3, #0
 800999c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80099a4:	78fa      	ldrb	r2, [r7, #3]
 80099a6:	4611      	mov	r1, r2
 80099a8:	4618      	mov	r0, r3
 80099aa:	f7f9 fa07 	bl	8002dbc <HAL_PCD_EP_Close>
 80099ae:	4603      	mov	r3, r0
 80099b0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80099b2:	7bfb      	ldrb	r3, [r7, #15]
 80099b4:	4618      	mov	r0, r3
 80099b6:	f000 f94b 	bl	8009c50 <USBD_Get_USB_Status>
 80099ba:	4603      	mov	r3, r0
 80099bc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80099be:	7bbb      	ldrb	r3, [r7, #14]
}
 80099c0:	4618      	mov	r0, r3
 80099c2:	3710      	adds	r7, #16
 80099c4:	46bd      	mov	sp, r7
 80099c6:	bd80      	pop	{r7, pc}

080099c8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80099c8:	b580      	push	{r7, lr}
 80099ca:	b084      	sub	sp, #16
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	6078      	str	r0, [r7, #4]
 80099d0:	460b      	mov	r3, r1
 80099d2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80099d4:	2300      	movs	r3, #0
 80099d6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80099d8:	2300      	movs	r3, #0
 80099da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80099e2:	78fa      	ldrb	r2, [r7, #3]
 80099e4:	4611      	mov	r1, r2
 80099e6:	4618      	mov	r0, r3
 80099e8:	f7f9 fabf 	bl	8002f6a <HAL_PCD_EP_SetStall>
 80099ec:	4603      	mov	r3, r0
 80099ee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80099f0:	7bfb      	ldrb	r3, [r7, #15]
 80099f2:	4618      	mov	r0, r3
 80099f4:	f000 f92c 	bl	8009c50 <USBD_Get_USB_Status>
 80099f8:	4603      	mov	r3, r0
 80099fa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80099fc:	7bbb      	ldrb	r3, [r7, #14]
}
 80099fe:	4618      	mov	r0, r3
 8009a00:	3710      	adds	r7, #16
 8009a02:	46bd      	mov	sp, r7
 8009a04:	bd80      	pop	{r7, pc}

08009a06 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009a06:	b580      	push	{r7, lr}
 8009a08:	b084      	sub	sp, #16
 8009a0a:	af00      	add	r7, sp, #0
 8009a0c:	6078      	str	r0, [r7, #4]
 8009a0e:	460b      	mov	r3, r1
 8009a10:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a12:	2300      	movs	r3, #0
 8009a14:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a16:	2300      	movs	r3, #0
 8009a18:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009a20:	78fa      	ldrb	r2, [r7, #3]
 8009a22:	4611      	mov	r1, r2
 8009a24:	4618      	mov	r0, r3
 8009a26:	f7f9 fb03 	bl	8003030 <HAL_PCD_EP_ClrStall>
 8009a2a:	4603      	mov	r3, r0
 8009a2c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a2e:	7bfb      	ldrb	r3, [r7, #15]
 8009a30:	4618      	mov	r0, r3
 8009a32:	f000 f90d 	bl	8009c50 <USBD_Get_USB_Status>
 8009a36:	4603      	mov	r3, r0
 8009a38:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009a3a:	7bbb      	ldrb	r3, [r7, #14]
}
 8009a3c:	4618      	mov	r0, r3
 8009a3e:	3710      	adds	r7, #16
 8009a40:	46bd      	mov	sp, r7
 8009a42:	bd80      	pop	{r7, pc}

08009a44 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009a44:	b480      	push	{r7}
 8009a46:	b085      	sub	sp, #20
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	6078      	str	r0, [r7, #4]
 8009a4c:	460b      	mov	r3, r1
 8009a4e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009a56:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009a58:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	da0b      	bge.n	8009a78 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009a60:	78fb      	ldrb	r3, [r7, #3]
 8009a62:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009a66:	68f9      	ldr	r1, [r7, #12]
 8009a68:	4613      	mov	r3, r2
 8009a6a:	00db      	lsls	r3, r3, #3
 8009a6c:	4413      	add	r3, r2
 8009a6e:	009b      	lsls	r3, r3, #2
 8009a70:	440b      	add	r3, r1
 8009a72:	3316      	adds	r3, #22
 8009a74:	781b      	ldrb	r3, [r3, #0]
 8009a76:	e00b      	b.n	8009a90 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009a78:	78fb      	ldrb	r3, [r7, #3]
 8009a7a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009a7e:	68f9      	ldr	r1, [r7, #12]
 8009a80:	4613      	mov	r3, r2
 8009a82:	00db      	lsls	r3, r3, #3
 8009a84:	4413      	add	r3, r2
 8009a86:	009b      	lsls	r3, r3, #2
 8009a88:	440b      	add	r3, r1
 8009a8a:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8009a8e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009a90:	4618      	mov	r0, r3
 8009a92:	3714      	adds	r7, #20
 8009a94:	46bd      	mov	sp, r7
 8009a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a9a:	4770      	bx	lr

08009a9c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009a9c:	b580      	push	{r7, lr}
 8009a9e:	b084      	sub	sp, #16
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	6078      	str	r0, [r7, #4]
 8009aa4:	460b      	mov	r3, r1
 8009aa6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009aa8:	2300      	movs	r3, #0
 8009aaa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009aac:	2300      	movs	r3, #0
 8009aae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009ab6:	78fa      	ldrb	r2, [r7, #3]
 8009ab8:	4611      	mov	r1, r2
 8009aba:	4618      	mov	r0, r3
 8009abc:	f7f9 f8f0 	bl	8002ca0 <HAL_PCD_SetAddress>
 8009ac0:	4603      	mov	r3, r0
 8009ac2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009ac4:	7bfb      	ldrb	r3, [r7, #15]
 8009ac6:	4618      	mov	r0, r3
 8009ac8:	f000 f8c2 	bl	8009c50 <USBD_Get_USB_Status>
 8009acc:	4603      	mov	r3, r0
 8009ace:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009ad0:	7bbb      	ldrb	r3, [r7, #14]
}
 8009ad2:	4618      	mov	r0, r3
 8009ad4:	3710      	adds	r7, #16
 8009ad6:	46bd      	mov	sp, r7
 8009ad8:	bd80      	pop	{r7, pc}

08009ada <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009ada:	b580      	push	{r7, lr}
 8009adc:	b086      	sub	sp, #24
 8009ade:	af00      	add	r7, sp, #0
 8009ae0:	60f8      	str	r0, [r7, #12]
 8009ae2:	607a      	str	r2, [r7, #4]
 8009ae4:	603b      	str	r3, [r7, #0]
 8009ae6:	460b      	mov	r3, r1
 8009ae8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009aea:	2300      	movs	r3, #0
 8009aec:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009aee:	2300      	movs	r3, #0
 8009af0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8009af8:	7af9      	ldrb	r1, [r7, #11]
 8009afa:	683b      	ldr	r3, [r7, #0]
 8009afc:	687a      	ldr	r2, [r7, #4]
 8009afe:	f7f9 f9fa 	bl	8002ef6 <HAL_PCD_EP_Transmit>
 8009b02:	4603      	mov	r3, r0
 8009b04:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b06:	7dfb      	ldrb	r3, [r7, #23]
 8009b08:	4618      	mov	r0, r3
 8009b0a:	f000 f8a1 	bl	8009c50 <USBD_Get_USB_Status>
 8009b0e:	4603      	mov	r3, r0
 8009b10:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009b12:	7dbb      	ldrb	r3, [r7, #22]
}
 8009b14:	4618      	mov	r0, r3
 8009b16:	3718      	adds	r7, #24
 8009b18:	46bd      	mov	sp, r7
 8009b1a:	bd80      	pop	{r7, pc}

08009b1c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009b1c:	b580      	push	{r7, lr}
 8009b1e:	b086      	sub	sp, #24
 8009b20:	af00      	add	r7, sp, #0
 8009b22:	60f8      	str	r0, [r7, #12]
 8009b24:	607a      	str	r2, [r7, #4]
 8009b26:	603b      	str	r3, [r7, #0]
 8009b28:	460b      	mov	r3, r1
 8009b2a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b2c:	2300      	movs	r3, #0
 8009b2e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b30:	2300      	movs	r3, #0
 8009b32:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8009b3a:	7af9      	ldrb	r1, [r7, #11]
 8009b3c:	683b      	ldr	r3, [r7, #0]
 8009b3e:	687a      	ldr	r2, [r7, #4]
 8009b40:	f7f9 f986 	bl	8002e50 <HAL_PCD_EP_Receive>
 8009b44:	4603      	mov	r3, r0
 8009b46:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b48:	7dfb      	ldrb	r3, [r7, #23]
 8009b4a:	4618      	mov	r0, r3
 8009b4c:	f000 f880 	bl	8009c50 <USBD_Get_USB_Status>
 8009b50:	4603      	mov	r3, r0
 8009b52:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009b54:	7dbb      	ldrb	r3, [r7, #22]
}
 8009b56:	4618      	mov	r0, r3
 8009b58:	3718      	adds	r7, #24
 8009b5a:	46bd      	mov	sp, r7
 8009b5c:	bd80      	pop	{r7, pc}

08009b5e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009b5e:	b580      	push	{r7, lr}
 8009b60:	b082      	sub	sp, #8
 8009b62:	af00      	add	r7, sp, #0
 8009b64:	6078      	str	r0, [r7, #4]
 8009b66:	460b      	mov	r3, r1
 8009b68:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009b70:	78fa      	ldrb	r2, [r7, #3]
 8009b72:	4611      	mov	r1, r2
 8009b74:	4618      	mov	r0, r3
 8009b76:	f7f9 f9a6 	bl	8002ec6 <HAL_PCD_EP_GetRxCount>
 8009b7a:	4603      	mov	r3, r0
}
 8009b7c:	4618      	mov	r0, r3
 8009b7e:	3708      	adds	r7, #8
 8009b80:	46bd      	mov	sp, r7
 8009b82:	bd80      	pop	{r7, pc}

08009b84 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8009b84:	b580      	push	{r7, lr}
 8009b86:	b082      	sub	sp, #8
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	6078      	str	r0, [r7, #4]
 8009b8c:	460b      	mov	r3, r1
 8009b8e:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8009b90:	78fb      	ldrb	r3, [r7, #3]
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d002      	beq.n	8009b9c <HAL_PCDEx_LPM_Callback+0x18>
 8009b96:	2b01      	cmp	r3, #1
 8009b98:	d01f      	beq.n	8009bda <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8009b9a:	e03b      	b.n	8009c14 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	7adb      	ldrb	r3, [r3, #11]
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d007      	beq.n	8009bb4 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 8009ba4:	f7f6 ffd6 	bl	8000b54 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009ba8:	4b1c      	ldr	r3, [pc, #112]	@ (8009c1c <HAL_PCDEx_LPM_Callback+0x98>)
 8009baa:	691b      	ldr	r3, [r3, #16]
 8009bac:	4a1b      	ldr	r2, [pc, #108]	@ (8009c1c <HAL_PCDEx_LPM_Callback+0x98>)
 8009bae:	f023 0306 	bic.w	r3, r3, #6
 8009bb2:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	687a      	ldr	r2, [r7, #4]
 8009bc0:	6812      	ldr	r2, [r2, #0]
 8009bc2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009bc6:	f023 0301 	bic.w	r3, r3, #1
 8009bca:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009bd2:	4618      	mov	r0, r3
 8009bd4:	f7fe fa78 	bl	80080c8 <USBD_LL_Resume>
    break;
 8009bd8:	e01c      	b.n	8009c14 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	687a      	ldr	r2, [r7, #4]
 8009be6:	6812      	ldr	r2, [r2, #0]
 8009be8:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009bec:	f043 0301 	orr.w	r3, r3, #1
 8009bf0:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009bf8:	4618      	mov	r0, r3
 8009bfa:	f7fe fa49 	bl	8008090 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	7adb      	ldrb	r3, [r3, #11]
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d005      	beq.n	8009c12 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009c06:	4b05      	ldr	r3, [pc, #20]	@ (8009c1c <HAL_PCDEx_LPM_Callback+0x98>)
 8009c08:	691b      	ldr	r3, [r3, #16]
 8009c0a:	4a04      	ldr	r2, [pc, #16]	@ (8009c1c <HAL_PCDEx_LPM_Callback+0x98>)
 8009c0c:	f043 0306 	orr.w	r3, r3, #6
 8009c10:	6113      	str	r3, [r2, #16]
    break;
 8009c12:	bf00      	nop
}
 8009c14:	bf00      	nop
 8009c16:	3708      	adds	r7, #8
 8009c18:	46bd      	mov	sp, r7
 8009c1a:	bd80      	pop	{r7, pc}
 8009c1c:	e000ed00 	.word	0xe000ed00

08009c20 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009c20:	b480      	push	{r7}
 8009c22:	b083      	sub	sp, #12
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009c28:	4b03      	ldr	r3, [pc, #12]	@ (8009c38 <USBD_static_malloc+0x18>)
}
 8009c2a:	4618      	mov	r0, r3
 8009c2c:	370c      	adds	r7, #12
 8009c2e:	46bd      	mov	sp, r7
 8009c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c34:	4770      	bx	lr
 8009c36:	bf00      	nop
 8009c38:	20001cc4 	.word	0x20001cc4

08009c3c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009c3c:	b480      	push	{r7}
 8009c3e:	b083      	sub	sp, #12
 8009c40:	af00      	add	r7, sp, #0
 8009c42:	6078      	str	r0, [r7, #4]

}
 8009c44:	bf00      	nop
 8009c46:	370c      	adds	r7, #12
 8009c48:	46bd      	mov	sp, r7
 8009c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c4e:	4770      	bx	lr

08009c50 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009c50:	b480      	push	{r7}
 8009c52:	b085      	sub	sp, #20
 8009c54:	af00      	add	r7, sp, #0
 8009c56:	4603      	mov	r3, r0
 8009c58:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c5a:	2300      	movs	r3, #0
 8009c5c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009c5e:	79fb      	ldrb	r3, [r7, #7]
 8009c60:	2b03      	cmp	r3, #3
 8009c62:	d817      	bhi.n	8009c94 <USBD_Get_USB_Status+0x44>
 8009c64:	a201      	add	r2, pc, #4	@ (adr r2, 8009c6c <USBD_Get_USB_Status+0x1c>)
 8009c66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c6a:	bf00      	nop
 8009c6c:	08009c7d 	.word	0x08009c7d
 8009c70:	08009c83 	.word	0x08009c83
 8009c74:	08009c89 	.word	0x08009c89
 8009c78:	08009c8f 	.word	0x08009c8f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009c7c:	2300      	movs	r3, #0
 8009c7e:	73fb      	strb	r3, [r7, #15]
    break;
 8009c80:	e00b      	b.n	8009c9a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009c82:	2303      	movs	r3, #3
 8009c84:	73fb      	strb	r3, [r7, #15]
    break;
 8009c86:	e008      	b.n	8009c9a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009c88:	2301      	movs	r3, #1
 8009c8a:	73fb      	strb	r3, [r7, #15]
    break;
 8009c8c:	e005      	b.n	8009c9a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009c8e:	2303      	movs	r3, #3
 8009c90:	73fb      	strb	r3, [r7, #15]
    break;
 8009c92:	e002      	b.n	8009c9a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009c94:	2303      	movs	r3, #3
 8009c96:	73fb      	strb	r3, [r7, #15]
    break;
 8009c98:	bf00      	nop
  }
  return usb_status;
 8009c9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c9c:	4618      	mov	r0, r3
 8009c9e:	3714      	adds	r7, #20
 8009ca0:	46bd      	mov	sp, r7
 8009ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca6:	4770      	bx	lr

08009ca8 <memset>:
 8009ca8:	4402      	add	r2, r0
 8009caa:	4603      	mov	r3, r0
 8009cac:	4293      	cmp	r3, r2
 8009cae:	d100      	bne.n	8009cb2 <memset+0xa>
 8009cb0:	4770      	bx	lr
 8009cb2:	f803 1b01 	strb.w	r1, [r3], #1
 8009cb6:	e7f9      	b.n	8009cac <memset+0x4>

08009cb8 <__libc_init_array>:
 8009cb8:	b570      	push	{r4, r5, r6, lr}
 8009cba:	4d0d      	ldr	r5, [pc, #52]	@ (8009cf0 <__libc_init_array+0x38>)
 8009cbc:	4c0d      	ldr	r4, [pc, #52]	@ (8009cf4 <__libc_init_array+0x3c>)
 8009cbe:	1b64      	subs	r4, r4, r5
 8009cc0:	10a4      	asrs	r4, r4, #2
 8009cc2:	2600      	movs	r6, #0
 8009cc4:	42a6      	cmp	r6, r4
 8009cc6:	d109      	bne.n	8009cdc <__libc_init_array+0x24>
 8009cc8:	4d0b      	ldr	r5, [pc, #44]	@ (8009cf8 <__libc_init_array+0x40>)
 8009cca:	4c0c      	ldr	r4, [pc, #48]	@ (8009cfc <__libc_init_array+0x44>)
 8009ccc:	f000 f818 	bl	8009d00 <_init>
 8009cd0:	1b64      	subs	r4, r4, r5
 8009cd2:	10a4      	asrs	r4, r4, #2
 8009cd4:	2600      	movs	r6, #0
 8009cd6:	42a6      	cmp	r6, r4
 8009cd8:	d105      	bne.n	8009ce6 <__libc_init_array+0x2e>
 8009cda:	bd70      	pop	{r4, r5, r6, pc}
 8009cdc:	f855 3b04 	ldr.w	r3, [r5], #4
 8009ce0:	4798      	blx	r3
 8009ce2:	3601      	adds	r6, #1
 8009ce4:	e7ee      	b.n	8009cc4 <__libc_init_array+0xc>
 8009ce6:	f855 3b04 	ldr.w	r3, [r5], #4
 8009cea:	4798      	blx	r3
 8009cec:	3601      	adds	r6, #1
 8009cee:	e7f2      	b.n	8009cd6 <__libc_init_array+0x1e>
 8009cf0:	08009d80 	.word	0x08009d80
 8009cf4:	08009d80 	.word	0x08009d80
 8009cf8:	08009d80 	.word	0x08009d80
 8009cfc:	08009d84 	.word	0x08009d84

08009d00 <_init>:
 8009d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d02:	bf00      	nop
 8009d04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d06:	bc08      	pop	{r3}
 8009d08:	469e      	mov	lr, r3
 8009d0a:	4770      	bx	lr

08009d0c <_fini>:
 8009d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d0e:	bf00      	nop
 8009d10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d12:	bc08      	pop	{r3}
 8009d14:	469e      	mov	lr, r3
 8009d16:	4770      	bx	lr
