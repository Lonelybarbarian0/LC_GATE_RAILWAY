
RAILWAY_GATE_FINAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009a58  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08009c1c  08009c1c  0000ac1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009c7c  08009c7c  0000b110  2**0
                  CONTENTS
  4 .ARM          00000008  08009c7c  08009c7c  0000ac7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009c84  08009c84  0000b110  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009c84  08009c84  0000ac84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009c88  08009c88  0000ac88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000110  20000000  08009c8c  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001dd4  20000110  08009d9c  0000b110  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001ee4  08009d9c  0000bee4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b110  2**0
                  CONTENTS, READONLY
 12 .debug_info   000196f2  00000000  00000000  0000b140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003dac  00000000  00000000  00024832  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001550  00000000  00000000  000285e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000105a  00000000  00000000  00029b30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000274d3  00000000  00000000  0002ab8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e01a  00000000  00000000  0005205d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e1a72  00000000  00000000  00070077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00151ae9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005800  00000000  00000000  00151b2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007c  00000000  00000000  0015732c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000110 	.word	0x20000110
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08009c04 	.word	0x08009c04

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000114 	.word	0x20000114
 8000200:	08009c04 	.word	0x08009c04

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96a 	b.w	80004f0 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	460c      	mov	r4, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14e      	bne.n	80002de <__udivmoddi4+0xaa>
 8000240:	4694      	mov	ip, r2
 8000242:	458c      	cmp	ip, r1
 8000244:	4686      	mov	lr, r0
 8000246:	fab2 f282 	clz	r2, r2
 800024a:	d962      	bls.n	8000312 <__udivmoddi4+0xde>
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0320 	rsb	r3, r2, #32
 8000252:	4091      	lsls	r1, r2
 8000254:	fa20 f303 	lsr.w	r3, r0, r3
 8000258:	fa0c fc02 	lsl.w	ip, ip, r2
 800025c:	4319      	orrs	r1, r3
 800025e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000262:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000266:	fa1f f68c 	uxth.w	r6, ip
 800026a:	fbb1 f4f7 	udiv	r4, r1, r7
 800026e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000272:	fb07 1114 	mls	r1, r7, r4, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb04 f106 	mul.w	r1, r4, r6
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f104 30ff 	add.w	r0, r4, #4294967295
 800028a:	f080 8112 	bcs.w	80004b2 <__udivmoddi4+0x27e>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 810f 	bls.w	80004b2 <__udivmoddi4+0x27e>
 8000294:	3c02      	subs	r4, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a59      	subs	r1, r3, r1
 800029a:	fa1f f38e 	uxth.w	r3, lr
 800029e:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a2:	fb07 1110 	mls	r1, r7, r0, r1
 80002a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002aa:	fb00 f606 	mul.w	r6, r0, r6
 80002ae:	429e      	cmp	r6, r3
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x94>
 80002b2:	eb1c 0303 	adds.w	r3, ip, r3
 80002b6:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ba:	f080 80fc 	bcs.w	80004b6 <__udivmoddi4+0x282>
 80002be:	429e      	cmp	r6, r3
 80002c0:	f240 80f9 	bls.w	80004b6 <__udivmoddi4+0x282>
 80002c4:	4463      	add	r3, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	1b9b      	subs	r3, r3, r6
 80002ca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11d      	cbz	r5, 80002da <__udivmoddi4+0xa6>
 80002d2:	40d3      	lsrs	r3, r2
 80002d4:	2200      	movs	r2, #0
 80002d6:	e9c5 3200 	strd	r3, r2, [r5]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d905      	bls.n	80002ee <__udivmoddi4+0xba>
 80002e2:	b10d      	cbz	r5, 80002e8 <__udivmoddi4+0xb4>
 80002e4:	e9c5 0100 	strd	r0, r1, [r5]
 80002e8:	2100      	movs	r1, #0
 80002ea:	4608      	mov	r0, r1
 80002ec:	e7f5      	b.n	80002da <__udivmoddi4+0xa6>
 80002ee:	fab3 f183 	clz	r1, r3
 80002f2:	2900      	cmp	r1, #0
 80002f4:	d146      	bne.n	8000384 <__udivmoddi4+0x150>
 80002f6:	42a3      	cmp	r3, r4
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xcc>
 80002fa:	4290      	cmp	r0, r2
 80002fc:	f0c0 80f0 	bcc.w	80004e0 <__udivmoddi4+0x2ac>
 8000300:	1a86      	subs	r6, r0, r2
 8000302:	eb64 0303 	sbc.w	r3, r4, r3
 8000306:	2001      	movs	r0, #1
 8000308:	2d00      	cmp	r5, #0
 800030a:	d0e6      	beq.n	80002da <__udivmoddi4+0xa6>
 800030c:	e9c5 6300 	strd	r6, r3, [r5]
 8000310:	e7e3      	b.n	80002da <__udivmoddi4+0xa6>
 8000312:	2a00      	cmp	r2, #0
 8000314:	f040 8090 	bne.w	8000438 <__udivmoddi4+0x204>
 8000318:	eba1 040c 	sub.w	r4, r1, ip
 800031c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000320:	fa1f f78c 	uxth.w	r7, ip
 8000324:	2101      	movs	r1, #1
 8000326:	fbb4 f6f8 	udiv	r6, r4, r8
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb08 4416 	mls	r4, r8, r6, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb07 f006 	mul.w	r0, r7, r6
 800033a:	4298      	cmp	r0, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x11c>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 34ff 	add.w	r4, r6, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x11a>
 8000348:	4298      	cmp	r0, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 800034e:	4626      	mov	r6, r4
 8000350:	1a1c      	subs	r4, r3, r0
 8000352:	fa1f f38e 	uxth.w	r3, lr
 8000356:	fbb4 f0f8 	udiv	r0, r4, r8
 800035a:	fb08 4410 	mls	r4, r8, r0, r4
 800035e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000362:	fb00 f707 	mul.w	r7, r0, r7
 8000366:	429f      	cmp	r7, r3
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x148>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x146>
 8000374:	429f      	cmp	r7, r3
 8000376:	f200 80b0 	bhi.w	80004da <__udivmoddi4+0x2a6>
 800037a:	4620      	mov	r0, r4
 800037c:	1bdb      	subs	r3, r3, r7
 800037e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000382:	e7a5      	b.n	80002d0 <__udivmoddi4+0x9c>
 8000384:	f1c1 0620 	rsb	r6, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 f706 	lsr.w	r7, r2, r6
 800038e:	431f      	orrs	r7, r3
 8000390:	fa20 fc06 	lsr.w	ip, r0, r6
 8000394:	fa04 f301 	lsl.w	r3, r4, r1
 8000398:	ea43 030c 	orr.w	r3, r3, ip
 800039c:	40f4      	lsrs	r4, r6
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	0c38      	lsrs	r0, r7, #16
 80003a4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a8:	fbb4 fef0 	udiv	lr, r4, r0
 80003ac:	fa1f fc87 	uxth.w	ip, r7
 80003b0:	fb00 441e 	mls	r4, r0, lr, r4
 80003b4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b8:	fb0e f90c 	mul.w	r9, lr, ip
 80003bc:	45a1      	cmp	r9, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	d90a      	bls.n	80003da <__udivmoddi4+0x1a6>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ca:	f080 8084 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80003ce:	45a1      	cmp	r9, r4
 80003d0:	f240 8081 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80003d4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d8:	443c      	add	r4, r7
 80003da:	eba4 0409 	sub.w	r4, r4, r9
 80003de:	fa1f f983 	uxth.w	r9, r3
 80003e2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003e6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ee:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1d2>
 80003f6:	193c      	adds	r4, r7, r4
 80003f8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003fc:	d267      	bcs.n	80004ce <__udivmoddi4+0x29a>
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d965      	bls.n	80004ce <__udivmoddi4+0x29a>
 8000402:	3b02      	subs	r3, #2
 8000404:	443c      	add	r4, r7
 8000406:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040a:	fba0 9302 	umull	r9, r3, r0, r2
 800040e:	eba4 040c 	sub.w	r4, r4, ip
 8000412:	429c      	cmp	r4, r3
 8000414:	46ce      	mov	lr, r9
 8000416:	469c      	mov	ip, r3
 8000418:	d351      	bcc.n	80004be <__udivmoddi4+0x28a>
 800041a:	d04e      	beq.n	80004ba <__udivmoddi4+0x286>
 800041c:	b155      	cbz	r5, 8000434 <__udivmoddi4+0x200>
 800041e:	ebb8 030e 	subs.w	r3, r8, lr
 8000422:	eb64 040c 	sbc.w	r4, r4, ip
 8000426:	fa04 f606 	lsl.w	r6, r4, r6
 800042a:	40cb      	lsrs	r3, r1
 800042c:	431e      	orrs	r6, r3
 800042e:	40cc      	lsrs	r4, r1
 8000430:	e9c5 6400 	strd	r6, r4, [r5]
 8000434:	2100      	movs	r1, #0
 8000436:	e750      	b.n	80002da <__udivmoddi4+0xa6>
 8000438:	f1c2 0320 	rsb	r3, r2, #32
 800043c:	fa20 f103 	lsr.w	r1, r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa24 f303 	lsr.w	r3, r4, r3
 8000448:	4094      	lsls	r4, r2
 800044a:	430c      	orrs	r4, r1
 800044c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000450:	fa00 fe02 	lsl.w	lr, r0, r2
 8000454:	fa1f f78c 	uxth.w	r7, ip
 8000458:	fbb3 f0f8 	udiv	r0, r3, r8
 800045c:	fb08 3110 	mls	r1, r8, r0, r3
 8000460:	0c23      	lsrs	r3, r4, #16
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f107 	mul.w	r1, r0, r7
 800046a:	4299      	cmp	r1, r3
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x24c>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 36ff 	add.w	r6, r0, #4294967295
 8000476:	d22c      	bcs.n	80004d2 <__udivmoddi4+0x29e>
 8000478:	4299      	cmp	r1, r3
 800047a:	d92a      	bls.n	80004d2 <__udivmoddi4+0x29e>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1a5b      	subs	r3, r3, r1
 8000482:	b2a4      	uxth	r4, r4
 8000484:	fbb3 f1f8 	udiv	r1, r3, r8
 8000488:	fb08 3311 	mls	r3, r8, r1, r3
 800048c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000490:	fb01 f307 	mul.w	r3, r1, r7
 8000494:	42a3      	cmp	r3, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x276>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a0:	d213      	bcs.n	80004ca <__udivmoddi4+0x296>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d911      	bls.n	80004ca <__udivmoddi4+0x296>
 80004a6:	3902      	subs	r1, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	1ae4      	subs	r4, r4, r3
 80004ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b0:	e739      	b.n	8000326 <__udivmoddi4+0xf2>
 80004b2:	4604      	mov	r4, r0
 80004b4:	e6f0      	b.n	8000298 <__udivmoddi4+0x64>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e706      	b.n	80002c8 <__udivmoddi4+0x94>
 80004ba:	45c8      	cmp	r8, r9
 80004bc:	d2ae      	bcs.n	800041c <__udivmoddi4+0x1e8>
 80004be:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004c6:	3801      	subs	r0, #1
 80004c8:	e7a8      	b.n	800041c <__udivmoddi4+0x1e8>
 80004ca:	4631      	mov	r1, r6
 80004cc:	e7ed      	b.n	80004aa <__udivmoddi4+0x276>
 80004ce:	4603      	mov	r3, r0
 80004d0:	e799      	b.n	8000406 <__udivmoddi4+0x1d2>
 80004d2:	4630      	mov	r0, r6
 80004d4:	e7d4      	b.n	8000480 <__udivmoddi4+0x24c>
 80004d6:	46d6      	mov	lr, sl
 80004d8:	e77f      	b.n	80003da <__udivmoddi4+0x1a6>
 80004da:	4463      	add	r3, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e74d      	b.n	800037c <__udivmoddi4+0x148>
 80004e0:	4606      	mov	r6, r0
 80004e2:	4623      	mov	r3, r4
 80004e4:	4608      	mov	r0, r1
 80004e6:	e70f      	b.n	8000308 <__udivmoddi4+0xd4>
 80004e8:	3e02      	subs	r6, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	e730      	b.n	8000350 <__udivmoddi4+0x11c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <Lever_Lock>:
  *         Uses temp_rx_buff[0] to determine
  * @param  None
  * @retval None
  */
void Lever_Lock()
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
	if(temp_rx_buff[0] == 0x01)
 80004f8:	4b0c      	ldr	r3, [pc, #48]	@ (800052c <Lever_Lock+0x38>)
 80004fa:	781b      	ldrb	r3, [r3, #0]
 80004fc:	b2db      	uxtb	r3, r3
 80004fe:	2b01      	cmp	r3, #1
 8000500:	d106      	bne.n	8000510 <Lever_Lock+0x1c>
	{
		HAL_GPIO_WritePin(LT_GPIO_Port, LT_Pin, GPIO_PIN_SET); /* Turn ON */
 8000502:	2201      	movs	r2, #1
 8000504:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000508:	4809      	ldr	r0, [pc, #36]	@ (8000530 <Lever_Lock+0x3c>)
 800050a:	f001 fd19 	bl	8001f40 <HAL_GPIO_WritePin>
	}
	else if (temp_rx_buff[0] == 0x00)
	{
		HAL_GPIO_WritePin(LT_GPIO_Port, LT_Pin, GPIO_PIN_RESET); /* Turn OFF */
	}
}
 800050e:	e00a      	b.n	8000526 <Lever_Lock+0x32>
	else if (temp_rx_buff[0] == 0x00)
 8000510:	4b06      	ldr	r3, [pc, #24]	@ (800052c <Lever_Lock+0x38>)
 8000512:	781b      	ldrb	r3, [r3, #0]
 8000514:	b2db      	uxtb	r3, r3
 8000516:	2b00      	cmp	r3, #0
 8000518:	d105      	bne.n	8000526 <Lever_Lock+0x32>
		HAL_GPIO_WritePin(LT_GPIO_Port, LT_Pin, GPIO_PIN_RESET); /* Turn OFF */
 800051a:	2200      	movs	r2, #0
 800051c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000520:	4803      	ldr	r0, [pc, #12]	@ (8000530 <Lever_Lock+0x3c>)
 8000522:	f001 fd0d 	bl	8001f40 <HAL_GPIO_WritePin>
}
 8000526:	bf00      	nop
 8000528:	bd80      	pop	{r7, pc}
 800052a:	bf00      	nop
 800052c:	20000000 	.word	0x20000000
 8000530:	40020800 	.word	0x40020800

08000534 <Alarm_ON>:
  *         Uses temp_rx_buff[1] to determine
  * @param  None
  * @retval None
  */
void Alarm_ON()
{
 8000534:	b580      	push	{r7, lr}
 8000536:	af00      	add	r7, sp, #0
	if(temp_rx_buff[1] == 0x01)
 8000538:	4b0c      	ldr	r3, [pc, #48]	@ (800056c <Alarm_ON+0x38>)
 800053a:	785b      	ldrb	r3, [r3, #1]
 800053c:	b2db      	uxtb	r3, r3
 800053e:	2b01      	cmp	r3, #1
 8000540:	d106      	bne.n	8000550 <Alarm_ON+0x1c>
	{
		HAL_GPIO_WritePin(AT_GPIO_Port, AT_Pin, GPIO_PIN_SET); /* Turn ON */
 8000542:	2201      	movs	r2, #1
 8000544:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000548:	4809      	ldr	r0, [pc, #36]	@ (8000570 <Alarm_ON+0x3c>)
 800054a:	f001 fcf9 	bl	8001f40 <HAL_GPIO_WritePin>
	}
	else if (temp_rx_buff[1] == 0x00)
	{
		HAL_GPIO_WritePin(AT_GPIO_Port, AT_Pin, GPIO_PIN_RESET); /* Turn OFF */
	}
}
 800054e:	e00a      	b.n	8000566 <Alarm_ON+0x32>
	else if (temp_rx_buff[1] == 0x00)
 8000550:	4b06      	ldr	r3, [pc, #24]	@ (800056c <Alarm_ON+0x38>)
 8000552:	785b      	ldrb	r3, [r3, #1]
 8000554:	b2db      	uxtb	r3, r3
 8000556:	2b00      	cmp	r3, #0
 8000558:	d105      	bne.n	8000566 <Alarm_ON+0x32>
		HAL_GPIO_WritePin(AT_GPIO_Port, AT_Pin, GPIO_PIN_RESET); /* Turn OFF */
 800055a:	2200      	movs	r2, #0
 800055c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000560:	4803      	ldr	r0, [pc, #12]	@ (8000570 <Alarm_ON+0x3c>)
 8000562:	f001 fced 	bl	8001f40 <HAL_GPIO_WritePin>
}
 8000566:	bf00      	nop
 8000568:	bd80      	pop	{r7, pc}
 800056a:	bf00      	nop
 800056c:	20000000 	.word	0x20000000
 8000570:	40020800 	.word	0x40020800

08000574 <Transmit_Msg>:
  *         Total 10 bytes of data...
  * @param  None
  * @retval None
  */
void Transmit_Msg()
{
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
	tx_buff[0] = 0x55;            /* Header */
 8000578:	4b17      	ldr	r3, [pc, #92]	@ (80005d8 <Transmit_Msg+0x64>)
 800057a:	2255      	movs	r2, #85	@ 0x55
 800057c:	701a      	strb	r2, [r3, #0]
	tx_buff[1] = 0x55;            /* Header */
 800057e:	4b16      	ldr	r3, [pc, #88]	@ (80005d8 <Transmit_Msg+0x64>)
 8000580:	2255      	movs	r2, #85	@ 0x55
 8000582:	705a      	strb	r2, [r3, #1]

	tx_buff[2] = temp_tx_buff[2];    /* Train UP */
 8000584:	4b15      	ldr	r3, [pc, #84]	@ (80005dc <Transmit_Msg+0x68>)
 8000586:	789b      	ldrb	r3, [r3, #2]
 8000588:	b2da      	uxtb	r2, r3
 800058a:	4b13      	ldr	r3, [pc, #76]	@ (80005d8 <Transmit_Msg+0x64>)
 800058c:	709a      	strb	r2, [r3, #2]
	tx_buff[3] = temp_tx_buff[3];    /* Train DOWN */
 800058e:	4b13      	ldr	r3, [pc, #76]	@ (80005dc <Transmit_Msg+0x68>)
 8000590:	78db      	ldrb	r3, [r3, #3]
 8000592:	b2da      	uxtb	r2, r3
 8000594:	4b10      	ldr	r3, [pc, #64]	@ (80005d8 <Transmit_Msg+0x64>)
 8000596:	70da      	strb	r2, [r3, #3]

	tx_buff[4] = temp_tx_buff[4];    /* BOOM 1 STATUS */
 8000598:	4b10      	ldr	r3, [pc, #64]	@ (80005dc <Transmit_Msg+0x68>)
 800059a:	791b      	ldrb	r3, [r3, #4]
 800059c:	b2da      	uxtb	r2, r3
 800059e:	4b0e      	ldr	r3, [pc, #56]	@ (80005d8 <Transmit_Msg+0x64>)
 80005a0:	711a      	strb	r2, [r3, #4]
	tx_buff[5] = temp_tx_buff[5];    /* BOOM 2 STATUS */
 80005a2:	4b0e      	ldr	r3, [pc, #56]	@ (80005dc <Transmit_Msg+0x68>)
 80005a4:	795b      	ldrb	r3, [r3, #5]
 80005a6:	b2da      	uxtb	r2, r3
 80005a8:	4b0b      	ldr	r3, [pc, #44]	@ (80005d8 <Transmit_Msg+0x64>)
 80005aa:	715a      	strb	r2, [r3, #5]

	tx_buff[6] = temp_tx_buff[6];    /* BOOM 1 HEALTH */
 80005ac:	4b0b      	ldr	r3, [pc, #44]	@ (80005dc <Transmit_Msg+0x68>)
 80005ae:	799b      	ldrb	r3, [r3, #6]
 80005b0:	b2da      	uxtb	r2, r3
 80005b2:	4b09      	ldr	r3, [pc, #36]	@ (80005d8 <Transmit_Msg+0x64>)
 80005b4:	719a      	strb	r2, [r3, #6]
	tx_buff[7] = temp_tx_buff[7];    /* BOOM 2 HEALTH */
 80005b6:	4b09      	ldr	r3, [pc, #36]	@ (80005dc <Transmit_Msg+0x68>)
 80005b8:	79db      	ldrb	r3, [r3, #7]
 80005ba:	b2da      	uxtb	r2, r3
 80005bc:	4b06      	ldr	r3, [pc, #24]	@ (80005d8 <Transmit_Msg+0x64>)
 80005be:	71da      	strb	r2, [r3, #7]

	tx_buff[8] = 0xFF;            /* Lever Lock Status */
 80005c0:	4b05      	ldr	r3, [pc, #20]	@ (80005d8 <Transmit_Msg+0x64>)
 80005c2:	22ff      	movs	r2, #255	@ 0xff
 80005c4:	721a      	strb	r2, [r3, #8]
	tx_buff[9] = 0xFF;            /* Alarm Status */
 80005c6:	4b04      	ldr	r3, [pc, #16]	@ (80005d8 <Transmit_Msg+0x64>)
 80005c8:	22ff      	movs	r2, #255	@ 0xff
 80005ca:	725a      	strb	r2, [r3, #9]

	CDC_Transmit_FS((uint8_t*)tx_buff,10);
 80005cc:	210a      	movs	r1, #10
 80005ce:	4802      	ldr	r0, [pc, #8]	@ (80005d8 <Transmit_Msg+0x64>)
 80005d0:	f008 fe1a 	bl	8009208 <CDC_Transmit_FS>
}
 80005d4:	bf00      	nop
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	20000134 	.word	0x20000134
 80005dc:	20000140 	.word	0x20000140

080005e0 <Receive_Msg>:
  * @brief  Reads the recieved buffer from USC VCP
  * @param  None
  * @retval None
  */
void Receive_Msg()
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
	if( (rx_buff[0] == 0x59) && (rx_buff[1] == 0x59))
 80005e4:	4b0f      	ldr	r3, [pc, #60]	@ (8000624 <Receive_Msg+0x44>)
 80005e6:	781b      	ldrb	r3, [r3, #0]
 80005e8:	b2db      	uxtb	r3, r3
 80005ea:	2b59      	cmp	r3, #89	@ 0x59
 80005ec:	d118      	bne.n	8000620 <Receive_Msg+0x40>
 80005ee:	4b0d      	ldr	r3, [pc, #52]	@ (8000624 <Receive_Msg+0x44>)
 80005f0:	785b      	ldrb	r3, [r3, #1]
 80005f2:	b2db      	uxtb	r3, r3
 80005f4:	2b59      	cmp	r3, #89	@ 0x59
 80005f6:	d113      	bne.n	8000620 <Receive_Msg+0x40>
	{
		temp_rx_buff[0] = rx_buff[2];
 80005f8:	4b0a      	ldr	r3, [pc, #40]	@ (8000624 <Receive_Msg+0x44>)
 80005fa:	789b      	ldrb	r3, [r3, #2]
 80005fc:	b2da      	uxtb	r2, r3
 80005fe:	4b0a      	ldr	r3, [pc, #40]	@ (8000628 <Receive_Msg+0x48>)
 8000600:	701a      	strb	r2, [r3, #0]
		temp_rx_buff[1] = rx_buff[3];
 8000602:	4b08      	ldr	r3, [pc, #32]	@ (8000624 <Receive_Msg+0x44>)
 8000604:	78db      	ldrb	r3, [r3, #3]
 8000606:	b2da      	uxtb	r2, r3
 8000608:	4b07      	ldr	r3, [pc, #28]	@ (8000628 <Receive_Msg+0x48>)
 800060a:	705a      	strb	r2, [r3, #1]
		if(rx_buff[4] == 0x01)
 800060c:	4b05      	ldr	r3, [pc, #20]	@ (8000624 <Receive_Msg+0x44>)
 800060e:	791b      	ldrb	r3, [r3, #4]
 8000610:	b2db      	uxtb	r3, r3
 8000612:	2b01      	cmp	r3, #1
 8000614:	d104      	bne.n	8000620 <Receive_Msg+0x40>
		{
			Transmit_Msg();
 8000616:	f7ff ffad 	bl	8000574 <Transmit_Msg>
			rx_buff[4] = 0xFF;
 800061a:	4b02      	ldr	r3, [pc, #8]	@ (8000624 <Receive_Msg+0x44>)
 800061c:	22ff      	movs	r2, #255	@ 0xff
 800061e:	711a      	strb	r2, [r3, #4]
		}
	}
}
 8000620:	bf00      	nop
 8000622:	bd80      	pop	{r7, pc}
 8000624:	2000012c 	.word	0x2000012c
 8000628:	20000000 	.word	0x20000000

0800062c <Boom1_Status>:
  *         Changes temp_tx_msg[4] - UP/DOWN and temp_tx_msg[6] - GOOD/BAD  accordingly...
  * @param  None
  * @retval None.
  */
void Boom1_Status()
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
	if( ( (HAL_GPIO_ReadPin(BOOM1_LS11_GPIO_Port, BOOM1_LS11_Pin) == GPIO_PIN_RESET) &&
 8000630:	2104      	movs	r1, #4
 8000632:	4828      	ldr	r0, [pc, #160]	@ (80006d4 <Boom1_Status+0xa8>)
 8000634:	f001 fc6c 	bl	8001f10 <HAL_GPIO_ReadPin>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d106      	bne.n	800064c <Boom1_Status+0x20>
		  (HAL_GPIO_ReadPin(BOOM1_LS12_GPIO_Port, BOOM1_LS12_Pin) == GPIO_PIN_SET) ) ||
 800063e:	2108      	movs	r1, #8
 8000640:	4824      	ldr	r0, [pc, #144]	@ (80006d4 <Boom1_Status+0xa8>)
 8000642:	f001 fc65 	bl	8001f10 <HAL_GPIO_ReadPin>
 8000646:	4603      	mov	r3, r0
	if( ( (HAL_GPIO_ReadPin(BOOM1_LS11_GPIO_Port, BOOM1_LS11_Pin) == GPIO_PIN_RESET) &&
 8000648:	2b01      	cmp	r3, #1
 800064a:	d00e      	beq.n	800066a <Boom1_Status+0x3e>
		( (HAL_GPIO_ReadPin(BOOM1_LS21_GPIO_Port, BOOM1_LS21_Pin) == GPIO_PIN_RESET) &&
 800064c:	2180      	movs	r1, #128	@ 0x80
 800064e:	4822      	ldr	r0, [pc, #136]	@ (80006d8 <Boom1_Status+0xac>)
 8000650:	f001 fc5e 	bl	8001f10 <HAL_GPIO_ReadPin>
 8000654:	4603      	mov	r3, r0
		  (HAL_GPIO_ReadPin(BOOM1_LS12_GPIO_Port, BOOM1_LS12_Pin) == GPIO_PIN_SET) ) ||
 8000656:	2b00      	cmp	r3, #0
 8000658:	d10e      	bne.n	8000678 <Boom1_Status+0x4c>
		  (HAL_GPIO_ReadPin(BOOM1_LS22_GPIO_Port, BOOM1_LS22_Pin) == GPIO_PIN_SET) ) )
 800065a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800065e:	481d      	ldr	r0, [pc, #116]	@ (80006d4 <Boom1_Status+0xa8>)
 8000660:	f001 fc56 	bl	8001f10 <HAL_GPIO_ReadPin>
 8000664:	4603      	mov	r3, r0
		( (HAL_GPIO_ReadPin(BOOM1_LS21_GPIO_Port, BOOM1_LS21_Pin) == GPIO_PIN_RESET) &&
 8000666:	2b01      	cmp	r3, #1
 8000668:	d106      	bne.n	8000678 <Boom1_Status+0x4c>
	{
		temp_tx_buff[4] = 0x00; /* BOOM 1 CLOSED */
 800066a:	4b1c      	ldr	r3, [pc, #112]	@ (80006dc <Boom1_Status+0xb0>)
 800066c:	2200      	movs	r2, #0
 800066e:	711a      	strb	r2, [r3, #4]
		temp_tx_buff[6] = 0x01; /* BOOM 1 Healthy */
 8000670:	4b1a      	ldr	r3, [pc, #104]	@ (80006dc <Boom1_Status+0xb0>)
 8000672:	2201      	movs	r2, #1
 8000674:	719a      	strb	r2, [r3, #6]
 8000676:	e02a      	b.n	80006ce <Boom1_Status+0xa2>

	}
	else if( ( (HAL_GPIO_ReadPin(BOOM1_LS11_GPIO_Port, BOOM1_LS11_Pin) == GPIO_PIN_SET) &&
 8000678:	2104      	movs	r1, #4
 800067a:	4816      	ldr	r0, [pc, #88]	@ (80006d4 <Boom1_Status+0xa8>)
 800067c:	f001 fc48 	bl	8001f10 <HAL_GPIO_ReadPin>
 8000680:	4603      	mov	r3, r0
 8000682:	2b01      	cmp	r3, #1
 8000684:	d106      	bne.n	8000694 <Boom1_Status+0x68>
		       (HAL_GPIO_ReadPin(BOOM1_LS12_GPIO_Port, BOOM1_LS12_Pin) == GPIO_PIN_RESET) ) ||
 8000686:	2108      	movs	r1, #8
 8000688:	4812      	ldr	r0, [pc, #72]	@ (80006d4 <Boom1_Status+0xa8>)
 800068a:	f001 fc41 	bl	8001f10 <HAL_GPIO_ReadPin>
 800068e:	4603      	mov	r3, r0
	else if( ( (HAL_GPIO_ReadPin(BOOM1_LS11_GPIO_Port, BOOM1_LS11_Pin) == GPIO_PIN_SET) &&
 8000690:	2b00      	cmp	r3, #0
 8000692:	d00e      	beq.n	80006b2 <Boom1_Status+0x86>
		     ( (HAL_GPIO_ReadPin(BOOM1_LS21_GPIO_Port, BOOM1_LS21_Pin) == GPIO_PIN_SET) &&
 8000694:	2180      	movs	r1, #128	@ 0x80
 8000696:	4810      	ldr	r0, [pc, #64]	@ (80006d8 <Boom1_Status+0xac>)
 8000698:	f001 fc3a 	bl	8001f10 <HAL_GPIO_ReadPin>
 800069c:	4603      	mov	r3, r0
		       (HAL_GPIO_ReadPin(BOOM1_LS12_GPIO_Port, BOOM1_LS12_Pin) == GPIO_PIN_RESET) ) ||
 800069e:	2b01      	cmp	r3, #1
 80006a0:	d10e      	bne.n	80006c0 <Boom1_Status+0x94>
		       (HAL_GPIO_ReadPin(BOOM1_LS22_GPIO_Port, BOOM1_LS22_Pin) == GPIO_PIN_RESET) ) )
 80006a2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80006a6:	480b      	ldr	r0, [pc, #44]	@ (80006d4 <Boom1_Status+0xa8>)
 80006a8:	f001 fc32 	bl	8001f10 <HAL_GPIO_ReadPin>
 80006ac:	4603      	mov	r3, r0
		     ( (HAL_GPIO_ReadPin(BOOM1_LS21_GPIO_Port, BOOM1_LS21_Pin) == GPIO_PIN_SET) &&
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d106      	bne.n	80006c0 <Boom1_Status+0x94>
	{
		temp_tx_buff[4] = 0x01; /* BOOM 1 OPEN */
 80006b2:	4b0a      	ldr	r3, [pc, #40]	@ (80006dc <Boom1_Status+0xb0>)
 80006b4:	2201      	movs	r2, #1
 80006b6:	711a      	strb	r2, [r3, #4]
		temp_tx_buff[6] = 0x01; /* BOOM 1 Healthy */
 80006b8:	4b08      	ldr	r3, [pc, #32]	@ (80006dc <Boom1_Status+0xb0>)
 80006ba:	2201      	movs	r2, #1
 80006bc:	719a      	strb	r2, [r3, #6]
 80006be:	e006      	b.n	80006ce <Boom1_Status+0xa2>
	}
	else
	{
		temp_tx_buff[4] = 0xFF;
 80006c0:	4b06      	ldr	r3, [pc, #24]	@ (80006dc <Boom1_Status+0xb0>)
 80006c2:	22ff      	movs	r2, #255	@ 0xff
 80006c4:	711a      	strb	r2, [r3, #4]
		temp_tx_buff[6] = 0x00; /* BOOM 1 HEALTH BAD */
 80006c6:	4b05      	ldr	r3, [pc, #20]	@ (80006dc <Boom1_Status+0xb0>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	719a      	strb	r2, [r3, #6]
	}

}
 80006cc:	bf00      	nop
 80006ce:	bf00      	nop
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	40020800 	.word	0x40020800
 80006d8:	40020400 	.word	0x40020400
 80006dc:	20000140 	.word	0x20000140

080006e0 <Boom2_Status>:
  *         Changes temp_tx_msg[5] - UP/DOWN and temp_tx_msg[7] - GOOD/BAD  accordingly...
  * @param  None
  * @retval None.
  */
void Boom2_Status()
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
	if( ( (HAL_GPIO_ReadPin(BOOM2_LS11_GPIO_Port, BOOM2_LS11_Pin) == GPIO_PIN_RESET) &&
 80006e4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80006e8:	4829      	ldr	r0, [pc, #164]	@ (8000790 <Boom2_Status+0xb0>)
 80006ea:	f001 fc11 	bl	8001f10 <HAL_GPIO_ReadPin>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d107      	bne.n	8000704 <Boom2_Status+0x24>
		  (HAL_GPIO_ReadPin(BOOM2_LS12_GPIO_Port, BOOM2_LS12_Pin) == GPIO_PIN_SET) ) ||
 80006f4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80006f8:	4825      	ldr	r0, [pc, #148]	@ (8000790 <Boom2_Status+0xb0>)
 80006fa:	f001 fc09 	bl	8001f10 <HAL_GPIO_ReadPin>
 80006fe:	4603      	mov	r3, r0
	if( ( (HAL_GPIO_ReadPin(BOOM2_LS11_GPIO_Port, BOOM2_LS11_Pin) == GPIO_PIN_RESET) &&
 8000700:	2b01      	cmp	r3, #1
 8000702:	d00e      	beq.n	8000722 <Boom2_Status+0x42>
		( (HAL_GPIO_ReadPin(BOOM2_LS21_GPIO_Port, BOOM2_LS21_Pin) == GPIO_PIN_RESET) &&
 8000704:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000708:	4821      	ldr	r0, [pc, #132]	@ (8000790 <Boom2_Status+0xb0>)
 800070a:	f001 fc01 	bl	8001f10 <HAL_GPIO_ReadPin>
 800070e:	4603      	mov	r3, r0
		  (HAL_GPIO_ReadPin(BOOM2_LS12_GPIO_Port, BOOM2_LS12_Pin) == GPIO_PIN_SET) ) ||
 8000710:	2b00      	cmp	r3, #0
 8000712:	d10d      	bne.n	8000730 <Boom2_Status+0x50>
		  (HAL_GPIO_ReadPin(BOOM2_LS22_GPIO_Port, BOOM2_LS22_Pin) == GPIO_PIN_SET) ) )
 8000714:	2102      	movs	r1, #2
 8000716:	481e      	ldr	r0, [pc, #120]	@ (8000790 <Boom2_Status+0xb0>)
 8000718:	f001 fbfa 	bl	8001f10 <HAL_GPIO_ReadPin>
 800071c:	4603      	mov	r3, r0
		( (HAL_GPIO_ReadPin(BOOM2_LS21_GPIO_Port, BOOM2_LS21_Pin) == GPIO_PIN_RESET) &&
 800071e:	2b01      	cmp	r3, #1
 8000720:	d106      	bne.n	8000730 <Boom2_Status+0x50>
	{
		temp_tx_buff[5] = 0x00; /* BOOM 2 CLOSED */
 8000722:	4b1c      	ldr	r3, [pc, #112]	@ (8000794 <Boom2_Status+0xb4>)
 8000724:	2200      	movs	r2, #0
 8000726:	715a      	strb	r2, [r3, #5]
		temp_tx_buff[7] = 0x01; /* BOOM 2 Healthy */
 8000728:	4b1a      	ldr	r3, [pc, #104]	@ (8000794 <Boom2_Status+0xb4>)
 800072a:	2201      	movs	r2, #1
 800072c:	71da      	strb	r2, [r3, #7]
 800072e:	e02c      	b.n	800078a <Boom2_Status+0xaa>

	}
	else if( ( (HAL_GPIO_ReadPin(BOOM2_LS11_GPIO_Port, BOOM2_LS11_Pin) == GPIO_PIN_SET) &&
 8000730:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000734:	4816      	ldr	r0, [pc, #88]	@ (8000790 <Boom2_Status+0xb0>)
 8000736:	f001 fbeb 	bl	8001f10 <HAL_GPIO_ReadPin>
 800073a:	4603      	mov	r3, r0
 800073c:	2b01      	cmp	r3, #1
 800073e:	d107      	bne.n	8000750 <Boom2_Status+0x70>
		       (HAL_GPIO_ReadPin(BOOM2_LS12_GPIO_Port, BOOM2_LS12_Pin) == GPIO_PIN_RESET) ) ||
 8000740:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000744:	4812      	ldr	r0, [pc, #72]	@ (8000790 <Boom2_Status+0xb0>)
 8000746:	f001 fbe3 	bl	8001f10 <HAL_GPIO_ReadPin>
 800074a:	4603      	mov	r3, r0
	else if( ( (HAL_GPIO_ReadPin(BOOM2_LS11_GPIO_Port, BOOM2_LS11_Pin) == GPIO_PIN_SET) &&
 800074c:	2b00      	cmp	r3, #0
 800074e:	d00e      	beq.n	800076e <Boom2_Status+0x8e>
		     ( (HAL_GPIO_ReadPin(BOOM2_LS21_GPIO_Port, BOOM2_LS21_Pin) == GPIO_PIN_SET) &&
 8000750:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000754:	480e      	ldr	r0, [pc, #56]	@ (8000790 <Boom2_Status+0xb0>)
 8000756:	f001 fbdb 	bl	8001f10 <HAL_GPIO_ReadPin>
 800075a:	4603      	mov	r3, r0
		       (HAL_GPIO_ReadPin(BOOM2_LS12_GPIO_Port, BOOM2_LS12_Pin) == GPIO_PIN_RESET) ) ||
 800075c:	2b01      	cmp	r3, #1
 800075e:	d10d      	bne.n	800077c <Boom2_Status+0x9c>
		       (HAL_GPIO_ReadPin(BOOM2_LS22_GPIO_Port, BOOM2_LS22_Pin) == GPIO_PIN_RESET) ) )
 8000760:	2102      	movs	r1, #2
 8000762:	480b      	ldr	r0, [pc, #44]	@ (8000790 <Boom2_Status+0xb0>)
 8000764:	f001 fbd4 	bl	8001f10 <HAL_GPIO_ReadPin>
 8000768:	4603      	mov	r3, r0
		     ( (HAL_GPIO_ReadPin(BOOM2_LS21_GPIO_Port, BOOM2_LS21_Pin) == GPIO_PIN_SET) &&
 800076a:	2b00      	cmp	r3, #0
 800076c:	d106      	bne.n	800077c <Boom2_Status+0x9c>
	{
		temp_tx_buff[5] = 0x01; /* BOOM 2 OPEN */
 800076e:	4b09      	ldr	r3, [pc, #36]	@ (8000794 <Boom2_Status+0xb4>)
 8000770:	2201      	movs	r2, #1
 8000772:	715a      	strb	r2, [r3, #5]
		temp_tx_buff[7] = 0x01; /* BOOM 2 Healthy */
 8000774:	4b07      	ldr	r3, [pc, #28]	@ (8000794 <Boom2_Status+0xb4>)
 8000776:	2201      	movs	r2, #1
 8000778:	71da      	strb	r2, [r3, #7]
 800077a:	e006      	b.n	800078a <Boom2_Status+0xaa>
	}
	else
	{
		temp_tx_buff[5] = 0xFF;
 800077c:	4b05      	ldr	r3, [pc, #20]	@ (8000794 <Boom2_Status+0xb4>)
 800077e:	22ff      	movs	r2, #255	@ 0xff
 8000780:	715a      	strb	r2, [r3, #5]
		temp_tx_buff[7] = 0x00; /* BOOM 2 HEALTH BAD */
 8000782:	4b04      	ldr	r3, [pc, #16]	@ (8000794 <Boom2_Status+0xb4>)
 8000784:	2200      	movs	r2, #0
 8000786:	71da      	strb	r2, [r3, #7]
	}

}
 8000788:	bf00      	nop
 800078a:	bf00      	nop
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	40020400 	.word	0x40020400
 8000794:	20000140 	.word	0x20000140

08000798 <UP_Train_Status>:
  *         Compare it with TRAIN_DIST MACRO and changes temp_tx_buff[2] - UP direction
  * @param  None
  * @retval None
  */
void UP_Train_Status()
{
 8000798:	b590      	push	{r4, r7, lr}
 800079a:	b085      	sub	sp, #20
 800079c:	af00      	add	r7, sp, #0
	volatile uint16_t data1[3] = {0xFFFF};
 800079e:	f107 0308 	add.w	r3, r7, #8
 80007a2:	2200      	movs	r2, #0
 80007a4:	601a      	str	r2, [r3, #0]
 80007a6:	809a      	strh	r2, [r3, #4]
 80007a8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80007ac:	813b      	strh	r3, [r7, #8]
	volatile uint16_t data2[3] = {0xFFFF};
 80007ae:	463b      	mov	r3, r7
 80007b0:	2200      	movs	r2, #0
 80007b2:	601a      	str	r2, [r3, #0]
 80007b4:	809a      	strh	r2, [r3, #4]
 80007b6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80007ba:	803b      	strh	r3, [r7, #0]

	for(uint8_t i=0;i<3;i++){
 80007bc:	2300      	movs	r3, #0
 80007be:	73fb      	strb	r3, [r7, #15]
 80007c0:	e018      	b.n	80007f4 <UP_Train_Status+0x5c>
	    data1[i] = TF02_Get_Dist(&huart1);
 80007c2:	7bfc      	ldrb	r4, [r7, #15]
 80007c4:	4834      	ldr	r0, [pc, #208]	@ (8000898 <UP_Train_Status+0x100>)
 80007c6:	f000 f8ab 	bl	8000920 <TF02_Get_Dist>
 80007ca:	4603      	mov	r3, r0
 80007cc:	461a      	mov	r2, r3
 80007ce:	0063      	lsls	r3, r4, #1
 80007d0:	3310      	adds	r3, #16
 80007d2:	443b      	add	r3, r7
 80007d4:	f823 2c08 	strh.w	r2, [r3, #-8]
	    data2[i] = TF02_Get_Dist(&huart3);
 80007d8:	7bfc      	ldrb	r4, [r7, #15]
 80007da:	4830      	ldr	r0, [pc, #192]	@ (800089c <UP_Train_Status+0x104>)
 80007dc:	f000 f8a0 	bl	8000920 <TF02_Get_Dist>
 80007e0:	4603      	mov	r3, r0
 80007e2:	461a      	mov	r2, r3
 80007e4:	0063      	lsls	r3, r4, #1
 80007e6:	3310      	adds	r3, #16
 80007e8:	443b      	add	r3, r7
 80007ea:	f823 2c10 	strh.w	r2, [r3, #-16]
	for(uint8_t i=0;i<3;i++){
 80007ee:	7bfb      	ldrb	r3, [r7, #15]
 80007f0:	3301      	adds	r3, #1
 80007f2:	73fb      	strb	r3, [r7, #15]
 80007f4:	7bfb      	ldrb	r3, [r7, #15]
 80007f6:	2b02      	cmp	r3, #2
 80007f8:	d9e3      	bls.n	80007c2 <UP_Train_Status+0x2a>
	}


    if( ((data1[0] == 0xFFFF) && (data1[1] == 0xFFFF) && (data1[2] == 0xFFFF))
 80007fa:	893b      	ldrh	r3, [r7, #8]
 80007fc:	b29b      	uxth	r3, r3
 80007fe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000802:	4293      	cmp	r3, r2
 8000804:	d10b      	bne.n	800081e <UP_Train_Status+0x86>
 8000806:	897b      	ldrh	r3, [r7, #10]
 8000808:	b29b      	uxth	r3, r3
 800080a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800080e:	4293      	cmp	r3, r2
 8000810:	d105      	bne.n	800081e <UP_Train_Status+0x86>
 8000812:	89bb      	ldrh	r3, [r7, #12]
 8000814:	b29b      	uxth	r3, r3
 8000816:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800081a:	4293      	cmp	r3, r2
 800081c:	d011      	beq.n	8000842 <UP_Train_Status+0xaa>
     || ((data2[0] == 0xFFFF) && (data2[1] == 0xFFFF) && (data2[2] == 0xFFFF)) )
 800081e:	883b      	ldrh	r3, [r7, #0]
 8000820:	b29b      	uxth	r3, r3
 8000822:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000826:	4293      	cmp	r3, r2
 8000828:	d10e      	bne.n	8000848 <UP_Train_Status+0xb0>
 800082a:	887b      	ldrh	r3, [r7, #2]
 800082c:	b29b      	uxth	r3, r3
 800082e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000832:	4293      	cmp	r3, r2
 8000834:	d108      	bne.n	8000848 <UP_Train_Status+0xb0>
 8000836:	88bb      	ldrh	r3, [r7, #4]
 8000838:	b29b      	uxth	r3, r3
 800083a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800083e:	4293      	cmp	r3, r2
 8000840:	d102      	bne.n	8000848 <UP_Train_Status+0xb0>
    {
    	temp_tx_buff[2] = 0xFF; /* Sensor Error */
 8000842:	4b17      	ldr	r3, [pc, #92]	@ (80008a0 <UP_Train_Status+0x108>)
 8000844:	22ff      	movs	r2, #255	@ 0xff
 8000846:	709a      	strb	r2, [r3, #2]
    }
   if((data1[2] != 0xFFFF) || (data2[2] != 0xFFFF))
 8000848:	89bb      	ldrh	r3, [r7, #12]
 800084a:	b29b      	uxth	r3, r3
 800084c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000850:	4293      	cmp	r3, r2
 8000852:	d105      	bne.n	8000860 <UP_Train_Status+0xc8>
 8000854:	88bb      	ldrh	r3, [r7, #4]
 8000856:	b29b      	uxth	r3, r3
 8000858:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800085c:	4293      	cmp	r3, r2
 800085e:	d016      	beq.n	800088e <UP_Train_Status+0xf6>
   {
	   if(data1[2] <= TRAIN_DIST && data2[2] <= TRAIN_DIST)
 8000860:	89bb      	ldrh	r3, [r7, #12]
 8000862:	b29b      	uxth	r3, r3
 8000864:	2b3c      	cmp	r3, #60	@ 0x3c
 8000866:	d807      	bhi.n	8000878 <UP_Train_Status+0xe0>
 8000868:	88bb      	ldrh	r3, [r7, #4]
 800086a:	b29b      	uxth	r3, r3
 800086c:	2b3c      	cmp	r3, #60	@ 0x3c
 800086e:	d803      	bhi.n	8000878 <UP_Train_Status+0xe0>
	   {
		   temp_tx_buff[2] = 0x01;  /* Train Detected */
 8000870:	4b0b      	ldr	r3, [pc, #44]	@ (80008a0 <UP_Train_Status+0x108>)
 8000872:	2201      	movs	r2, #1
 8000874:	709a      	strb	r2, [r3, #2]
	   {
		   temp_tx_buff[2] = 0x00;  /* No Train Detected */
	   }
   }

}
 8000876:	e00a      	b.n	800088e <UP_Train_Status+0xf6>
	   else if (data1[2] >= TRAIN_DIST && data2[2] >= TRAIN_DIST)
 8000878:	89bb      	ldrh	r3, [r7, #12]
 800087a:	b29b      	uxth	r3, r3
 800087c:	2b3b      	cmp	r3, #59	@ 0x3b
 800087e:	d906      	bls.n	800088e <UP_Train_Status+0xf6>
 8000880:	88bb      	ldrh	r3, [r7, #4]
 8000882:	b29b      	uxth	r3, r3
 8000884:	2b3b      	cmp	r3, #59	@ 0x3b
 8000886:	d902      	bls.n	800088e <UP_Train_Status+0xf6>
		   temp_tx_buff[2] = 0x00;  /* No Train Detected */
 8000888:	4b05      	ldr	r3, [pc, #20]	@ (80008a0 <UP_Train_Status+0x108>)
 800088a:	2200      	movs	r2, #0
 800088c:	709a      	strb	r2, [r3, #2]
}
 800088e:	bf00      	nop
 8000890:	3714      	adds	r7, #20
 8000892:	46bd      	mov	sp, r7
 8000894:	bd90      	pop	{r4, r7, pc}
 8000896:	bf00      	nop
 8000898:	20000224 	.word	0x20000224
 800089c:	200002b4 	.word	0x200002b4
 80008a0:	20000140 	.word	0x20000140

080008a4 <DOWN_Train_Status>:
  *         Compare it with TRAIN_DIST MACRO and changes temp_tx_buff[3] - DOWN direction
  * @param  None
  * @retval None
  */
void DOWN_Train_Status()
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af00      	add	r7, sp, #0
	volatile uint16_t data3 = {0xFFFF};
 80008aa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80008ae:	80fb      	strh	r3, [r7, #6]
	volatile uint16_t data4 = {0xFFFF};
 80008b0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80008b4:	80bb      	strh	r3, [r7, #4]

    data3 = TF02_Get_Dist(&huart3);
 80008b6:	4817      	ldr	r0, [pc, #92]	@ (8000914 <DOWN_Train_Status+0x70>)
 80008b8:	f000 f832 	bl	8000920 <TF02_Get_Dist>
 80008bc:	4603      	mov	r3, r0
 80008be:	80fb      	strh	r3, [r7, #6]
    data4 = TF02_Get_Dist(&huart4);
 80008c0:	4815      	ldr	r0, [pc, #84]	@ (8000918 <DOWN_Train_Status+0x74>)
 80008c2:	f000 f82d 	bl	8000920 <TF02_Get_Dist>
 80008c6:	4603      	mov	r3, r0
 80008c8:	80bb      	strh	r3, [r7, #4]

    if( (data3 == 0xFFFF) || (data4 == 0xFFFF) )
 80008ca:	88fb      	ldrh	r3, [r7, #6]
 80008cc:	b29b      	uxth	r3, r3
 80008ce:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80008d2:	4293      	cmp	r3, r2
 80008d4:	d005      	beq.n	80008e2 <DOWN_Train_Status+0x3e>
 80008d6:	88bb      	ldrh	r3, [r7, #4]
 80008d8:	b29b      	uxth	r3, r3
 80008da:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80008de:	4293      	cmp	r3, r2
 80008e0:	d103      	bne.n	80008ea <DOWN_Train_Status+0x46>
    {
    	temp_tx_buff[3] = 0xFF;  /* Sensor Error */
 80008e2:	4b0e      	ldr	r3, [pc, #56]	@ (800091c <DOWN_Train_Status+0x78>)
 80008e4:	22ff      	movs	r2, #255	@ 0xff
 80008e6:	70da      	strb	r2, [r3, #3]
 80008e8:	e00f      	b.n	800090a <DOWN_Train_Status+0x66>
    }
    else if( (data3 <= TRAIN_DIST) && (data4 <= TRAIN_DIST) )
 80008ea:	88fb      	ldrh	r3, [r7, #6]
 80008ec:	b29b      	uxth	r3, r3
 80008ee:	2b3c      	cmp	r3, #60	@ 0x3c
 80008f0:	d807      	bhi.n	8000902 <DOWN_Train_Status+0x5e>
 80008f2:	88bb      	ldrh	r3, [r7, #4]
 80008f4:	b29b      	uxth	r3, r3
 80008f6:	2b3c      	cmp	r3, #60	@ 0x3c
 80008f8:	d803      	bhi.n	8000902 <DOWN_Train_Status+0x5e>
    {
    	temp_tx_buff[3] = 0x01;  /* Train Detected */
 80008fa:	4b08      	ldr	r3, [pc, #32]	@ (800091c <DOWN_Train_Status+0x78>)
 80008fc:	2201      	movs	r2, #1
 80008fe:	70da      	strb	r2, [r3, #3]
 8000900:	e003      	b.n	800090a <DOWN_Train_Status+0x66>
    }
    else temp_tx_buff[3] = 0x00;  /* No Train Detected */
 8000902:	4b06      	ldr	r3, [pc, #24]	@ (800091c <DOWN_Train_Status+0x78>)
 8000904:	2200      	movs	r2, #0
 8000906:	70da      	strb	r2, [r3, #3]

}
 8000908:	bf00      	nop
 800090a:	bf00      	nop
 800090c:	3708      	adds	r7, #8
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	200002b4 	.word	0x200002b4
 8000918:	200001dc 	.word	0x200001dc
 800091c:	20000140 	.word	0x20000140

08000920 <TF02_Get_Dist>:
  *               the configuration information for the specified UART module.
  * @retval 16-bit distance data in cm (by default)
  */

uint16_t TF02_Get_Dist(UART_HandleTypeDef *UART_BUS)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b084      	sub	sp, #16
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
	volatile uint8_t data[8];

	if(HAL_UART_Receive(UART_BUS,(uint8_t*)data, 8, 100) == HAL_OK)
 8000928:	f107 0108 	add.w	r1, r7, #8
 800092c:	2364      	movs	r3, #100	@ 0x64
 800092e:	2208      	movs	r2, #8
 8000930:	6878      	ldr	r0, [r7, #4]
 8000932:	f004 fc6d 	bl	8005210 <HAL_UART_Receive>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d112      	bne.n	8000962 <TF02_Get_Dist+0x42>
	{
		if (data[1] == 0x59 && data[2] == 0x59)
 800093c:	7a7b      	ldrb	r3, [r7, #9]
 800093e:	b2db      	uxtb	r3, r3
 8000940:	2b59      	cmp	r3, #89	@ 0x59
 8000942:	d111      	bne.n	8000968 <TF02_Get_Dist+0x48>
 8000944:	7abb      	ldrb	r3, [r7, #10]
 8000946:	b2db      	uxtb	r3, r3
 8000948:	2b59      	cmp	r3, #89	@ 0x59
 800094a:	d10d      	bne.n	8000968 <TF02_Get_Dist+0x48>
		{
			return (data[4] << 8 | data[3]);
 800094c:	7b3b      	ldrb	r3, [r7, #12]
 800094e:	b2db      	uxtb	r3, r3
 8000950:	021b      	lsls	r3, r3, #8
 8000952:	b21a      	sxth	r2, r3
 8000954:	7afb      	ldrb	r3, [r7, #11]
 8000956:	b2db      	uxtb	r3, r3
 8000958:	b21b      	sxth	r3, r3
 800095a:	4313      	orrs	r3, r2
 800095c:	b21b      	sxth	r3, r3
 800095e:	b29b      	uxth	r3, r3
 8000960:	e004      	b.n	800096c <TF02_Get_Dist+0x4c>
		}
	}
	else return 0xFFFF;
 8000962:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000966:	e001      	b.n	800096c <TF02_Get_Dist+0x4c>
	return 0xFFFF;
 8000968:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 800096c:	4618      	mov	r0, r3
 800096e:	3710      	adds	r7, #16
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}

08000974 <Start_Polling>:
  * @brief  Starts reading the status of two BOOM , all 4 lidar etc
  * @param  None
  * @retval None
  */
void Start_Polling()
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
	Boom1_Status();
 8000978:	f7ff fe58 	bl	800062c <Boom1_Status>
	Boom2_Status();
 800097c:	f7ff feb0 	bl	80006e0 <Boom2_Status>
	UP_Train_Status();
 8000980:	f7ff ff0a 	bl	8000798 <UP_Train_Status>
	DOWN_Train_Status();
 8000984:	f7ff ff8e 	bl	80008a4 <DOWN_Train_Status>
}
 8000988:	bf00      	nop
 800098a:	bd80      	pop	{r7, pc}

0800098c <Send_If_Change>:
  * @brief  Sends Data via USB VCP whenever a change in the status of BOOM or Lidar data is detected
  * @param  None
  * @retval None
  */
void Send_If_Change()
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
	if( (temp_tx_buff[2] != tx_buff[2]) || (temp_tx_buff[3] != tx_buff[3]) ||
 8000990:	4b19      	ldr	r3, [pc, #100]	@ (80009f8 <Send_If_Change+0x6c>)
 8000992:	789b      	ldrb	r3, [r3, #2]
 8000994:	b2da      	uxtb	r2, r3
 8000996:	4b19      	ldr	r3, [pc, #100]	@ (80009fc <Send_If_Change+0x70>)
 8000998:	789b      	ldrb	r3, [r3, #2]
 800099a:	b2db      	uxtb	r3, r3
 800099c:	429a      	cmp	r2, r3
 800099e:	d127      	bne.n	80009f0 <Send_If_Change+0x64>
 80009a0:	4b15      	ldr	r3, [pc, #84]	@ (80009f8 <Send_If_Change+0x6c>)
 80009a2:	78db      	ldrb	r3, [r3, #3]
 80009a4:	b2da      	uxtb	r2, r3
 80009a6:	4b15      	ldr	r3, [pc, #84]	@ (80009fc <Send_If_Change+0x70>)
 80009a8:	78db      	ldrb	r3, [r3, #3]
 80009aa:	b2db      	uxtb	r3, r3
 80009ac:	429a      	cmp	r2, r3
 80009ae:	d11f      	bne.n	80009f0 <Send_If_Change+0x64>
		(temp_tx_buff[4] != tx_buff[4]) || (temp_tx_buff[5] != tx_buff[5]) ||
 80009b0:	4b11      	ldr	r3, [pc, #68]	@ (80009f8 <Send_If_Change+0x6c>)
 80009b2:	791b      	ldrb	r3, [r3, #4]
 80009b4:	b2da      	uxtb	r2, r3
 80009b6:	4b11      	ldr	r3, [pc, #68]	@ (80009fc <Send_If_Change+0x70>)
 80009b8:	791b      	ldrb	r3, [r3, #4]
 80009ba:	b2db      	uxtb	r3, r3
	if( (temp_tx_buff[2] != tx_buff[2]) || (temp_tx_buff[3] != tx_buff[3]) ||
 80009bc:	429a      	cmp	r2, r3
 80009be:	d117      	bne.n	80009f0 <Send_If_Change+0x64>
		(temp_tx_buff[4] != tx_buff[4]) || (temp_tx_buff[5] != tx_buff[5]) ||
 80009c0:	4b0d      	ldr	r3, [pc, #52]	@ (80009f8 <Send_If_Change+0x6c>)
 80009c2:	795b      	ldrb	r3, [r3, #5]
 80009c4:	b2da      	uxtb	r2, r3
 80009c6:	4b0d      	ldr	r3, [pc, #52]	@ (80009fc <Send_If_Change+0x70>)
 80009c8:	795b      	ldrb	r3, [r3, #5]
 80009ca:	b2db      	uxtb	r3, r3
 80009cc:	429a      	cmp	r2, r3
 80009ce:	d10f      	bne.n	80009f0 <Send_If_Change+0x64>
		(temp_tx_buff[6] != tx_buff[6]) || (temp_tx_buff[7] != tx_buff[7]) )
 80009d0:	4b09      	ldr	r3, [pc, #36]	@ (80009f8 <Send_If_Change+0x6c>)
 80009d2:	799b      	ldrb	r3, [r3, #6]
 80009d4:	b2da      	uxtb	r2, r3
 80009d6:	4b09      	ldr	r3, [pc, #36]	@ (80009fc <Send_If_Change+0x70>)
 80009d8:	799b      	ldrb	r3, [r3, #6]
 80009da:	b2db      	uxtb	r3, r3
		(temp_tx_buff[4] != tx_buff[4]) || (temp_tx_buff[5] != tx_buff[5]) ||
 80009dc:	429a      	cmp	r2, r3
 80009de:	d107      	bne.n	80009f0 <Send_If_Change+0x64>
		(temp_tx_buff[6] != tx_buff[6]) || (temp_tx_buff[7] != tx_buff[7]) )
 80009e0:	4b05      	ldr	r3, [pc, #20]	@ (80009f8 <Send_If_Change+0x6c>)
 80009e2:	79db      	ldrb	r3, [r3, #7]
 80009e4:	b2da      	uxtb	r2, r3
 80009e6:	4b05      	ldr	r3, [pc, #20]	@ (80009fc <Send_If_Change+0x70>)
 80009e8:	79db      	ldrb	r3, [r3, #7]
 80009ea:	b2db      	uxtb	r3, r3
 80009ec:	429a      	cmp	r2, r3
 80009ee:	d001      	beq.n	80009f4 <Send_If_Change+0x68>
	{
		Transmit_Msg();
 80009f0:	f7ff fdc0 	bl	8000574 <Transmit_Msg>
	}
}
 80009f4:	bf00      	nop
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	20000140 	.word	0x20000140
 80009fc:	20000134 	.word	0x20000134

08000a00 <Receive_Handler>:
  * @brief  Handles Recieved message and trigger lever lock , alarm , and data transmit
  * @param  None
  * @retval None
  */
void Receive_Handler()
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
	Receive_Msg();
 8000a04:	f7ff fdec 	bl	80005e0 <Receive_Msg>
	Lever_Lock();
 8000a08:	f7ff fd74 	bl	80004f4 <Lever_Lock>
	Alarm_ON();
 8000a0c:	f7ff fd92 	bl	8000534 <Alarm_ON>
}
 8000a10:	bf00      	nop
 8000a12:	bd80      	pop	{r7, pc}

08000a14 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a18:	f000 fccc 	bl	80013b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a1c:	f000 f81e 	bl	8000a5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a20:	f000 f9ea 	bl	8000df8 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000a24:	f000 f8d8 	bl	8000bd8 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000a28:	f000 f968 	bl	8000cfc <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000a2c:	f000 f990 	bl	8000d50 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000a30:	f000 f9b8 	bl	8000da4 <MX_USART3_UART_Init>
  MX_USB_DEVICE_Init();
 8000a34:	f008 fb14 	bl	8009060 <MX_USB_DEVICE_Init>
  MX_UART4_Init();
 8000a38:	f000 f936 	bl	8000ca8 <MX_UART4_Init>
  MX_ADC1_Init();
 8000a3c:	f000 f87a 	bl	8000b34 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

//  char buff1[20] = {0};
//  char buff2[20] = {0};
  // Start TIM1 with interrupt
  HAL_TIM_Base_Start_IT(&htim1); /* 15s Interrupt Timer Start */
 8000a40:	4805      	ldr	r0, [pc, #20]	@ (8000a58 <main+0x44>)
 8000a42:	f003 fe97 	bl	8004774 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Start_Polling();  //Starts Polling Boom status along with Train passing and save the status
 8000a46:	f7ff ff95 	bl	8000974 <Start_Polling>
	  Send_If_Change();  //If any change is detected with the Previous state of any Boom or Train pass tx is enabled
 8000a4a:	f7ff ff9f 	bl	800098c <Send_If_Change>
	  Receive_Handler();  //Used to Trigger lever lock and alarm based on rx data
 8000a4e:	f7ff ffd7 	bl	8000a00 <Receive_Handler>
	  Start_Polling();  //Starts Polling Boom status along with Train passing and save the status
 8000a52:	bf00      	nop
 8000a54:	e7f7      	b.n	8000a46 <main+0x32>
 8000a56:	bf00      	nop
 8000a58:	20000194 	.word	0x20000194

08000a5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b094      	sub	sp, #80	@ 0x50
 8000a60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a62:	f107 031c 	add.w	r3, r7, #28
 8000a66:	2234      	movs	r2, #52	@ 0x34
 8000a68:	2100      	movs	r1, #0
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f009 f89e 	bl	8009bac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a70:	f107 0308 	add.w	r3, r7, #8
 8000a74:	2200      	movs	r2, #0
 8000a76:	601a      	str	r2, [r3, #0]
 8000a78:	605a      	str	r2, [r3, #4]
 8000a7a:	609a      	str	r2, [r3, #8]
 8000a7c:	60da      	str	r2, [r3, #12]
 8000a7e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a80:	2300      	movs	r3, #0
 8000a82:	607b      	str	r3, [r7, #4]
 8000a84:	4b29      	ldr	r3, [pc, #164]	@ (8000b2c <SystemClock_Config+0xd0>)
 8000a86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a88:	4a28      	ldr	r2, [pc, #160]	@ (8000b2c <SystemClock_Config+0xd0>)
 8000a8a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a8e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a90:	4b26      	ldr	r3, [pc, #152]	@ (8000b2c <SystemClock_Config+0xd0>)
 8000a92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a94:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a98:	607b      	str	r3, [r7, #4]
 8000a9a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	603b      	str	r3, [r7, #0]
 8000aa0:	4b23      	ldr	r3, [pc, #140]	@ (8000b30 <SystemClock_Config+0xd4>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000aa8:	4a21      	ldr	r2, [pc, #132]	@ (8000b30 <SystemClock_Config+0xd4>)
 8000aaa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000aae:	6013      	str	r3, [r2, #0]
 8000ab0:	4b1f      	ldr	r3, [pc, #124]	@ (8000b30 <SystemClock_Config+0xd4>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000ab8:	603b      	str	r3, [r7, #0]
 8000aba:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000abc:	2301      	movs	r3, #1
 8000abe:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ac0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000ac4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ac6:	2302      	movs	r3, #2
 8000ac8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000aca:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000ace:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000ad0:	2304      	movs	r3, #4
 8000ad2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000ad4:	2348      	movs	r3, #72	@ 0x48
 8000ad6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ad8:	2302      	movs	r3, #2
 8000ada:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000adc:	2303      	movs	r3, #3
 8000ade:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ae0:	2302      	movs	r3, #2
 8000ae2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ae4:	f107 031c 	add.w	r3, r7, #28
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f003 fb55 	bl	8004198 <HAL_RCC_OscConfig>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d001      	beq.n	8000af8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000af4:	f000 fa3c 	bl	8000f70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000af8:	230f      	movs	r3, #15
 8000afa:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000afc:	2302      	movs	r3, #2
 8000afe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b00:	2300      	movs	r3, #0
 8000b02:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b04:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b08:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b0e:	f107 0308 	add.w	r3, r7, #8
 8000b12:	2102      	movs	r1, #2
 8000b14:	4618      	mov	r0, r3
 8000b16:	f002 fccb 	bl	80034b0 <HAL_RCC_ClockConfig>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d001      	beq.n	8000b24 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000b20:	f000 fa26 	bl	8000f70 <Error_Handler>
  }
}
 8000b24:	bf00      	nop
 8000b26:	3750      	adds	r7, #80	@ 0x50
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	40023800 	.word	0x40023800
 8000b30:	40007000 	.word	0x40007000

08000b34 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b084      	sub	sp, #16
 8000b38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b3a:	463b      	mov	r3, r7
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	601a      	str	r2, [r3, #0]
 8000b40:	605a      	str	r2, [r3, #4]
 8000b42:	609a      	str	r2, [r3, #8]
 8000b44:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000b46:	4b21      	ldr	r3, [pc, #132]	@ (8000bcc <MX_ADC1_Init+0x98>)
 8000b48:	4a21      	ldr	r2, [pc, #132]	@ (8000bd0 <MX_ADC1_Init+0x9c>)
 8000b4a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000b4c:	4b1f      	ldr	r3, [pc, #124]	@ (8000bcc <MX_ADC1_Init+0x98>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000b52:	4b1e      	ldr	r3, [pc, #120]	@ (8000bcc <MX_ADC1_Init+0x98>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000b58:	4b1c      	ldr	r3, [pc, #112]	@ (8000bcc <MX_ADC1_Init+0x98>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000b5e:	4b1b      	ldr	r3, [pc, #108]	@ (8000bcc <MX_ADC1_Init+0x98>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b64:	4b19      	ldr	r3, [pc, #100]	@ (8000bcc <MX_ADC1_Init+0x98>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b6c:	4b17      	ldr	r3, [pc, #92]	@ (8000bcc <MX_ADC1_Init+0x98>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b72:	4b16      	ldr	r3, [pc, #88]	@ (8000bcc <MX_ADC1_Init+0x98>)
 8000b74:	4a17      	ldr	r2, [pc, #92]	@ (8000bd4 <MX_ADC1_Init+0xa0>)
 8000b76:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b78:	4b14      	ldr	r3, [pc, #80]	@ (8000bcc <MX_ADC1_Init+0x98>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000b7e:	4b13      	ldr	r3, [pc, #76]	@ (8000bcc <MX_ADC1_Init+0x98>)
 8000b80:	2201      	movs	r2, #1
 8000b82:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000b84:	4b11      	ldr	r3, [pc, #68]	@ (8000bcc <MX_ADC1_Init+0x98>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b8c:	4b0f      	ldr	r3, [pc, #60]	@ (8000bcc <MX_ADC1_Init+0x98>)
 8000b8e:	2201      	movs	r2, #1
 8000b90:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b92:	480e      	ldr	r0, [pc, #56]	@ (8000bcc <MX_ADC1_Init+0x98>)
 8000b94:	f000 fca4 	bl	80014e0 <HAL_ADC_Init>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d001      	beq.n	8000ba2 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000b9e:	f000 f9e7 	bl	8000f70 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000ba2:	2304      	movs	r3, #4
 8000ba4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000baa:	2300      	movs	r3, #0
 8000bac:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bae:	463b      	mov	r3, r7
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	4806      	ldr	r0, [pc, #24]	@ (8000bcc <MX_ADC1_Init+0x98>)
 8000bb4:	f000 fcd8 	bl	8001568 <HAL_ADC_ConfigChannel>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000bbe:	f000 f9d7 	bl	8000f70 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000bc2:	bf00      	nop
 8000bc4:	3710      	adds	r7, #16
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	2000014c 	.word	0x2000014c
 8000bd0:	40012000 	.word	0x40012000
 8000bd4:	0f000001 	.word	0x0f000001

08000bd8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b08c      	sub	sp, #48	@ 0x30
 8000bdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bde:	f107 0320 	add.w	r3, r7, #32
 8000be2:	2200      	movs	r2, #0
 8000be4:	601a      	str	r2, [r3, #0]
 8000be6:	605a      	str	r2, [r3, #4]
 8000be8:	609a      	str	r2, [r3, #8]
 8000bea:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000bec:	f107 030c 	add.w	r3, r7, #12
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]
 8000bf4:	605a      	str	r2, [r3, #4]
 8000bf6:	609a      	str	r2, [r3, #8]
 8000bf8:	60da      	str	r2, [r3, #12]
 8000bfa:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bfc:	1d3b      	adds	r3, r7, #4
 8000bfe:	2200      	movs	r2, #0
 8000c00:	601a      	str	r2, [r3, #0]
 8000c02:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000c04:	4b26      	ldr	r3, [pc, #152]	@ (8000ca0 <MX_TIM1_Init+0xc8>)
 8000c06:	4a27      	ldr	r2, [pc, #156]	@ (8000ca4 <MX_TIM1_Init+0xcc>)
 8000c08:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16467;
 8000c0a:	4b25      	ldr	r3, [pc, #148]	@ (8000ca0 <MX_TIM1_Init+0xc8>)
 8000c0c:	f244 0253 	movw	r2, #16467	@ 0x4053
 8000c10:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c12:	4b23      	ldr	r3, [pc, #140]	@ (8000ca0 <MX_TIM1_Init+0xc8>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000c18:	4b21      	ldr	r3, [pc, #132]	@ (8000ca0 <MX_TIM1_Init+0xc8>)
 8000c1a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000c1e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c20:	4b1f      	ldr	r3, [pc, #124]	@ (8000ca0 <MX_TIM1_Init+0xc8>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000c26:	4b1e      	ldr	r3, [pc, #120]	@ (8000ca0 <MX_TIM1_Init+0xc8>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c2c:	4b1c      	ldr	r3, [pc, #112]	@ (8000ca0 <MX_TIM1_Init+0xc8>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000c32:	481b      	ldr	r0, [pc, #108]	@ (8000ca0 <MX_TIM1_Init+0xc8>)
 8000c34:	f003 fd4e 	bl	80046d4 <HAL_TIM_Base_Init>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 8000c3e:	f000 f997 	bl	8000f70 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c42:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c46:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000c48:	f107 0320 	add.w	r3, r7, #32
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	4814      	ldr	r0, [pc, #80]	@ (8000ca0 <MX_TIM1_Init+0xc8>)
 8000c50:	f003 fef0 	bl	8004a34 <HAL_TIM_ConfigClockSource>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <MX_TIM1_Init+0x86>
  {
    Error_Handler();
 8000c5a:	f000 f989 	bl	8000f70 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000c62:	2300      	movs	r3, #0
 8000c64:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8000c66:	f107 030c 	add.w	r3, r7, #12
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	480c      	ldr	r0, [pc, #48]	@ (8000ca0 <MX_TIM1_Init+0xc8>)
 8000c6e:	f003 ffa8 	bl	8004bc2 <HAL_TIM_SlaveConfigSynchro>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d001      	beq.n	8000c7c <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000c78:	f000 f97a 	bl	8000f70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c80:	2300      	movs	r3, #0
 8000c82:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c84:	1d3b      	adds	r3, r7, #4
 8000c86:	4619      	mov	r1, r3
 8000c88:	4805      	ldr	r0, [pc, #20]	@ (8000ca0 <MX_TIM1_Init+0xc8>)
 8000c8a:	f004 f9e1 	bl	8005050 <HAL_TIMEx_MasterConfigSynchronization>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d001      	beq.n	8000c98 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 8000c94:	f000 f96c 	bl	8000f70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000c98:	bf00      	nop
 8000c9a:	3730      	adds	r7, #48	@ 0x30
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	20000194 	.word	0x20000194
 8000ca4:	40010000 	.word	0x40010000

08000ca8 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000cac:	4b11      	ldr	r3, [pc, #68]	@ (8000cf4 <MX_UART4_Init+0x4c>)
 8000cae:	4a12      	ldr	r2, [pc, #72]	@ (8000cf8 <MX_UART4_Init+0x50>)
 8000cb0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000cb2:	4b10      	ldr	r3, [pc, #64]	@ (8000cf4 <MX_UART4_Init+0x4c>)
 8000cb4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000cb8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000cba:	4b0e      	ldr	r3, [pc, #56]	@ (8000cf4 <MX_UART4_Init+0x4c>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000cc0:	4b0c      	ldr	r3, [pc, #48]	@ (8000cf4 <MX_UART4_Init+0x4c>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000cc6:	4b0b      	ldr	r3, [pc, #44]	@ (8000cf4 <MX_UART4_Init+0x4c>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000ccc:	4b09      	ldr	r3, [pc, #36]	@ (8000cf4 <MX_UART4_Init+0x4c>)
 8000cce:	220c      	movs	r2, #12
 8000cd0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cd2:	4b08      	ldr	r3, [pc, #32]	@ (8000cf4 <MX_UART4_Init+0x4c>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cd8:	4b06      	ldr	r3, [pc, #24]	@ (8000cf4 <MX_UART4_Init+0x4c>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000cde:	4805      	ldr	r0, [pc, #20]	@ (8000cf4 <MX_UART4_Init+0x4c>)
 8000ce0:	f004 fa46 	bl	8005170 <HAL_UART_Init>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d001      	beq.n	8000cee <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8000cea:	f000 f941 	bl	8000f70 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000cee:	bf00      	nop
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	200001dc 	.word	0x200001dc
 8000cf8:	40004c00 	.word	0x40004c00

08000cfc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d00:	4b11      	ldr	r3, [pc, #68]	@ (8000d48 <MX_USART1_UART_Init+0x4c>)
 8000d02:	4a12      	ldr	r2, [pc, #72]	@ (8000d4c <MX_USART1_UART_Init+0x50>)
 8000d04:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000d06:	4b10      	ldr	r3, [pc, #64]	@ (8000d48 <MX_USART1_UART_Init+0x4c>)
 8000d08:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d0c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d0e:	4b0e      	ldr	r3, [pc, #56]	@ (8000d48 <MX_USART1_UART_Init+0x4c>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d14:	4b0c      	ldr	r3, [pc, #48]	@ (8000d48 <MX_USART1_UART_Init+0x4c>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d1a:	4b0b      	ldr	r3, [pc, #44]	@ (8000d48 <MX_USART1_UART_Init+0x4c>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d20:	4b09      	ldr	r3, [pc, #36]	@ (8000d48 <MX_USART1_UART_Init+0x4c>)
 8000d22:	220c      	movs	r2, #12
 8000d24:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d26:	4b08      	ldr	r3, [pc, #32]	@ (8000d48 <MX_USART1_UART_Init+0x4c>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d2c:	4b06      	ldr	r3, [pc, #24]	@ (8000d48 <MX_USART1_UART_Init+0x4c>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d32:	4805      	ldr	r0, [pc, #20]	@ (8000d48 <MX_USART1_UART_Init+0x4c>)
 8000d34:	f004 fa1c 	bl	8005170 <HAL_UART_Init>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000d3e:	f000 f917 	bl	8000f70 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d42:	bf00      	nop
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	20000224 	.word	0x20000224
 8000d4c:	40011000 	.word	0x40011000

08000d50 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d54:	4b11      	ldr	r3, [pc, #68]	@ (8000d9c <MX_USART2_UART_Init+0x4c>)
 8000d56:	4a12      	ldr	r2, [pc, #72]	@ (8000da0 <MX_USART2_UART_Init+0x50>)
 8000d58:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d5a:	4b10      	ldr	r3, [pc, #64]	@ (8000d9c <MX_USART2_UART_Init+0x4c>)
 8000d5c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d60:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d62:	4b0e      	ldr	r3, [pc, #56]	@ (8000d9c <MX_USART2_UART_Init+0x4c>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d68:	4b0c      	ldr	r3, [pc, #48]	@ (8000d9c <MX_USART2_UART_Init+0x4c>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d6e:	4b0b      	ldr	r3, [pc, #44]	@ (8000d9c <MX_USART2_UART_Init+0x4c>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d74:	4b09      	ldr	r3, [pc, #36]	@ (8000d9c <MX_USART2_UART_Init+0x4c>)
 8000d76:	220c      	movs	r2, #12
 8000d78:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d7a:	4b08      	ldr	r3, [pc, #32]	@ (8000d9c <MX_USART2_UART_Init+0x4c>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d80:	4b06      	ldr	r3, [pc, #24]	@ (8000d9c <MX_USART2_UART_Init+0x4c>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d86:	4805      	ldr	r0, [pc, #20]	@ (8000d9c <MX_USART2_UART_Init+0x4c>)
 8000d88:	f004 f9f2 	bl	8005170 <HAL_UART_Init>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000d92:	f000 f8ed 	bl	8000f70 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d96:	bf00      	nop
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	2000026c 	.word	0x2000026c
 8000da0:	40004400 	.word	0x40004400

08000da4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000da8:	4b11      	ldr	r3, [pc, #68]	@ (8000df0 <MX_USART3_UART_Init+0x4c>)
 8000daa:	4a12      	ldr	r2, [pc, #72]	@ (8000df4 <MX_USART3_UART_Init+0x50>)
 8000dac:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000dae:	4b10      	ldr	r3, [pc, #64]	@ (8000df0 <MX_USART3_UART_Init+0x4c>)
 8000db0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000db4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000db6:	4b0e      	ldr	r3, [pc, #56]	@ (8000df0 <MX_USART3_UART_Init+0x4c>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000dbc:	4b0c      	ldr	r3, [pc, #48]	@ (8000df0 <MX_USART3_UART_Init+0x4c>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000dc2:	4b0b      	ldr	r3, [pc, #44]	@ (8000df0 <MX_USART3_UART_Init+0x4c>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000dc8:	4b09      	ldr	r3, [pc, #36]	@ (8000df0 <MX_USART3_UART_Init+0x4c>)
 8000dca:	220c      	movs	r2, #12
 8000dcc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dce:	4b08      	ldr	r3, [pc, #32]	@ (8000df0 <MX_USART3_UART_Init+0x4c>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dd4:	4b06      	ldr	r3, [pc, #24]	@ (8000df0 <MX_USART3_UART_Init+0x4c>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000dda:	4805      	ldr	r0, [pc, #20]	@ (8000df0 <MX_USART3_UART_Init+0x4c>)
 8000ddc:	f004 f9c8 	bl	8005170 <HAL_UART_Init>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d001      	beq.n	8000dea <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000de6:	f000 f8c3 	bl	8000f70 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000dea:	bf00      	nop
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	200002b4 	.word	0x200002b4
 8000df4:	40004800 	.word	0x40004800

08000df8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b08a      	sub	sp, #40	@ 0x28
 8000dfc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dfe:	f107 0314 	add.w	r3, r7, #20
 8000e02:	2200      	movs	r2, #0
 8000e04:	601a      	str	r2, [r3, #0]
 8000e06:	605a      	str	r2, [r3, #4]
 8000e08:	609a      	str	r2, [r3, #8]
 8000e0a:	60da      	str	r2, [r3, #12]
 8000e0c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e0e:	2300      	movs	r3, #0
 8000e10:	613b      	str	r3, [r7, #16]
 8000e12:	4b52      	ldr	r3, [pc, #328]	@ (8000f5c <MX_GPIO_Init+0x164>)
 8000e14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e16:	4a51      	ldr	r2, [pc, #324]	@ (8000f5c <MX_GPIO_Init+0x164>)
 8000e18:	f043 0304 	orr.w	r3, r3, #4
 8000e1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e1e:	4b4f      	ldr	r3, [pc, #316]	@ (8000f5c <MX_GPIO_Init+0x164>)
 8000e20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e22:	f003 0304 	and.w	r3, r3, #4
 8000e26:	613b      	str	r3, [r7, #16]
 8000e28:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	60fb      	str	r3, [r7, #12]
 8000e2e:	4b4b      	ldr	r3, [pc, #300]	@ (8000f5c <MX_GPIO_Init+0x164>)
 8000e30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e32:	4a4a      	ldr	r2, [pc, #296]	@ (8000f5c <MX_GPIO_Init+0x164>)
 8000e34:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000e38:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e3a:	4b48      	ldr	r3, [pc, #288]	@ (8000f5c <MX_GPIO_Init+0x164>)
 8000e3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e42:	60fb      	str	r3, [r7, #12]
 8000e44:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e46:	2300      	movs	r3, #0
 8000e48:	60bb      	str	r3, [r7, #8]
 8000e4a:	4b44      	ldr	r3, [pc, #272]	@ (8000f5c <MX_GPIO_Init+0x164>)
 8000e4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e4e:	4a43      	ldr	r2, [pc, #268]	@ (8000f5c <MX_GPIO_Init+0x164>)
 8000e50:	f043 0301 	orr.w	r3, r3, #1
 8000e54:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e56:	4b41      	ldr	r3, [pc, #260]	@ (8000f5c <MX_GPIO_Init+0x164>)
 8000e58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e5a:	f003 0301 	and.w	r3, r3, #1
 8000e5e:	60bb      	str	r3, [r7, #8]
 8000e60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e62:	2300      	movs	r3, #0
 8000e64:	607b      	str	r3, [r7, #4]
 8000e66:	4b3d      	ldr	r3, [pc, #244]	@ (8000f5c <MX_GPIO_Init+0x164>)
 8000e68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e6a:	4a3c      	ldr	r2, [pc, #240]	@ (8000f5c <MX_GPIO_Init+0x164>)
 8000e6c:	f043 0302 	orr.w	r3, r3, #2
 8000e70:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e72:	4b3a      	ldr	r3, [pc, #232]	@ (8000f5c <MX_GPIO_Init+0x164>)
 8000e74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e76:	f003 0302 	and.w	r3, r3, #2
 8000e7a:	607b      	str	r3, [r7, #4]
 8000e7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e7e:	2300      	movs	r3, #0
 8000e80:	603b      	str	r3, [r7, #0]
 8000e82:	4b36      	ldr	r3, [pc, #216]	@ (8000f5c <MX_GPIO_Init+0x164>)
 8000e84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e86:	4a35      	ldr	r2, [pc, #212]	@ (8000f5c <MX_GPIO_Init+0x164>)
 8000e88:	f043 0308 	orr.w	r3, r3, #8
 8000e8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e8e:	4b33      	ldr	r3, [pc, #204]	@ (8000f5c <MX_GPIO_Init+0x164>)
 8000e90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e92:	f003 0308 	and.w	r3, r3, #8
 8000e96:	603b      	str	r3, [r7, #0]
 8000e98:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AT1_GPIO_Port, AT1_Pin, GPIO_PIN_RESET);
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000ea0:	482f      	ldr	r0, [pc, #188]	@ (8000f60 <MX_GPIO_Init+0x168>)
 8000ea2:	f001 f84d 	bl	8001f40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, AT_Pin|LT_Pin, GPIO_PIN_RESET);
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	f44f 51a0 	mov.w	r1, #5120	@ 0x1400
 8000eac:	482d      	ldr	r0, [pc, #180]	@ (8000f64 <MX_GPIO_Init+0x16c>)
 8000eae:	f001 f847 	bl	8001f40 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BOOM1_LS22_Pin BOOM1_LS11_Pin BOOM1_LS12_Pin */
  GPIO_InitStruct.Pin = BOOM1_LS22_Pin|BOOM1_LS11_Pin|BOOM1_LS12_Pin;
 8000eb2:	f242 030c 	movw	r3, #8204	@ 0x200c
 8000eb6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ec0:	f107 0314 	add.w	r3, r7, #20
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	4827      	ldr	r0, [pc, #156]	@ (8000f64 <MX_GPIO_Init+0x16c>)
 8000ec8:	f000 fe8e 	bl	8001be8 <HAL_GPIO_Init>

  /*Configure GPIO pins : BOOM2_LS22_Pin BOOM2_LS11_Pin BOOM2_LS12_Pin BOOM2_LS21_Pin
                           BOOM1_LS21_Pin */
  GPIO_InitStruct.Pin = BOOM2_LS22_Pin|BOOM2_LS11_Pin|BOOM2_LS12_Pin|BOOM2_LS21_Pin
 8000ecc:	f24e 0382 	movw	r3, #57474	@ 0xe082
 8000ed0:	617b      	str	r3, [r7, #20]
                          |BOOM1_LS21_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eda:	f107 0314 	add.w	r3, r7, #20
 8000ede:	4619      	mov	r1, r3
 8000ee0:	4821      	ldr	r0, [pc, #132]	@ (8000f68 <MX_GPIO_Init+0x170>)
 8000ee2:	f000 fe81 	bl	8001be8 <HAL_GPIO_Init>

  /*Configure GPIO pin : AT1_Pin */
  GPIO_InitStruct.Pin = AT1_Pin;
 8000ee6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000eea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eec:	2301      	movs	r3, #1
 8000eee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(AT1_GPIO_Port, &GPIO_InitStruct);
 8000ef8:	f107 0314 	add.w	r3, r7, #20
 8000efc:	4619      	mov	r1, r3
 8000efe:	4818      	ldr	r0, [pc, #96]	@ (8000f60 <MX_GPIO_Init+0x168>)
 8000f00:	f000 fe72 	bl	8001be8 <HAL_GPIO_Init>

  /*Configure GPIO pins : AT_Pin LT_Pin */
  GPIO_InitStruct.Pin = AT_Pin|LT_Pin;
 8000f04:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000f08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f12:	2300      	movs	r3, #0
 8000f14:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f16:	f107 0314 	add.w	r3, r7, #20
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	4811      	ldr	r0, [pc, #68]	@ (8000f64 <MX_GPIO_Init+0x16c>)
 8000f1e:	f000 fe63 	bl	8001be8 <HAL_GPIO_Init>

  /*Configure GPIO pin : L_FB1_Pin */
  GPIO_InitStruct.Pin = L_FB1_Pin;
 8000f22:	2304      	movs	r3, #4
 8000f24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f26:	2300      	movs	r3, #0
 8000f28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(L_FB1_GPIO_Port, &GPIO_InitStruct);
 8000f2e:	f107 0314 	add.w	r3, r7, #20
 8000f32:	4619      	mov	r1, r3
 8000f34:	480d      	ldr	r0, [pc, #52]	@ (8000f6c <MX_GPIO_Init+0x174>)
 8000f36:	f000 fe57 	bl	8001be8 <HAL_GPIO_Init>

  /*Configure GPIO pin : L_FB2_Pin */
  GPIO_InitStruct.Pin = L_FB2_Pin;
 8000f3a:	2308      	movs	r3, #8
 8000f3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f42:	2300      	movs	r3, #0
 8000f44:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(L_FB2_GPIO_Port, &GPIO_InitStruct);
 8000f46:	f107 0314 	add.w	r3, r7, #20
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	4806      	ldr	r0, [pc, #24]	@ (8000f68 <MX_GPIO_Init+0x170>)
 8000f4e:	f000 fe4b 	bl	8001be8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f52:	bf00      	nop
 8000f54:	3728      	adds	r7, #40	@ 0x28
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	40023800 	.word	0x40023800
 8000f60:	40020000 	.word	0x40020000
 8000f64:	40020800 	.word	0x40020800
 8000f68:	40020400 	.word	0x40020400
 8000f6c:	40020c00 	.word	0x40020c00

08000f70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f74:	b672      	cpsid	i
}
 8000f76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f78:	bf00      	nop
 8000f7a:	e7fd      	b.n	8000f78 <Error_Handler+0x8>

08000f7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f82:	2300      	movs	r3, #0
 8000f84:	607b      	str	r3, [r7, #4]
 8000f86:	4b10      	ldr	r3, [pc, #64]	@ (8000fc8 <HAL_MspInit+0x4c>)
 8000f88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f8a:	4a0f      	ldr	r2, [pc, #60]	@ (8000fc8 <HAL_MspInit+0x4c>)
 8000f8c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f90:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f92:	4b0d      	ldr	r3, [pc, #52]	@ (8000fc8 <HAL_MspInit+0x4c>)
 8000f94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f96:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f9a:	607b      	str	r3, [r7, #4]
 8000f9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	603b      	str	r3, [r7, #0]
 8000fa2:	4b09      	ldr	r3, [pc, #36]	@ (8000fc8 <HAL_MspInit+0x4c>)
 8000fa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fa6:	4a08      	ldr	r2, [pc, #32]	@ (8000fc8 <HAL_MspInit+0x4c>)
 8000fa8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fac:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fae:	4b06      	ldr	r3, [pc, #24]	@ (8000fc8 <HAL_MspInit+0x4c>)
 8000fb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fb2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fb6:	603b      	str	r3, [r7, #0]
 8000fb8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000fba:	2007      	movs	r0, #7
 8000fbc:	f000 fdd2 	bl	8001b64 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fc0:	bf00      	nop
 8000fc2:	3708      	adds	r7, #8
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	40023800 	.word	0x40023800

08000fcc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b08a      	sub	sp, #40	@ 0x28
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd4:	f107 0314 	add.w	r3, r7, #20
 8000fd8:	2200      	movs	r2, #0
 8000fda:	601a      	str	r2, [r3, #0]
 8000fdc:	605a      	str	r2, [r3, #4]
 8000fde:	609a      	str	r2, [r3, #8]
 8000fe0:	60da      	str	r2, [r3, #12]
 8000fe2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a17      	ldr	r2, [pc, #92]	@ (8001048 <HAL_ADC_MspInit+0x7c>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d127      	bne.n	800103e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000fee:	2300      	movs	r3, #0
 8000ff0:	613b      	str	r3, [r7, #16]
 8000ff2:	4b16      	ldr	r3, [pc, #88]	@ (800104c <HAL_ADC_MspInit+0x80>)
 8000ff4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ff6:	4a15      	ldr	r2, [pc, #84]	@ (800104c <HAL_ADC_MspInit+0x80>)
 8000ff8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ffc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ffe:	4b13      	ldr	r3, [pc, #76]	@ (800104c <HAL_ADC_MspInit+0x80>)
 8001000:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001002:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001006:	613b      	str	r3, [r7, #16]
 8001008:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800100a:	2300      	movs	r3, #0
 800100c:	60fb      	str	r3, [r7, #12]
 800100e:	4b0f      	ldr	r3, [pc, #60]	@ (800104c <HAL_ADC_MspInit+0x80>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001012:	4a0e      	ldr	r2, [pc, #56]	@ (800104c <HAL_ADC_MspInit+0x80>)
 8001014:	f043 0301 	orr.w	r3, r3, #1
 8001018:	6313      	str	r3, [r2, #48]	@ 0x30
 800101a:	4b0c      	ldr	r3, [pc, #48]	@ (800104c <HAL_ADC_MspInit+0x80>)
 800101c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800101e:	f003 0301 	and.w	r3, r3, #1
 8001022:	60fb      	str	r3, [r7, #12]
 8001024:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = BOOM1_ADC_Pin|BOOM2_ADC_Pin;
 8001026:	2330      	movs	r3, #48	@ 0x30
 8001028:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800102a:	2303      	movs	r3, #3
 800102c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102e:	2300      	movs	r3, #0
 8001030:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001032:	f107 0314 	add.w	r3, r7, #20
 8001036:	4619      	mov	r1, r3
 8001038:	4805      	ldr	r0, [pc, #20]	@ (8001050 <HAL_ADC_MspInit+0x84>)
 800103a:	f000 fdd5 	bl	8001be8 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 800103e:	bf00      	nop
 8001040:	3728      	adds	r7, #40	@ 0x28
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	40012000 	.word	0x40012000
 800104c:	40023800 	.word	0x40023800
 8001050:	40020000 	.word	0x40020000

08001054 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b084      	sub	sp, #16
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4a0e      	ldr	r2, [pc, #56]	@ (800109c <HAL_TIM_Base_MspInit+0x48>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d115      	bne.n	8001092 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001066:	2300      	movs	r3, #0
 8001068:	60fb      	str	r3, [r7, #12]
 800106a:	4b0d      	ldr	r3, [pc, #52]	@ (80010a0 <HAL_TIM_Base_MspInit+0x4c>)
 800106c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800106e:	4a0c      	ldr	r2, [pc, #48]	@ (80010a0 <HAL_TIM_Base_MspInit+0x4c>)
 8001070:	f043 0301 	orr.w	r3, r3, #1
 8001074:	6453      	str	r3, [r2, #68]	@ 0x44
 8001076:	4b0a      	ldr	r3, [pc, #40]	@ (80010a0 <HAL_TIM_Base_MspInit+0x4c>)
 8001078:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800107a:	f003 0301 	and.w	r3, r3, #1
 800107e:	60fb      	str	r3, [r7, #12]
 8001080:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001082:	2200      	movs	r2, #0
 8001084:	2100      	movs	r1, #0
 8001086:	2019      	movs	r0, #25
 8001088:	f000 fd77 	bl	8001b7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800108c:	2019      	movs	r0, #25
 800108e:	f000 fd90 	bl	8001bb2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8001092:	bf00      	nop
 8001094:	3710      	adds	r7, #16
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	40010000 	.word	0x40010000
 80010a0:	40023800 	.word	0x40023800

080010a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b090      	sub	sp, #64	@ 0x40
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ac:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80010b0:	2200      	movs	r2, #0
 80010b2:	601a      	str	r2, [r3, #0]
 80010b4:	605a      	str	r2, [r3, #4]
 80010b6:	609a      	str	r2, [r3, #8]
 80010b8:	60da      	str	r2, [r3, #12]
 80010ba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a74      	ldr	r2, [pc, #464]	@ (8001294 <HAL_UART_MspInit+0x1f0>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d12c      	bne.n	8001120 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80010c6:	2300      	movs	r3, #0
 80010c8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80010ca:	4b73      	ldr	r3, [pc, #460]	@ (8001298 <HAL_UART_MspInit+0x1f4>)
 80010cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010ce:	4a72      	ldr	r2, [pc, #456]	@ (8001298 <HAL_UART_MspInit+0x1f4>)
 80010d0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80010d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80010d6:	4b70      	ldr	r3, [pc, #448]	@ (8001298 <HAL_UART_MspInit+0x1f4>)
 80010d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010da:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80010de:	62bb      	str	r3, [r7, #40]	@ 0x28
 80010e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010e2:	2300      	movs	r3, #0
 80010e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80010e6:	4b6c      	ldr	r3, [pc, #432]	@ (8001298 <HAL_UART_MspInit+0x1f4>)
 80010e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ea:	4a6b      	ldr	r2, [pc, #428]	@ (8001298 <HAL_UART_MspInit+0x1f4>)
 80010ec:	f043 0301 	orr.w	r3, r3, #1
 80010f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80010f2:	4b69      	ldr	r3, [pc, #420]	@ (8001298 <HAL_UART_MspInit+0x1f4>)
 80010f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010f6:	f003 0301 	and.w	r3, r3, #1
 80010fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80010fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|S1_L2_Pin;
 80010fe:	2303      	movs	r3, #3
 8001100:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001102:	2302      	movs	r3, #2
 8001104:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001106:	2300      	movs	r3, #0
 8001108:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800110a:	2303      	movs	r3, #3
 800110c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800110e:	2308      	movs	r3, #8
 8001110:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001112:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001116:	4619      	mov	r1, r3
 8001118:	4860      	ldr	r0, [pc, #384]	@ (800129c <HAL_UART_MspInit+0x1f8>)
 800111a:	f000 fd65 	bl	8001be8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800111e:	e0b5      	b.n	800128c <HAL_UART_MspInit+0x1e8>
  else if(huart->Instance==USART1)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a5e      	ldr	r2, [pc, #376]	@ (80012a0 <HAL_UART_MspInit+0x1fc>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d12d      	bne.n	8001186 <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART1_CLK_ENABLE();
 800112a:	2300      	movs	r3, #0
 800112c:	623b      	str	r3, [r7, #32]
 800112e:	4b5a      	ldr	r3, [pc, #360]	@ (8001298 <HAL_UART_MspInit+0x1f4>)
 8001130:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001132:	4a59      	ldr	r2, [pc, #356]	@ (8001298 <HAL_UART_MspInit+0x1f4>)
 8001134:	f043 0310 	orr.w	r3, r3, #16
 8001138:	6453      	str	r3, [r2, #68]	@ 0x44
 800113a:	4b57      	ldr	r3, [pc, #348]	@ (8001298 <HAL_UART_MspInit+0x1f4>)
 800113c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800113e:	f003 0310 	and.w	r3, r3, #16
 8001142:	623b      	str	r3, [r7, #32]
 8001144:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001146:	2300      	movs	r3, #0
 8001148:	61fb      	str	r3, [r7, #28]
 800114a:	4b53      	ldr	r3, [pc, #332]	@ (8001298 <HAL_UART_MspInit+0x1f4>)
 800114c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800114e:	4a52      	ldr	r2, [pc, #328]	@ (8001298 <HAL_UART_MspInit+0x1f4>)
 8001150:	f043 0301 	orr.w	r3, r3, #1
 8001154:	6313      	str	r3, [r2, #48]	@ 0x30
 8001156:	4b50      	ldr	r3, [pc, #320]	@ (8001298 <HAL_UART_MspInit+0x1f4>)
 8001158:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800115a:	f003 0301 	and.w	r3, r3, #1
 800115e:	61fb      	str	r3, [r7, #28]
 8001160:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_9|S2_L1_Pin;
 8001162:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001166:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001168:	2302      	movs	r3, #2
 800116a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116c:	2300      	movs	r3, #0
 800116e:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001170:	2303      	movs	r3, #3
 8001172:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001174:	2307      	movs	r3, #7
 8001176:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001178:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800117c:	4619      	mov	r1, r3
 800117e:	4847      	ldr	r0, [pc, #284]	@ (800129c <HAL_UART_MspInit+0x1f8>)
 8001180:	f000 fd32 	bl	8001be8 <HAL_GPIO_Init>
}
 8001184:	e082      	b.n	800128c <HAL_UART_MspInit+0x1e8>
  else if(huart->Instance==USART2)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4a46      	ldr	r2, [pc, #280]	@ (80012a4 <HAL_UART_MspInit+0x200>)
 800118c:	4293      	cmp	r3, r2
 800118e:	d12c      	bne.n	80011ea <HAL_UART_MspInit+0x146>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001190:	2300      	movs	r3, #0
 8001192:	61bb      	str	r3, [r7, #24]
 8001194:	4b40      	ldr	r3, [pc, #256]	@ (8001298 <HAL_UART_MspInit+0x1f4>)
 8001196:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001198:	4a3f      	ldr	r2, [pc, #252]	@ (8001298 <HAL_UART_MspInit+0x1f4>)
 800119a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800119e:	6413      	str	r3, [r2, #64]	@ 0x40
 80011a0:	4b3d      	ldr	r3, [pc, #244]	@ (8001298 <HAL_UART_MspInit+0x1f4>)
 80011a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011a8:	61bb      	str	r3, [r7, #24]
 80011aa:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ac:	2300      	movs	r3, #0
 80011ae:	617b      	str	r3, [r7, #20]
 80011b0:	4b39      	ldr	r3, [pc, #228]	@ (8001298 <HAL_UART_MspInit+0x1f4>)
 80011b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011b4:	4a38      	ldr	r2, [pc, #224]	@ (8001298 <HAL_UART_MspInit+0x1f4>)
 80011b6:	f043 0301 	orr.w	r3, r3, #1
 80011ba:	6313      	str	r3, [r2, #48]	@ 0x30
 80011bc:	4b36      	ldr	r3, [pc, #216]	@ (8001298 <HAL_UART_MspInit+0x1f4>)
 80011be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011c0:	f003 0301 	and.w	r3, r3, #1
 80011c4:	617b      	str	r3, [r7, #20]
 80011c6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|S2_L2_Pin;
 80011c8:	230c      	movs	r3, #12
 80011ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011cc:	2302      	movs	r3, #2
 80011ce:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d0:	2300      	movs	r3, #0
 80011d2:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011d4:	2303      	movs	r3, #3
 80011d6:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80011d8:	2307      	movs	r3, #7
 80011da:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011dc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80011e0:	4619      	mov	r1, r3
 80011e2:	482e      	ldr	r0, [pc, #184]	@ (800129c <HAL_UART_MspInit+0x1f8>)
 80011e4:	f000 fd00 	bl	8001be8 <HAL_GPIO_Init>
}
 80011e8:	e050      	b.n	800128c <HAL_UART_MspInit+0x1e8>
  else if(huart->Instance==USART3)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4a2e      	ldr	r2, [pc, #184]	@ (80012a8 <HAL_UART_MspInit+0x204>)
 80011f0:	4293      	cmp	r3, r2
 80011f2:	d14b      	bne.n	800128c <HAL_UART_MspInit+0x1e8>
    __HAL_RCC_USART3_CLK_ENABLE();
 80011f4:	2300      	movs	r3, #0
 80011f6:	613b      	str	r3, [r7, #16]
 80011f8:	4b27      	ldr	r3, [pc, #156]	@ (8001298 <HAL_UART_MspInit+0x1f4>)
 80011fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011fc:	4a26      	ldr	r2, [pc, #152]	@ (8001298 <HAL_UART_MspInit+0x1f4>)
 80011fe:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001202:	6413      	str	r3, [r2, #64]	@ 0x40
 8001204:	4b24      	ldr	r3, [pc, #144]	@ (8001298 <HAL_UART_MspInit+0x1f4>)
 8001206:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001208:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800120c:	613b      	str	r3, [r7, #16]
 800120e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001210:	2300      	movs	r3, #0
 8001212:	60fb      	str	r3, [r7, #12]
 8001214:	4b20      	ldr	r3, [pc, #128]	@ (8001298 <HAL_UART_MspInit+0x1f4>)
 8001216:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001218:	4a1f      	ldr	r2, [pc, #124]	@ (8001298 <HAL_UART_MspInit+0x1f4>)
 800121a:	f043 0302 	orr.w	r3, r3, #2
 800121e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001220:	4b1d      	ldr	r3, [pc, #116]	@ (8001298 <HAL_UART_MspInit+0x1f4>)
 8001222:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001224:	f003 0302 	and.w	r3, r3, #2
 8001228:	60fb      	str	r3, [r7, #12]
 800122a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800122c:	2300      	movs	r3, #0
 800122e:	60bb      	str	r3, [r7, #8]
 8001230:	4b19      	ldr	r3, [pc, #100]	@ (8001298 <HAL_UART_MspInit+0x1f4>)
 8001232:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001234:	4a18      	ldr	r2, [pc, #96]	@ (8001298 <HAL_UART_MspInit+0x1f4>)
 8001236:	f043 0304 	orr.w	r3, r3, #4
 800123a:	6313      	str	r3, [r2, #48]	@ 0x30
 800123c:	4b16      	ldr	r3, [pc, #88]	@ (8001298 <HAL_UART_MspInit+0x1f4>)
 800123e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001240:	f003 0304 	and.w	r3, r3, #4
 8001244:	60bb      	str	r3, [r7, #8]
 8001246:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001248:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800124c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800124e:	2302      	movs	r3, #2
 8001250:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001252:	2300      	movs	r3, #0
 8001254:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001256:	2303      	movs	r3, #3
 8001258:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800125a:	2307      	movs	r3, #7
 800125c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800125e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001262:	4619      	mov	r1, r3
 8001264:	4811      	ldr	r0, [pc, #68]	@ (80012ac <HAL_UART_MspInit+0x208>)
 8001266:	f000 fcbf 	bl	8001be8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = S1_L1_Pin;
 800126a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800126e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001270:	2302      	movs	r3, #2
 8001272:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001274:	2300      	movs	r3, #0
 8001276:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001278:	2303      	movs	r3, #3
 800127a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800127c:	2307      	movs	r3, #7
 800127e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(S1_L1_GPIO_Port, &GPIO_InitStruct);
 8001280:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001284:	4619      	mov	r1, r3
 8001286:	480a      	ldr	r0, [pc, #40]	@ (80012b0 <HAL_UART_MspInit+0x20c>)
 8001288:	f000 fcae 	bl	8001be8 <HAL_GPIO_Init>
}
 800128c:	bf00      	nop
 800128e:	3740      	adds	r7, #64	@ 0x40
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	40004c00 	.word	0x40004c00
 8001298:	40023800 	.word	0x40023800
 800129c:	40020000 	.word	0x40020000
 80012a0:	40011000 	.word	0x40011000
 80012a4:	40004400 	.word	0x40004400
 80012a8:	40004800 	.word	0x40004800
 80012ac:	40020400 	.word	0x40020400
 80012b0:	40020800 	.word	0x40020800

080012b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012b8:	bf00      	nop
 80012ba:	e7fd      	b.n	80012b8 <NMI_Handler+0x4>

080012bc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012c0:	bf00      	nop
 80012c2:	e7fd      	b.n	80012c0 <HardFault_Handler+0x4>

080012c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012c8:	bf00      	nop
 80012ca:	e7fd      	b.n	80012c8 <MemManage_Handler+0x4>

080012cc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012d0:	bf00      	nop
 80012d2:	e7fd      	b.n	80012d0 <BusFault_Handler+0x4>

080012d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012d8:	bf00      	nop
 80012da:	e7fd      	b.n	80012d8 <UsageFault_Handler+0x4>

080012dc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012e0:	bf00      	nop
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr

080012ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012ea:	b480      	push	{r7}
 80012ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012ee:	bf00      	nop
 80012f0:	46bd      	mov	sp, r7
 80012f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f6:	4770      	bx	lr

080012f8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012fc:	bf00      	nop
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr

08001306 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001306:	b580      	push	{r7, lr}
 8001308:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800130a:	f000 f8a5 	bl	8001458 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800130e:	bf00      	nop
 8001310:	bd80      	pop	{r7, pc}
	...

08001314 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  //Transmit_Msg(); /* Transmit existing Parsed Data */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001318:	4802      	ldr	r0, [pc, #8]	@ (8001324 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800131a:	f003 fa9b 	bl	8004854 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800131e:	bf00      	nop
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	20000194 	.word	0x20000194

08001328 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800132c:	4802      	ldr	r0, [pc, #8]	@ (8001338 <OTG_FS_IRQHandler+0x10>)
 800132e:	f000 ff6b 	bl	8002208 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001332:	bf00      	nop
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	200017e0 	.word	0x200017e0

0800133c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001340:	4b06      	ldr	r3, [pc, #24]	@ (800135c <SystemInit+0x20>)
 8001342:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001346:	4a05      	ldr	r2, [pc, #20]	@ (800135c <SystemInit+0x20>)
 8001348:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800134c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001350:	bf00      	nop
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop
 800135c:	e000ed00 	.word	0xe000ed00

08001360 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001360:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001398 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001364:	f7ff ffea 	bl	800133c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001368:	480c      	ldr	r0, [pc, #48]	@ (800139c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800136a:	490d      	ldr	r1, [pc, #52]	@ (80013a0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800136c:	4a0d      	ldr	r2, [pc, #52]	@ (80013a4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800136e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001370:	e002      	b.n	8001378 <LoopCopyDataInit>

08001372 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001372:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001374:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001376:	3304      	adds	r3, #4

08001378 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001378:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800137a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800137c:	d3f9      	bcc.n	8001372 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800137e:	4a0a      	ldr	r2, [pc, #40]	@ (80013a8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001380:	4c0a      	ldr	r4, [pc, #40]	@ (80013ac <LoopFillZerobss+0x22>)
  movs r3, #0
 8001382:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001384:	e001      	b.n	800138a <LoopFillZerobss>

08001386 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001386:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001388:	3204      	adds	r2, #4

0800138a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800138a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800138c:	d3fb      	bcc.n	8001386 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800138e:	f008 fc15 	bl	8009bbc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001392:	f7ff fb3f 	bl	8000a14 <main>
  bx  lr    
 8001396:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001398:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800139c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013a0:	20000110 	.word	0x20000110
  ldr r2, =_sidata
 80013a4:	08009c8c 	.word	0x08009c8c
  ldr r2, =_sbss
 80013a8:	20000110 	.word	0x20000110
  ldr r4, =_ebss
 80013ac:	20001ee4 	.word	0x20001ee4

080013b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013b0:	e7fe      	b.n	80013b0 <ADC_IRQHandler>
	...

080013b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80013b8:	4b0e      	ldr	r3, [pc, #56]	@ (80013f4 <HAL_Init+0x40>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a0d      	ldr	r2, [pc, #52]	@ (80013f4 <HAL_Init+0x40>)
 80013be:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80013c2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80013c4:	4b0b      	ldr	r3, [pc, #44]	@ (80013f4 <HAL_Init+0x40>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a0a      	ldr	r2, [pc, #40]	@ (80013f4 <HAL_Init+0x40>)
 80013ca:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80013ce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013d0:	4b08      	ldr	r3, [pc, #32]	@ (80013f4 <HAL_Init+0x40>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a07      	ldr	r2, [pc, #28]	@ (80013f4 <HAL_Init+0x40>)
 80013d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013dc:	2003      	movs	r0, #3
 80013de:	f000 fbc1 	bl	8001b64 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013e2:	2000      	movs	r0, #0
 80013e4:	f000 f808 	bl	80013f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013e8:	f7ff fdc8 	bl	8000f7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013ec:	2300      	movs	r3, #0
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	40023c00 	.word	0x40023c00

080013f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001400:	4b12      	ldr	r3, [pc, #72]	@ (800144c <HAL_InitTick+0x54>)
 8001402:	681a      	ldr	r2, [r3, #0]
 8001404:	4b12      	ldr	r3, [pc, #72]	@ (8001450 <HAL_InitTick+0x58>)
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	4619      	mov	r1, r3
 800140a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800140e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001412:	fbb2 f3f3 	udiv	r3, r2, r3
 8001416:	4618      	mov	r0, r3
 8001418:	f000 fbd9 	bl	8001bce <HAL_SYSTICK_Config>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d001      	beq.n	8001426 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001422:	2301      	movs	r3, #1
 8001424:	e00e      	b.n	8001444 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2b0f      	cmp	r3, #15
 800142a:	d80a      	bhi.n	8001442 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800142c:	2200      	movs	r2, #0
 800142e:	6879      	ldr	r1, [r7, #4]
 8001430:	f04f 30ff 	mov.w	r0, #4294967295
 8001434:	f000 fba1 	bl	8001b7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001438:	4a06      	ldr	r2, [pc, #24]	@ (8001454 <HAL_InitTick+0x5c>)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800143e:	2300      	movs	r3, #0
 8001440:	e000      	b.n	8001444 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001442:	2301      	movs	r3, #1
}
 8001444:	4618      	mov	r0, r3
 8001446:	3708      	adds	r7, #8
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	20000004 	.word	0x20000004
 8001450:	2000000c 	.word	0x2000000c
 8001454:	20000008 	.word	0x20000008

08001458 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800145c:	4b06      	ldr	r3, [pc, #24]	@ (8001478 <HAL_IncTick+0x20>)
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	461a      	mov	r2, r3
 8001462:	4b06      	ldr	r3, [pc, #24]	@ (800147c <HAL_IncTick+0x24>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4413      	add	r3, r2
 8001468:	4a04      	ldr	r2, [pc, #16]	@ (800147c <HAL_IncTick+0x24>)
 800146a:	6013      	str	r3, [r2, #0]
}
 800146c:	bf00      	nop
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr
 8001476:	bf00      	nop
 8001478:	2000000c 	.word	0x2000000c
 800147c:	200002fc 	.word	0x200002fc

08001480 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  return uwTick;
 8001484:	4b03      	ldr	r3, [pc, #12]	@ (8001494 <HAL_GetTick+0x14>)
 8001486:	681b      	ldr	r3, [r3, #0]
}
 8001488:	4618      	mov	r0, r3
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr
 8001492:	bf00      	nop
 8001494:	200002fc 	.word	0x200002fc

08001498 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b084      	sub	sp, #16
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014a0:	f7ff ffee 	bl	8001480 <HAL_GetTick>
 80014a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014b0:	d005      	beq.n	80014be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014b2:	4b0a      	ldr	r3, [pc, #40]	@ (80014dc <HAL_Delay+0x44>)
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	461a      	mov	r2, r3
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	4413      	add	r3, r2
 80014bc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80014be:	bf00      	nop
 80014c0:	f7ff ffde 	bl	8001480 <HAL_GetTick>
 80014c4:	4602      	mov	r2, r0
 80014c6:	68bb      	ldr	r3, [r7, #8]
 80014c8:	1ad3      	subs	r3, r2, r3
 80014ca:	68fa      	ldr	r2, [r7, #12]
 80014cc:	429a      	cmp	r2, r3
 80014ce:	d8f7      	bhi.n	80014c0 <HAL_Delay+0x28>
  {
  }
}
 80014d0:	bf00      	nop
 80014d2:	bf00      	nop
 80014d4:	3710      	adds	r7, #16
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	2000000c 	.word	0x2000000c

080014e0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b084      	sub	sp, #16
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014e8:	2300      	movs	r3, #0
 80014ea:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d101      	bne.n	80014f6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80014f2:	2301      	movs	r3, #1
 80014f4:	e033      	b.n	800155e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d109      	bne.n	8001512 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80014fe:	6878      	ldr	r0, [r7, #4]
 8001500:	f7ff fd64 	bl	8000fcc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2200      	movs	r2, #0
 8001508:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2200      	movs	r2, #0
 800150e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001516:	f003 0310 	and.w	r3, r3, #16
 800151a:	2b00      	cmp	r3, #0
 800151c:	d118      	bne.n	8001550 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001522:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001526:	f023 0302 	bic.w	r3, r3, #2
 800152a:	f043 0202 	orr.w	r2, r3, #2
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001532:	6878      	ldr	r0, [r7, #4]
 8001534:	f000 f94a 	bl	80017cc <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	2200      	movs	r2, #0
 800153c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001542:	f023 0303 	bic.w	r3, r3, #3
 8001546:	f043 0201 	orr.w	r2, r3, #1
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	641a      	str	r2, [r3, #64]	@ 0x40
 800154e:	e001      	b.n	8001554 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001550:	2301      	movs	r3, #1
 8001552:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2200      	movs	r2, #0
 8001558:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800155c:	7bfb      	ldrb	r3, [r7, #15]
}
 800155e:	4618      	mov	r0, r3
 8001560:	3710      	adds	r7, #16
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
	...

08001568 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001568:	b480      	push	{r7}
 800156a:	b085      	sub	sp, #20
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
 8001570:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001572:	2300      	movs	r3, #0
 8001574:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800157c:	2b01      	cmp	r3, #1
 800157e:	d101      	bne.n	8001584 <HAL_ADC_ConfigChannel+0x1c>
 8001580:	2302      	movs	r3, #2
 8001582:	e113      	b.n	80017ac <HAL_ADC_ConfigChannel+0x244>
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2201      	movs	r2, #1
 8001588:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	2b09      	cmp	r3, #9
 8001592:	d925      	bls.n	80015e0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	68d9      	ldr	r1, [r3, #12]
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	b29b      	uxth	r3, r3
 80015a0:	461a      	mov	r2, r3
 80015a2:	4613      	mov	r3, r2
 80015a4:	005b      	lsls	r3, r3, #1
 80015a6:	4413      	add	r3, r2
 80015a8:	3b1e      	subs	r3, #30
 80015aa:	2207      	movs	r2, #7
 80015ac:	fa02 f303 	lsl.w	r3, r2, r3
 80015b0:	43da      	mvns	r2, r3
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	400a      	ands	r2, r1
 80015b8:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	68d9      	ldr	r1, [r3, #12]
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	689a      	ldr	r2, [r3, #8]
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	b29b      	uxth	r3, r3
 80015ca:	4618      	mov	r0, r3
 80015cc:	4603      	mov	r3, r0
 80015ce:	005b      	lsls	r3, r3, #1
 80015d0:	4403      	add	r3, r0
 80015d2:	3b1e      	subs	r3, #30
 80015d4:	409a      	lsls	r2, r3
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	430a      	orrs	r2, r1
 80015dc:	60da      	str	r2, [r3, #12]
 80015de:	e022      	b.n	8001626 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	6919      	ldr	r1, [r3, #16]
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	b29b      	uxth	r3, r3
 80015ec:	461a      	mov	r2, r3
 80015ee:	4613      	mov	r3, r2
 80015f0:	005b      	lsls	r3, r3, #1
 80015f2:	4413      	add	r3, r2
 80015f4:	2207      	movs	r2, #7
 80015f6:	fa02 f303 	lsl.w	r3, r2, r3
 80015fa:	43da      	mvns	r2, r3
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	400a      	ands	r2, r1
 8001602:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	6919      	ldr	r1, [r3, #16]
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	689a      	ldr	r2, [r3, #8]
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	b29b      	uxth	r3, r3
 8001614:	4618      	mov	r0, r3
 8001616:	4603      	mov	r3, r0
 8001618:	005b      	lsls	r3, r3, #1
 800161a:	4403      	add	r3, r0
 800161c:	409a      	lsls	r2, r3
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	430a      	orrs	r2, r1
 8001624:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	2b06      	cmp	r3, #6
 800162c:	d824      	bhi.n	8001678 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	685a      	ldr	r2, [r3, #4]
 8001638:	4613      	mov	r3, r2
 800163a:	009b      	lsls	r3, r3, #2
 800163c:	4413      	add	r3, r2
 800163e:	3b05      	subs	r3, #5
 8001640:	221f      	movs	r2, #31
 8001642:	fa02 f303 	lsl.w	r3, r2, r3
 8001646:	43da      	mvns	r2, r3
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	400a      	ands	r2, r1
 800164e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	b29b      	uxth	r3, r3
 800165c:	4618      	mov	r0, r3
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	685a      	ldr	r2, [r3, #4]
 8001662:	4613      	mov	r3, r2
 8001664:	009b      	lsls	r3, r3, #2
 8001666:	4413      	add	r3, r2
 8001668:	3b05      	subs	r3, #5
 800166a:	fa00 f203 	lsl.w	r2, r0, r3
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	430a      	orrs	r2, r1
 8001674:	635a      	str	r2, [r3, #52]	@ 0x34
 8001676:	e04c      	b.n	8001712 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	2b0c      	cmp	r3, #12
 800167e:	d824      	bhi.n	80016ca <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	685a      	ldr	r2, [r3, #4]
 800168a:	4613      	mov	r3, r2
 800168c:	009b      	lsls	r3, r3, #2
 800168e:	4413      	add	r3, r2
 8001690:	3b23      	subs	r3, #35	@ 0x23
 8001692:	221f      	movs	r2, #31
 8001694:	fa02 f303 	lsl.w	r3, r2, r3
 8001698:	43da      	mvns	r2, r3
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	400a      	ands	r2, r1
 80016a0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	b29b      	uxth	r3, r3
 80016ae:	4618      	mov	r0, r3
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	685a      	ldr	r2, [r3, #4]
 80016b4:	4613      	mov	r3, r2
 80016b6:	009b      	lsls	r3, r3, #2
 80016b8:	4413      	add	r3, r2
 80016ba:	3b23      	subs	r3, #35	@ 0x23
 80016bc:	fa00 f203 	lsl.w	r2, r0, r3
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	430a      	orrs	r2, r1
 80016c6:	631a      	str	r2, [r3, #48]	@ 0x30
 80016c8:	e023      	b.n	8001712 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	685a      	ldr	r2, [r3, #4]
 80016d4:	4613      	mov	r3, r2
 80016d6:	009b      	lsls	r3, r3, #2
 80016d8:	4413      	add	r3, r2
 80016da:	3b41      	subs	r3, #65	@ 0x41
 80016dc:	221f      	movs	r2, #31
 80016de:	fa02 f303 	lsl.w	r3, r2, r3
 80016e2:	43da      	mvns	r2, r3
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	400a      	ands	r2, r1
 80016ea:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	b29b      	uxth	r3, r3
 80016f8:	4618      	mov	r0, r3
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	685a      	ldr	r2, [r3, #4]
 80016fe:	4613      	mov	r3, r2
 8001700:	009b      	lsls	r3, r3, #2
 8001702:	4413      	add	r3, r2
 8001704:	3b41      	subs	r3, #65	@ 0x41
 8001706:	fa00 f203 	lsl.w	r2, r0, r3
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	430a      	orrs	r2, r1
 8001710:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001712:	4b29      	ldr	r3, [pc, #164]	@ (80017b8 <HAL_ADC_ConfigChannel+0x250>)
 8001714:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4a28      	ldr	r2, [pc, #160]	@ (80017bc <HAL_ADC_ConfigChannel+0x254>)
 800171c:	4293      	cmp	r3, r2
 800171e:	d10f      	bne.n	8001740 <HAL_ADC_ConfigChannel+0x1d8>
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	2b12      	cmp	r3, #18
 8001726:	d10b      	bne.n	8001740 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a1d      	ldr	r2, [pc, #116]	@ (80017bc <HAL_ADC_ConfigChannel+0x254>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d12b      	bne.n	80017a2 <HAL_ADC_ConfigChannel+0x23a>
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4a1c      	ldr	r2, [pc, #112]	@ (80017c0 <HAL_ADC_ConfigChannel+0x258>)
 8001750:	4293      	cmp	r3, r2
 8001752:	d003      	beq.n	800175c <HAL_ADC_ConfigChannel+0x1f4>
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	2b11      	cmp	r3, #17
 800175a:	d122      	bne.n	80017a2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a11      	ldr	r2, [pc, #68]	@ (80017c0 <HAL_ADC_ConfigChannel+0x258>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d111      	bne.n	80017a2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800177e:	4b11      	ldr	r3, [pc, #68]	@ (80017c4 <HAL_ADC_ConfigChannel+0x25c>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a11      	ldr	r2, [pc, #68]	@ (80017c8 <HAL_ADC_ConfigChannel+0x260>)
 8001784:	fba2 2303 	umull	r2, r3, r2, r3
 8001788:	0c9a      	lsrs	r2, r3, #18
 800178a:	4613      	mov	r3, r2
 800178c:	009b      	lsls	r3, r3, #2
 800178e:	4413      	add	r3, r2
 8001790:	005b      	lsls	r3, r3, #1
 8001792:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001794:	e002      	b.n	800179c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001796:	68bb      	ldr	r3, [r7, #8]
 8001798:	3b01      	subs	r3, #1
 800179a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d1f9      	bne.n	8001796 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2200      	movs	r2, #0
 80017a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80017aa:	2300      	movs	r3, #0
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	3714      	adds	r7, #20
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr
 80017b8:	40012300 	.word	0x40012300
 80017bc:	40012000 	.word	0x40012000
 80017c0:	10000012 	.word	0x10000012
 80017c4:	20000004 	.word	0x20000004
 80017c8:	431bde83 	.word	0x431bde83

080017cc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b085      	sub	sp, #20
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80017d4:	4b79      	ldr	r3, [pc, #484]	@ (80019bc <ADC_Init+0x1f0>)
 80017d6:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	685a      	ldr	r2, [r3, #4]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	431a      	orrs	r2, r3
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	685a      	ldr	r2, [r3, #4]
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001800:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	6859      	ldr	r1, [r3, #4]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	691b      	ldr	r3, [r3, #16]
 800180c:	021a      	lsls	r2, r3, #8
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	430a      	orrs	r2, r1
 8001814:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	685a      	ldr	r2, [r3, #4]
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001824:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	6859      	ldr	r1, [r3, #4]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	689a      	ldr	r2, [r3, #8]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	430a      	orrs	r2, r1
 8001836:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	689a      	ldr	r2, [r3, #8]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001846:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	6899      	ldr	r1, [r3, #8]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	68da      	ldr	r2, [r3, #12]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	430a      	orrs	r2, r1
 8001858:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800185e:	4a58      	ldr	r2, [pc, #352]	@ (80019c0 <ADC_Init+0x1f4>)
 8001860:	4293      	cmp	r3, r2
 8001862:	d022      	beq.n	80018aa <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	689a      	ldr	r2, [r3, #8]
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001872:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	6899      	ldr	r1, [r3, #8]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	430a      	orrs	r2, r1
 8001884:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	689a      	ldr	r2, [r3, #8]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001894:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	6899      	ldr	r1, [r3, #8]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	430a      	orrs	r2, r1
 80018a6:	609a      	str	r2, [r3, #8]
 80018a8:	e00f      	b.n	80018ca <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	689a      	ldr	r2, [r3, #8]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80018b8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	689a      	ldr	r2, [r3, #8]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80018c8:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	689a      	ldr	r2, [r3, #8]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f022 0202 	bic.w	r2, r2, #2
 80018d8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	6899      	ldr	r1, [r3, #8]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	7e1b      	ldrb	r3, [r3, #24]
 80018e4:	005a      	lsls	r2, r3, #1
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	430a      	orrs	r2, r1
 80018ec:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d01b      	beq.n	8001930 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	685a      	ldr	r2, [r3, #4]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001906:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	685a      	ldr	r2, [r3, #4]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001916:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	6859      	ldr	r1, [r3, #4]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001922:	3b01      	subs	r3, #1
 8001924:	035a      	lsls	r2, r3, #13
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	430a      	orrs	r2, r1
 800192c:	605a      	str	r2, [r3, #4]
 800192e:	e007      	b.n	8001940 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	685a      	ldr	r2, [r3, #4]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800193e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800194e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	69db      	ldr	r3, [r3, #28]
 800195a:	3b01      	subs	r3, #1
 800195c:	051a      	lsls	r2, r3, #20
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	430a      	orrs	r2, r1
 8001964:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	689a      	ldr	r2, [r3, #8]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001974:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	6899      	ldr	r1, [r3, #8]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001982:	025a      	lsls	r2, r3, #9
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	430a      	orrs	r2, r1
 800198a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	689a      	ldr	r2, [r3, #8]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800199a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	6899      	ldr	r1, [r3, #8]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	695b      	ldr	r3, [r3, #20]
 80019a6:	029a      	lsls	r2, r3, #10
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	430a      	orrs	r2, r1
 80019ae:	609a      	str	r2, [r3, #8]
}
 80019b0:	bf00      	nop
 80019b2:	3714      	adds	r7, #20
 80019b4:	46bd      	mov	sp, r7
 80019b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ba:	4770      	bx	lr
 80019bc:	40012300 	.word	0x40012300
 80019c0:	0f000001 	.word	0x0f000001

080019c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b085      	sub	sp, #20
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	f003 0307 	and.w	r3, r3, #7
 80019d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019d4:	4b0c      	ldr	r3, [pc, #48]	@ (8001a08 <__NVIC_SetPriorityGrouping+0x44>)
 80019d6:	68db      	ldr	r3, [r3, #12]
 80019d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019da:	68ba      	ldr	r2, [r7, #8]
 80019dc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80019e0:	4013      	ands	r3, r2
 80019e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019e8:	68bb      	ldr	r3, [r7, #8]
 80019ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019ec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80019f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80019f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019f6:	4a04      	ldr	r2, [pc, #16]	@ (8001a08 <__NVIC_SetPriorityGrouping+0x44>)
 80019f8:	68bb      	ldr	r3, [r7, #8]
 80019fa:	60d3      	str	r3, [r2, #12]
}
 80019fc:	bf00      	nop
 80019fe:	3714      	adds	r7, #20
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr
 8001a08:	e000ed00 	.word	0xe000ed00

08001a0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a10:	4b04      	ldr	r3, [pc, #16]	@ (8001a24 <__NVIC_GetPriorityGrouping+0x18>)
 8001a12:	68db      	ldr	r3, [r3, #12]
 8001a14:	0a1b      	lsrs	r3, r3, #8
 8001a16:	f003 0307 	and.w	r3, r3, #7
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr
 8001a24:	e000ed00 	.word	0xe000ed00

08001a28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b083      	sub	sp, #12
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	4603      	mov	r3, r0
 8001a30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	db0b      	blt.n	8001a52 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a3a:	79fb      	ldrb	r3, [r7, #7]
 8001a3c:	f003 021f 	and.w	r2, r3, #31
 8001a40:	4907      	ldr	r1, [pc, #28]	@ (8001a60 <__NVIC_EnableIRQ+0x38>)
 8001a42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a46:	095b      	lsrs	r3, r3, #5
 8001a48:	2001      	movs	r0, #1
 8001a4a:	fa00 f202 	lsl.w	r2, r0, r2
 8001a4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001a52:	bf00      	nop
 8001a54:	370c      	adds	r7, #12
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr
 8001a5e:	bf00      	nop
 8001a60:	e000e100 	.word	0xe000e100

08001a64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b083      	sub	sp, #12
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	6039      	str	r1, [r7, #0]
 8001a6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	db0a      	blt.n	8001a8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	b2da      	uxtb	r2, r3
 8001a7c:	490c      	ldr	r1, [pc, #48]	@ (8001ab0 <__NVIC_SetPriority+0x4c>)
 8001a7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a82:	0112      	lsls	r2, r2, #4
 8001a84:	b2d2      	uxtb	r2, r2
 8001a86:	440b      	add	r3, r1
 8001a88:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a8c:	e00a      	b.n	8001aa4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	b2da      	uxtb	r2, r3
 8001a92:	4908      	ldr	r1, [pc, #32]	@ (8001ab4 <__NVIC_SetPriority+0x50>)
 8001a94:	79fb      	ldrb	r3, [r7, #7]
 8001a96:	f003 030f 	and.w	r3, r3, #15
 8001a9a:	3b04      	subs	r3, #4
 8001a9c:	0112      	lsls	r2, r2, #4
 8001a9e:	b2d2      	uxtb	r2, r2
 8001aa0:	440b      	add	r3, r1
 8001aa2:	761a      	strb	r2, [r3, #24]
}
 8001aa4:	bf00      	nop
 8001aa6:	370c      	adds	r7, #12
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr
 8001ab0:	e000e100 	.word	0xe000e100
 8001ab4:	e000ed00 	.word	0xe000ed00

08001ab8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b089      	sub	sp, #36	@ 0x24
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	60f8      	str	r0, [r7, #12]
 8001ac0:	60b9      	str	r1, [r7, #8]
 8001ac2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	f003 0307 	and.w	r3, r3, #7
 8001aca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001acc:	69fb      	ldr	r3, [r7, #28]
 8001ace:	f1c3 0307 	rsb	r3, r3, #7
 8001ad2:	2b04      	cmp	r3, #4
 8001ad4:	bf28      	it	cs
 8001ad6:	2304      	movcs	r3, #4
 8001ad8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ada:	69fb      	ldr	r3, [r7, #28]
 8001adc:	3304      	adds	r3, #4
 8001ade:	2b06      	cmp	r3, #6
 8001ae0:	d902      	bls.n	8001ae8 <NVIC_EncodePriority+0x30>
 8001ae2:	69fb      	ldr	r3, [r7, #28]
 8001ae4:	3b03      	subs	r3, #3
 8001ae6:	e000      	b.n	8001aea <NVIC_EncodePriority+0x32>
 8001ae8:	2300      	movs	r3, #0
 8001aea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001aec:	f04f 32ff 	mov.w	r2, #4294967295
 8001af0:	69bb      	ldr	r3, [r7, #24]
 8001af2:	fa02 f303 	lsl.w	r3, r2, r3
 8001af6:	43da      	mvns	r2, r3
 8001af8:	68bb      	ldr	r3, [r7, #8]
 8001afa:	401a      	ands	r2, r3
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b00:	f04f 31ff 	mov.w	r1, #4294967295
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	fa01 f303 	lsl.w	r3, r1, r3
 8001b0a:	43d9      	mvns	r1, r3
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b10:	4313      	orrs	r3, r2
         );
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	3724      	adds	r7, #36	@ 0x24
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr
	...

08001b20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b082      	sub	sp, #8
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	3b01      	subs	r3, #1
 8001b2c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001b30:	d301      	bcc.n	8001b36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b32:	2301      	movs	r3, #1
 8001b34:	e00f      	b.n	8001b56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b36:	4a0a      	ldr	r2, [pc, #40]	@ (8001b60 <SysTick_Config+0x40>)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	3b01      	subs	r3, #1
 8001b3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b3e:	210f      	movs	r1, #15
 8001b40:	f04f 30ff 	mov.w	r0, #4294967295
 8001b44:	f7ff ff8e 	bl	8001a64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b48:	4b05      	ldr	r3, [pc, #20]	@ (8001b60 <SysTick_Config+0x40>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b4e:	4b04      	ldr	r3, [pc, #16]	@ (8001b60 <SysTick_Config+0x40>)
 8001b50:	2207      	movs	r2, #7
 8001b52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b54:	2300      	movs	r3, #0
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3708      	adds	r7, #8
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	e000e010 	.word	0xe000e010

08001b64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b082      	sub	sp, #8
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b6c:	6878      	ldr	r0, [r7, #4]
 8001b6e:	f7ff ff29 	bl	80019c4 <__NVIC_SetPriorityGrouping>
}
 8001b72:	bf00      	nop
 8001b74:	3708      	adds	r7, #8
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}

08001b7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b7a:	b580      	push	{r7, lr}
 8001b7c:	b086      	sub	sp, #24
 8001b7e:	af00      	add	r7, sp, #0
 8001b80:	4603      	mov	r3, r0
 8001b82:	60b9      	str	r1, [r7, #8]
 8001b84:	607a      	str	r2, [r7, #4]
 8001b86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b8c:	f7ff ff3e 	bl	8001a0c <__NVIC_GetPriorityGrouping>
 8001b90:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b92:	687a      	ldr	r2, [r7, #4]
 8001b94:	68b9      	ldr	r1, [r7, #8]
 8001b96:	6978      	ldr	r0, [r7, #20]
 8001b98:	f7ff ff8e 	bl	8001ab8 <NVIC_EncodePriority>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ba2:	4611      	mov	r1, r2
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f7ff ff5d 	bl	8001a64 <__NVIC_SetPriority>
}
 8001baa:	bf00      	nop
 8001bac:	3718      	adds	r7, #24
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}

08001bb2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bb2:	b580      	push	{r7, lr}
 8001bb4:	b082      	sub	sp, #8
 8001bb6:	af00      	add	r7, sp, #0
 8001bb8:	4603      	mov	r3, r0
 8001bba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f7ff ff31 	bl	8001a28 <__NVIC_EnableIRQ>
}
 8001bc6:	bf00      	nop
 8001bc8:	3708      	adds	r7, #8
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}

08001bce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bce:	b580      	push	{r7, lr}
 8001bd0:	b082      	sub	sp, #8
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bd6:	6878      	ldr	r0, [r7, #4]
 8001bd8:	f7ff ffa2 	bl	8001b20 <SysTick_Config>
 8001bdc:	4603      	mov	r3, r0
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	3708      	adds	r7, #8
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
	...

08001be8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b089      	sub	sp, #36	@ 0x24
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
 8001bf0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bfe:	2300      	movs	r3, #0
 8001c00:	61fb      	str	r3, [r7, #28]
 8001c02:	e165      	b.n	8001ed0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c04:	2201      	movs	r2, #1
 8001c06:	69fb      	ldr	r3, [r7, #28]
 8001c08:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	697a      	ldr	r2, [r7, #20]
 8001c14:	4013      	ands	r3, r2
 8001c16:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c18:	693a      	ldr	r2, [r7, #16]
 8001c1a:	697b      	ldr	r3, [r7, #20]
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	f040 8154 	bne.w	8001eca <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	f003 0303 	and.w	r3, r3, #3
 8001c2a:	2b01      	cmp	r3, #1
 8001c2c:	d005      	beq.n	8001c3a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c36:	2b02      	cmp	r3, #2
 8001c38:	d130      	bne.n	8001c9c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	689b      	ldr	r3, [r3, #8]
 8001c3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c40:	69fb      	ldr	r3, [r7, #28]
 8001c42:	005b      	lsls	r3, r3, #1
 8001c44:	2203      	movs	r2, #3
 8001c46:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4a:	43db      	mvns	r3, r3
 8001c4c:	69ba      	ldr	r2, [r7, #24]
 8001c4e:	4013      	ands	r3, r2
 8001c50:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	68da      	ldr	r2, [r3, #12]
 8001c56:	69fb      	ldr	r3, [r7, #28]
 8001c58:	005b      	lsls	r3, r3, #1
 8001c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5e:	69ba      	ldr	r2, [r7, #24]
 8001c60:	4313      	orrs	r3, r2
 8001c62:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	69ba      	ldr	r2, [r7, #24]
 8001c68:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c70:	2201      	movs	r2, #1
 8001c72:	69fb      	ldr	r3, [r7, #28]
 8001c74:	fa02 f303 	lsl.w	r3, r2, r3
 8001c78:	43db      	mvns	r3, r3
 8001c7a:	69ba      	ldr	r2, [r7, #24]
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	091b      	lsrs	r3, r3, #4
 8001c86:	f003 0201 	and.w	r2, r3, #1
 8001c8a:	69fb      	ldr	r3, [r7, #28]
 8001c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c90:	69ba      	ldr	r2, [r7, #24]
 8001c92:	4313      	orrs	r3, r2
 8001c94:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	69ba      	ldr	r2, [r7, #24]
 8001c9a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	f003 0303 	and.w	r3, r3, #3
 8001ca4:	2b03      	cmp	r3, #3
 8001ca6:	d017      	beq.n	8001cd8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	68db      	ldr	r3, [r3, #12]
 8001cac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001cae:	69fb      	ldr	r3, [r7, #28]
 8001cb0:	005b      	lsls	r3, r3, #1
 8001cb2:	2203      	movs	r2, #3
 8001cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb8:	43db      	mvns	r3, r3
 8001cba:	69ba      	ldr	r2, [r7, #24]
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	689a      	ldr	r2, [r3, #8]
 8001cc4:	69fb      	ldr	r3, [r7, #28]
 8001cc6:	005b      	lsls	r3, r3, #1
 8001cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ccc:	69ba      	ldr	r2, [r7, #24]
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	69ba      	ldr	r2, [r7, #24]
 8001cd6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	f003 0303 	and.w	r3, r3, #3
 8001ce0:	2b02      	cmp	r3, #2
 8001ce2:	d123      	bne.n	8001d2c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ce4:	69fb      	ldr	r3, [r7, #28]
 8001ce6:	08da      	lsrs	r2, r3, #3
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	3208      	adds	r2, #8
 8001cec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cf0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001cf2:	69fb      	ldr	r3, [r7, #28]
 8001cf4:	f003 0307 	and.w	r3, r3, #7
 8001cf8:	009b      	lsls	r3, r3, #2
 8001cfa:	220f      	movs	r2, #15
 8001cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001d00:	43db      	mvns	r3, r3
 8001d02:	69ba      	ldr	r2, [r7, #24]
 8001d04:	4013      	ands	r3, r2
 8001d06:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	691a      	ldr	r2, [r3, #16]
 8001d0c:	69fb      	ldr	r3, [r7, #28]
 8001d0e:	f003 0307 	and.w	r3, r3, #7
 8001d12:	009b      	lsls	r3, r3, #2
 8001d14:	fa02 f303 	lsl.w	r3, r2, r3
 8001d18:	69ba      	ldr	r2, [r7, #24]
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d1e:	69fb      	ldr	r3, [r7, #28]
 8001d20:	08da      	lsrs	r2, r3, #3
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	3208      	adds	r2, #8
 8001d26:	69b9      	ldr	r1, [r7, #24]
 8001d28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d32:	69fb      	ldr	r3, [r7, #28]
 8001d34:	005b      	lsls	r3, r3, #1
 8001d36:	2203      	movs	r2, #3
 8001d38:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3c:	43db      	mvns	r3, r3
 8001d3e:	69ba      	ldr	r2, [r7, #24]
 8001d40:	4013      	ands	r3, r2
 8001d42:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	f003 0203 	and.w	r2, r3, #3
 8001d4c:	69fb      	ldr	r3, [r7, #28]
 8001d4e:	005b      	lsls	r3, r3, #1
 8001d50:	fa02 f303 	lsl.w	r3, r2, r3
 8001d54:	69ba      	ldr	r2, [r7, #24]
 8001d56:	4313      	orrs	r3, r2
 8001d58:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	69ba      	ldr	r2, [r7, #24]
 8001d5e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	f000 80ae 	beq.w	8001eca <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d6e:	2300      	movs	r3, #0
 8001d70:	60fb      	str	r3, [r7, #12]
 8001d72:	4b5d      	ldr	r3, [pc, #372]	@ (8001ee8 <HAL_GPIO_Init+0x300>)
 8001d74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d76:	4a5c      	ldr	r2, [pc, #368]	@ (8001ee8 <HAL_GPIO_Init+0x300>)
 8001d78:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d7c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d7e:	4b5a      	ldr	r3, [pc, #360]	@ (8001ee8 <HAL_GPIO_Init+0x300>)
 8001d80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d82:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d86:	60fb      	str	r3, [r7, #12]
 8001d88:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d8a:	4a58      	ldr	r2, [pc, #352]	@ (8001eec <HAL_GPIO_Init+0x304>)
 8001d8c:	69fb      	ldr	r3, [r7, #28]
 8001d8e:	089b      	lsrs	r3, r3, #2
 8001d90:	3302      	adds	r3, #2
 8001d92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d96:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d98:	69fb      	ldr	r3, [r7, #28]
 8001d9a:	f003 0303 	and.w	r3, r3, #3
 8001d9e:	009b      	lsls	r3, r3, #2
 8001da0:	220f      	movs	r2, #15
 8001da2:	fa02 f303 	lsl.w	r3, r2, r3
 8001da6:	43db      	mvns	r3, r3
 8001da8:	69ba      	ldr	r2, [r7, #24]
 8001daa:	4013      	ands	r3, r2
 8001dac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	4a4f      	ldr	r2, [pc, #316]	@ (8001ef0 <HAL_GPIO_Init+0x308>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d025      	beq.n	8001e02 <HAL_GPIO_Init+0x21a>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	4a4e      	ldr	r2, [pc, #312]	@ (8001ef4 <HAL_GPIO_Init+0x30c>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d01f      	beq.n	8001dfe <HAL_GPIO_Init+0x216>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	4a4d      	ldr	r2, [pc, #308]	@ (8001ef8 <HAL_GPIO_Init+0x310>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d019      	beq.n	8001dfa <HAL_GPIO_Init+0x212>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	4a4c      	ldr	r2, [pc, #304]	@ (8001efc <HAL_GPIO_Init+0x314>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d013      	beq.n	8001df6 <HAL_GPIO_Init+0x20e>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	4a4b      	ldr	r2, [pc, #300]	@ (8001f00 <HAL_GPIO_Init+0x318>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d00d      	beq.n	8001df2 <HAL_GPIO_Init+0x20a>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	4a4a      	ldr	r2, [pc, #296]	@ (8001f04 <HAL_GPIO_Init+0x31c>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d007      	beq.n	8001dee <HAL_GPIO_Init+0x206>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	4a49      	ldr	r2, [pc, #292]	@ (8001f08 <HAL_GPIO_Init+0x320>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d101      	bne.n	8001dea <HAL_GPIO_Init+0x202>
 8001de6:	2306      	movs	r3, #6
 8001de8:	e00c      	b.n	8001e04 <HAL_GPIO_Init+0x21c>
 8001dea:	2307      	movs	r3, #7
 8001dec:	e00a      	b.n	8001e04 <HAL_GPIO_Init+0x21c>
 8001dee:	2305      	movs	r3, #5
 8001df0:	e008      	b.n	8001e04 <HAL_GPIO_Init+0x21c>
 8001df2:	2304      	movs	r3, #4
 8001df4:	e006      	b.n	8001e04 <HAL_GPIO_Init+0x21c>
 8001df6:	2303      	movs	r3, #3
 8001df8:	e004      	b.n	8001e04 <HAL_GPIO_Init+0x21c>
 8001dfa:	2302      	movs	r3, #2
 8001dfc:	e002      	b.n	8001e04 <HAL_GPIO_Init+0x21c>
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e000      	b.n	8001e04 <HAL_GPIO_Init+0x21c>
 8001e02:	2300      	movs	r3, #0
 8001e04:	69fa      	ldr	r2, [r7, #28]
 8001e06:	f002 0203 	and.w	r2, r2, #3
 8001e0a:	0092      	lsls	r2, r2, #2
 8001e0c:	4093      	lsls	r3, r2
 8001e0e:	69ba      	ldr	r2, [r7, #24]
 8001e10:	4313      	orrs	r3, r2
 8001e12:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e14:	4935      	ldr	r1, [pc, #212]	@ (8001eec <HAL_GPIO_Init+0x304>)
 8001e16:	69fb      	ldr	r3, [r7, #28]
 8001e18:	089b      	lsrs	r3, r3, #2
 8001e1a:	3302      	adds	r3, #2
 8001e1c:	69ba      	ldr	r2, [r7, #24]
 8001e1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e22:	4b3a      	ldr	r3, [pc, #232]	@ (8001f0c <HAL_GPIO_Init+0x324>)
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e28:	693b      	ldr	r3, [r7, #16]
 8001e2a:	43db      	mvns	r3, r3
 8001e2c:	69ba      	ldr	r2, [r7, #24]
 8001e2e:	4013      	ands	r3, r2
 8001e30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d003      	beq.n	8001e46 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001e3e:	69ba      	ldr	r2, [r7, #24]
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	4313      	orrs	r3, r2
 8001e44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e46:	4a31      	ldr	r2, [pc, #196]	@ (8001f0c <HAL_GPIO_Init+0x324>)
 8001e48:	69bb      	ldr	r3, [r7, #24]
 8001e4a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e4c:	4b2f      	ldr	r3, [pc, #188]	@ (8001f0c <HAL_GPIO_Init+0x324>)
 8001e4e:	68db      	ldr	r3, [r3, #12]
 8001e50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	43db      	mvns	r3, r3
 8001e56:	69ba      	ldr	r2, [r7, #24]
 8001e58:	4013      	ands	r3, r2
 8001e5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d003      	beq.n	8001e70 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001e68:	69ba      	ldr	r2, [r7, #24]
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e70:	4a26      	ldr	r2, [pc, #152]	@ (8001f0c <HAL_GPIO_Init+0x324>)
 8001e72:	69bb      	ldr	r3, [r7, #24]
 8001e74:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e76:	4b25      	ldr	r3, [pc, #148]	@ (8001f0c <HAL_GPIO_Init+0x324>)
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	43db      	mvns	r3, r3
 8001e80:	69ba      	ldr	r2, [r7, #24]
 8001e82:	4013      	ands	r3, r2
 8001e84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d003      	beq.n	8001e9a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001e92:	69ba      	ldr	r2, [r7, #24]
 8001e94:	693b      	ldr	r3, [r7, #16]
 8001e96:	4313      	orrs	r3, r2
 8001e98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e9a:	4a1c      	ldr	r2, [pc, #112]	@ (8001f0c <HAL_GPIO_Init+0x324>)
 8001e9c:	69bb      	ldr	r3, [r7, #24]
 8001e9e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ea0:	4b1a      	ldr	r3, [pc, #104]	@ (8001f0c <HAL_GPIO_Init+0x324>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	43db      	mvns	r3, r3
 8001eaa:	69ba      	ldr	r2, [r7, #24]
 8001eac:	4013      	ands	r3, r2
 8001eae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d003      	beq.n	8001ec4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001ebc:	69ba      	ldr	r2, [r7, #24]
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ec4:	4a11      	ldr	r2, [pc, #68]	@ (8001f0c <HAL_GPIO_Init+0x324>)
 8001ec6:	69bb      	ldr	r3, [r7, #24]
 8001ec8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001eca:	69fb      	ldr	r3, [r7, #28]
 8001ecc:	3301      	adds	r3, #1
 8001ece:	61fb      	str	r3, [r7, #28]
 8001ed0:	69fb      	ldr	r3, [r7, #28]
 8001ed2:	2b0f      	cmp	r3, #15
 8001ed4:	f67f ae96 	bls.w	8001c04 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ed8:	bf00      	nop
 8001eda:	bf00      	nop
 8001edc:	3724      	adds	r7, #36	@ 0x24
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop
 8001ee8:	40023800 	.word	0x40023800
 8001eec:	40013800 	.word	0x40013800
 8001ef0:	40020000 	.word	0x40020000
 8001ef4:	40020400 	.word	0x40020400
 8001ef8:	40020800 	.word	0x40020800
 8001efc:	40020c00 	.word	0x40020c00
 8001f00:	40021000 	.word	0x40021000
 8001f04:	40021400 	.word	0x40021400
 8001f08:	40021800 	.word	0x40021800
 8001f0c:	40013c00 	.word	0x40013c00

08001f10 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b085      	sub	sp, #20
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
 8001f18:	460b      	mov	r3, r1
 8001f1a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	691a      	ldr	r2, [r3, #16]
 8001f20:	887b      	ldrh	r3, [r7, #2]
 8001f22:	4013      	ands	r3, r2
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d002      	beq.n	8001f2e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	73fb      	strb	r3, [r7, #15]
 8001f2c:	e001      	b.n	8001f32 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001f32:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	3714      	adds	r7, #20
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr

08001f40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b083      	sub	sp, #12
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
 8001f48:	460b      	mov	r3, r1
 8001f4a:	807b      	strh	r3, [r7, #2]
 8001f4c:	4613      	mov	r3, r2
 8001f4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f50:	787b      	ldrb	r3, [r7, #1]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d003      	beq.n	8001f5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f56:	887a      	ldrh	r2, [r7, #2]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f5c:	e003      	b.n	8001f66 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f5e:	887b      	ldrh	r3, [r7, #2]
 8001f60:	041a      	lsls	r2, r3, #16
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	619a      	str	r2, [r3, #24]
}
 8001f66:	bf00      	nop
 8001f68:	370c      	adds	r7, #12
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr

08001f72 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001f72:	b580      	push	{r7, lr}
 8001f74:	b086      	sub	sp, #24
 8001f76:	af02      	add	r7, sp, #8
 8001f78:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d101      	bne.n	8001f84 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001f80:	2301      	movs	r3, #1
 8001f82:	e108      	b.n	8002196 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001f90:	b2db      	uxtb	r3, r3
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d106      	bne.n	8001fa4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2200      	movs	r2, #0
 8001f9a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	f007 fa8c 	bl	80094bc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2203      	movs	r2, #3
 8001fa8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001fb2:	d102      	bne.n	8001fba <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f003 fe05 	bl	8005bce <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6818      	ldr	r0, [r3, #0]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	7c1a      	ldrb	r2, [r3, #16]
 8001fcc:	f88d 2000 	strb.w	r2, [sp]
 8001fd0:	3304      	adds	r3, #4
 8001fd2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001fd4:	f003 fce4 	bl	80059a0 <USB_CoreInit>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d005      	beq.n	8001fea <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2202      	movs	r2, #2
 8001fe2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e0d5      	b.n	8002196 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	2100      	movs	r1, #0
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f003 fdfd 	bl	8005bf0 <USB_SetCurrentMode>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d005      	beq.n	8002008 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2202      	movs	r2, #2
 8002000:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002004:	2301      	movs	r3, #1
 8002006:	e0c6      	b.n	8002196 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002008:	2300      	movs	r3, #0
 800200a:	73fb      	strb	r3, [r7, #15]
 800200c:	e04a      	b.n	80020a4 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800200e:	7bfa      	ldrb	r2, [r7, #15]
 8002010:	6879      	ldr	r1, [r7, #4]
 8002012:	4613      	mov	r3, r2
 8002014:	00db      	lsls	r3, r3, #3
 8002016:	4413      	add	r3, r2
 8002018:	009b      	lsls	r3, r3, #2
 800201a:	440b      	add	r3, r1
 800201c:	3315      	adds	r3, #21
 800201e:	2201      	movs	r2, #1
 8002020:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002022:	7bfa      	ldrb	r2, [r7, #15]
 8002024:	6879      	ldr	r1, [r7, #4]
 8002026:	4613      	mov	r3, r2
 8002028:	00db      	lsls	r3, r3, #3
 800202a:	4413      	add	r3, r2
 800202c:	009b      	lsls	r3, r3, #2
 800202e:	440b      	add	r3, r1
 8002030:	3314      	adds	r3, #20
 8002032:	7bfa      	ldrb	r2, [r7, #15]
 8002034:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002036:	7bfa      	ldrb	r2, [r7, #15]
 8002038:	7bfb      	ldrb	r3, [r7, #15]
 800203a:	b298      	uxth	r0, r3
 800203c:	6879      	ldr	r1, [r7, #4]
 800203e:	4613      	mov	r3, r2
 8002040:	00db      	lsls	r3, r3, #3
 8002042:	4413      	add	r3, r2
 8002044:	009b      	lsls	r3, r3, #2
 8002046:	440b      	add	r3, r1
 8002048:	332e      	adds	r3, #46	@ 0x2e
 800204a:	4602      	mov	r2, r0
 800204c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800204e:	7bfa      	ldrb	r2, [r7, #15]
 8002050:	6879      	ldr	r1, [r7, #4]
 8002052:	4613      	mov	r3, r2
 8002054:	00db      	lsls	r3, r3, #3
 8002056:	4413      	add	r3, r2
 8002058:	009b      	lsls	r3, r3, #2
 800205a:	440b      	add	r3, r1
 800205c:	3318      	adds	r3, #24
 800205e:	2200      	movs	r2, #0
 8002060:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002062:	7bfa      	ldrb	r2, [r7, #15]
 8002064:	6879      	ldr	r1, [r7, #4]
 8002066:	4613      	mov	r3, r2
 8002068:	00db      	lsls	r3, r3, #3
 800206a:	4413      	add	r3, r2
 800206c:	009b      	lsls	r3, r3, #2
 800206e:	440b      	add	r3, r1
 8002070:	331c      	adds	r3, #28
 8002072:	2200      	movs	r2, #0
 8002074:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002076:	7bfa      	ldrb	r2, [r7, #15]
 8002078:	6879      	ldr	r1, [r7, #4]
 800207a:	4613      	mov	r3, r2
 800207c:	00db      	lsls	r3, r3, #3
 800207e:	4413      	add	r3, r2
 8002080:	009b      	lsls	r3, r3, #2
 8002082:	440b      	add	r3, r1
 8002084:	3320      	adds	r3, #32
 8002086:	2200      	movs	r2, #0
 8002088:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800208a:	7bfa      	ldrb	r2, [r7, #15]
 800208c:	6879      	ldr	r1, [r7, #4]
 800208e:	4613      	mov	r3, r2
 8002090:	00db      	lsls	r3, r3, #3
 8002092:	4413      	add	r3, r2
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	440b      	add	r3, r1
 8002098:	3324      	adds	r3, #36	@ 0x24
 800209a:	2200      	movs	r2, #0
 800209c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800209e:	7bfb      	ldrb	r3, [r7, #15]
 80020a0:	3301      	adds	r3, #1
 80020a2:	73fb      	strb	r3, [r7, #15]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	791b      	ldrb	r3, [r3, #4]
 80020a8:	7bfa      	ldrb	r2, [r7, #15]
 80020aa:	429a      	cmp	r2, r3
 80020ac:	d3af      	bcc.n	800200e <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020ae:	2300      	movs	r3, #0
 80020b0:	73fb      	strb	r3, [r7, #15]
 80020b2:	e044      	b.n	800213e <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80020b4:	7bfa      	ldrb	r2, [r7, #15]
 80020b6:	6879      	ldr	r1, [r7, #4]
 80020b8:	4613      	mov	r3, r2
 80020ba:	00db      	lsls	r3, r3, #3
 80020bc:	4413      	add	r3, r2
 80020be:	009b      	lsls	r3, r3, #2
 80020c0:	440b      	add	r3, r1
 80020c2:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80020c6:	2200      	movs	r2, #0
 80020c8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80020ca:	7bfa      	ldrb	r2, [r7, #15]
 80020cc:	6879      	ldr	r1, [r7, #4]
 80020ce:	4613      	mov	r3, r2
 80020d0:	00db      	lsls	r3, r3, #3
 80020d2:	4413      	add	r3, r2
 80020d4:	009b      	lsls	r3, r3, #2
 80020d6:	440b      	add	r3, r1
 80020d8:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80020dc:	7bfa      	ldrb	r2, [r7, #15]
 80020de:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80020e0:	7bfa      	ldrb	r2, [r7, #15]
 80020e2:	6879      	ldr	r1, [r7, #4]
 80020e4:	4613      	mov	r3, r2
 80020e6:	00db      	lsls	r3, r3, #3
 80020e8:	4413      	add	r3, r2
 80020ea:	009b      	lsls	r3, r3, #2
 80020ec:	440b      	add	r3, r1
 80020ee:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80020f2:	2200      	movs	r2, #0
 80020f4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80020f6:	7bfa      	ldrb	r2, [r7, #15]
 80020f8:	6879      	ldr	r1, [r7, #4]
 80020fa:	4613      	mov	r3, r2
 80020fc:	00db      	lsls	r3, r3, #3
 80020fe:	4413      	add	r3, r2
 8002100:	009b      	lsls	r3, r3, #2
 8002102:	440b      	add	r3, r1
 8002104:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002108:	2200      	movs	r2, #0
 800210a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800210c:	7bfa      	ldrb	r2, [r7, #15]
 800210e:	6879      	ldr	r1, [r7, #4]
 8002110:	4613      	mov	r3, r2
 8002112:	00db      	lsls	r3, r3, #3
 8002114:	4413      	add	r3, r2
 8002116:	009b      	lsls	r3, r3, #2
 8002118:	440b      	add	r3, r1
 800211a:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800211e:	2200      	movs	r2, #0
 8002120:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002122:	7bfa      	ldrb	r2, [r7, #15]
 8002124:	6879      	ldr	r1, [r7, #4]
 8002126:	4613      	mov	r3, r2
 8002128:	00db      	lsls	r3, r3, #3
 800212a:	4413      	add	r3, r2
 800212c:	009b      	lsls	r3, r3, #2
 800212e:	440b      	add	r3, r1
 8002130:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002134:	2200      	movs	r2, #0
 8002136:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002138:	7bfb      	ldrb	r3, [r7, #15]
 800213a:	3301      	adds	r3, #1
 800213c:	73fb      	strb	r3, [r7, #15]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	791b      	ldrb	r3, [r3, #4]
 8002142:	7bfa      	ldrb	r2, [r7, #15]
 8002144:	429a      	cmp	r2, r3
 8002146:	d3b5      	bcc.n	80020b4 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6818      	ldr	r0, [r3, #0]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	7c1a      	ldrb	r2, [r3, #16]
 8002150:	f88d 2000 	strb.w	r2, [sp]
 8002154:	3304      	adds	r3, #4
 8002156:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002158:	f003 fd96 	bl	8005c88 <USB_DevInit>
 800215c:	4603      	mov	r3, r0
 800215e:	2b00      	cmp	r3, #0
 8002160:	d005      	beq.n	800216e <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2202      	movs	r2, #2
 8002166:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	e013      	b.n	8002196 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2200      	movs	r2, #0
 8002172:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2201      	movs	r2, #1
 8002178:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	7b1b      	ldrb	r3, [r3, #12]
 8002180:	2b01      	cmp	r3, #1
 8002182:	d102      	bne.n	800218a <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002184:	6878      	ldr	r0, [r7, #4]
 8002186:	f001 f96f 	bl	8003468 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4618      	mov	r0, r3
 8002190:	f004 fdd3 	bl	8006d3a <USB_DevDisconnect>

  return HAL_OK;
 8002194:	2300      	movs	r3, #0
}
 8002196:	4618      	mov	r0, r3
 8002198:	3710      	adds	r7, #16
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}

0800219e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800219e:	b580      	push	{r7, lr}
 80021a0:	b084      	sub	sp, #16
 80021a2:	af00      	add	r7, sp, #0
 80021a4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80021b2:	2b01      	cmp	r3, #1
 80021b4:	d101      	bne.n	80021ba <HAL_PCD_Start+0x1c>
 80021b6:	2302      	movs	r3, #2
 80021b8:	e022      	b.n	8002200 <HAL_PCD_Start+0x62>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2201      	movs	r2, #1
 80021be:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	68db      	ldr	r3, [r3, #12]
 80021c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d009      	beq.n	80021e2 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d105      	bne.n	80021e2 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021da:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4618      	mov	r0, r3
 80021e8:	f003 fce0 	bl	8005bac <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4618      	mov	r0, r3
 80021f2:	f004 fd81 	bl	8006cf8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2200      	movs	r2, #0
 80021fa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80021fe:	2300      	movs	r3, #0
}
 8002200:	4618      	mov	r0, r3
 8002202:	3710      	adds	r7, #16
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}

08002208 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002208:	b590      	push	{r4, r7, lr}
 800220a:	b08d      	sub	sp, #52	@ 0x34
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002216:	6a3b      	ldr	r3, [r7, #32]
 8002218:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4618      	mov	r0, r3
 8002220:	f004 fe3f 	bl	8006ea2 <USB_GetMode>
 8002224:	4603      	mov	r3, r0
 8002226:	2b00      	cmp	r3, #0
 8002228:	f040 84b9 	bne.w	8002b9e <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4618      	mov	r0, r3
 8002232:	f004 fda3 	bl	8006d7c <USB_ReadInterrupts>
 8002236:	4603      	mov	r3, r0
 8002238:	2b00      	cmp	r3, #0
 800223a:	f000 84af 	beq.w	8002b9c <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800223e:	69fb      	ldr	r3, [r7, #28]
 8002240:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	0a1b      	lsrs	r3, r3, #8
 8002248:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4618      	mov	r0, r3
 8002258:	f004 fd90 	bl	8006d7c <USB_ReadInterrupts>
 800225c:	4603      	mov	r3, r0
 800225e:	f003 0302 	and.w	r3, r3, #2
 8002262:	2b02      	cmp	r3, #2
 8002264:	d107      	bne.n	8002276 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	695a      	ldr	r2, [r3, #20]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f002 0202 	and.w	r2, r2, #2
 8002274:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4618      	mov	r0, r3
 800227c:	f004 fd7e 	bl	8006d7c <USB_ReadInterrupts>
 8002280:	4603      	mov	r3, r0
 8002282:	f003 0310 	and.w	r3, r3, #16
 8002286:	2b10      	cmp	r3, #16
 8002288:	d161      	bne.n	800234e <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	699a      	ldr	r2, [r3, #24]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f022 0210 	bic.w	r2, r2, #16
 8002298:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800229a:	6a3b      	ldr	r3, [r7, #32]
 800229c:	6a1b      	ldr	r3, [r3, #32]
 800229e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80022a0:	69bb      	ldr	r3, [r7, #24]
 80022a2:	f003 020f 	and.w	r2, r3, #15
 80022a6:	4613      	mov	r3, r2
 80022a8:	00db      	lsls	r3, r3, #3
 80022aa:	4413      	add	r3, r2
 80022ac:	009b      	lsls	r3, r3, #2
 80022ae:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80022b2:	687a      	ldr	r2, [r7, #4]
 80022b4:	4413      	add	r3, r2
 80022b6:	3304      	adds	r3, #4
 80022b8:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80022ba:	69bb      	ldr	r3, [r7, #24]
 80022bc:	0c5b      	lsrs	r3, r3, #17
 80022be:	f003 030f 	and.w	r3, r3, #15
 80022c2:	2b02      	cmp	r3, #2
 80022c4:	d124      	bne.n	8002310 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80022c6:	69ba      	ldr	r2, [r7, #24]
 80022c8:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80022cc:	4013      	ands	r3, r2
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d035      	beq.n	800233e <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80022d6:	69bb      	ldr	r3, [r7, #24]
 80022d8:	091b      	lsrs	r3, r3, #4
 80022da:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80022dc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80022e0:	b29b      	uxth	r3, r3
 80022e2:	461a      	mov	r2, r3
 80022e4:	6a38      	ldr	r0, [r7, #32]
 80022e6:	f004 fbb5 	bl	8006a54 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	68da      	ldr	r2, [r3, #12]
 80022ee:	69bb      	ldr	r3, [r7, #24]
 80022f0:	091b      	lsrs	r3, r3, #4
 80022f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80022f6:	441a      	add	r2, r3
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	695a      	ldr	r2, [r3, #20]
 8002300:	69bb      	ldr	r3, [r7, #24]
 8002302:	091b      	lsrs	r3, r3, #4
 8002304:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002308:	441a      	add	r2, r3
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	615a      	str	r2, [r3, #20]
 800230e:	e016      	b.n	800233e <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002310:	69bb      	ldr	r3, [r7, #24]
 8002312:	0c5b      	lsrs	r3, r3, #17
 8002314:	f003 030f 	and.w	r3, r3, #15
 8002318:	2b06      	cmp	r3, #6
 800231a:	d110      	bne.n	800233e <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002322:	2208      	movs	r2, #8
 8002324:	4619      	mov	r1, r3
 8002326:	6a38      	ldr	r0, [r7, #32]
 8002328:	f004 fb94 	bl	8006a54 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	695a      	ldr	r2, [r3, #20]
 8002330:	69bb      	ldr	r3, [r7, #24]
 8002332:	091b      	lsrs	r3, r3, #4
 8002334:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002338:	441a      	add	r2, r3
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	699a      	ldr	r2, [r3, #24]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f042 0210 	orr.w	r2, r2, #16
 800234c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4618      	mov	r0, r3
 8002354:	f004 fd12 	bl	8006d7c <USB_ReadInterrupts>
 8002358:	4603      	mov	r3, r0
 800235a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800235e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002362:	f040 80a7 	bne.w	80024b4 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002366:	2300      	movs	r3, #0
 8002368:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4618      	mov	r0, r3
 8002370:	f004 fd17 	bl	8006da2 <USB_ReadDevAllOutEpInterrupt>
 8002374:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8002376:	e099      	b.n	80024ac <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002378:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800237a:	f003 0301 	and.w	r3, r3, #1
 800237e:	2b00      	cmp	r3, #0
 8002380:	f000 808e 	beq.w	80024a0 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800238a:	b2d2      	uxtb	r2, r2
 800238c:	4611      	mov	r1, r2
 800238e:	4618      	mov	r0, r3
 8002390:	f004 fd3b 	bl	8006e0a <USB_ReadDevOutEPInterrupt>
 8002394:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	f003 0301 	and.w	r3, r3, #1
 800239c:	2b00      	cmp	r3, #0
 800239e:	d00c      	beq.n	80023ba <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80023a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023a2:	015a      	lsls	r2, r3, #5
 80023a4:	69fb      	ldr	r3, [r7, #28]
 80023a6:	4413      	add	r3, r2
 80023a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80023ac:	461a      	mov	r2, r3
 80023ae:	2301      	movs	r3, #1
 80023b0:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80023b2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80023b4:	6878      	ldr	r0, [r7, #4]
 80023b6:	f000 fed1 	bl	800315c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	f003 0308 	and.w	r3, r3, #8
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d00c      	beq.n	80023de <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80023c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023c6:	015a      	lsls	r2, r3, #5
 80023c8:	69fb      	ldr	r3, [r7, #28]
 80023ca:	4413      	add	r3, r2
 80023cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80023d0:	461a      	mov	r2, r3
 80023d2:	2308      	movs	r3, #8
 80023d4:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80023d6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80023d8:	6878      	ldr	r0, [r7, #4]
 80023da:	f000 ffa7 	bl	800332c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	f003 0310 	and.w	r3, r3, #16
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d008      	beq.n	80023fa <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80023e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023ea:	015a      	lsls	r2, r3, #5
 80023ec:	69fb      	ldr	r3, [r7, #28]
 80023ee:	4413      	add	r3, r2
 80023f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80023f4:	461a      	mov	r2, r3
 80023f6:	2310      	movs	r3, #16
 80023f8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	f003 0302 	and.w	r3, r3, #2
 8002400:	2b00      	cmp	r3, #0
 8002402:	d030      	beq.n	8002466 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002404:	6a3b      	ldr	r3, [r7, #32]
 8002406:	695b      	ldr	r3, [r3, #20]
 8002408:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800240c:	2b80      	cmp	r3, #128	@ 0x80
 800240e:	d109      	bne.n	8002424 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002410:	69fb      	ldr	r3, [r7, #28]
 8002412:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	69fa      	ldr	r2, [r7, #28]
 800241a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800241e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002422:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002424:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002426:	4613      	mov	r3, r2
 8002428:	00db      	lsls	r3, r3, #3
 800242a:	4413      	add	r3, r2
 800242c:	009b      	lsls	r3, r3, #2
 800242e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002432:	687a      	ldr	r2, [r7, #4]
 8002434:	4413      	add	r3, r2
 8002436:	3304      	adds	r3, #4
 8002438:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	78db      	ldrb	r3, [r3, #3]
 800243e:	2b01      	cmp	r3, #1
 8002440:	d108      	bne.n	8002454 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	2200      	movs	r2, #0
 8002446:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002448:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800244a:	b2db      	uxtb	r3, r3
 800244c:	4619      	mov	r1, r3
 800244e:	6878      	ldr	r0, [r7, #4]
 8002450:	f007 f950 	bl	80096f4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002456:	015a      	lsls	r2, r3, #5
 8002458:	69fb      	ldr	r3, [r7, #28]
 800245a:	4413      	add	r3, r2
 800245c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002460:	461a      	mov	r2, r3
 8002462:	2302      	movs	r3, #2
 8002464:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	f003 0320 	and.w	r3, r3, #32
 800246c:	2b00      	cmp	r3, #0
 800246e:	d008      	beq.n	8002482 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002470:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002472:	015a      	lsls	r2, r3, #5
 8002474:	69fb      	ldr	r3, [r7, #28]
 8002476:	4413      	add	r3, r2
 8002478:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800247c:	461a      	mov	r2, r3
 800247e:	2320      	movs	r3, #32
 8002480:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002488:	2b00      	cmp	r3, #0
 800248a:	d009      	beq.n	80024a0 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800248c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800248e:	015a      	lsls	r2, r3, #5
 8002490:	69fb      	ldr	r3, [r7, #28]
 8002492:	4413      	add	r3, r2
 8002494:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002498:	461a      	mov	r2, r3
 800249a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800249e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80024a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024a2:	3301      	adds	r3, #1
 80024a4:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80024a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024a8:	085b      	lsrs	r3, r3, #1
 80024aa:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80024ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	f47f af62 	bne.w	8002378 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4618      	mov	r0, r3
 80024ba:	f004 fc5f 	bl	8006d7c <USB_ReadInterrupts>
 80024be:	4603      	mov	r3, r0
 80024c0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80024c4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80024c8:	f040 80db 	bne.w	8002682 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4618      	mov	r0, r3
 80024d2:	f004 fc80 	bl	8006dd6 <USB_ReadDevAllInEpInterrupt>
 80024d6:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80024d8:	2300      	movs	r3, #0
 80024da:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80024dc:	e0cd      	b.n	800267a <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80024de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024e0:	f003 0301 	and.w	r3, r3, #1
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	f000 80c2 	beq.w	800266e <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024f0:	b2d2      	uxtb	r2, r2
 80024f2:	4611      	mov	r1, r2
 80024f4:	4618      	mov	r0, r3
 80024f6:	f004 fca6 	bl	8006e46 <USB_ReadDevInEPInterrupt>
 80024fa:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	f003 0301 	and.w	r3, r3, #1
 8002502:	2b00      	cmp	r3, #0
 8002504:	d057      	beq.n	80025b6 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002508:	f003 030f 	and.w	r3, r3, #15
 800250c:	2201      	movs	r2, #1
 800250e:	fa02 f303 	lsl.w	r3, r2, r3
 8002512:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002514:	69fb      	ldr	r3, [r7, #28]
 8002516:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800251a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	43db      	mvns	r3, r3
 8002520:	69f9      	ldr	r1, [r7, #28]
 8002522:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002526:	4013      	ands	r3, r2
 8002528:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800252a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800252c:	015a      	lsls	r2, r3, #5
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	4413      	add	r3, r2
 8002532:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002536:	461a      	mov	r2, r3
 8002538:	2301      	movs	r3, #1
 800253a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	799b      	ldrb	r3, [r3, #6]
 8002540:	2b01      	cmp	r3, #1
 8002542:	d132      	bne.n	80025aa <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002544:	6879      	ldr	r1, [r7, #4]
 8002546:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002548:	4613      	mov	r3, r2
 800254a:	00db      	lsls	r3, r3, #3
 800254c:	4413      	add	r3, r2
 800254e:	009b      	lsls	r3, r3, #2
 8002550:	440b      	add	r3, r1
 8002552:	3320      	adds	r3, #32
 8002554:	6819      	ldr	r1, [r3, #0]
 8002556:	6878      	ldr	r0, [r7, #4]
 8002558:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800255a:	4613      	mov	r3, r2
 800255c:	00db      	lsls	r3, r3, #3
 800255e:	4413      	add	r3, r2
 8002560:	009b      	lsls	r3, r3, #2
 8002562:	4403      	add	r3, r0
 8002564:	331c      	adds	r3, #28
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4419      	add	r1, r3
 800256a:	6878      	ldr	r0, [r7, #4]
 800256c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800256e:	4613      	mov	r3, r2
 8002570:	00db      	lsls	r3, r3, #3
 8002572:	4413      	add	r3, r2
 8002574:	009b      	lsls	r3, r3, #2
 8002576:	4403      	add	r3, r0
 8002578:	3320      	adds	r3, #32
 800257a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800257c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800257e:	2b00      	cmp	r3, #0
 8002580:	d113      	bne.n	80025aa <HAL_PCD_IRQHandler+0x3a2>
 8002582:	6879      	ldr	r1, [r7, #4]
 8002584:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002586:	4613      	mov	r3, r2
 8002588:	00db      	lsls	r3, r3, #3
 800258a:	4413      	add	r3, r2
 800258c:	009b      	lsls	r3, r3, #2
 800258e:	440b      	add	r3, r1
 8002590:	3324      	adds	r3, #36	@ 0x24
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d108      	bne.n	80025aa <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6818      	ldr	r0, [r3, #0]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80025a2:	461a      	mov	r2, r3
 80025a4:	2101      	movs	r1, #1
 80025a6:	f004 fcad 	bl	8006f04 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80025aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025ac:	b2db      	uxtb	r3, r3
 80025ae:	4619      	mov	r1, r3
 80025b0:	6878      	ldr	r0, [r7, #4]
 80025b2:	f007 f81a 	bl	80095ea <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	f003 0308 	and.w	r3, r3, #8
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d008      	beq.n	80025d2 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80025c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025c2:	015a      	lsls	r2, r3, #5
 80025c4:	69fb      	ldr	r3, [r7, #28]
 80025c6:	4413      	add	r3, r2
 80025c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80025cc:	461a      	mov	r2, r3
 80025ce:	2308      	movs	r3, #8
 80025d0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80025d2:	693b      	ldr	r3, [r7, #16]
 80025d4:	f003 0310 	and.w	r3, r3, #16
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d008      	beq.n	80025ee <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80025dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025de:	015a      	lsls	r2, r3, #5
 80025e0:	69fb      	ldr	r3, [r7, #28]
 80025e2:	4413      	add	r3, r2
 80025e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80025e8:	461a      	mov	r2, r3
 80025ea:	2310      	movs	r3, #16
 80025ec:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d008      	beq.n	800260a <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80025f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025fa:	015a      	lsls	r2, r3, #5
 80025fc:	69fb      	ldr	r3, [r7, #28]
 80025fe:	4413      	add	r3, r2
 8002600:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002604:	461a      	mov	r2, r3
 8002606:	2340      	movs	r3, #64	@ 0x40
 8002608:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	f003 0302 	and.w	r3, r3, #2
 8002610:	2b00      	cmp	r3, #0
 8002612:	d023      	beq.n	800265c <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002614:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002616:	6a38      	ldr	r0, [r7, #32]
 8002618:	f003 fc94 	bl	8005f44 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800261c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800261e:	4613      	mov	r3, r2
 8002620:	00db      	lsls	r3, r3, #3
 8002622:	4413      	add	r3, r2
 8002624:	009b      	lsls	r3, r3, #2
 8002626:	3310      	adds	r3, #16
 8002628:	687a      	ldr	r2, [r7, #4]
 800262a:	4413      	add	r3, r2
 800262c:	3304      	adds	r3, #4
 800262e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	78db      	ldrb	r3, [r3, #3]
 8002634:	2b01      	cmp	r3, #1
 8002636:	d108      	bne.n	800264a <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	2200      	movs	r2, #0
 800263c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800263e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002640:	b2db      	uxtb	r3, r3
 8002642:	4619      	mov	r1, r3
 8002644:	6878      	ldr	r0, [r7, #4]
 8002646:	f007 f867 	bl	8009718 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800264a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800264c:	015a      	lsls	r2, r3, #5
 800264e:	69fb      	ldr	r3, [r7, #28]
 8002650:	4413      	add	r3, r2
 8002652:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002656:	461a      	mov	r2, r3
 8002658:	2302      	movs	r3, #2
 800265a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800265c:	693b      	ldr	r3, [r7, #16]
 800265e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002662:	2b00      	cmp	r3, #0
 8002664:	d003      	beq.n	800266e <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002666:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002668:	6878      	ldr	r0, [r7, #4]
 800266a:	f000 fcea 	bl	8003042 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800266e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002670:	3301      	adds	r3, #1
 8002672:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002674:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002676:	085b      	lsrs	r3, r3, #1
 8002678:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800267a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800267c:	2b00      	cmp	r3, #0
 800267e:	f47f af2e 	bne.w	80024de <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4618      	mov	r0, r3
 8002688:	f004 fb78 	bl	8006d7c <USB_ReadInterrupts>
 800268c:	4603      	mov	r3, r0
 800268e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002692:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002696:	d122      	bne.n	80026de <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002698:	69fb      	ldr	r3, [r7, #28]
 800269a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	69fa      	ldr	r2, [r7, #28]
 80026a2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80026a6:	f023 0301 	bic.w	r3, r3, #1
 80026aa:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80026b2:	2b01      	cmp	r3, #1
 80026b4:	d108      	bne.n	80026c8 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2200      	movs	r2, #0
 80026ba:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80026be:	2100      	movs	r1, #0
 80026c0:	6878      	ldr	r0, [r7, #4]
 80026c2:	f007 f9e1 	bl	8009a88 <HAL_PCDEx_LPM_Callback>
 80026c6:	e002      	b.n	80026ce <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80026c8:	6878      	ldr	r0, [r7, #4]
 80026ca:	f007 f805 	bl	80096d8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	695a      	ldr	r2, [r3, #20]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80026dc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4618      	mov	r0, r3
 80026e4:	f004 fb4a 	bl	8006d7c <USB_ReadInterrupts>
 80026e8:	4603      	mov	r3, r0
 80026ea:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80026ee:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80026f2:	d112      	bne.n	800271a <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80026f4:	69fb      	ldr	r3, [r7, #28]
 80026f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	f003 0301 	and.w	r3, r3, #1
 8002700:	2b01      	cmp	r3, #1
 8002702:	d102      	bne.n	800270a <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002704:	6878      	ldr	r0, [r7, #4]
 8002706:	f006 ffc1 	bl	800968c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	695a      	ldr	r2, [r3, #20]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8002718:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4618      	mov	r0, r3
 8002720:	f004 fb2c 	bl	8006d7c <USB_ReadInterrupts>
 8002724:	4603      	mov	r3, r0
 8002726:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800272a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800272e:	d121      	bne.n	8002774 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	695a      	ldr	r2, [r3, #20]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 800273e:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002746:	2b00      	cmp	r3, #0
 8002748:	d111      	bne.n	800276e <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2201      	movs	r2, #1
 800274e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002758:	089b      	lsrs	r3, r3, #2
 800275a:	f003 020f 	and.w	r2, r3, #15
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002764:	2101      	movs	r1, #1
 8002766:	6878      	ldr	r0, [r7, #4]
 8002768:	f007 f98e 	bl	8009a88 <HAL_PCDEx_LPM_Callback>
 800276c:	e002      	b.n	8002774 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800276e:	6878      	ldr	r0, [r7, #4]
 8002770:	f006 ff8c 	bl	800968c <HAL_PCD_SuspendCallback>
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4618      	mov	r0, r3
 800277a:	f004 faff 	bl	8006d7c <USB_ReadInterrupts>
 800277e:	4603      	mov	r3, r0
 8002780:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002784:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002788:	f040 80b7 	bne.w	80028fa <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800278c:	69fb      	ldr	r3, [r7, #28]
 800278e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	69fa      	ldr	r2, [r7, #28]
 8002796:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800279a:	f023 0301 	bic.w	r3, r3, #1
 800279e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	2110      	movs	r1, #16
 80027a6:	4618      	mov	r0, r3
 80027a8:	f003 fbcc 	bl	8005f44 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027ac:	2300      	movs	r3, #0
 80027ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80027b0:	e046      	b.n	8002840 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80027b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027b4:	015a      	lsls	r2, r3, #5
 80027b6:	69fb      	ldr	r3, [r7, #28]
 80027b8:	4413      	add	r3, r2
 80027ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80027be:	461a      	mov	r2, r3
 80027c0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80027c4:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80027c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027c8:	015a      	lsls	r2, r3, #5
 80027ca:	69fb      	ldr	r3, [r7, #28]
 80027cc:	4413      	add	r3, r2
 80027ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80027d6:	0151      	lsls	r1, r2, #5
 80027d8:	69fa      	ldr	r2, [r7, #28]
 80027da:	440a      	add	r2, r1
 80027dc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80027e0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80027e4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80027e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027e8:	015a      	lsls	r2, r3, #5
 80027ea:	69fb      	ldr	r3, [r7, #28]
 80027ec:	4413      	add	r3, r2
 80027ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80027f2:	461a      	mov	r2, r3
 80027f4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80027f8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80027fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027fc:	015a      	lsls	r2, r3, #5
 80027fe:	69fb      	ldr	r3, [r7, #28]
 8002800:	4413      	add	r3, r2
 8002802:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800280a:	0151      	lsls	r1, r2, #5
 800280c:	69fa      	ldr	r2, [r7, #28]
 800280e:	440a      	add	r2, r1
 8002810:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002814:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002818:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800281a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800281c:	015a      	lsls	r2, r3, #5
 800281e:	69fb      	ldr	r3, [r7, #28]
 8002820:	4413      	add	r3, r2
 8002822:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800282a:	0151      	lsls	r1, r2, #5
 800282c:	69fa      	ldr	r2, [r7, #28]
 800282e:	440a      	add	r2, r1
 8002830:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002834:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002838:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800283a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800283c:	3301      	adds	r3, #1
 800283e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	791b      	ldrb	r3, [r3, #4]
 8002844:	461a      	mov	r2, r3
 8002846:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002848:	4293      	cmp	r3, r2
 800284a:	d3b2      	bcc.n	80027b2 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800284c:	69fb      	ldr	r3, [r7, #28]
 800284e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002852:	69db      	ldr	r3, [r3, #28]
 8002854:	69fa      	ldr	r2, [r7, #28]
 8002856:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800285a:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800285e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	7bdb      	ldrb	r3, [r3, #15]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d016      	beq.n	8002896 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002868:	69fb      	ldr	r3, [r7, #28]
 800286a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800286e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002872:	69fa      	ldr	r2, [r7, #28]
 8002874:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002878:	f043 030b 	orr.w	r3, r3, #11
 800287c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002880:	69fb      	ldr	r3, [r7, #28]
 8002882:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002886:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002888:	69fa      	ldr	r2, [r7, #28]
 800288a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800288e:	f043 030b 	orr.w	r3, r3, #11
 8002892:	6453      	str	r3, [r2, #68]	@ 0x44
 8002894:	e015      	b.n	80028c2 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002896:	69fb      	ldr	r3, [r7, #28]
 8002898:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800289c:	695b      	ldr	r3, [r3, #20]
 800289e:	69fa      	ldr	r2, [r7, #28]
 80028a0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80028a4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80028a8:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80028ac:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80028ae:	69fb      	ldr	r3, [r7, #28]
 80028b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80028b4:	691b      	ldr	r3, [r3, #16]
 80028b6:	69fa      	ldr	r2, [r7, #28]
 80028b8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80028bc:	f043 030b 	orr.w	r3, r3, #11
 80028c0:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80028c2:	69fb      	ldr	r3, [r7, #28]
 80028c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	69fa      	ldr	r2, [r7, #28]
 80028cc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80028d0:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80028d4:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6818      	ldr	r0, [r3, #0]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80028e4:	461a      	mov	r2, r3
 80028e6:	f004 fb0d 	bl	8006f04 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	695a      	ldr	r2, [r3, #20]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80028f8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4618      	mov	r0, r3
 8002900:	f004 fa3c 	bl	8006d7c <USB_ReadInterrupts>
 8002904:	4603      	mov	r3, r0
 8002906:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800290a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800290e:	d123      	bne.n	8002958 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4618      	mov	r0, r3
 8002916:	f004 fad2 	bl	8006ebe <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4618      	mov	r0, r3
 8002920:	f003 fb89 	bl	8006036 <USB_GetDevSpeed>
 8002924:	4603      	mov	r3, r0
 8002926:	461a      	mov	r2, r3
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681c      	ldr	r4, [r3, #0]
 8002930:	f000 fea4 	bl	800367c <HAL_RCC_GetHCLKFreq>
 8002934:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800293a:	461a      	mov	r2, r3
 800293c:	4620      	mov	r0, r4
 800293e:	f003 f893 	bl	8005a68 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002942:	6878      	ldr	r0, [r7, #4]
 8002944:	f006 fe79 	bl	800963a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	695a      	ldr	r2, [r3, #20]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8002956:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4618      	mov	r0, r3
 800295e:	f004 fa0d 	bl	8006d7c <USB_ReadInterrupts>
 8002962:	4603      	mov	r3, r0
 8002964:	f003 0308 	and.w	r3, r3, #8
 8002968:	2b08      	cmp	r3, #8
 800296a:	d10a      	bne.n	8002982 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800296c:	6878      	ldr	r0, [r7, #4]
 800296e:	f006 fe56 	bl	800961e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	695a      	ldr	r2, [r3, #20]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f002 0208 	and.w	r2, r2, #8
 8002980:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4618      	mov	r0, r3
 8002988:	f004 f9f8 	bl	8006d7c <USB_ReadInterrupts>
 800298c:	4603      	mov	r3, r0
 800298e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002992:	2b80      	cmp	r3, #128	@ 0x80
 8002994:	d123      	bne.n	80029de <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002996:	6a3b      	ldr	r3, [r7, #32]
 8002998:	699b      	ldr	r3, [r3, #24]
 800299a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800299e:	6a3b      	ldr	r3, [r7, #32]
 80029a0:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80029a2:	2301      	movs	r3, #1
 80029a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80029a6:	e014      	b.n	80029d2 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80029a8:	6879      	ldr	r1, [r7, #4]
 80029aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029ac:	4613      	mov	r3, r2
 80029ae:	00db      	lsls	r3, r3, #3
 80029b0:	4413      	add	r3, r2
 80029b2:	009b      	lsls	r3, r3, #2
 80029b4:	440b      	add	r3, r1
 80029b6:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80029ba:	781b      	ldrb	r3, [r3, #0]
 80029bc:	2b01      	cmp	r3, #1
 80029be:	d105      	bne.n	80029cc <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80029c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029c2:	b2db      	uxtb	r3, r3
 80029c4:	4619      	mov	r1, r3
 80029c6:	6878      	ldr	r0, [r7, #4]
 80029c8:	f000 fb0a 	bl	8002fe0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80029cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029ce:	3301      	adds	r3, #1
 80029d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	791b      	ldrb	r3, [r3, #4]
 80029d6:	461a      	mov	r2, r3
 80029d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029da:	4293      	cmp	r3, r2
 80029dc:	d3e4      	bcc.n	80029a8 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4618      	mov	r0, r3
 80029e4:	f004 f9ca 	bl	8006d7c <USB_ReadInterrupts>
 80029e8:	4603      	mov	r3, r0
 80029ea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80029ee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80029f2:	d13c      	bne.n	8002a6e <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80029f4:	2301      	movs	r3, #1
 80029f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80029f8:	e02b      	b.n	8002a52 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80029fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029fc:	015a      	lsls	r2, r3, #5
 80029fe:	69fb      	ldr	r3, [r7, #28]
 8002a00:	4413      	add	r3, r2
 8002a02:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002a0a:	6879      	ldr	r1, [r7, #4]
 8002a0c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a0e:	4613      	mov	r3, r2
 8002a10:	00db      	lsls	r3, r3, #3
 8002a12:	4413      	add	r3, r2
 8002a14:	009b      	lsls	r3, r3, #2
 8002a16:	440b      	add	r3, r1
 8002a18:	3318      	adds	r3, #24
 8002a1a:	781b      	ldrb	r3, [r3, #0]
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	d115      	bne.n	8002a4c <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002a20:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	da12      	bge.n	8002a4c <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002a26:	6879      	ldr	r1, [r7, #4]
 8002a28:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a2a:	4613      	mov	r3, r2
 8002a2c:	00db      	lsls	r3, r3, #3
 8002a2e:	4413      	add	r3, r2
 8002a30:	009b      	lsls	r3, r3, #2
 8002a32:	440b      	add	r3, r1
 8002a34:	3317      	adds	r3, #23
 8002a36:	2201      	movs	r2, #1
 8002a38:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002a3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002a42:	b2db      	uxtb	r3, r3
 8002a44:	4619      	mov	r1, r3
 8002a46:	6878      	ldr	r0, [r7, #4]
 8002a48:	f000 faca 	bl	8002fe0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002a4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a4e:	3301      	adds	r3, #1
 8002a50:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	791b      	ldrb	r3, [r3, #4]
 8002a56:	461a      	mov	r2, r3
 8002a58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d3cd      	bcc.n	80029fa <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	695a      	ldr	r2, [r3, #20]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8002a6c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4618      	mov	r0, r3
 8002a74:	f004 f982 	bl	8006d7c <USB_ReadInterrupts>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a7e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002a82:	d156      	bne.n	8002b32 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002a84:	2301      	movs	r3, #1
 8002a86:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a88:	e045      	b.n	8002b16 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002a8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a8c:	015a      	lsls	r2, r3, #5
 8002a8e:	69fb      	ldr	r3, [r7, #28]
 8002a90:	4413      	add	r3, r2
 8002a92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002a9a:	6879      	ldr	r1, [r7, #4]
 8002a9c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a9e:	4613      	mov	r3, r2
 8002aa0:	00db      	lsls	r3, r3, #3
 8002aa2:	4413      	add	r3, r2
 8002aa4:	009b      	lsls	r3, r3, #2
 8002aa6:	440b      	add	r3, r1
 8002aa8:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002aac:	781b      	ldrb	r3, [r3, #0]
 8002aae:	2b01      	cmp	r3, #1
 8002ab0:	d12e      	bne.n	8002b10 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002ab2:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	da2b      	bge.n	8002b10 <HAL_PCD_IRQHandler+0x908>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8002ab8:	69bb      	ldr	r3, [r7, #24]
 8002aba:	0c1a      	lsrs	r2, r3, #16
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8002ac2:	4053      	eors	r3, r2
 8002ac4:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d121      	bne.n	8002b10 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002acc:	6879      	ldr	r1, [r7, #4]
 8002ace:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ad0:	4613      	mov	r3, r2
 8002ad2:	00db      	lsls	r3, r3, #3
 8002ad4:	4413      	add	r3, r2
 8002ad6:	009b      	lsls	r3, r3, #2
 8002ad8:	440b      	add	r3, r1
 8002ada:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002ade:	2201      	movs	r2, #1
 8002ae0:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002ae2:	6a3b      	ldr	r3, [r7, #32]
 8002ae4:	699b      	ldr	r3, [r3, #24]
 8002ae6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002aea:	6a3b      	ldr	r3, [r7, #32]
 8002aec:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002aee:	6a3b      	ldr	r3, [r7, #32]
 8002af0:	695b      	ldr	r3, [r3, #20]
 8002af2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d10a      	bne.n	8002b10 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	69fa      	ldr	r2, [r7, #28]
 8002b04:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002b08:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002b0c:	6053      	str	r3, [r2, #4]
            break;
 8002b0e:	e008      	b.n	8002b22 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002b10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b12:	3301      	adds	r3, #1
 8002b14:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	791b      	ldrb	r3, [r3, #4]
 8002b1a:	461a      	mov	r2, r3
 8002b1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d3b3      	bcc.n	8002a8a <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	695a      	ldr	r2, [r3, #20]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8002b30:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4618      	mov	r0, r3
 8002b38:	f004 f920 	bl	8006d7c <USB_ReadInterrupts>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002b42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b46:	d10a      	bne.n	8002b5e <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002b48:	6878      	ldr	r0, [r7, #4]
 8002b4a:	f006 fdf7 	bl	800973c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	695a      	ldr	r2, [r3, #20]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002b5c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4618      	mov	r0, r3
 8002b64:	f004 f90a 	bl	8006d7c <USB_ReadInterrupts>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	f003 0304 	and.w	r3, r3, #4
 8002b6e:	2b04      	cmp	r3, #4
 8002b70:	d115      	bne.n	8002b9e <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002b7a:	69bb      	ldr	r3, [r7, #24]
 8002b7c:	f003 0304 	and.w	r3, r3, #4
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d002      	beq.n	8002b8a <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002b84:	6878      	ldr	r0, [r7, #4]
 8002b86:	f006 fde7 	bl	8009758 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	6859      	ldr	r1, [r3, #4]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	69ba      	ldr	r2, [r7, #24]
 8002b96:	430a      	orrs	r2, r1
 8002b98:	605a      	str	r2, [r3, #4]
 8002b9a:	e000      	b.n	8002b9e <HAL_PCD_IRQHandler+0x996>
      return;
 8002b9c:	bf00      	nop
    }
  }
}
 8002b9e:	3734      	adds	r7, #52	@ 0x34
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bd90      	pop	{r4, r7, pc}

08002ba4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b082      	sub	sp, #8
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
 8002bac:	460b      	mov	r3, r1
 8002bae:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002bb6:	2b01      	cmp	r3, #1
 8002bb8:	d101      	bne.n	8002bbe <HAL_PCD_SetAddress+0x1a>
 8002bba:	2302      	movs	r3, #2
 8002bbc:	e012      	b.n	8002be4 <HAL_PCD_SetAddress+0x40>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	78fa      	ldrb	r2, [r7, #3]
 8002bca:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	78fa      	ldrb	r2, [r7, #3]
 8002bd2:	4611      	mov	r1, r2
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f004 f869 	bl	8006cac <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002be2:	2300      	movs	r3, #0
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	3708      	adds	r7, #8
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}

08002bec <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b084      	sub	sp, #16
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
 8002bf4:	4608      	mov	r0, r1
 8002bf6:	4611      	mov	r1, r2
 8002bf8:	461a      	mov	r2, r3
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	70fb      	strb	r3, [r7, #3]
 8002bfe:	460b      	mov	r3, r1
 8002c00:	803b      	strh	r3, [r7, #0]
 8002c02:	4613      	mov	r3, r2
 8002c04:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8002c06:	2300      	movs	r3, #0
 8002c08:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002c0a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	da0f      	bge.n	8002c32 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c12:	78fb      	ldrb	r3, [r7, #3]
 8002c14:	f003 020f 	and.w	r2, r3, #15
 8002c18:	4613      	mov	r3, r2
 8002c1a:	00db      	lsls	r3, r3, #3
 8002c1c:	4413      	add	r3, r2
 8002c1e:	009b      	lsls	r3, r3, #2
 8002c20:	3310      	adds	r3, #16
 8002c22:	687a      	ldr	r2, [r7, #4]
 8002c24:	4413      	add	r3, r2
 8002c26:	3304      	adds	r3, #4
 8002c28:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	705a      	strb	r2, [r3, #1]
 8002c30:	e00f      	b.n	8002c52 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c32:	78fb      	ldrb	r3, [r7, #3]
 8002c34:	f003 020f 	and.w	r2, r3, #15
 8002c38:	4613      	mov	r3, r2
 8002c3a:	00db      	lsls	r3, r3, #3
 8002c3c:	4413      	add	r3, r2
 8002c3e:	009b      	lsls	r3, r3, #2
 8002c40:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002c44:	687a      	ldr	r2, [r7, #4]
 8002c46:	4413      	add	r3, r2
 8002c48:	3304      	adds	r3, #4
 8002c4a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002c52:	78fb      	ldrb	r3, [r7, #3]
 8002c54:	f003 030f 	and.w	r3, r3, #15
 8002c58:	b2da      	uxtb	r2, r3
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8002c5e:	883b      	ldrh	r3, [r7, #0]
 8002c60:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	78ba      	ldrb	r2, [r7, #2]
 8002c6c:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	785b      	ldrb	r3, [r3, #1]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d004      	beq.n	8002c80 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	781b      	ldrb	r3, [r3, #0]
 8002c7a:	461a      	mov	r2, r3
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002c80:	78bb      	ldrb	r3, [r7, #2]
 8002c82:	2b02      	cmp	r3, #2
 8002c84:	d102      	bne.n	8002c8c <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002c92:	2b01      	cmp	r3, #1
 8002c94:	d101      	bne.n	8002c9a <HAL_PCD_EP_Open+0xae>
 8002c96:	2302      	movs	r3, #2
 8002c98:	e00e      	b.n	8002cb8 <HAL_PCD_EP_Open+0xcc>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2201      	movs	r2, #1
 8002c9e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	68f9      	ldr	r1, [r7, #12]
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f003 f9e9 	bl	8006080 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8002cb6:	7afb      	ldrb	r3, [r7, #11]
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	3710      	adds	r7, #16
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}

08002cc0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b084      	sub	sp, #16
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
 8002cc8:	460b      	mov	r3, r1
 8002cca:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002ccc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	da0f      	bge.n	8002cf4 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002cd4:	78fb      	ldrb	r3, [r7, #3]
 8002cd6:	f003 020f 	and.w	r2, r3, #15
 8002cda:	4613      	mov	r3, r2
 8002cdc:	00db      	lsls	r3, r3, #3
 8002cde:	4413      	add	r3, r2
 8002ce0:	009b      	lsls	r3, r3, #2
 8002ce2:	3310      	adds	r3, #16
 8002ce4:	687a      	ldr	r2, [r7, #4]
 8002ce6:	4413      	add	r3, r2
 8002ce8:	3304      	adds	r3, #4
 8002cea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	2201      	movs	r2, #1
 8002cf0:	705a      	strb	r2, [r3, #1]
 8002cf2:	e00f      	b.n	8002d14 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002cf4:	78fb      	ldrb	r3, [r7, #3]
 8002cf6:	f003 020f 	and.w	r2, r3, #15
 8002cfa:	4613      	mov	r3, r2
 8002cfc:	00db      	lsls	r3, r3, #3
 8002cfe:	4413      	add	r3, r2
 8002d00:	009b      	lsls	r3, r3, #2
 8002d02:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002d06:	687a      	ldr	r2, [r7, #4]
 8002d08:	4413      	add	r3, r2
 8002d0a:	3304      	adds	r3, #4
 8002d0c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	2200      	movs	r2, #0
 8002d12:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d14:	78fb      	ldrb	r3, [r7, #3]
 8002d16:	f003 030f 	and.w	r3, r3, #15
 8002d1a:	b2da      	uxtb	r2, r3
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002d26:	2b01      	cmp	r3, #1
 8002d28:	d101      	bne.n	8002d2e <HAL_PCD_EP_Close+0x6e>
 8002d2a:	2302      	movs	r3, #2
 8002d2c:	e00e      	b.n	8002d4c <HAL_PCD_EP_Close+0x8c>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2201      	movs	r2, #1
 8002d32:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	68f9      	ldr	r1, [r7, #12]
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f003 fa27 	bl	8006190 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2200      	movs	r2, #0
 8002d46:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8002d4a:	2300      	movs	r3, #0
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	3710      	adds	r7, #16
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}

08002d54 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b086      	sub	sp, #24
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	60f8      	str	r0, [r7, #12]
 8002d5c:	607a      	str	r2, [r7, #4]
 8002d5e:	603b      	str	r3, [r7, #0]
 8002d60:	460b      	mov	r3, r1
 8002d62:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d64:	7afb      	ldrb	r3, [r7, #11]
 8002d66:	f003 020f 	and.w	r2, r3, #15
 8002d6a:	4613      	mov	r3, r2
 8002d6c:	00db      	lsls	r3, r3, #3
 8002d6e:	4413      	add	r3, r2
 8002d70:	009b      	lsls	r3, r3, #2
 8002d72:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002d76:	68fa      	ldr	r2, [r7, #12]
 8002d78:	4413      	add	r3, r2
 8002d7a:	3304      	adds	r3, #4
 8002d7c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	687a      	ldr	r2, [r7, #4]
 8002d82:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	683a      	ldr	r2, [r7, #0]
 8002d88:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	2200      	movs	r2, #0
 8002d94:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d96:	7afb      	ldrb	r3, [r7, #11]
 8002d98:	f003 030f 	and.w	r3, r3, #15
 8002d9c:	b2da      	uxtb	r2, r3
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	799b      	ldrb	r3, [r3, #6]
 8002da6:	2b01      	cmp	r3, #1
 8002da8:	d102      	bne.n	8002db0 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002daa:	687a      	ldr	r2, [r7, #4]
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	6818      	ldr	r0, [r3, #0]
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	799b      	ldrb	r3, [r3, #6]
 8002db8:	461a      	mov	r2, r3
 8002dba:	6979      	ldr	r1, [r7, #20]
 8002dbc:	f003 fac4 	bl	8006348 <USB_EPStartXfer>

  return HAL_OK;
 8002dc0:	2300      	movs	r3, #0
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	3718      	adds	r7, #24
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}

08002dca <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002dca:	b480      	push	{r7}
 8002dcc:	b083      	sub	sp, #12
 8002dce:	af00      	add	r7, sp, #0
 8002dd0:	6078      	str	r0, [r7, #4]
 8002dd2:	460b      	mov	r3, r1
 8002dd4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002dd6:	78fb      	ldrb	r3, [r7, #3]
 8002dd8:	f003 020f 	and.w	r2, r3, #15
 8002ddc:	6879      	ldr	r1, [r7, #4]
 8002dde:	4613      	mov	r3, r2
 8002de0:	00db      	lsls	r3, r3, #3
 8002de2:	4413      	add	r3, r2
 8002de4:	009b      	lsls	r3, r3, #2
 8002de6:	440b      	add	r3, r1
 8002de8:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8002dec:	681b      	ldr	r3, [r3, #0]
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	370c      	adds	r7, #12
 8002df2:	46bd      	mov	sp, r7
 8002df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df8:	4770      	bx	lr

08002dfa <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002dfa:	b580      	push	{r7, lr}
 8002dfc:	b086      	sub	sp, #24
 8002dfe:	af00      	add	r7, sp, #0
 8002e00:	60f8      	str	r0, [r7, #12]
 8002e02:	607a      	str	r2, [r7, #4]
 8002e04:	603b      	str	r3, [r7, #0]
 8002e06:	460b      	mov	r3, r1
 8002e08:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e0a:	7afb      	ldrb	r3, [r7, #11]
 8002e0c:	f003 020f 	and.w	r2, r3, #15
 8002e10:	4613      	mov	r3, r2
 8002e12:	00db      	lsls	r3, r3, #3
 8002e14:	4413      	add	r3, r2
 8002e16:	009b      	lsls	r3, r3, #2
 8002e18:	3310      	adds	r3, #16
 8002e1a:	68fa      	ldr	r2, [r7, #12]
 8002e1c:	4413      	add	r3, r2
 8002e1e:	3304      	adds	r3, #4
 8002e20:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	687a      	ldr	r2, [r7, #4]
 8002e26:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	683a      	ldr	r2, [r7, #0]
 8002e2c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	2200      	movs	r2, #0
 8002e32:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	2201      	movs	r2, #1
 8002e38:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e3a:	7afb      	ldrb	r3, [r7, #11]
 8002e3c:	f003 030f 	and.w	r3, r3, #15
 8002e40:	b2da      	uxtb	r2, r3
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	799b      	ldrb	r3, [r3, #6]
 8002e4a:	2b01      	cmp	r3, #1
 8002e4c:	d102      	bne.n	8002e54 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002e4e:	687a      	ldr	r2, [r7, #4]
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	6818      	ldr	r0, [r3, #0]
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	799b      	ldrb	r3, [r3, #6]
 8002e5c:	461a      	mov	r2, r3
 8002e5e:	6979      	ldr	r1, [r7, #20]
 8002e60:	f003 fa72 	bl	8006348 <USB_EPStartXfer>

  return HAL_OK;
 8002e64:	2300      	movs	r3, #0
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	3718      	adds	r7, #24
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}

08002e6e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e6e:	b580      	push	{r7, lr}
 8002e70:	b084      	sub	sp, #16
 8002e72:	af00      	add	r7, sp, #0
 8002e74:	6078      	str	r0, [r7, #4]
 8002e76:	460b      	mov	r3, r1
 8002e78:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002e7a:	78fb      	ldrb	r3, [r7, #3]
 8002e7c:	f003 030f 	and.w	r3, r3, #15
 8002e80:	687a      	ldr	r2, [r7, #4]
 8002e82:	7912      	ldrb	r2, [r2, #4]
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d901      	bls.n	8002e8c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	e04f      	b.n	8002f2c <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002e8c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	da0f      	bge.n	8002eb4 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e94:	78fb      	ldrb	r3, [r7, #3]
 8002e96:	f003 020f 	and.w	r2, r3, #15
 8002e9a:	4613      	mov	r3, r2
 8002e9c:	00db      	lsls	r3, r3, #3
 8002e9e:	4413      	add	r3, r2
 8002ea0:	009b      	lsls	r3, r3, #2
 8002ea2:	3310      	adds	r3, #16
 8002ea4:	687a      	ldr	r2, [r7, #4]
 8002ea6:	4413      	add	r3, r2
 8002ea8:	3304      	adds	r3, #4
 8002eaa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	2201      	movs	r2, #1
 8002eb0:	705a      	strb	r2, [r3, #1]
 8002eb2:	e00d      	b.n	8002ed0 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002eb4:	78fa      	ldrb	r2, [r7, #3]
 8002eb6:	4613      	mov	r3, r2
 8002eb8:	00db      	lsls	r3, r3, #3
 8002eba:	4413      	add	r3, r2
 8002ebc:	009b      	lsls	r3, r3, #2
 8002ebe:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002ec2:	687a      	ldr	r2, [r7, #4]
 8002ec4:	4413      	add	r3, r2
 8002ec6:	3304      	adds	r3, #4
 8002ec8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ed6:	78fb      	ldrb	r3, [r7, #3]
 8002ed8:	f003 030f 	and.w	r3, r3, #15
 8002edc:	b2da      	uxtb	r2, r3
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	d101      	bne.n	8002ef0 <HAL_PCD_EP_SetStall+0x82>
 8002eec:	2302      	movs	r3, #2
 8002eee:	e01d      	b.n	8002f2c <HAL_PCD_EP_SetStall+0xbe>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	68f9      	ldr	r1, [r7, #12]
 8002efe:	4618      	mov	r0, r3
 8002f00:	f003 fe00 	bl	8006b04 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002f04:	78fb      	ldrb	r3, [r7, #3]
 8002f06:	f003 030f 	and.w	r3, r3, #15
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d109      	bne.n	8002f22 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6818      	ldr	r0, [r3, #0]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	7999      	ldrb	r1, [r3, #6]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002f1c:	461a      	mov	r2, r3
 8002f1e:	f003 fff1 	bl	8006f04 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2200      	movs	r2, #0
 8002f26:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002f2a:	2300      	movs	r3, #0
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	3710      	adds	r7, #16
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}

08002f34 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b084      	sub	sp, #16
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
 8002f3c:	460b      	mov	r3, r1
 8002f3e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002f40:	78fb      	ldrb	r3, [r7, #3]
 8002f42:	f003 030f 	and.w	r3, r3, #15
 8002f46:	687a      	ldr	r2, [r7, #4]
 8002f48:	7912      	ldrb	r2, [r2, #4]
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d901      	bls.n	8002f52 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	e042      	b.n	8002fd8 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002f52:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	da0f      	bge.n	8002f7a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f5a:	78fb      	ldrb	r3, [r7, #3]
 8002f5c:	f003 020f 	and.w	r2, r3, #15
 8002f60:	4613      	mov	r3, r2
 8002f62:	00db      	lsls	r3, r3, #3
 8002f64:	4413      	add	r3, r2
 8002f66:	009b      	lsls	r3, r3, #2
 8002f68:	3310      	adds	r3, #16
 8002f6a:	687a      	ldr	r2, [r7, #4]
 8002f6c:	4413      	add	r3, r2
 8002f6e:	3304      	adds	r3, #4
 8002f70:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	2201      	movs	r2, #1
 8002f76:	705a      	strb	r2, [r3, #1]
 8002f78:	e00f      	b.n	8002f9a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f7a:	78fb      	ldrb	r3, [r7, #3]
 8002f7c:	f003 020f 	and.w	r2, r3, #15
 8002f80:	4613      	mov	r3, r2
 8002f82:	00db      	lsls	r3, r3, #3
 8002f84:	4413      	add	r3, r2
 8002f86:	009b      	lsls	r3, r3, #2
 8002f88:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002f8c:	687a      	ldr	r2, [r7, #4]
 8002f8e:	4413      	add	r3, r2
 8002f90:	3304      	adds	r3, #4
 8002f92:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	2200      	movs	r2, #0
 8002f98:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002fa0:	78fb      	ldrb	r3, [r7, #3]
 8002fa2:	f003 030f 	and.w	r3, r3, #15
 8002fa6:	b2da      	uxtb	r2, r3
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002fb2:	2b01      	cmp	r3, #1
 8002fb4:	d101      	bne.n	8002fba <HAL_PCD_EP_ClrStall+0x86>
 8002fb6:	2302      	movs	r3, #2
 8002fb8:	e00e      	b.n	8002fd8 <HAL_PCD_EP_ClrStall+0xa4>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2201      	movs	r2, #1
 8002fbe:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	68f9      	ldr	r1, [r7, #12]
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f003 fe09 	bl	8006be0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002fd6:	2300      	movs	r3, #0
}
 8002fd8:	4618      	mov	r0, r3
 8002fda:	3710      	adds	r7, #16
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bd80      	pop	{r7, pc}

08002fe0 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b084      	sub	sp, #16
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
 8002fe8:	460b      	mov	r3, r1
 8002fea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002fec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	da0c      	bge.n	800300e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ff4:	78fb      	ldrb	r3, [r7, #3]
 8002ff6:	f003 020f 	and.w	r2, r3, #15
 8002ffa:	4613      	mov	r3, r2
 8002ffc:	00db      	lsls	r3, r3, #3
 8002ffe:	4413      	add	r3, r2
 8003000:	009b      	lsls	r3, r3, #2
 8003002:	3310      	adds	r3, #16
 8003004:	687a      	ldr	r2, [r7, #4]
 8003006:	4413      	add	r3, r2
 8003008:	3304      	adds	r3, #4
 800300a:	60fb      	str	r3, [r7, #12]
 800300c:	e00c      	b.n	8003028 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800300e:	78fb      	ldrb	r3, [r7, #3]
 8003010:	f003 020f 	and.w	r2, r3, #15
 8003014:	4613      	mov	r3, r2
 8003016:	00db      	lsls	r3, r3, #3
 8003018:	4413      	add	r3, r2
 800301a:	009b      	lsls	r3, r3, #2
 800301c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003020:	687a      	ldr	r2, [r7, #4]
 8003022:	4413      	add	r3, r2
 8003024:	3304      	adds	r3, #4
 8003026:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	68f9      	ldr	r1, [r7, #12]
 800302e:	4618      	mov	r0, r3
 8003030:	f003 fc28 	bl	8006884 <USB_EPStopXfer>
 8003034:	4603      	mov	r3, r0
 8003036:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003038:	7afb      	ldrb	r3, [r7, #11]
}
 800303a:	4618      	mov	r0, r3
 800303c:	3710      	adds	r7, #16
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}

08003042 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003042:	b580      	push	{r7, lr}
 8003044:	b08a      	sub	sp, #40	@ 0x28
 8003046:	af02      	add	r7, sp, #8
 8003048:	6078      	str	r0, [r7, #4]
 800304a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003056:	683a      	ldr	r2, [r7, #0]
 8003058:	4613      	mov	r3, r2
 800305a:	00db      	lsls	r3, r3, #3
 800305c:	4413      	add	r3, r2
 800305e:	009b      	lsls	r3, r3, #2
 8003060:	3310      	adds	r3, #16
 8003062:	687a      	ldr	r2, [r7, #4]
 8003064:	4413      	add	r3, r2
 8003066:	3304      	adds	r3, #4
 8003068:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	695a      	ldr	r2, [r3, #20]
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	691b      	ldr	r3, [r3, #16]
 8003072:	429a      	cmp	r2, r3
 8003074:	d901      	bls.n	800307a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	e06b      	b.n	8003152 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	691a      	ldr	r2, [r3, #16]
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	695b      	ldr	r3, [r3, #20]
 8003082:	1ad3      	subs	r3, r2, r3
 8003084:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	69fa      	ldr	r2, [r7, #28]
 800308c:	429a      	cmp	r2, r3
 800308e:	d902      	bls.n	8003096 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003096:	69fb      	ldr	r3, [r7, #28]
 8003098:	3303      	adds	r3, #3
 800309a:	089b      	lsrs	r3, r3, #2
 800309c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800309e:	e02a      	b.n	80030f6 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	691a      	ldr	r2, [r3, #16]
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	695b      	ldr	r3, [r3, #20]
 80030a8:	1ad3      	subs	r3, r2, r3
 80030aa:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	69fa      	ldr	r2, [r7, #28]
 80030b2:	429a      	cmp	r2, r3
 80030b4:	d902      	bls.n	80030bc <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	689b      	ldr	r3, [r3, #8]
 80030ba:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80030bc:	69fb      	ldr	r3, [r7, #28]
 80030be:	3303      	adds	r3, #3
 80030c0:	089b      	lsrs	r3, r3, #2
 80030c2:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	68d9      	ldr	r1, [r3, #12]
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	b2da      	uxtb	r2, r3
 80030cc:	69fb      	ldr	r3, [r7, #28]
 80030ce:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80030d4:	9300      	str	r3, [sp, #0]
 80030d6:	4603      	mov	r3, r0
 80030d8:	6978      	ldr	r0, [r7, #20]
 80030da:	f003 fc7d 	bl	80069d8 <USB_WritePacket>

    ep->xfer_buff  += len;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	68da      	ldr	r2, [r3, #12]
 80030e2:	69fb      	ldr	r3, [r7, #28]
 80030e4:	441a      	add	r2, r3
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	695a      	ldr	r2, [r3, #20]
 80030ee:	69fb      	ldr	r3, [r7, #28]
 80030f0:	441a      	add	r2, r3
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	015a      	lsls	r2, r3, #5
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	4413      	add	r3, r2
 80030fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003102:	699b      	ldr	r3, [r3, #24]
 8003104:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003106:	69ba      	ldr	r2, [r7, #24]
 8003108:	429a      	cmp	r2, r3
 800310a:	d809      	bhi.n	8003120 <PCD_WriteEmptyTxFifo+0xde>
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	695a      	ldr	r2, [r3, #20]
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003114:	429a      	cmp	r2, r3
 8003116:	d203      	bcs.n	8003120 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	691b      	ldr	r3, [r3, #16]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d1bf      	bne.n	80030a0 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	691a      	ldr	r2, [r3, #16]
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	695b      	ldr	r3, [r3, #20]
 8003128:	429a      	cmp	r2, r3
 800312a:	d811      	bhi.n	8003150 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	f003 030f 	and.w	r3, r3, #15
 8003132:	2201      	movs	r2, #1
 8003134:	fa02 f303 	lsl.w	r3, r2, r3
 8003138:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003140:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	43db      	mvns	r3, r3
 8003146:	6939      	ldr	r1, [r7, #16]
 8003148:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800314c:	4013      	ands	r3, r2
 800314e:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8003150:	2300      	movs	r3, #0
}
 8003152:	4618      	mov	r0, r3
 8003154:	3720      	adds	r7, #32
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}
	...

0800315c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b088      	sub	sp, #32
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
 8003164:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800316c:	69fb      	ldr	r3, [r7, #28]
 800316e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003170:	69fb      	ldr	r3, [r7, #28]
 8003172:	333c      	adds	r3, #60	@ 0x3c
 8003174:	3304      	adds	r3, #4
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	015a      	lsls	r2, r3, #5
 800317e:	69bb      	ldr	r3, [r7, #24]
 8003180:	4413      	add	r3, r2
 8003182:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	799b      	ldrb	r3, [r3, #6]
 800318e:	2b01      	cmp	r3, #1
 8003190:	d17b      	bne.n	800328a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	f003 0308 	and.w	r3, r3, #8
 8003198:	2b00      	cmp	r3, #0
 800319a:	d015      	beq.n	80031c8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	4a61      	ldr	r2, [pc, #388]	@ (8003324 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	f240 80b9 	bls.w	8003318 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	f000 80b3 	beq.w	8003318 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	015a      	lsls	r2, r3, #5
 80031b6:	69bb      	ldr	r3, [r7, #24]
 80031b8:	4413      	add	r3, r2
 80031ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80031be:	461a      	mov	r2, r3
 80031c0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80031c4:	6093      	str	r3, [r2, #8]
 80031c6:	e0a7      	b.n	8003318 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80031c8:	693b      	ldr	r3, [r7, #16]
 80031ca:	f003 0320 	and.w	r3, r3, #32
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d009      	beq.n	80031e6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	015a      	lsls	r2, r3, #5
 80031d6:	69bb      	ldr	r3, [r7, #24]
 80031d8:	4413      	add	r3, r2
 80031da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80031de:	461a      	mov	r2, r3
 80031e0:	2320      	movs	r3, #32
 80031e2:	6093      	str	r3, [r2, #8]
 80031e4:	e098      	b.n	8003318 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	f040 8093 	bne.w	8003318 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	4a4b      	ldr	r2, [pc, #300]	@ (8003324 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d90f      	bls.n	800321a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003200:	2b00      	cmp	r3, #0
 8003202:	d00a      	beq.n	800321a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	015a      	lsls	r2, r3, #5
 8003208:	69bb      	ldr	r3, [r7, #24]
 800320a:	4413      	add	r3, r2
 800320c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003210:	461a      	mov	r2, r3
 8003212:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003216:	6093      	str	r3, [r2, #8]
 8003218:	e07e      	b.n	8003318 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800321a:	683a      	ldr	r2, [r7, #0]
 800321c:	4613      	mov	r3, r2
 800321e:	00db      	lsls	r3, r3, #3
 8003220:	4413      	add	r3, r2
 8003222:	009b      	lsls	r3, r3, #2
 8003224:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003228:	687a      	ldr	r2, [r7, #4]
 800322a:	4413      	add	r3, r2
 800322c:	3304      	adds	r3, #4
 800322e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	6a1a      	ldr	r2, [r3, #32]
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	0159      	lsls	r1, r3, #5
 8003238:	69bb      	ldr	r3, [r7, #24]
 800323a:	440b      	add	r3, r1
 800323c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003240:	691b      	ldr	r3, [r3, #16]
 8003242:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003246:	1ad2      	subs	r2, r2, r3
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d114      	bne.n	800327c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	691b      	ldr	r3, [r3, #16]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d109      	bne.n	800326e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6818      	ldr	r0, [r3, #0]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003264:	461a      	mov	r2, r3
 8003266:	2101      	movs	r1, #1
 8003268:	f003 fe4c 	bl	8006f04 <USB_EP0_OutStart>
 800326c:	e006      	b.n	800327c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	68da      	ldr	r2, [r3, #12]
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	695b      	ldr	r3, [r3, #20]
 8003276:	441a      	add	r2, r3
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	b2db      	uxtb	r3, r3
 8003280:	4619      	mov	r1, r3
 8003282:	6878      	ldr	r0, [r7, #4]
 8003284:	f006 f996 	bl	80095b4 <HAL_PCD_DataOutStageCallback>
 8003288:	e046      	b.n	8003318 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	4a26      	ldr	r2, [pc, #152]	@ (8003328 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d124      	bne.n	80032dc <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003298:	2b00      	cmp	r3, #0
 800329a:	d00a      	beq.n	80032b2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	015a      	lsls	r2, r3, #5
 80032a0:	69bb      	ldr	r3, [r7, #24]
 80032a2:	4413      	add	r3, r2
 80032a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80032a8:	461a      	mov	r2, r3
 80032aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80032ae:	6093      	str	r3, [r2, #8]
 80032b0:	e032      	b.n	8003318 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	f003 0320 	and.w	r3, r3, #32
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d008      	beq.n	80032ce <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	015a      	lsls	r2, r3, #5
 80032c0:	69bb      	ldr	r3, [r7, #24]
 80032c2:	4413      	add	r3, r2
 80032c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80032c8:	461a      	mov	r2, r3
 80032ca:	2320      	movs	r3, #32
 80032cc:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	b2db      	uxtb	r3, r3
 80032d2:	4619      	mov	r1, r3
 80032d4:	6878      	ldr	r0, [r7, #4]
 80032d6:	f006 f96d 	bl	80095b4 <HAL_PCD_DataOutStageCallback>
 80032da:	e01d      	b.n	8003318 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d114      	bne.n	800330c <PCD_EP_OutXfrComplete_int+0x1b0>
 80032e2:	6879      	ldr	r1, [r7, #4]
 80032e4:	683a      	ldr	r2, [r7, #0]
 80032e6:	4613      	mov	r3, r2
 80032e8:	00db      	lsls	r3, r3, #3
 80032ea:	4413      	add	r3, r2
 80032ec:	009b      	lsls	r3, r3, #2
 80032ee:	440b      	add	r3, r1
 80032f0:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d108      	bne.n	800330c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6818      	ldr	r0, [r3, #0]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003304:	461a      	mov	r2, r3
 8003306:	2100      	movs	r1, #0
 8003308:	f003 fdfc 	bl	8006f04 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	b2db      	uxtb	r3, r3
 8003310:	4619      	mov	r1, r3
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	f006 f94e 	bl	80095b4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003318:	2300      	movs	r3, #0
}
 800331a:	4618      	mov	r0, r3
 800331c:	3720      	adds	r7, #32
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}
 8003322:	bf00      	nop
 8003324:	4f54300a 	.word	0x4f54300a
 8003328:	4f54310a 	.word	0x4f54310a

0800332c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b086      	sub	sp, #24
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
 8003334:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	333c      	adds	r3, #60	@ 0x3c
 8003344:	3304      	adds	r3, #4
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	015a      	lsls	r2, r3, #5
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	4413      	add	r3, r2
 8003352:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	4a15      	ldr	r2, [pc, #84]	@ (80033b4 <PCD_EP_OutSetupPacket_int+0x88>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d90e      	bls.n	8003380 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003368:	2b00      	cmp	r3, #0
 800336a:	d009      	beq.n	8003380 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	015a      	lsls	r2, r3, #5
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	4413      	add	r3, r2
 8003374:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003378:	461a      	mov	r2, r3
 800337a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800337e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003380:	6878      	ldr	r0, [r7, #4]
 8003382:	f006 f905 	bl	8009590 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	4a0a      	ldr	r2, [pc, #40]	@ (80033b4 <PCD_EP_OutSetupPacket_int+0x88>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d90c      	bls.n	80033a8 <PCD_EP_OutSetupPacket_int+0x7c>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	799b      	ldrb	r3, [r3, #6]
 8003392:	2b01      	cmp	r3, #1
 8003394:	d108      	bne.n	80033a8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6818      	ldr	r0, [r3, #0]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80033a0:	461a      	mov	r2, r3
 80033a2:	2101      	movs	r1, #1
 80033a4:	f003 fdae 	bl	8006f04 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80033a8:	2300      	movs	r3, #0
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	3718      	adds	r7, #24
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}
 80033b2:	bf00      	nop
 80033b4:	4f54300a 	.word	0x4f54300a

080033b8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80033b8:	b480      	push	{r7}
 80033ba:	b085      	sub	sp, #20
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
 80033c0:	460b      	mov	r3, r1
 80033c2:	70fb      	strb	r3, [r7, #3]
 80033c4:	4613      	mov	r3, r2
 80033c6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033ce:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80033d0:	78fb      	ldrb	r3, [r7, #3]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d107      	bne.n	80033e6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80033d6:	883b      	ldrh	r3, [r7, #0]
 80033d8:	0419      	lsls	r1, r3, #16
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	68ba      	ldr	r2, [r7, #8]
 80033e0:	430a      	orrs	r2, r1
 80033e2:	629a      	str	r2, [r3, #40]	@ 0x28
 80033e4:	e028      	b.n	8003438 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033ec:	0c1b      	lsrs	r3, r3, #16
 80033ee:	68ba      	ldr	r2, [r7, #8]
 80033f0:	4413      	add	r3, r2
 80033f2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80033f4:	2300      	movs	r3, #0
 80033f6:	73fb      	strb	r3, [r7, #15]
 80033f8:	e00d      	b.n	8003416 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681a      	ldr	r2, [r3, #0]
 80033fe:	7bfb      	ldrb	r3, [r7, #15]
 8003400:	3340      	adds	r3, #64	@ 0x40
 8003402:	009b      	lsls	r3, r3, #2
 8003404:	4413      	add	r3, r2
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	0c1b      	lsrs	r3, r3, #16
 800340a:	68ba      	ldr	r2, [r7, #8]
 800340c:	4413      	add	r3, r2
 800340e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003410:	7bfb      	ldrb	r3, [r7, #15]
 8003412:	3301      	adds	r3, #1
 8003414:	73fb      	strb	r3, [r7, #15]
 8003416:	7bfa      	ldrb	r2, [r7, #15]
 8003418:	78fb      	ldrb	r3, [r7, #3]
 800341a:	3b01      	subs	r3, #1
 800341c:	429a      	cmp	r2, r3
 800341e:	d3ec      	bcc.n	80033fa <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003420:	883b      	ldrh	r3, [r7, #0]
 8003422:	0418      	lsls	r0, r3, #16
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6819      	ldr	r1, [r3, #0]
 8003428:	78fb      	ldrb	r3, [r7, #3]
 800342a:	3b01      	subs	r3, #1
 800342c:	68ba      	ldr	r2, [r7, #8]
 800342e:	4302      	orrs	r2, r0
 8003430:	3340      	adds	r3, #64	@ 0x40
 8003432:	009b      	lsls	r3, r3, #2
 8003434:	440b      	add	r3, r1
 8003436:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003438:	2300      	movs	r3, #0
}
 800343a:	4618      	mov	r0, r3
 800343c:	3714      	adds	r7, #20
 800343e:	46bd      	mov	sp, r7
 8003440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003444:	4770      	bx	lr

08003446 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003446:	b480      	push	{r7}
 8003448:	b083      	sub	sp, #12
 800344a:	af00      	add	r7, sp, #0
 800344c:	6078      	str	r0, [r7, #4]
 800344e:	460b      	mov	r3, r1
 8003450:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	887a      	ldrh	r2, [r7, #2]
 8003458:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800345a:	2300      	movs	r3, #0
}
 800345c:	4618      	mov	r0, r3
 800345e:	370c      	adds	r7, #12
 8003460:	46bd      	mov	sp, r7
 8003462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003466:	4770      	bx	lr

08003468 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003468:	b480      	push	{r7}
 800346a:	b085      	sub	sp, #20
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2201      	movs	r2, #1
 800347a:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2200      	movs	r2, #0
 8003482:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	699b      	ldr	r3, [r3, #24]
 800348a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003496:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800349a:	f043 0303 	orr.w	r3, r3, #3
 800349e:	68fa      	ldr	r2, [r7, #12]
 80034a0:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80034a2:	2300      	movs	r3, #0
}
 80034a4:	4618      	mov	r0, r3
 80034a6:	3714      	adds	r7, #20
 80034a8:	46bd      	mov	sp, r7
 80034aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ae:	4770      	bx	lr

080034b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b084      	sub	sp, #16
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
 80034b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d101      	bne.n	80034c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034c0:	2301      	movs	r3, #1
 80034c2:	e0cc      	b.n	800365e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80034c4:	4b68      	ldr	r3, [pc, #416]	@ (8003668 <HAL_RCC_ClockConfig+0x1b8>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f003 030f 	and.w	r3, r3, #15
 80034cc:	683a      	ldr	r2, [r7, #0]
 80034ce:	429a      	cmp	r2, r3
 80034d0:	d90c      	bls.n	80034ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034d2:	4b65      	ldr	r3, [pc, #404]	@ (8003668 <HAL_RCC_ClockConfig+0x1b8>)
 80034d4:	683a      	ldr	r2, [r7, #0]
 80034d6:	b2d2      	uxtb	r2, r2
 80034d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034da:	4b63      	ldr	r3, [pc, #396]	@ (8003668 <HAL_RCC_ClockConfig+0x1b8>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 030f 	and.w	r3, r3, #15
 80034e2:	683a      	ldr	r2, [r7, #0]
 80034e4:	429a      	cmp	r2, r3
 80034e6:	d001      	beq.n	80034ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80034e8:	2301      	movs	r3, #1
 80034ea:	e0b8      	b.n	800365e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f003 0302 	and.w	r3, r3, #2
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d020      	beq.n	800353a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f003 0304 	and.w	r3, r3, #4
 8003500:	2b00      	cmp	r3, #0
 8003502:	d005      	beq.n	8003510 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003504:	4b59      	ldr	r3, [pc, #356]	@ (800366c <HAL_RCC_ClockConfig+0x1bc>)
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	4a58      	ldr	r2, [pc, #352]	@ (800366c <HAL_RCC_ClockConfig+0x1bc>)
 800350a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800350e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f003 0308 	and.w	r3, r3, #8
 8003518:	2b00      	cmp	r3, #0
 800351a:	d005      	beq.n	8003528 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800351c:	4b53      	ldr	r3, [pc, #332]	@ (800366c <HAL_RCC_ClockConfig+0x1bc>)
 800351e:	689b      	ldr	r3, [r3, #8]
 8003520:	4a52      	ldr	r2, [pc, #328]	@ (800366c <HAL_RCC_ClockConfig+0x1bc>)
 8003522:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003526:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003528:	4b50      	ldr	r3, [pc, #320]	@ (800366c <HAL_RCC_ClockConfig+0x1bc>)
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	494d      	ldr	r1, [pc, #308]	@ (800366c <HAL_RCC_ClockConfig+0x1bc>)
 8003536:	4313      	orrs	r3, r2
 8003538:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f003 0301 	and.w	r3, r3, #1
 8003542:	2b00      	cmp	r3, #0
 8003544:	d044      	beq.n	80035d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	2b01      	cmp	r3, #1
 800354c:	d107      	bne.n	800355e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800354e:	4b47      	ldr	r3, [pc, #284]	@ (800366c <HAL_RCC_ClockConfig+0x1bc>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003556:	2b00      	cmp	r3, #0
 8003558:	d119      	bne.n	800358e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800355a:	2301      	movs	r3, #1
 800355c:	e07f      	b.n	800365e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	2b02      	cmp	r3, #2
 8003564:	d003      	beq.n	800356e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800356a:	2b03      	cmp	r3, #3
 800356c:	d107      	bne.n	800357e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800356e:	4b3f      	ldr	r3, [pc, #252]	@ (800366c <HAL_RCC_ClockConfig+0x1bc>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003576:	2b00      	cmp	r3, #0
 8003578:	d109      	bne.n	800358e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	e06f      	b.n	800365e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800357e:	4b3b      	ldr	r3, [pc, #236]	@ (800366c <HAL_RCC_ClockConfig+0x1bc>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f003 0302 	and.w	r3, r3, #2
 8003586:	2b00      	cmp	r3, #0
 8003588:	d101      	bne.n	800358e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	e067      	b.n	800365e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800358e:	4b37      	ldr	r3, [pc, #220]	@ (800366c <HAL_RCC_ClockConfig+0x1bc>)
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	f023 0203 	bic.w	r2, r3, #3
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	4934      	ldr	r1, [pc, #208]	@ (800366c <HAL_RCC_ClockConfig+0x1bc>)
 800359c:	4313      	orrs	r3, r2
 800359e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80035a0:	f7fd ff6e 	bl	8001480 <HAL_GetTick>
 80035a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035a6:	e00a      	b.n	80035be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035a8:	f7fd ff6a 	bl	8001480 <HAL_GetTick>
 80035ac:	4602      	mov	r2, r0
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	1ad3      	subs	r3, r2, r3
 80035b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d901      	bls.n	80035be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80035ba:	2303      	movs	r3, #3
 80035bc:	e04f      	b.n	800365e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035be:	4b2b      	ldr	r3, [pc, #172]	@ (800366c <HAL_RCC_ClockConfig+0x1bc>)
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	f003 020c 	and.w	r2, r3, #12
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	009b      	lsls	r3, r3, #2
 80035cc:	429a      	cmp	r2, r3
 80035ce:	d1eb      	bne.n	80035a8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80035d0:	4b25      	ldr	r3, [pc, #148]	@ (8003668 <HAL_RCC_ClockConfig+0x1b8>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f003 030f 	and.w	r3, r3, #15
 80035d8:	683a      	ldr	r2, [r7, #0]
 80035da:	429a      	cmp	r2, r3
 80035dc:	d20c      	bcs.n	80035f8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035de:	4b22      	ldr	r3, [pc, #136]	@ (8003668 <HAL_RCC_ClockConfig+0x1b8>)
 80035e0:	683a      	ldr	r2, [r7, #0]
 80035e2:	b2d2      	uxtb	r2, r2
 80035e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035e6:	4b20      	ldr	r3, [pc, #128]	@ (8003668 <HAL_RCC_ClockConfig+0x1b8>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f003 030f 	and.w	r3, r3, #15
 80035ee:	683a      	ldr	r2, [r7, #0]
 80035f0:	429a      	cmp	r2, r3
 80035f2:	d001      	beq.n	80035f8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80035f4:	2301      	movs	r3, #1
 80035f6:	e032      	b.n	800365e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f003 0304 	and.w	r3, r3, #4
 8003600:	2b00      	cmp	r3, #0
 8003602:	d008      	beq.n	8003616 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003604:	4b19      	ldr	r3, [pc, #100]	@ (800366c <HAL_RCC_ClockConfig+0x1bc>)
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	68db      	ldr	r3, [r3, #12]
 8003610:	4916      	ldr	r1, [pc, #88]	@ (800366c <HAL_RCC_ClockConfig+0x1bc>)
 8003612:	4313      	orrs	r3, r2
 8003614:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f003 0308 	and.w	r3, r3, #8
 800361e:	2b00      	cmp	r3, #0
 8003620:	d009      	beq.n	8003636 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003622:	4b12      	ldr	r3, [pc, #72]	@ (800366c <HAL_RCC_ClockConfig+0x1bc>)
 8003624:	689b      	ldr	r3, [r3, #8]
 8003626:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	691b      	ldr	r3, [r3, #16]
 800362e:	00db      	lsls	r3, r3, #3
 8003630:	490e      	ldr	r1, [pc, #56]	@ (800366c <HAL_RCC_ClockConfig+0x1bc>)
 8003632:	4313      	orrs	r3, r2
 8003634:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003636:	f000 fb7f 	bl	8003d38 <HAL_RCC_GetSysClockFreq>
 800363a:	4602      	mov	r2, r0
 800363c:	4b0b      	ldr	r3, [pc, #44]	@ (800366c <HAL_RCC_ClockConfig+0x1bc>)
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	091b      	lsrs	r3, r3, #4
 8003642:	f003 030f 	and.w	r3, r3, #15
 8003646:	490a      	ldr	r1, [pc, #40]	@ (8003670 <HAL_RCC_ClockConfig+0x1c0>)
 8003648:	5ccb      	ldrb	r3, [r1, r3]
 800364a:	fa22 f303 	lsr.w	r3, r2, r3
 800364e:	4a09      	ldr	r2, [pc, #36]	@ (8003674 <HAL_RCC_ClockConfig+0x1c4>)
 8003650:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003652:	4b09      	ldr	r3, [pc, #36]	@ (8003678 <HAL_RCC_ClockConfig+0x1c8>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4618      	mov	r0, r3
 8003658:	f7fd fece 	bl	80013f8 <HAL_InitTick>

  return HAL_OK;
 800365c:	2300      	movs	r3, #0
}
 800365e:	4618      	mov	r0, r3
 8003660:	3710      	adds	r7, #16
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}
 8003666:	bf00      	nop
 8003668:	40023c00 	.word	0x40023c00
 800366c:	40023800 	.word	0x40023800
 8003670:	08009c64 	.word	0x08009c64
 8003674:	20000004 	.word	0x20000004
 8003678:	20000008 	.word	0x20000008

0800367c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800367c:	b480      	push	{r7}
 800367e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003680:	4b03      	ldr	r3, [pc, #12]	@ (8003690 <HAL_RCC_GetHCLKFreq+0x14>)
 8003682:	681b      	ldr	r3, [r3, #0]
}
 8003684:	4618      	mov	r0, r3
 8003686:	46bd      	mov	sp, r7
 8003688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368c:	4770      	bx	lr
 800368e:	bf00      	nop
 8003690:	20000004 	.word	0x20000004

08003694 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003698:	f7ff fff0 	bl	800367c <HAL_RCC_GetHCLKFreq>
 800369c:	4602      	mov	r2, r0
 800369e:	4b05      	ldr	r3, [pc, #20]	@ (80036b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80036a0:	689b      	ldr	r3, [r3, #8]
 80036a2:	0a9b      	lsrs	r3, r3, #10
 80036a4:	f003 0307 	and.w	r3, r3, #7
 80036a8:	4903      	ldr	r1, [pc, #12]	@ (80036b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80036aa:	5ccb      	ldrb	r3, [r1, r3]
 80036ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	bd80      	pop	{r7, pc}
 80036b4:	40023800 	.word	0x40023800
 80036b8:	08009c74 	.word	0x08009c74

080036bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80036c0:	f7ff ffdc 	bl	800367c <HAL_RCC_GetHCLKFreq>
 80036c4:	4602      	mov	r2, r0
 80036c6:	4b05      	ldr	r3, [pc, #20]	@ (80036dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80036c8:	689b      	ldr	r3, [r3, #8]
 80036ca:	0b5b      	lsrs	r3, r3, #13
 80036cc:	f003 0307 	and.w	r3, r3, #7
 80036d0:	4903      	ldr	r1, [pc, #12]	@ (80036e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80036d2:	5ccb      	ldrb	r3, [r1, r3]
 80036d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036d8:	4618      	mov	r0, r3
 80036da:	bd80      	pop	{r7, pc}
 80036dc:	40023800 	.word	0x40023800
 80036e0:	08009c74 	.word	0x08009c74

080036e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b08c      	sub	sp, #48	@ 0x30
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80036ec:	2300      	movs	r3, #0
 80036ee:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmpreg1 = 0U;
 80036f0:	2300      	movs	r3, #0
 80036f2:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 80036f4:	2300      	movs	r3, #0
 80036f6:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 80036f8:	2300      	movs	r3, #0
 80036fa:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 80036fc:	2300      	movs	r3, #0
 80036fe:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8003700:	2300      	movs	r3, #0
 8003702:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8003704:	2300      	movs	r3, #0
 8003706:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8003708:	2300      	movs	r3, #0
 800370a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t pllsaiused = 0U;
 800370c:	2300      	movs	r3, #0
 800370e:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f003 0301 	and.w	r3, r3, #1
 8003718:	2b00      	cmp	r3, #0
 800371a:	d010      	beq.n	800373e <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 800371c:	4b6f      	ldr	r3, [pc, #444]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800371e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003722:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800372a:	496c      	ldr	r1, [pc, #432]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800372c:	4313      	orrs	r3, r2
 800372e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003736:	2b00      	cmp	r3, #0
 8003738:	d101      	bne.n	800373e <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 800373a:	2301      	movs	r3, #1
 800373c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f003 0302 	and.w	r3, r3, #2
 8003746:	2b00      	cmp	r3, #0
 8003748:	d010      	beq.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 800374a:	4b64      	ldr	r3, [pc, #400]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800374c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003750:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003758:	4960      	ldr	r1, [pc, #384]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800375a:	4313      	orrs	r3, r2
 800375c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003764:	2b00      	cmp	r3, #0
 8003766:	d101      	bne.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8003768:	2301      	movs	r3, #1
 800376a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f003 0304 	and.w	r3, r3, #4
 8003774:	2b00      	cmp	r3, #0
 8003776:	d017      	beq.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003778:	4b58      	ldr	r3, [pc, #352]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800377a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800377e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003786:	4955      	ldr	r1, [pc, #340]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003788:	4313      	orrs	r3, r2
 800378a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003792:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003796:	d101      	bne.n	800379c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8003798:	2301      	movs	r3, #1
 800379a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d101      	bne.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 80037a4:	2301      	movs	r3, #1
 80037a6:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f003 0308 	and.w	r3, r3, #8
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d017      	beq.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80037b4:	4b49      	ldr	r3, [pc, #292]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80037b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80037ba:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037c2:	4946      	ldr	r1, [pc, #280]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80037c4:	4313      	orrs	r3, r2
 80037c6:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037ce:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80037d2:	d101      	bne.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 80037d4:	2301      	movs	r3, #1
 80037d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d101      	bne.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 80037e0:	2301      	movs	r3, #1
 80037e2:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f003 0320 	and.w	r3, r3, #32
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	f000 808a 	beq.w	8003906 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80037f2:	2300      	movs	r3, #0
 80037f4:	60bb      	str	r3, [r7, #8]
 80037f6:	4b39      	ldr	r3, [pc, #228]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80037f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037fa:	4a38      	ldr	r2, [pc, #224]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80037fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003800:	6413      	str	r3, [r2, #64]	@ 0x40
 8003802:	4b36      	ldr	r3, [pc, #216]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003804:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003806:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800380a:	60bb      	str	r3, [r7, #8]
 800380c:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800380e:	4b34      	ldr	r3, [pc, #208]	@ (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a33      	ldr	r2, [pc, #204]	@ (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003814:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003818:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800381a:	f7fd fe31 	bl	8001480 <HAL_GetTick>
 800381e:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8003820:	e008      	b.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003822:	f7fd fe2d 	bl	8001480 <HAL_GetTick>
 8003826:	4602      	mov	r2, r0
 8003828:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800382a:	1ad3      	subs	r3, r2, r3
 800382c:	2b02      	cmp	r3, #2
 800382e:	d901      	bls.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8003830:	2303      	movs	r3, #3
 8003832:	e278      	b.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8003834:	4b2a      	ldr	r3, [pc, #168]	@ (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800383c:	2b00      	cmp	r3, #0
 800383e:	d0f0      	beq.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003840:	4b26      	ldr	r3, [pc, #152]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003842:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003844:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003848:	623b      	str	r3, [r7, #32]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800384a:	6a3b      	ldr	r3, [r7, #32]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d02f      	beq.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003854:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003858:	6a3a      	ldr	r2, [r7, #32]
 800385a:	429a      	cmp	r2, r3
 800385c:	d028      	beq.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800385e:	4b1f      	ldr	r3, [pc, #124]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003860:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003862:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003866:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003868:	4b1e      	ldr	r3, [pc, #120]	@ (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800386a:	2201      	movs	r2, #1
 800386c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800386e:	4b1d      	ldr	r3, [pc, #116]	@ (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8003870:	2200      	movs	r2, #0
 8003872:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003874:	4a19      	ldr	r2, [pc, #100]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003876:	6a3b      	ldr	r3, [r7, #32]
 8003878:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800387a:	4b18      	ldr	r3, [pc, #96]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800387c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800387e:	f003 0301 	and.w	r3, r3, #1
 8003882:	2b01      	cmp	r3, #1
 8003884:	d114      	bne.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003886:	f7fd fdfb 	bl	8001480 <HAL_GetTick>
 800388a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800388c:	e00a      	b.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800388e:	f7fd fdf7 	bl	8001480 <HAL_GetTick>
 8003892:	4602      	mov	r2, r0
 8003894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003896:	1ad3      	subs	r3, r2, r3
 8003898:	f241 3288 	movw	r2, #5000	@ 0x1388
 800389c:	4293      	cmp	r3, r2
 800389e:	d901      	bls.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 80038a0:	2303      	movs	r3, #3
 80038a2:	e240      	b.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038a4:	4b0d      	ldr	r3, [pc, #52]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80038a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038a8:	f003 0302 	and.w	r3, r3, #2
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d0ee      	beq.n	800388e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038b4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80038b8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80038bc:	d114      	bne.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x204>
 80038be:	4b07      	ldr	r3, [pc, #28]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038ca:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80038ce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80038d2:	4902      	ldr	r1, [pc, #8]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80038d4:	4313      	orrs	r3, r2
 80038d6:	608b      	str	r3, [r1, #8]
 80038d8:	e00c      	b.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x210>
 80038da:	bf00      	nop
 80038dc:	40023800 	.word	0x40023800
 80038e0:	40007000 	.word	0x40007000
 80038e4:	42470e40 	.word	0x42470e40
 80038e8:	4b4a      	ldr	r3, [pc, #296]	@ (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	4a49      	ldr	r2, [pc, #292]	@ (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80038ee:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80038f2:	6093      	str	r3, [r2, #8]
 80038f4:	4b47      	ldr	r3, [pc, #284]	@ (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80038f6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003900:	4944      	ldr	r1, [pc, #272]	@ (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003902:	4313      	orrs	r3, r2
 8003904:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f003 0310 	and.w	r3, r3, #16
 800390e:	2b00      	cmp	r3, #0
 8003910:	d004      	beq.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8003918:	4b3f      	ldr	r3, [pc, #252]	@ (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 800391a:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003924:	2b00      	cmp	r3, #0
 8003926:	d00a      	beq.n	800393e <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8003928:	4b3a      	ldr	r3, [pc, #232]	@ (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800392a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800392e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003936:	4937      	ldr	r1, [pc, #220]	@ (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003938:	4313      	orrs	r3, r2
 800393a:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003946:	2b00      	cmp	r3, #0
 8003948:	d00a      	beq.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800394a:	4b32      	ldr	r3, [pc, #200]	@ (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800394c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003950:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003958:	492e      	ldr	r1, [pc, #184]	@ (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800395a:	4313      	orrs	r3, r2
 800395c:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003968:	2b00      	cmp	r3, #0
 800396a:	d011      	beq.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800396c:	4b29      	ldr	r3, [pc, #164]	@ (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800396e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003972:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800397a:	4926      	ldr	r1, [pc, #152]	@ (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800397c:	4313      	orrs	r3, r2
 800397e:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003986:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800398a:	d101      	bne.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 800398c:	2301      	movs	r3, #1
 800398e:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003998:	2b00      	cmp	r3, #0
 800399a:	d00a      	beq.n	80039b2 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 800399c:	4b1d      	ldr	r3, [pc, #116]	@ (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800399e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80039a2:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039aa:	491a      	ldr	r1, [pc, #104]	@ (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80039ac:	4313      	orrs	r3, r2
 80039ae:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d011      	beq.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 80039be:	4b15      	ldr	r3, [pc, #84]	@ (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80039c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80039c4:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039cc:	4911      	ldr	r1, [pc, #68]	@ (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80039ce:	4313      	orrs	r3, r2
 80039d0:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80039dc:	d101      	bne.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 80039de:	2301      	movs	r3, #1
 80039e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if ((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80039e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039e4:	2b01      	cmp	r3, #1
 80039e6:	d005      	beq.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80039f0:	f040 80ff 	bne.w	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80039f4:	4b09      	ldr	r3, [pc, #36]	@ (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80039f6:	2200      	movs	r2, #0
 80039f8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80039fa:	f7fd fd41 	bl	8001480 <HAL_GetTick>
 80039fe:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003a00:	e00e      	b.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003a02:	f7fd fd3d 	bl	8001480 <HAL_GetTick>
 8003a06:	4602      	mov	r2, r0
 8003a08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a0a:	1ad3      	subs	r3, r2, r3
 8003a0c:	2b02      	cmp	r3, #2
 8003a0e:	d907      	bls.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003a10:	2303      	movs	r3, #3
 8003a12:	e188      	b.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003a14:	40023800 	.word	0x40023800
 8003a18:	424711e0 	.word	0x424711e0
 8003a1c:	42470068 	.word	0x42470068
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003a20:	4b7e      	ldr	r3, [pc, #504]	@ (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d1ea      	bne.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f003 0301 	and.w	r3, r3, #1
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d003      	beq.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x35c>
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d009      	beq.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x370>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f003 0302 	and.w	r3, r3, #2
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d028      	beq.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d124      	bne.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003a54:	4b71      	ldr	r3, [pc, #452]	@ (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003a56:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003a5a:	0c1b      	lsrs	r3, r3, #16
 8003a5c:	f003 0303 	and.w	r3, r3, #3
 8003a60:	3301      	adds	r3, #1
 8003a62:	005b      	lsls	r3, r3, #1
 8003a64:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003a66:	4b6d      	ldr	r3, [pc, #436]	@ (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003a68:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003a6c:	0e1b      	lsrs	r3, r3, #24
 8003a6e:	f003 030f 	and.w	r3, r3, #15
 8003a72:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp, plli2sq,
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	685a      	ldr	r2, [r3, #4]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	019b      	lsls	r3, r3, #6
 8003a7e:	431a      	orrs	r2, r3
 8003a80:	69fb      	ldr	r3, [r7, #28]
 8003a82:	085b      	lsrs	r3, r3, #1
 8003a84:	3b01      	subs	r3, #1
 8003a86:	041b      	lsls	r3, r3, #16
 8003a88:	431a      	orrs	r2, r3
 8003a8a:	69bb      	ldr	r3, [r7, #24]
 8003a8c:	061b      	lsls	r3, r3, #24
 8003a8e:	431a      	orrs	r2, r3
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	695b      	ldr	r3, [r3, #20]
 8003a94:	071b      	lsls	r3, r3, #28
 8003a96:	4961      	ldr	r1, [pc, #388]	@ (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f003 0304 	and.w	r3, r3, #4
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d004      	beq.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003aae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003ab2:	d00a      	beq.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x3e6>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d035      	beq.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x448>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ac4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003ac8:	d130      	bne.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003aca:	4b54      	ldr	r3, [pc, #336]	@ (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003acc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003ad0:	0c1b      	lsrs	r3, r3, #16
 8003ad2:	f003 0303 	and.w	r3, r3, #3
 8003ad6:	3301      	adds	r3, #1
 8003ad8:	005b      	lsls	r3, r3, #1
 8003ada:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003adc:	4b4f      	ldr	r3, [pc, #316]	@ (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003ade:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003ae2:	0f1b      	lsrs	r3, r3, #28
 8003ae4:	f003 0307 	and.w	r3, r3, #7
 8003ae8:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp,
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	685a      	ldr	r2, [r3, #4]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	019b      	lsls	r3, r3, #6
 8003af4:	431a      	orrs	r2, r3
 8003af6:	69fb      	ldr	r3, [r7, #28]
 8003af8:	085b      	lsrs	r3, r3, #1
 8003afa:	3b01      	subs	r3, #1
 8003afc:	041b      	lsls	r3, r3, #16
 8003afe:	431a      	orrs	r2, r3
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	691b      	ldr	r3, [r3, #16]
 8003b04:	061b      	lsls	r3, r3, #24
 8003b06:	431a      	orrs	r2, r3
 8003b08:	697b      	ldr	r3, [r7, #20]
 8003b0a:	071b      	lsls	r3, r3, #28
 8003b0c:	4943      	ldr	r1, [pc, #268]	@ (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003b14:	4b41      	ldr	r3, [pc, #260]	@ (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003b16:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003b1a:	f023 021f 	bic.w	r2, r3, #31
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b22:	3b01      	subs	r3, #1
 8003b24:	493d      	ldr	r1, [pc, #244]	@ (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003b26:	4313      	orrs	r3, r2
 8003b28:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d029      	beq.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
        && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b3c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003b40:	d124      	bne.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003b42:	4b36      	ldr	r3, [pc, #216]	@ (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003b44:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003b48:	0c1b      	lsrs	r3, r3, #16
 8003b4a:	f003 0303 	and.w	r3, r3, #3
 8003b4e:	3301      	adds	r3, #1
 8003b50:	005b      	lsls	r3, r3, #1
 8003b52:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003b54:	4b31      	ldr	r3, [pc, #196]	@ (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003b56:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003b5a:	0f1b      	lsrs	r3, r3, #28
 8003b5c:	f003 0307 	and.w	r3, r3, #7
 8003b60:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	685a      	ldr	r2, [r3, #4]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	689b      	ldr	r3, [r3, #8]
 8003b6a:	019b      	lsls	r3, r3, #6
 8003b6c:	431a      	orrs	r2, r3
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	68db      	ldr	r3, [r3, #12]
 8003b72:	085b      	lsrs	r3, r3, #1
 8003b74:	3b01      	subs	r3, #1
 8003b76:	041b      	lsls	r3, r3, #16
 8003b78:	431a      	orrs	r2, r3
 8003b7a:	69bb      	ldr	r3, [r7, #24]
 8003b7c:	061b      	lsls	r3, r3, #24
 8003b7e:	431a      	orrs	r2, r3
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	071b      	lsls	r3, r3, #28
 8003b84:	4925      	ldr	r1, [pc, #148]	@ (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003b86:	4313      	orrs	r3, r2
 8003b88:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              plli2sq, plli2sr);
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d016      	beq.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	685a      	ldr	r2, [r3, #4]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	689b      	ldr	r3, [r3, #8]
 8003ba0:	019b      	lsls	r3, r3, #6
 8003ba2:	431a      	orrs	r2, r3
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	68db      	ldr	r3, [r3, #12]
 8003ba8:	085b      	lsrs	r3, r3, #1
 8003baa:	3b01      	subs	r3, #1
 8003bac:	041b      	lsls	r3, r3, #16
 8003bae:	431a      	orrs	r2, r3
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	691b      	ldr	r3, [r3, #16]
 8003bb4:	061b      	lsls	r3, r3, #24
 8003bb6:	431a      	orrs	r2, r3
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	695b      	ldr	r3, [r3, #20]
 8003bbc:	071b      	lsls	r3, r3, #28
 8003bbe:	4917      	ldr	r1, [pc, #92]	@ (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003bc6:	4b16      	ldr	r3, [pc, #88]	@ (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8003bc8:	2201      	movs	r2, #1
 8003bca:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003bcc:	f7fd fc58 	bl	8001480 <HAL_GetTick>
 8003bd0:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003bd2:	e008      	b.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003bd4:	f7fd fc54 	bl	8001480 <HAL_GetTick>
 8003bd8:	4602      	mov	r2, r0
 8003bda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bdc:	1ad3      	subs	r3, r2, r3
 8003bde:	2b02      	cmp	r3, #2
 8003be0:	d901      	bls.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003be2:	2303      	movs	r3, #3
 8003be4:	e09f      	b.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003be6:	4b0d      	ldr	r3, [pc, #52]	@ (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d0f0      	beq.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if (pllsaiused == 1U)
 8003bf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	f040 8095 	bne.w	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003bfa:	4b0a      	ldr	r3, [pc, #40]	@ (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003c00:	f7fd fc3e 	bl	8001480 <HAL_GetTick>
 8003c04:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003c06:	e00f      	b.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003c08:	f7fd fc3a 	bl	8001480 <HAL_GetTick>
 8003c0c:	4602      	mov	r2, r0
 8003c0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c10:	1ad3      	subs	r3, r2, r3
 8003c12:	2b02      	cmp	r3, #2
 8003c14:	d908      	bls.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003c16:	2303      	movs	r3, #3
 8003c18:	e085      	b.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003c1a:	bf00      	nop
 8003c1c:	40023800 	.word	0x40023800
 8003c20:	42470068 	.word	0x42470068
 8003c24:	42470070 	.word	0x42470070
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003c28:	4b41      	ldr	r3, [pc, #260]	@ (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003c30:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003c34:	d0e8      	beq.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f003 0304 	and.w	r3, r3, #4
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d003      	beq.n	8003c4a <HAL_RCCEx_PeriphCLKConfig+0x566>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d009      	beq.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x57a>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d02b      	beq.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x5ca>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d127      	bne.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8003c5e:	4b34      	ldr	r3, [pc, #208]	@ (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003c60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c64:	0c1b      	lsrs	r3, r3, #16
 8003c66:	f003 0303 	and.w	r3, r3, #3
 8003c6a:	3301      	adds	r3, #1
 8003c6c:	005b      	lsls	r3, r3, #1
 8003c6e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, pllsaip,
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	699a      	ldr	r2, [r3, #24]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	69db      	ldr	r3, [r3, #28]
 8003c78:	019b      	lsls	r3, r3, #6
 8003c7a:	431a      	orrs	r2, r3
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	085b      	lsrs	r3, r3, #1
 8003c80:	3b01      	subs	r3, #1
 8003c82:	041b      	lsls	r3, r3, #16
 8003c84:	431a      	orrs	r2, r3
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c8a:	061b      	lsls	r3, r3, #24
 8003c8c:	4928      	ldr	r1, [pc, #160]	@ (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              PeriphClkInit->PLLSAI.PLLSAIQ, 0U);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003c94:	4b26      	ldr	r3, [pc, #152]	@ (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003c96:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003c9a:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ca2:	3b01      	subs	r3, #1
 8003ca4:	021b      	lsls	r3, r3, #8
 8003ca6:	4922      	ldr	r1, [pc, #136]	@ (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d01d      	beq.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x612>
        && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cbe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003cc2:	d118      	bne.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003cc4:	4b1a      	ldr	r3, [pc, #104]	@ (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003cc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cca:	0e1b      	lsrs	r3, r3, #24
 8003ccc:	f003 030f 	and.w	r3, r3, #15
 8003cd0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP,
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	699a      	ldr	r2, [r3, #24]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	69db      	ldr	r3, [r3, #28]
 8003cda:	019b      	lsls	r3, r3, #6
 8003cdc:	431a      	orrs	r2, r3
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6a1b      	ldr	r3, [r3, #32]
 8003ce2:	085b      	lsrs	r3, r3, #1
 8003ce4:	3b01      	subs	r3, #1
 8003ce6:	041b      	lsls	r3, r3, #16
 8003ce8:	431a      	orrs	r2, r3
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	061b      	lsls	r3, r3, #24
 8003cee:	4910      	ldr	r1, [pc, #64]	@ (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              pllsaiq, 0U);
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003cf6:	4b0f      	ldr	r3, [pc, #60]	@ (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8003cf8:	2201      	movs	r2, #1
 8003cfa:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003cfc:	f7fd fbc0 	bl	8001480 <HAL_GetTick>
 8003d00:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003d02:	e008      	b.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003d04:	f7fd fbbc 	bl	8001480 <HAL_GetTick>
 8003d08:	4602      	mov	r2, r0
 8003d0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d0c:	1ad3      	subs	r3, r2, r3
 8003d0e:	2b02      	cmp	r3, #2
 8003d10:	d901      	bls.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d12:	2303      	movs	r3, #3
 8003d14:	e007      	b.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003d16:	4b06      	ldr	r3, [pc, #24]	@ (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003d1e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003d22:	d1ef      	bne.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8003d24:	2300      	movs	r3, #0
}
 8003d26:	4618      	mov	r0, r3
 8003d28:	3730      	adds	r7, #48	@ 0x30
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd80      	pop	{r7, pc}
 8003d2e:	bf00      	nop
 8003d30:	40023800 	.word	0x40023800
 8003d34:	42470070 	.word	0x42470070

08003d38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d3c:	b0ae      	sub	sp, #184	@ 0xb8
 8003d3e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003d40:	2300      	movs	r3, #0
 8003d42:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8003d46:	2300      	movs	r3, #0
 8003d48:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8003d52:	2300      	movs	r3, #0
 8003d54:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8003d58:	2300      	movs	r3, #0
 8003d5a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d5e:	4bcb      	ldr	r3, [pc, #812]	@ (800408c <HAL_RCC_GetSysClockFreq+0x354>)
 8003d60:	689b      	ldr	r3, [r3, #8]
 8003d62:	f003 030c 	and.w	r3, r3, #12
 8003d66:	2b0c      	cmp	r3, #12
 8003d68:	f200 8206 	bhi.w	8004178 <HAL_RCC_GetSysClockFreq+0x440>
 8003d6c:	a201      	add	r2, pc, #4	@ (adr r2, 8003d74 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003d6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d72:	bf00      	nop
 8003d74:	08003da9 	.word	0x08003da9
 8003d78:	08004179 	.word	0x08004179
 8003d7c:	08004179 	.word	0x08004179
 8003d80:	08004179 	.word	0x08004179
 8003d84:	08003db1 	.word	0x08003db1
 8003d88:	08004179 	.word	0x08004179
 8003d8c:	08004179 	.word	0x08004179
 8003d90:	08004179 	.word	0x08004179
 8003d94:	08003db9 	.word	0x08003db9
 8003d98:	08004179 	.word	0x08004179
 8003d9c:	08004179 	.word	0x08004179
 8003da0:	08004179 	.word	0x08004179
 8003da4:	08003fa9 	.word	0x08003fa9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003da8:	4bb9      	ldr	r3, [pc, #740]	@ (8004090 <HAL_RCC_GetSysClockFreq+0x358>)
 8003daa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003dae:	e1e7      	b.n	8004180 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003db0:	4bb8      	ldr	r3, [pc, #736]	@ (8004094 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003db2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003db6:	e1e3      	b.n	8004180 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003db8:	4bb4      	ldr	r3, [pc, #720]	@ (800408c <HAL_RCC_GetSysClockFreq+0x354>)
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003dc0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003dc4:	4bb1      	ldr	r3, [pc, #708]	@ (800408c <HAL_RCC_GetSysClockFreq+0x354>)
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d071      	beq.n	8003eb4 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003dd0:	4bae      	ldr	r3, [pc, #696]	@ (800408c <HAL_RCC_GetSysClockFreq+0x354>)
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	099b      	lsrs	r3, r3, #6
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003ddc:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8003de0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003de4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003de8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003dec:	2300      	movs	r3, #0
 8003dee:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003df2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003df6:	4622      	mov	r2, r4
 8003df8:	462b      	mov	r3, r5
 8003dfa:	f04f 0000 	mov.w	r0, #0
 8003dfe:	f04f 0100 	mov.w	r1, #0
 8003e02:	0159      	lsls	r1, r3, #5
 8003e04:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e08:	0150      	lsls	r0, r2, #5
 8003e0a:	4602      	mov	r2, r0
 8003e0c:	460b      	mov	r3, r1
 8003e0e:	4621      	mov	r1, r4
 8003e10:	1a51      	subs	r1, r2, r1
 8003e12:	6439      	str	r1, [r7, #64]	@ 0x40
 8003e14:	4629      	mov	r1, r5
 8003e16:	eb63 0301 	sbc.w	r3, r3, r1
 8003e1a:	647b      	str	r3, [r7, #68]	@ 0x44
 8003e1c:	f04f 0200 	mov.w	r2, #0
 8003e20:	f04f 0300 	mov.w	r3, #0
 8003e24:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8003e28:	4649      	mov	r1, r9
 8003e2a:	018b      	lsls	r3, r1, #6
 8003e2c:	4641      	mov	r1, r8
 8003e2e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003e32:	4641      	mov	r1, r8
 8003e34:	018a      	lsls	r2, r1, #6
 8003e36:	4641      	mov	r1, r8
 8003e38:	1a51      	subs	r1, r2, r1
 8003e3a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003e3c:	4649      	mov	r1, r9
 8003e3e:	eb63 0301 	sbc.w	r3, r3, r1
 8003e42:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003e44:	f04f 0200 	mov.w	r2, #0
 8003e48:	f04f 0300 	mov.w	r3, #0
 8003e4c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8003e50:	4649      	mov	r1, r9
 8003e52:	00cb      	lsls	r3, r1, #3
 8003e54:	4641      	mov	r1, r8
 8003e56:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e5a:	4641      	mov	r1, r8
 8003e5c:	00ca      	lsls	r2, r1, #3
 8003e5e:	4610      	mov	r0, r2
 8003e60:	4619      	mov	r1, r3
 8003e62:	4603      	mov	r3, r0
 8003e64:	4622      	mov	r2, r4
 8003e66:	189b      	adds	r3, r3, r2
 8003e68:	633b      	str	r3, [r7, #48]	@ 0x30
 8003e6a:	462b      	mov	r3, r5
 8003e6c:	460a      	mov	r2, r1
 8003e6e:	eb42 0303 	adc.w	r3, r2, r3
 8003e72:	637b      	str	r3, [r7, #52]	@ 0x34
 8003e74:	f04f 0200 	mov.w	r2, #0
 8003e78:	f04f 0300 	mov.w	r3, #0
 8003e7c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003e80:	4629      	mov	r1, r5
 8003e82:	024b      	lsls	r3, r1, #9
 8003e84:	4621      	mov	r1, r4
 8003e86:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003e8a:	4621      	mov	r1, r4
 8003e8c:	024a      	lsls	r2, r1, #9
 8003e8e:	4610      	mov	r0, r2
 8003e90:	4619      	mov	r1, r3
 8003e92:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003e96:	2200      	movs	r2, #0
 8003e98:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003e9c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003ea0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8003ea4:	f7fc f9ae 	bl	8000204 <__aeabi_uldivmod>
 8003ea8:	4602      	mov	r2, r0
 8003eaa:	460b      	mov	r3, r1
 8003eac:	4613      	mov	r3, r2
 8003eae:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003eb2:	e067      	b.n	8003f84 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003eb4:	4b75      	ldr	r3, [pc, #468]	@ (800408c <HAL_RCC_GetSysClockFreq+0x354>)
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	099b      	lsrs	r3, r3, #6
 8003eba:	2200      	movs	r2, #0
 8003ebc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003ec0:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8003ec4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003ec8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ecc:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003ece:	2300      	movs	r3, #0
 8003ed0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003ed2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8003ed6:	4622      	mov	r2, r4
 8003ed8:	462b      	mov	r3, r5
 8003eda:	f04f 0000 	mov.w	r0, #0
 8003ede:	f04f 0100 	mov.w	r1, #0
 8003ee2:	0159      	lsls	r1, r3, #5
 8003ee4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ee8:	0150      	lsls	r0, r2, #5
 8003eea:	4602      	mov	r2, r0
 8003eec:	460b      	mov	r3, r1
 8003eee:	4621      	mov	r1, r4
 8003ef0:	1a51      	subs	r1, r2, r1
 8003ef2:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003ef4:	4629      	mov	r1, r5
 8003ef6:	eb63 0301 	sbc.w	r3, r3, r1
 8003efa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003efc:	f04f 0200 	mov.w	r2, #0
 8003f00:	f04f 0300 	mov.w	r3, #0
 8003f04:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8003f08:	4649      	mov	r1, r9
 8003f0a:	018b      	lsls	r3, r1, #6
 8003f0c:	4641      	mov	r1, r8
 8003f0e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003f12:	4641      	mov	r1, r8
 8003f14:	018a      	lsls	r2, r1, #6
 8003f16:	4641      	mov	r1, r8
 8003f18:	ebb2 0a01 	subs.w	sl, r2, r1
 8003f1c:	4649      	mov	r1, r9
 8003f1e:	eb63 0b01 	sbc.w	fp, r3, r1
 8003f22:	f04f 0200 	mov.w	r2, #0
 8003f26:	f04f 0300 	mov.w	r3, #0
 8003f2a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003f2e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003f32:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f36:	4692      	mov	sl, r2
 8003f38:	469b      	mov	fp, r3
 8003f3a:	4623      	mov	r3, r4
 8003f3c:	eb1a 0303 	adds.w	r3, sl, r3
 8003f40:	623b      	str	r3, [r7, #32]
 8003f42:	462b      	mov	r3, r5
 8003f44:	eb4b 0303 	adc.w	r3, fp, r3
 8003f48:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f4a:	f04f 0200 	mov.w	r2, #0
 8003f4e:	f04f 0300 	mov.w	r3, #0
 8003f52:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003f56:	4629      	mov	r1, r5
 8003f58:	028b      	lsls	r3, r1, #10
 8003f5a:	4621      	mov	r1, r4
 8003f5c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003f60:	4621      	mov	r1, r4
 8003f62:	028a      	lsls	r2, r1, #10
 8003f64:	4610      	mov	r0, r2
 8003f66:	4619      	mov	r1, r3
 8003f68:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	673b      	str	r3, [r7, #112]	@ 0x70
 8003f70:	677a      	str	r2, [r7, #116]	@ 0x74
 8003f72:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003f76:	f7fc f945 	bl	8000204 <__aeabi_uldivmod>
 8003f7a:	4602      	mov	r2, r0
 8003f7c:	460b      	mov	r3, r1
 8003f7e:	4613      	mov	r3, r2
 8003f80:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003f84:	4b41      	ldr	r3, [pc, #260]	@ (800408c <HAL_RCC_GetSysClockFreq+0x354>)
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	0c1b      	lsrs	r3, r3, #16
 8003f8a:	f003 0303 	and.w	r3, r3, #3
 8003f8e:	3301      	adds	r3, #1
 8003f90:	005b      	lsls	r3, r3, #1
 8003f92:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8003f96:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003f9a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003f9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fa2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003fa6:	e0eb      	b.n	8004180 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003fa8:	4b38      	ldr	r3, [pc, #224]	@ (800408c <HAL_RCC_GetSysClockFreq+0x354>)
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003fb0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003fb4:	4b35      	ldr	r3, [pc, #212]	@ (800408c <HAL_RCC_GetSysClockFreq+0x354>)
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d06b      	beq.n	8004098 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003fc0:	4b32      	ldr	r3, [pc, #200]	@ (800408c <HAL_RCC_GetSysClockFreq+0x354>)
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	099b      	lsrs	r3, r3, #6
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003fca:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003fcc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003fce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fd2:	663b      	str	r3, [r7, #96]	@ 0x60
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	667b      	str	r3, [r7, #100]	@ 0x64
 8003fd8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8003fdc:	4622      	mov	r2, r4
 8003fde:	462b      	mov	r3, r5
 8003fe0:	f04f 0000 	mov.w	r0, #0
 8003fe4:	f04f 0100 	mov.w	r1, #0
 8003fe8:	0159      	lsls	r1, r3, #5
 8003fea:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003fee:	0150      	lsls	r0, r2, #5
 8003ff0:	4602      	mov	r2, r0
 8003ff2:	460b      	mov	r3, r1
 8003ff4:	4621      	mov	r1, r4
 8003ff6:	1a51      	subs	r1, r2, r1
 8003ff8:	61b9      	str	r1, [r7, #24]
 8003ffa:	4629      	mov	r1, r5
 8003ffc:	eb63 0301 	sbc.w	r3, r3, r1
 8004000:	61fb      	str	r3, [r7, #28]
 8004002:	f04f 0200 	mov.w	r2, #0
 8004006:	f04f 0300 	mov.w	r3, #0
 800400a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800400e:	4659      	mov	r1, fp
 8004010:	018b      	lsls	r3, r1, #6
 8004012:	4651      	mov	r1, sl
 8004014:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004018:	4651      	mov	r1, sl
 800401a:	018a      	lsls	r2, r1, #6
 800401c:	4651      	mov	r1, sl
 800401e:	ebb2 0801 	subs.w	r8, r2, r1
 8004022:	4659      	mov	r1, fp
 8004024:	eb63 0901 	sbc.w	r9, r3, r1
 8004028:	f04f 0200 	mov.w	r2, #0
 800402c:	f04f 0300 	mov.w	r3, #0
 8004030:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004034:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004038:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800403c:	4690      	mov	r8, r2
 800403e:	4699      	mov	r9, r3
 8004040:	4623      	mov	r3, r4
 8004042:	eb18 0303 	adds.w	r3, r8, r3
 8004046:	613b      	str	r3, [r7, #16]
 8004048:	462b      	mov	r3, r5
 800404a:	eb49 0303 	adc.w	r3, r9, r3
 800404e:	617b      	str	r3, [r7, #20]
 8004050:	f04f 0200 	mov.w	r2, #0
 8004054:	f04f 0300 	mov.w	r3, #0
 8004058:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800405c:	4629      	mov	r1, r5
 800405e:	024b      	lsls	r3, r1, #9
 8004060:	4621      	mov	r1, r4
 8004062:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004066:	4621      	mov	r1, r4
 8004068:	024a      	lsls	r2, r1, #9
 800406a:	4610      	mov	r0, r2
 800406c:	4619      	mov	r1, r3
 800406e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004072:	2200      	movs	r2, #0
 8004074:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004076:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8004078:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800407c:	f7fc f8c2 	bl	8000204 <__aeabi_uldivmod>
 8004080:	4602      	mov	r2, r0
 8004082:	460b      	mov	r3, r1
 8004084:	4613      	mov	r3, r2
 8004086:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800408a:	e065      	b.n	8004158 <HAL_RCC_GetSysClockFreq+0x420>
 800408c:	40023800 	.word	0x40023800
 8004090:	00f42400 	.word	0x00f42400
 8004094:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004098:	4b3d      	ldr	r3, [pc, #244]	@ (8004190 <HAL_RCC_GetSysClockFreq+0x458>)
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	099b      	lsrs	r3, r3, #6
 800409e:	2200      	movs	r2, #0
 80040a0:	4618      	mov	r0, r3
 80040a2:	4611      	mov	r1, r2
 80040a4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80040a8:	653b      	str	r3, [r7, #80]	@ 0x50
 80040aa:	2300      	movs	r3, #0
 80040ac:	657b      	str	r3, [r7, #84]	@ 0x54
 80040ae:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80040b2:	4642      	mov	r2, r8
 80040b4:	464b      	mov	r3, r9
 80040b6:	f04f 0000 	mov.w	r0, #0
 80040ba:	f04f 0100 	mov.w	r1, #0
 80040be:	0159      	lsls	r1, r3, #5
 80040c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80040c4:	0150      	lsls	r0, r2, #5
 80040c6:	4602      	mov	r2, r0
 80040c8:	460b      	mov	r3, r1
 80040ca:	4641      	mov	r1, r8
 80040cc:	1a51      	subs	r1, r2, r1
 80040ce:	60b9      	str	r1, [r7, #8]
 80040d0:	4649      	mov	r1, r9
 80040d2:	eb63 0301 	sbc.w	r3, r3, r1
 80040d6:	60fb      	str	r3, [r7, #12]
 80040d8:	f04f 0200 	mov.w	r2, #0
 80040dc:	f04f 0300 	mov.w	r3, #0
 80040e0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80040e4:	4659      	mov	r1, fp
 80040e6:	018b      	lsls	r3, r1, #6
 80040e8:	4651      	mov	r1, sl
 80040ea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80040ee:	4651      	mov	r1, sl
 80040f0:	018a      	lsls	r2, r1, #6
 80040f2:	4651      	mov	r1, sl
 80040f4:	1a54      	subs	r4, r2, r1
 80040f6:	4659      	mov	r1, fp
 80040f8:	eb63 0501 	sbc.w	r5, r3, r1
 80040fc:	f04f 0200 	mov.w	r2, #0
 8004100:	f04f 0300 	mov.w	r3, #0
 8004104:	00eb      	lsls	r3, r5, #3
 8004106:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800410a:	00e2      	lsls	r2, r4, #3
 800410c:	4614      	mov	r4, r2
 800410e:	461d      	mov	r5, r3
 8004110:	4643      	mov	r3, r8
 8004112:	18e3      	adds	r3, r4, r3
 8004114:	603b      	str	r3, [r7, #0]
 8004116:	464b      	mov	r3, r9
 8004118:	eb45 0303 	adc.w	r3, r5, r3
 800411c:	607b      	str	r3, [r7, #4]
 800411e:	f04f 0200 	mov.w	r2, #0
 8004122:	f04f 0300 	mov.w	r3, #0
 8004126:	e9d7 4500 	ldrd	r4, r5, [r7]
 800412a:	4629      	mov	r1, r5
 800412c:	028b      	lsls	r3, r1, #10
 800412e:	4621      	mov	r1, r4
 8004130:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004134:	4621      	mov	r1, r4
 8004136:	028a      	lsls	r2, r1, #10
 8004138:	4610      	mov	r0, r2
 800413a:	4619      	mov	r1, r3
 800413c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004140:	2200      	movs	r2, #0
 8004142:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004144:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8004146:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800414a:	f7fc f85b 	bl	8000204 <__aeabi_uldivmod>
 800414e:	4602      	mov	r2, r0
 8004150:	460b      	mov	r3, r1
 8004152:	4613      	mov	r3, r2
 8004154:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004158:	4b0d      	ldr	r3, [pc, #52]	@ (8004190 <HAL_RCC_GetSysClockFreq+0x458>)
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	0f1b      	lsrs	r3, r3, #28
 800415e:	f003 0307 	and.w	r3, r3, #7
 8004162:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8004166:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800416a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800416e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004172:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004176:	e003      	b.n	8004180 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004178:	4b06      	ldr	r3, [pc, #24]	@ (8004194 <HAL_RCC_GetSysClockFreq+0x45c>)
 800417a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800417e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004180:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8004184:	4618      	mov	r0, r3
 8004186:	37b8      	adds	r7, #184	@ 0xb8
 8004188:	46bd      	mov	sp, r7
 800418a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800418e:	bf00      	nop
 8004190:	40023800 	.word	0x40023800
 8004194:	00f42400 	.word	0x00f42400

08004198 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b086      	sub	sp, #24
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d101      	bne.n	80041aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	e28d      	b.n	80046c6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f003 0301 	and.w	r3, r3, #1
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	f000 8083 	beq.w	80042be <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80041b8:	4b94      	ldr	r3, [pc, #592]	@ (800440c <HAL_RCC_OscConfig+0x274>)
 80041ba:	689b      	ldr	r3, [r3, #8]
 80041bc:	f003 030c 	and.w	r3, r3, #12
 80041c0:	2b04      	cmp	r3, #4
 80041c2:	d019      	beq.n	80041f8 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80041c4:	4b91      	ldr	r3, [pc, #580]	@ (800440c <HAL_RCC_OscConfig+0x274>)
 80041c6:	689b      	ldr	r3, [r3, #8]
 80041c8:	f003 030c 	and.w	r3, r3, #12
        || \
 80041cc:	2b08      	cmp	r3, #8
 80041ce:	d106      	bne.n	80041de <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80041d0:	4b8e      	ldr	r3, [pc, #568]	@ (800440c <HAL_RCC_OscConfig+0x274>)
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80041d8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80041dc:	d00c      	beq.n	80041f8 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80041de:	4b8b      	ldr	r3, [pc, #556]	@ (800440c <HAL_RCC_OscConfig+0x274>)
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80041e6:	2b0c      	cmp	r3, #12
 80041e8:	d112      	bne.n	8004210 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80041ea:	4b88      	ldr	r3, [pc, #544]	@ (800440c <HAL_RCC_OscConfig+0x274>)
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80041f2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80041f6:	d10b      	bne.n	8004210 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041f8:	4b84      	ldr	r3, [pc, #528]	@ (800440c <HAL_RCC_OscConfig+0x274>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004200:	2b00      	cmp	r3, #0
 8004202:	d05b      	beq.n	80042bc <HAL_RCC_OscConfig+0x124>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d157      	bne.n	80042bc <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800420c:	2301      	movs	r3, #1
 800420e:	e25a      	b.n	80046c6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004218:	d106      	bne.n	8004228 <HAL_RCC_OscConfig+0x90>
 800421a:	4b7c      	ldr	r3, [pc, #496]	@ (800440c <HAL_RCC_OscConfig+0x274>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a7b      	ldr	r2, [pc, #492]	@ (800440c <HAL_RCC_OscConfig+0x274>)
 8004220:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004224:	6013      	str	r3, [r2, #0]
 8004226:	e01d      	b.n	8004264 <HAL_RCC_OscConfig+0xcc>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004230:	d10c      	bne.n	800424c <HAL_RCC_OscConfig+0xb4>
 8004232:	4b76      	ldr	r3, [pc, #472]	@ (800440c <HAL_RCC_OscConfig+0x274>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a75      	ldr	r2, [pc, #468]	@ (800440c <HAL_RCC_OscConfig+0x274>)
 8004238:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800423c:	6013      	str	r3, [r2, #0]
 800423e:	4b73      	ldr	r3, [pc, #460]	@ (800440c <HAL_RCC_OscConfig+0x274>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a72      	ldr	r2, [pc, #456]	@ (800440c <HAL_RCC_OscConfig+0x274>)
 8004244:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004248:	6013      	str	r3, [r2, #0]
 800424a:	e00b      	b.n	8004264 <HAL_RCC_OscConfig+0xcc>
 800424c:	4b6f      	ldr	r3, [pc, #444]	@ (800440c <HAL_RCC_OscConfig+0x274>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a6e      	ldr	r2, [pc, #440]	@ (800440c <HAL_RCC_OscConfig+0x274>)
 8004252:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004256:	6013      	str	r3, [r2, #0]
 8004258:	4b6c      	ldr	r3, [pc, #432]	@ (800440c <HAL_RCC_OscConfig+0x274>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a6b      	ldr	r2, [pc, #428]	@ (800440c <HAL_RCC_OscConfig+0x274>)
 800425e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004262:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d013      	beq.n	8004294 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800426c:	f7fd f908 	bl	8001480 <HAL_GetTick>
 8004270:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004272:	e008      	b.n	8004286 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004274:	f7fd f904 	bl	8001480 <HAL_GetTick>
 8004278:	4602      	mov	r2, r0
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	1ad3      	subs	r3, r2, r3
 800427e:	2b64      	cmp	r3, #100	@ 0x64
 8004280:	d901      	bls.n	8004286 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004282:	2303      	movs	r3, #3
 8004284:	e21f      	b.n	80046c6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004286:	4b61      	ldr	r3, [pc, #388]	@ (800440c <HAL_RCC_OscConfig+0x274>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800428e:	2b00      	cmp	r3, #0
 8004290:	d0f0      	beq.n	8004274 <HAL_RCC_OscConfig+0xdc>
 8004292:	e014      	b.n	80042be <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004294:	f7fd f8f4 	bl	8001480 <HAL_GetTick>
 8004298:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800429a:	e008      	b.n	80042ae <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800429c:	f7fd f8f0 	bl	8001480 <HAL_GetTick>
 80042a0:	4602      	mov	r2, r0
 80042a2:	693b      	ldr	r3, [r7, #16]
 80042a4:	1ad3      	subs	r3, r2, r3
 80042a6:	2b64      	cmp	r3, #100	@ 0x64
 80042a8:	d901      	bls.n	80042ae <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80042aa:	2303      	movs	r3, #3
 80042ac:	e20b      	b.n	80046c6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042ae:	4b57      	ldr	r3, [pc, #348]	@ (800440c <HAL_RCC_OscConfig+0x274>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d1f0      	bne.n	800429c <HAL_RCC_OscConfig+0x104>
 80042ba:	e000      	b.n	80042be <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f003 0302 	and.w	r3, r3, #2
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d06f      	beq.n	80043aa <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80042ca:	4b50      	ldr	r3, [pc, #320]	@ (800440c <HAL_RCC_OscConfig+0x274>)
 80042cc:	689b      	ldr	r3, [r3, #8]
 80042ce:	f003 030c 	and.w	r3, r3, #12
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d017      	beq.n	8004306 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80042d6:	4b4d      	ldr	r3, [pc, #308]	@ (800440c <HAL_RCC_OscConfig+0x274>)
 80042d8:	689b      	ldr	r3, [r3, #8]
 80042da:	f003 030c 	and.w	r3, r3, #12
        || \
 80042de:	2b08      	cmp	r3, #8
 80042e0:	d105      	bne.n	80042ee <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80042e2:	4b4a      	ldr	r3, [pc, #296]	@ (800440c <HAL_RCC_OscConfig+0x274>)
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d00b      	beq.n	8004306 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80042ee:	4b47      	ldr	r3, [pc, #284]	@ (800440c <HAL_RCC_OscConfig+0x274>)
 80042f0:	689b      	ldr	r3, [r3, #8]
 80042f2:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80042f6:	2b0c      	cmp	r3, #12
 80042f8:	d11c      	bne.n	8004334 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80042fa:	4b44      	ldr	r3, [pc, #272]	@ (800440c <HAL_RCC_OscConfig+0x274>)
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004302:	2b00      	cmp	r3, #0
 8004304:	d116      	bne.n	8004334 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004306:	4b41      	ldr	r3, [pc, #260]	@ (800440c <HAL_RCC_OscConfig+0x274>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f003 0302 	and.w	r3, r3, #2
 800430e:	2b00      	cmp	r3, #0
 8004310:	d005      	beq.n	800431e <HAL_RCC_OscConfig+0x186>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	68db      	ldr	r3, [r3, #12]
 8004316:	2b01      	cmp	r3, #1
 8004318:	d001      	beq.n	800431e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800431a:	2301      	movs	r3, #1
 800431c:	e1d3      	b.n	80046c6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800431e:	4b3b      	ldr	r3, [pc, #236]	@ (800440c <HAL_RCC_OscConfig+0x274>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	691b      	ldr	r3, [r3, #16]
 800432a:	00db      	lsls	r3, r3, #3
 800432c:	4937      	ldr	r1, [pc, #220]	@ (800440c <HAL_RCC_OscConfig+0x274>)
 800432e:	4313      	orrs	r3, r2
 8004330:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004332:	e03a      	b.n	80043aa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	68db      	ldr	r3, [r3, #12]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d020      	beq.n	800437e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800433c:	4b34      	ldr	r3, [pc, #208]	@ (8004410 <HAL_RCC_OscConfig+0x278>)
 800433e:	2201      	movs	r2, #1
 8004340:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004342:	f7fd f89d 	bl	8001480 <HAL_GetTick>
 8004346:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004348:	e008      	b.n	800435c <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800434a:	f7fd f899 	bl	8001480 <HAL_GetTick>
 800434e:	4602      	mov	r2, r0
 8004350:	693b      	ldr	r3, [r7, #16]
 8004352:	1ad3      	subs	r3, r2, r3
 8004354:	2b02      	cmp	r3, #2
 8004356:	d901      	bls.n	800435c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004358:	2303      	movs	r3, #3
 800435a:	e1b4      	b.n	80046c6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800435c:	4b2b      	ldr	r3, [pc, #172]	@ (800440c <HAL_RCC_OscConfig+0x274>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f003 0302 	and.w	r3, r3, #2
 8004364:	2b00      	cmp	r3, #0
 8004366:	d0f0      	beq.n	800434a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004368:	4b28      	ldr	r3, [pc, #160]	@ (800440c <HAL_RCC_OscConfig+0x274>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	691b      	ldr	r3, [r3, #16]
 8004374:	00db      	lsls	r3, r3, #3
 8004376:	4925      	ldr	r1, [pc, #148]	@ (800440c <HAL_RCC_OscConfig+0x274>)
 8004378:	4313      	orrs	r3, r2
 800437a:	600b      	str	r3, [r1, #0]
 800437c:	e015      	b.n	80043aa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800437e:	4b24      	ldr	r3, [pc, #144]	@ (8004410 <HAL_RCC_OscConfig+0x278>)
 8004380:	2200      	movs	r2, #0
 8004382:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004384:	f7fd f87c 	bl	8001480 <HAL_GetTick>
 8004388:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800438a:	e008      	b.n	800439e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800438c:	f7fd f878 	bl	8001480 <HAL_GetTick>
 8004390:	4602      	mov	r2, r0
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	1ad3      	subs	r3, r2, r3
 8004396:	2b02      	cmp	r3, #2
 8004398:	d901      	bls.n	800439e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800439a:	2303      	movs	r3, #3
 800439c:	e193      	b.n	80046c6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800439e:	4b1b      	ldr	r3, [pc, #108]	@ (800440c <HAL_RCC_OscConfig+0x274>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f003 0302 	and.w	r3, r3, #2
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d1f0      	bne.n	800438c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f003 0308 	and.w	r3, r3, #8
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d036      	beq.n	8004424 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	695b      	ldr	r3, [r3, #20]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d016      	beq.n	80043ec <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80043be:	4b15      	ldr	r3, [pc, #84]	@ (8004414 <HAL_RCC_OscConfig+0x27c>)
 80043c0:	2201      	movs	r2, #1
 80043c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043c4:	f7fd f85c 	bl	8001480 <HAL_GetTick>
 80043c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043ca:	e008      	b.n	80043de <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043cc:	f7fd f858 	bl	8001480 <HAL_GetTick>
 80043d0:	4602      	mov	r2, r0
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	1ad3      	subs	r3, r2, r3
 80043d6:	2b02      	cmp	r3, #2
 80043d8:	d901      	bls.n	80043de <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80043da:	2303      	movs	r3, #3
 80043dc:	e173      	b.n	80046c6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043de:	4b0b      	ldr	r3, [pc, #44]	@ (800440c <HAL_RCC_OscConfig+0x274>)
 80043e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80043e2:	f003 0302 	and.w	r3, r3, #2
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d0f0      	beq.n	80043cc <HAL_RCC_OscConfig+0x234>
 80043ea:	e01b      	b.n	8004424 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043ec:	4b09      	ldr	r3, [pc, #36]	@ (8004414 <HAL_RCC_OscConfig+0x27c>)
 80043ee:	2200      	movs	r2, #0
 80043f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043f2:	f7fd f845 	bl	8001480 <HAL_GetTick>
 80043f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043f8:	e00e      	b.n	8004418 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043fa:	f7fd f841 	bl	8001480 <HAL_GetTick>
 80043fe:	4602      	mov	r2, r0
 8004400:	693b      	ldr	r3, [r7, #16]
 8004402:	1ad3      	subs	r3, r2, r3
 8004404:	2b02      	cmp	r3, #2
 8004406:	d907      	bls.n	8004418 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004408:	2303      	movs	r3, #3
 800440a:	e15c      	b.n	80046c6 <HAL_RCC_OscConfig+0x52e>
 800440c:	40023800 	.word	0x40023800
 8004410:	42470000 	.word	0x42470000
 8004414:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004418:	4b8a      	ldr	r3, [pc, #552]	@ (8004644 <HAL_RCC_OscConfig+0x4ac>)
 800441a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800441c:	f003 0302 	and.w	r3, r3, #2
 8004420:	2b00      	cmp	r3, #0
 8004422:	d1ea      	bne.n	80043fa <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f003 0304 	and.w	r3, r3, #4
 800442c:	2b00      	cmp	r3, #0
 800442e:	f000 8097 	beq.w	8004560 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004432:	2300      	movs	r3, #0
 8004434:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004436:	4b83      	ldr	r3, [pc, #524]	@ (8004644 <HAL_RCC_OscConfig+0x4ac>)
 8004438:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800443a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800443e:	2b00      	cmp	r3, #0
 8004440:	d10f      	bne.n	8004462 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004442:	2300      	movs	r3, #0
 8004444:	60bb      	str	r3, [r7, #8]
 8004446:	4b7f      	ldr	r3, [pc, #508]	@ (8004644 <HAL_RCC_OscConfig+0x4ac>)
 8004448:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800444a:	4a7e      	ldr	r2, [pc, #504]	@ (8004644 <HAL_RCC_OscConfig+0x4ac>)
 800444c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004450:	6413      	str	r3, [r2, #64]	@ 0x40
 8004452:	4b7c      	ldr	r3, [pc, #496]	@ (8004644 <HAL_RCC_OscConfig+0x4ac>)
 8004454:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004456:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800445a:	60bb      	str	r3, [r7, #8]
 800445c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800445e:	2301      	movs	r3, #1
 8004460:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004462:	4b79      	ldr	r3, [pc, #484]	@ (8004648 <HAL_RCC_OscConfig+0x4b0>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800446a:	2b00      	cmp	r3, #0
 800446c:	d118      	bne.n	80044a0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800446e:	4b76      	ldr	r3, [pc, #472]	@ (8004648 <HAL_RCC_OscConfig+0x4b0>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a75      	ldr	r2, [pc, #468]	@ (8004648 <HAL_RCC_OscConfig+0x4b0>)
 8004474:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004478:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800447a:	f7fd f801 	bl	8001480 <HAL_GetTick>
 800447e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004480:	e008      	b.n	8004494 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004482:	f7fc fffd 	bl	8001480 <HAL_GetTick>
 8004486:	4602      	mov	r2, r0
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	1ad3      	subs	r3, r2, r3
 800448c:	2b02      	cmp	r3, #2
 800448e:	d901      	bls.n	8004494 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004490:	2303      	movs	r3, #3
 8004492:	e118      	b.n	80046c6 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004494:	4b6c      	ldr	r3, [pc, #432]	@ (8004648 <HAL_RCC_OscConfig+0x4b0>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800449c:	2b00      	cmp	r3, #0
 800449e:	d0f0      	beq.n	8004482 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	689b      	ldr	r3, [r3, #8]
 80044a4:	2b01      	cmp	r3, #1
 80044a6:	d106      	bne.n	80044b6 <HAL_RCC_OscConfig+0x31e>
 80044a8:	4b66      	ldr	r3, [pc, #408]	@ (8004644 <HAL_RCC_OscConfig+0x4ac>)
 80044aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044ac:	4a65      	ldr	r2, [pc, #404]	@ (8004644 <HAL_RCC_OscConfig+0x4ac>)
 80044ae:	f043 0301 	orr.w	r3, r3, #1
 80044b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80044b4:	e01c      	b.n	80044f0 <HAL_RCC_OscConfig+0x358>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	2b05      	cmp	r3, #5
 80044bc:	d10c      	bne.n	80044d8 <HAL_RCC_OscConfig+0x340>
 80044be:	4b61      	ldr	r3, [pc, #388]	@ (8004644 <HAL_RCC_OscConfig+0x4ac>)
 80044c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044c2:	4a60      	ldr	r2, [pc, #384]	@ (8004644 <HAL_RCC_OscConfig+0x4ac>)
 80044c4:	f043 0304 	orr.w	r3, r3, #4
 80044c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80044ca:	4b5e      	ldr	r3, [pc, #376]	@ (8004644 <HAL_RCC_OscConfig+0x4ac>)
 80044cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044ce:	4a5d      	ldr	r2, [pc, #372]	@ (8004644 <HAL_RCC_OscConfig+0x4ac>)
 80044d0:	f043 0301 	orr.w	r3, r3, #1
 80044d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80044d6:	e00b      	b.n	80044f0 <HAL_RCC_OscConfig+0x358>
 80044d8:	4b5a      	ldr	r3, [pc, #360]	@ (8004644 <HAL_RCC_OscConfig+0x4ac>)
 80044da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044dc:	4a59      	ldr	r2, [pc, #356]	@ (8004644 <HAL_RCC_OscConfig+0x4ac>)
 80044de:	f023 0301 	bic.w	r3, r3, #1
 80044e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80044e4:	4b57      	ldr	r3, [pc, #348]	@ (8004644 <HAL_RCC_OscConfig+0x4ac>)
 80044e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044e8:	4a56      	ldr	r2, [pc, #344]	@ (8004644 <HAL_RCC_OscConfig+0x4ac>)
 80044ea:	f023 0304 	bic.w	r3, r3, #4
 80044ee:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	689b      	ldr	r3, [r3, #8]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d015      	beq.n	8004524 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044f8:	f7fc ffc2 	bl	8001480 <HAL_GetTick>
 80044fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044fe:	e00a      	b.n	8004516 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004500:	f7fc ffbe 	bl	8001480 <HAL_GetTick>
 8004504:	4602      	mov	r2, r0
 8004506:	693b      	ldr	r3, [r7, #16]
 8004508:	1ad3      	subs	r3, r2, r3
 800450a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800450e:	4293      	cmp	r3, r2
 8004510:	d901      	bls.n	8004516 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004512:	2303      	movs	r3, #3
 8004514:	e0d7      	b.n	80046c6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004516:	4b4b      	ldr	r3, [pc, #300]	@ (8004644 <HAL_RCC_OscConfig+0x4ac>)
 8004518:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800451a:	f003 0302 	and.w	r3, r3, #2
 800451e:	2b00      	cmp	r3, #0
 8004520:	d0ee      	beq.n	8004500 <HAL_RCC_OscConfig+0x368>
 8004522:	e014      	b.n	800454e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004524:	f7fc ffac 	bl	8001480 <HAL_GetTick>
 8004528:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800452a:	e00a      	b.n	8004542 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800452c:	f7fc ffa8 	bl	8001480 <HAL_GetTick>
 8004530:	4602      	mov	r2, r0
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	1ad3      	subs	r3, r2, r3
 8004536:	f241 3288 	movw	r2, #5000	@ 0x1388
 800453a:	4293      	cmp	r3, r2
 800453c:	d901      	bls.n	8004542 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800453e:	2303      	movs	r3, #3
 8004540:	e0c1      	b.n	80046c6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004542:	4b40      	ldr	r3, [pc, #256]	@ (8004644 <HAL_RCC_OscConfig+0x4ac>)
 8004544:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004546:	f003 0302 	and.w	r3, r3, #2
 800454a:	2b00      	cmp	r3, #0
 800454c:	d1ee      	bne.n	800452c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800454e:	7dfb      	ldrb	r3, [r7, #23]
 8004550:	2b01      	cmp	r3, #1
 8004552:	d105      	bne.n	8004560 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004554:	4b3b      	ldr	r3, [pc, #236]	@ (8004644 <HAL_RCC_OscConfig+0x4ac>)
 8004556:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004558:	4a3a      	ldr	r2, [pc, #232]	@ (8004644 <HAL_RCC_OscConfig+0x4ac>)
 800455a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800455e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	699b      	ldr	r3, [r3, #24]
 8004564:	2b00      	cmp	r3, #0
 8004566:	f000 80ad 	beq.w	80046c4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800456a:	4b36      	ldr	r3, [pc, #216]	@ (8004644 <HAL_RCC_OscConfig+0x4ac>)
 800456c:	689b      	ldr	r3, [r3, #8]
 800456e:	f003 030c 	and.w	r3, r3, #12
 8004572:	2b08      	cmp	r3, #8
 8004574:	d060      	beq.n	8004638 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	699b      	ldr	r3, [r3, #24]
 800457a:	2b02      	cmp	r3, #2
 800457c:	d145      	bne.n	800460a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800457e:	4b33      	ldr	r3, [pc, #204]	@ (800464c <HAL_RCC_OscConfig+0x4b4>)
 8004580:	2200      	movs	r2, #0
 8004582:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004584:	f7fc ff7c 	bl	8001480 <HAL_GetTick>
 8004588:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800458a:	e008      	b.n	800459e <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800458c:	f7fc ff78 	bl	8001480 <HAL_GetTick>
 8004590:	4602      	mov	r2, r0
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	1ad3      	subs	r3, r2, r3
 8004596:	2b02      	cmp	r3, #2
 8004598:	d901      	bls.n	800459e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800459a:	2303      	movs	r3, #3
 800459c:	e093      	b.n	80046c6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800459e:	4b29      	ldr	r3, [pc, #164]	@ (8004644 <HAL_RCC_OscConfig+0x4ac>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d1f0      	bne.n	800458c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	69da      	ldr	r2, [r3, #28]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6a1b      	ldr	r3, [r3, #32]
 80045b2:	431a      	orrs	r2, r3
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045b8:	019b      	lsls	r3, r3, #6
 80045ba:	431a      	orrs	r2, r3
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045c0:	085b      	lsrs	r3, r3, #1
 80045c2:	3b01      	subs	r3, #1
 80045c4:	041b      	lsls	r3, r3, #16
 80045c6:	431a      	orrs	r2, r3
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045cc:	061b      	lsls	r3, r3, #24
 80045ce:	431a      	orrs	r2, r3
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045d4:	071b      	lsls	r3, r3, #28
 80045d6:	491b      	ldr	r1, [pc, #108]	@ (8004644 <HAL_RCC_OscConfig+0x4ac>)
 80045d8:	4313      	orrs	r3, r2
 80045da:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80045dc:	4b1b      	ldr	r3, [pc, #108]	@ (800464c <HAL_RCC_OscConfig+0x4b4>)
 80045de:	2201      	movs	r2, #1
 80045e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045e2:	f7fc ff4d 	bl	8001480 <HAL_GetTick>
 80045e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045e8:	e008      	b.n	80045fc <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045ea:	f7fc ff49 	bl	8001480 <HAL_GetTick>
 80045ee:	4602      	mov	r2, r0
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	1ad3      	subs	r3, r2, r3
 80045f4:	2b02      	cmp	r3, #2
 80045f6:	d901      	bls.n	80045fc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80045f8:	2303      	movs	r3, #3
 80045fa:	e064      	b.n	80046c6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045fc:	4b11      	ldr	r3, [pc, #68]	@ (8004644 <HAL_RCC_OscConfig+0x4ac>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004604:	2b00      	cmp	r3, #0
 8004606:	d0f0      	beq.n	80045ea <HAL_RCC_OscConfig+0x452>
 8004608:	e05c      	b.n	80046c4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800460a:	4b10      	ldr	r3, [pc, #64]	@ (800464c <HAL_RCC_OscConfig+0x4b4>)
 800460c:	2200      	movs	r2, #0
 800460e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004610:	f7fc ff36 	bl	8001480 <HAL_GetTick>
 8004614:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004616:	e008      	b.n	800462a <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004618:	f7fc ff32 	bl	8001480 <HAL_GetTick>
 800461c:	4602      	mov	r2, r0
 800461e:	693b      	ldr	r3, [r7, #16]
 8004620:	1ad3      	subs	r3, r2, r3
 8004622:	2b02      	cmp	r3, #2
 8004624:	d901      	bls.n	800462a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004626:	2303      	movs	r3, #3
 8004628:	e04d      	b.n	80046c6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800462a:	4b06      	ldr	r3, [pc, #24]	@ (8004644 <HAL_RCC_OscConfig+0x4ac>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004632:	2b00      	cmp	r3, #0
 8004634:	d1f0      	bne.n	8004618 <HAL_RCC_OscConfig+0x480>
 8004636:	e045      	b.n	80046c4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	699b      	ldr	r3, [r3, #24]
 800463c:	2b01      	cmp	r3, #1
 800463e:	d107      	bne.n	8004650 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004640:	2301      	movs	r3, #1
 8004642:	e040      	b.n	80046c6 <HAL_RCC_OscConfig+0x52e>
 8004644:	40023800 	.word	0x40023800
 8004648:	40007000 	.word	0x40007000
 800464c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004650:	4b1f      	ldr	r3, [pc, #124]	@ (80046d0 <HAL_RCC_OscConfig+0x538>)
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	699b      	ldr	r3, [r3, #24]
 800465a:	2b01      	cmp	r3, #1
 800465c:	d030      	beq.n	80046c0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004668:	429a      	cmp	r2, r3
 800466a:	d129      	bne.n	80046c0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004676:	429a      	cmp	r2, r3
 8004678:	d122      	bne.n	80046c0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800467a:	68fa      	ldr	r2, [r7, #12]
 800467c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004680:	4013      	ands	r3, r2
 8004682:	687a      	ldr	r2, [r7, #4]
 8004684:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004686:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004688:	4293      	cmp	r3, r2
 800468a:	d119      	bne.n	80046c0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004696:	085b      	lsrs	r3, r3, #1
 8004698:	3b01      	subs	r3, #1
 800469a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800469c:	429a      	cmp	r2, r3
 800469e:	d10f      	bne.n	80046c0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046aa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80046ac:	429a      	cmp	r2, r3
 80046ae:	d107      	bne.n	80046c0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046ba:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80046bc:	429a      	cmp	r2, r3
 80046be:	d001      	beq.n	80046c4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80046c0:	2301      	movs	r3, #1
 80046c2:	e000      	b.n	80046c6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80046c4:	2300      	movs	r3, #0
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	3718      	adds	r7, #24
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}
 80046ce:	bf00      	nop
 80046d0:	40023800 	.word	0x40023800

080046d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b082      	sub	sp, #8
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d101      	bne.n	80046e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80046e2:	2301      	movs	r3, #1
 80046e4:	e041      	b.n	800476a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80046ec:	b2db      	uxtb	r3, r3
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d106      	bne.n	8004700 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2200      	movs	r2, #0
 80046f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80046fa:	6878      	ldr	r0, [r7, #4]
 80046fc:	f7fc fcaa 	bl	8001054 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2202      	movs	r2, #2
 8004704:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681a      	ldr	r2, [r3, #0]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	3304      	adds	r3, #4
 8004710:	4619      	mov	r1, r3
 8004712:	4610      	mov	r0, r2
 8004714:	f000 faca 	bl	8004cac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2201      	movs	r2, #1
 800471c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2201      	movs	r2, #1
 8004724:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2201      	movs	r2, #1
 800472c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2201      	movs	r2, #1
 8004734:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2201      	movs	r2, #1
 800473c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2201      	movs	r2, #1
 8004744:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2201      	movs	r2, #1
 800474c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2201      	movs	r2, #1
 8004754:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2201      	movs	r2, #1
 800475c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2201      	movs	r2, #1
 8004764:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004768:	2300      	movs	r3, #0
}
 800476a:	4618      	mov	r0, r3
 800476c:	3708      	adds	r7, #8
 800476e:	46bd      	mov	sp, r7
 8004770:	bd80      	pop	{r7, pc}
	...

08004774 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004774:	b480      	push	{r7}
 8004776:	b085      	sub	sp, #20
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004782:	b2db      	uxtb	r3, r3
 8004784:	2b01      	cmp	r3, #1
 8004786:	d001      	beq.n	800478c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004788:	2301      	movs	r3, #1
 800478a:	e04e      	b.n	800482a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2202      	movs	r2, #2
 8004790:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	68da      	ldr	r2, [r3, #12]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f042 0201 	orr.w	r2, r2, #1
 80047a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a23      	ldr	r2, [pc, #140]	@ (8004838 <HAL_TIM_Base_Start_IT+0xc4>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d022      	beq.n	80047f4 <HAL_TIM_Base_Start_IT+0x80>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80047b6:	d01d      	beq.n	80047f4 <HAL_TIM_Base_Start_IT+0x80>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a1f      	ldr	r2, [pc, #124]	@ (800483c <HAL_TIM_Base_Start_IT+0xc8>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d018      	beq.n	80047f4 <HAL_TIM_Base_Start_IT+0x80>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a1e      	ldr	r2, [pc, #120]	@ (8004840 <HAL_TIM_Base_Start_IT+0xcc>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d013      	beq.n	80047f4 <HAL_TIM_Base_Start_IT+0x80>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a1c      	ldr	r2, [pc, #112]	@ (8004844 <HAL_TIM_Base_Start_IT+0xd0>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d00e      	beq.n	80047f4 <HAL_TIM_Base_Start_IT+0x80>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4a1b      	ldr	r2, [pc, #108]	@ (8004848 <HAL_TIM_Base_Start_IT+0xd4>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d009      	beq.n	80047f4 <HAL_TIM_Base_Start_IT+0x80>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a19      	ldr	r2, [pc, #100]	@ (800484c <HAL_TIM_Base_Start_IT+0xd8>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d004      	beq.n	80047f4 <HAL_TIM_Base_Start_IT+0x80>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4a18      	ldr	r2, [pc, #96]	@ (8004850 <HAL_TIM_Base_Start_IT+0xdc>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d111      	bne.n	8004818 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	689b      	ldr	r3, [r3, #8]
 80047fa:	f003 0307 	and.w	r3, r3, #7
 80047fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	2b06      	cmp	r3, #6
 8004804:	d010      	beq.n	8004828 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	681a      	ldr	r2, [r3, #0]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f042 0201 	orr.w	r2, r2, #1
 8004814:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004816:	e007      	b.n	8004828 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	681a      	ldr	r2, [r3, #0]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f042 0201 	orr.w	r2, r2, #1
 8004826:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004828:	2300      	movs	r3, #0
}
 800482a:	4618      	mov	r0, r3
 800482c:	3714      	adds	r7, #20
 800482e:	46bd      	mov	sp, r7
 8004830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004834:	4770      	bx	lr
 8004836:	bf00      	nop
 8004838:	40010000 	.word	0x40010000
 800483c:	40000400 	.word	0x40000400
 8004840:	40000800 	.word	0x40000800
 8004844:	40000c00 	.word	0x40000c00
 8004848:	40010400 	.word	0x40010400
 800484c:	40014000 	.word	0x40014000
 8004850:	40001800 	.word	0x40001800

08004854 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b084      	sub	sp, #16
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	68db      	ldr	r3, [r3, #12]
 8004862:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	691b      	ldr	r3, [r3, #16]
 800486a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	f003 0302 	and.w	r3, r3, #2
 8004872:	2b00      	cmp	r3, #0
 8004874:	d020      	beq.n	80048b8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	f003 0302 	and.w	r3, r3, #2
 800487c:	2b00      	cmp	r3, #0
 800487e:	d01b      	beq.n	80048b8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f06f 0202 	mvn.w	r2, #2
 8004888:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2201      	movs	r2, #1
 800488e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	699b      	ldr	r3, [r3, #24]
 8004896:	f003 0303 	and.w	r3, r3, #3
 800489a:	2b00      	cmp	r3, #0
 800489c:	d003      	beq.n	80048a6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800489e:	6878      	ldr	r0, [r7, #4]
 80048a0:	f000 f9e5 	bl	8004c6e <HAL_TIM_IC_CaptureCallback>
 80048a4:	e005      	b.n	80048b2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80048a6:	6878      	ldr	r0, [r7, #4]
 80048a8:	f000 f9d7 	bl	8004c5a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048ac:	6878      	ldr	r0, [r7, #4]
 80048ae:	f000 f9e8 	bl	8004c82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2200      	movs	r2, #0
 80048b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	f003 0304 	and.w	r3, r3, #4
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d020      	beq.n	8004904 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	f003 0304 	and.w	r3, r3, #4
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d01b      	beq.n	8004904 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f06f 0204 	mvn.w	r2, #4
 80048d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2202      	movs	r2, #2
 80048da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	699b      	ldr	r3, [r3, #24]
 80048e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d003      	beq.n	80048f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048ea:	6878      	ldr	r0, [r7, #4]
 80048ec:	f000 f9bf 	bl	8004c6e <HAL_TIM_IC_CaptureCallback>
 80048f0:	e005      	b.n	80048fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048f2:	6878      	ldr	r0, [r7, #4]
 80048f4:	f000 f9b1 	bl	8004c5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048f8:	6878      	ldr	r0, [r7, #4]
 80048fa:	f000 f9c2 	bl	8004c82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2200      	movs	r2, #0
 8004902:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	f003 0308 	and.w	r3, r3, #8
 800490a:	2b00      	cmp	r3, #0
 800490c:	d020      	beq.n	8004950 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	f003 0308 	and.w	r3, r3, #8
 8004914:	2b00      	cmp	r3, #0
 8004916:	d01b      	beq.n	8004950 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f06f 0208 	mvn.w	r2, #8
 8004920:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2204      	movs	r2, #4
 8004926:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	69db      	ldr	r3, [r3, #28]
 800492e:	f003 0303 	and.w	r3, r3, #3
 8004932:	2b00      	cmp	r3, #0
 8004934:	d003      	beq.n	800493e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004936:	6878      	ldr	r0, [r7, #4]
 8004938:	f000 f999 	bl	8004c6e <HAL_TIM_IC_CaptureCallback>
 800493c:	e005      	b.n	800494a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800493e:	6878      	ldr	r0, [r7, #4]
 8004940:	f000 f98b 	bl	8004c5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004944:	6878      	ldr	r0, [r7, #4]
 8004946:	f000 f99c 	bl	8004c82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2200      	movs	r2, #0
 800494e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	f003 0310 	and.w	r3, r3, #16
 8004956:	2b00      	cmp	r3, #0
 8004958:	d020      	beq.n	800499c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	f003 0310 	and.w	r3, r3, #16
 8004960:	2b00      	cmp	r3, #0
 8004962:	d01b      	beq.n	800499c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f06f 0210 	mvn.w	r2, #16
 800496c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2208      	movs	r2, #8
 8004972:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	69db      	ldr	r3, [r3, #28]
 800497a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800497e:	2b00      	cmp	r3, #0
 8004980:	d003      	beq.n	800498a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004982:	6878      	ldr	r0, [r7, #4]
 8004984:	f000 f973 	bl	8004c6e <HAL_TIM_IC_CaptureCallback>
 8004988:	e005      	b.n	8004996 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800498a:	6878      	ldr	r0, [r7, #4]
 800498c:	f000 f965 	bl	8004c5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004990:	6878      	ldr	r0, [r7, #4]
 8004992:	f000 f976 	bl	8004c82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2200      	movs	r2, #0
 800499a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	f003 0301 	and.w	r3, r3, #1
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d00c      	beq.n	80049c0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	f003 0301 	and.w	r3, r3, #1
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d007      	beq.n	80049c0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f06f 0201 	mvn.w	r2, #1
 80049b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80049ba:	6878      	ldr	r0, [r7, #4]
 80049bc:	f000 f943 	bl	8004c46 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d00c      	beq.n	80049e4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d007      	beq.n	80049e4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80049dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80049de:	6878      	ldr	r0, [r7, #4]
 80049e0:	f000 fbbc 	bl	800515c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d00c      	beq.n	8004a08 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d007      	beq.n	8004a08 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004a00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	f000 f947 	bl	8004c96 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	f003 0320 	and.w	r3, r3, #32
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d00c      	beq.n	8004a2c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	f003 0320 	and.w	r3, r3, #32
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d007      	beq.n	8004a2c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f06f 0220 	mvn.w	r2, #32
 8004a24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004a26:	6878      	ldr	r0, [r7, #4]
 8004a28:	f000 fb8e 	bl	8005148 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004a2c:	bf00      	nop
 8004a2e:	3710      	adds	r7, #16
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bd80      	pop	{r7, pc}

08004a34 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b084      	sub	sp, #16
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
 8004a3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004a3e:	2300      	movs	r3, #0
 8004a40:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a48:	2b01      	cmp	r3, #1
 8004a4a:	d101      	bne.n	8004a50 <HAL_TIM_ConfigClockSource+0x1c>
 8004a4c:	2302      	movs	r3, #2
 8004a4e:	e0b4      	b.n	8004bba <HAL_TIM_ConfigClockSource+0x186>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2201      	movs	r2, #1
 8004a54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2202      	movs	r2, #2
 8004a5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	689b      	ldr	r3, [r3, #8]
 8004a66:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004a6e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004a76:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	68ba      	ldr	r2, [r7, #8]
 8004a7e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a88:	d03e      	beq.n	8004b08 <HAL_TIM_ConfigClockSource+0xd4>
 8004a8a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a8e:	f200 8087 	bhi.w	8004ba0 <HAL_TIM_ConfigClockSource+0x16c>
 8004a92:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a96:	f000 8086 	beq.w	8004ba6 <HAL_TIM_ConfigClockSource+0x172>
 8004a9a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a9e:	d87f      	bhi.n	8004ba0 <HAL_TIM_ConfigClockSource+0x16c>
 8004aa0:	2b70      	cmp	r3, #112	@ 0x70
 8004aa2:	d01a      	beq.n	8004ada <HAL_TIM_ConfigClockSource+0xa6>
 8004aa4:	2b70      	cmp	r3, #112	@ 0x70
 8004aa6:	d87b      	bhi.n	8004ba0 <HAL_TIM_ConfigClockSource+0x16c>
 8004aa8:	2b60      	cmp	r3, #96	@ 0x60
 8004aaa:	d050      	beq.n	8004b4e <HAL_TIM_ConfigClockSource+0x11a>
 8004aac:	2b60      	cmp	r3, #96	@ 0x60
 8004aae:	d877      	bhi.n	8004ba0 <HAL_TIM_ConfigClockSource+0x16c>
 8004ab0:	2b50      	cmp	r3, #80	@ 0x50
 8004ab2:	d03c      	beq.n	8004b2e <HAL_TIM_ConfigClockSource+0xfa>
 8004ab4:	2b50      	cmp	r3, #80	@ 0x50
 8004ab6:	d873      	bhi.n	8004ba0 <HAL_TIM_ConfigClockSource+0x16c>
 8004ab8:	2b40      	cmp	r3, #64	@ 0x40
 8004aba:	d058      	beq.n	8004b6e <HAL_TIM_ConfigClockSource+0x13a>
 8004abc:	2b40      	cmp	r3, #64	@ 0x40
 8004abe:	d86f      	bhi.n	8004ba0 <HAL_TIM_ConfigClockSource+0x16c>
 8004ac0:	2b30      	cmp	r3, #48	@ 0x30
 8004ac2:	d064      	beq.n	8004b8e <HAL_TIM_ConfigClockSource+0x15a>
 8004ac4:	2b30      	cmp	r3, #48	@ 0x30
 8004ac6:	d86b      	bhi.n	8004ba0 <HAL_TIM_ConfigClockSource+0x16c>
 8004ac8:	2b20      	cmp	r3, #32
 8004aca:	d060      	beq.n	8004b8e <HAL_TIM_ConfigClockSource+0x15a>
 8004acc:	2b20      	cmp	r3, #32
 8004ace:	d867      	bhi.n	8004ba0 <HAL_TIM_ConfigClockSource+0x16c>
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d05c      	beq.n	8004b8e <HAL_TIM_ConfigClockSource+0x15a>
 8004ad4:	2b10      	cmp	r3, #16
 8004ad6:	d05a      	beq.n	8004b8e <HAL_TIM_ConfigClockSource+0x15a>
 8004ad8:	e062      	b.n	8004ba0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004aea:	f000 fa90 	bl	800500e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	689b      	ldr	r3, [r3, #8]
 8004af4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004af6:	68bb      	ldr	r3, [r7, #8]
 8004af8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004afc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	68ba      	ldr	r2, [r7, #8]
 8004b04:	609a      	str	r2, [r3, #8]
      break;
 8004b06:	e04f      	b.n	8004ba8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004b18:	f000 fa79 	bl	800500e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	689a      	ldr	r2, [r3, #8]
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004b2a:	609a      	str	r2, [r3, #8]
      break;
 8004b2c:	e03c      	b.n	8004ba8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b3a:	461a      	mov	r2, r3
 8004b3c:	f000 f9ed 	bl	8004f1a <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	2150      	movs	r1, #80	@ 0x50
 8004b46:	4618      	mov	r0, r3
 8004b48:	f000 fa46 	bl	8004fd8 <TIM_ITRx_SetConfig>
      break;
 8004b4c:	e02c      	b.n	8004ba8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004b5a:	461a      	mov	r2, r3
 8004b5c:	f000 fa0c 	bl	8004f78 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	2160      	movs	r1, #96	@ 0x60
 8004b66:	4618      	mov	r0, r3
 8004b68:	f000 fa36 	bl	8004fd8 <TIM_ITRx_SetConfig>
      break;
 8004b6c:	e01c      	b.n	8004ba8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b7a:	461a      	mov	r2, r3
 8004b7c:	f000 f9cd 	bl	8004f1a <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	2140      	movs	r1, #64	@ 0x40
 8004b86:	4618      	mov	r0, r3
 8004b88:	f000 fa26 	bl	8004fd8 <TIM_ITRx_SetConfig>
      break;
 8004b8c:	e00c      	b.n	8004ba8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681a      	ldr	r2, [r3, #0]
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4619      	mov	r1, r3
 8004b98:	4610      	mov	r0, r2
 8004b9a:	f000 fa1d 	bl	8004fd8 <TIM_ITRx_SetConfig>
      break;
 8004b9e:	e003      	b.n	8004ba8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	73fb      	strb	r3, [r7, #15]
      break;
 8004ba4:	e000      	b.n	8004ba8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004ba6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2201      	movs	r2, #1
 8004bac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004bb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bba:	4618      	mov	r0, r3
 8004bbc:	3710      	adds	r7, #16
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bd80      	pop	{r7, pc}

08004bc2 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004bc2:	b580      	push	{r7, lr}
 8004bc4:	b082      	sub	sp, #8
 8004bc6:	af00      	add	r7, sp, #0
 8004bc8:	6078      	str	r0, [r7, #4]
 8004bca:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004bd2:	2b01      	cmp	r3, #1
 8004bd4:	d101      	bne.n	8004bda <HAL_TIM_SlaveConfigSynchro+0x18>
 8004bd6:	2302      	movs	r3, #2
 8004bd8:	e031      	b.n	8004c3e <HAL_TIM_SlaveConfigSynchro+0x7c>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2201      	movs	r2, #1
 8004bde:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2202      	movs	r2, #2
 8004be6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8004bea:	6839      	ldr	r1, [r7, #0]
 8004bec:	6878      	ldr	r0, [r7, #4]
 8004bee:	f000 f903 	bl	8004df8 <TIM_SlaveTimer_SetConfig>
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d009      	beq.n	8004c0c <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2201      	movs	r2, #1
 8004bfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2200      	movs	r2, #0
 8004c04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8004c08:	2301      	movs	r3, #1
 8004c0a:	e018      	b.n	8004c3e <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	68da      	ldr	r2, [r3, #12]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004c1a:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	68da      	ldr	r2, [r3, #12]
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004c2a:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2201      	movs	r2, #1
 8004c30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2200      	movs	r2, #0
 8004c38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004c3c:	2300      	movs	r3, #0
}
 8004c3e:	4618      	mov	r0, r3
 8004c40:	3708      	adds	r7, #8
 8004c42:	46bd      	mov	sp, r7
 8004c44:	bd80      	pop	{r7, pc}

08004c46 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c46:	b480      	push	{r7}
 8004c48:	b083      	sub	sp, #12
 8004c4a:	af00      	add	r7, sp, #0
 8004c4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004c4e:	bf00      	nop
 8004c50:	370c      	adds	r7, #12
 8004c52:	46bd      	mov	sp, r7
 8004c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c58:	4770      	bx	lr

08004c5a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c5a:	b480      	push	{r7}
 8004c5c:	b083      	sub	sp, #12
 8004c5e:	af00      	add	r7, sp, #0
 8004c60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004c62:	bf00      	nop
 8004c64:	370c      	adds	r7, #12
 8004c66:	46bd      	mov	sp, r7
 8004c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6c:	4770      	bx	lr

08004c6e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004c6e:	b480      	push	{r7}
 8004c70:	b083      	sub	sp, #12
 8004c72:	af00      	add	r7, sp, #0
 8004c74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004c76:	bf00      	nop
 8004c78:	370c      	adds	r7, #12
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c80:	4770      	bx	lr

08004c82 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004c82:	b480      	push	{r7}
 8004c84:	b083      	sub	sp, #12
 8004c86:	af00      	add	r7, sp, #0
 8004c88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004c8a:	bf00      	nop
 8004c8c:	370c      	adds	r7, #12
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c94:	4770      	bx	lr

08004c96 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004c96:	b480      	push	{r7}
 8004c98:	b083      	sub	sp, #12
 8004c9a:	af00      	add	r7, sp, #0
 8004c9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004c9e:	bf00      	nop
 8004ca0:	370c      	adds	r7, #12
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca8:	4770      	bx	lr
	...

08004cac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004cac:	b480      	push	{r7}
 8004cae:	b085      	sub	sp, #20
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
 8004cb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	4a43      	ldr	r2, [pc, #268]	@ (8004dcc <TIM_Base_SetConfig+0x120>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d013      	beq.n	8004cec <TIM_Base_SetConfig+0x40>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004cca:	d00f      	beq.n	8004cec <TIM_Base_SetConfig+0x40>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	4a40      	ldr	r2, [pc, #256]	@ (8004dd0 <TIM_Base_SetConfig+0x124>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d00b      	beq.n	8004cec <TIM_Base_SetConfig+0x40>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	4a3f      	ldr	r2, [pc, #252]	@ (8004dd4 <TIM_Base_SetConfig+0x128>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d007      	beq.n	8004cec <TIM_Base_SetConfig+0x40>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	4a3e      	ldr	r2, [pc, #248]	@ (8004dd8 <TIM_Base_SetConfig+0x12c>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d003      	beq.n	8004cec <TIM_Base_SetConfig+0x40>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	4a3d      	ldr	r2, [pc, #244]	@ (8004ddc <TIM_Base_SetConfig+0x130>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d108      	bne.n	8004cfe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004cf2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	685b      	ldr	r3, [r3, #4]
 8004cf8:	68fa      	ldr	r2, [r7, #12]
 8004cfa:	4313      	orrs	r3, r2
 8004cfc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	4a32      	ldr	r2, [pc, #200]	@ (8004dcc <TIM_Base_SetConfig+0x120>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d02b      	beq.n	8004d5e <TIM_Base_SetConfig+0xb2>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d0c:	d027      	beq.n	8004d5e <TIM_Base_SetConfig+0xb2>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	4a2f      	ldr	r2, [pc, #188]	@ (8004dd0 <TIM_Base_SetConfig+0x124>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d023      	beq.n	8004d5e <TIM_Base_SetConfig+0xb2>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	4a2e      	ldr	r2, [pc, #184]	@ (8004dd4 <TIM_Base_SetConfig+0x128>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d01f      	beq.n	8004d5e <TIM_Base_SetConfig+0xb2>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	4a2d      	ldr	r2, [pc, #180]	@ (8004dd8 <TIM_Base_SetConfig+0x12c>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d01b      	beq.n	8004d5e <TIM_Base_SetConfig+0xb2>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	4a2c      	ldr	r2, [pc, #176]	@ (8004ddc <TIM_Base_SetConfig+0x130>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d017      	beq.n	8004d5e <TIM_Base_SetConfig+0xb2>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	4a2b      	ldr	r2, [pc, #172]	@ (8004de0 <TIM_Base_SetConfig+0x134>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d013      	beq.n	8004d5e <TIM_Base_SetConfig+0xb2>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	4a2a      	ldr	r2, [pc, #168]	@ (8004de4 <TIM_Base_SetConfig+0x138>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d00f      	beq.n	8004d5e <TIM_Base_SetConfig+0xb2>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	4a29      	ldr	r2, [pc, #164]	@ (8004de8 <TIM_Base_SetConfig+0x13c>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d00b      	beq.n	8004d5e <TIM_Base_SetConfig+0xb2>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	4a28      	ldr	r2, [pc, #160]	@ (8004dec <TIM_Base_SetConfig+0x140>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d007      	beq.n	8004d5e <TIM_Base_SetConfig+0xb2>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	4a27      	ldr	r2, [pc, #156]	@ (8004df0 <TIM_Base_SetConfig+0x144>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d003      	beq.n	8004d5e <TIM_Base_SetConfig+0xb2>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	4a26      	ldr	r2, [pc, #152]	@ (8004df4 <TIM_Base_SetConfig+0x148>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d108      	bne.n	8004d70 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	68db      	ldr	r3, [r3, #12]
 8004d6a:	68fa      	ldr	r2, [r7, #12]
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	695b      	ldr	r3, [r3, #20]
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	689a      	ldr	r2, [r3, #8]
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	681a      	ldr	r2, [r3, #0]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	4a0e      	ldr	r2, [pc, #56]	@ (8004dcc <TIM_Base_SetConfig+0x120>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d003      	beq.n	8004d9e <TIM_Base_SetConfig+0xf2>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	4a10      	ldr	r2, [pc, #64]	@ (8004ddc <TIM_Base_SetConfig+0x130>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d103      	bne.n	8004da6 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	691a      	ldr	r2, [r3, #16]
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f043 0204 	orr.w	r2, r3, #4
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2201      	movs	r2, #1
 8004db6:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	68fa      	ldr	r2, [r7, #12]
 8004dbc:	601a      	str	r2, [r3, #0]
}
 8004dbe:	bf00      	nop
 8004dc0:	3714      	adds	r7, #20
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc8:	4770      	bx	lr
 8004dca:	bf00      	nop
 8004dcc:	40010000 	.word	0x40010000
 8004dd0:	40000400 	.word	0x40000400
 8004dd4:	40000800 	.word	0x40000800
 8004dd8:	40000c00 	.word	0x40000c00
 8004ddc:	40010400 	.word	0x40010400
 8004de0:	40014000 	.word	0x40014000
 8004de4:	40014400 	.word	0x40014400
 8004de8:	40014800 	.word	0x40014800
 8004dec:	40001800 	.word	0x40001800
 8004df0:	40001c00 	.word	0x40001c00
 8004df4:	40002000 	.word	0x40002000

08004df8 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b086      	sub	sp, #24
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
 8004e00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e02:	2300      	movs	r3, #0
 8004e04:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	689b      	ldr	r3, [r3, #8]
 8004e0c:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004e0e:	693b      	ldr	r3, [r7, #16]
 8004e10:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e14:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	685b      	ldr	r3, [r3, #4]
 8004e1a:	693a      	ldr	r2, [r7, #16]
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8004e20:	693b      	ldr	r3, [r7, #16]
 8004e22:	f023 0307 	bic.w	r3, r3, #7
 8004e26:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	693a      	ldr	r2, [r7, #16]
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	693a      	ldr	r2, [r7, #16]
 8004e38:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	685b      	ldr	r3, [r3, #4]
 8004e3e:	2b70      	cmp	r3, #112	@ 0x70
 8004e40:	d01a      	beq.n	8004e78 <TIM_SlaveTimer_SetConfig+0x80>
 8004e42:	2b70      	cmp	r3, #112	@ 0x70
 8004e44:	d860      	bhi.n	8004f08 <TIM_SlaveTimer_SetConfig+0x110>
 8004e46:	2b60      	cmp	r3, #96	@ 0x60
 8004e48:	d054      	beq.n	8004ef4 <TIM_SlaveTimer_SetConfig+0xfc>
 8004e4a:	2b60      	cmp	r3, #96	@ 0x60
 8004e4c:	d85c      	bhi.n	8004f08 <TIM_SlaveTimer_SetConfig+0x110>
 8004e4e:	2b50      	cmp	r3, #80	@ 0x50
 8004e50:	d046      	beq.n	8004ee0 <TIM_SlaveTimer_SetConfig+0xe8>
 8004e52:	2b50      	cmp	r3, #80	@ 0x50
 8004e54:	d858      	bhi.n	8004f08 <TIM_SlaveTimer_SetConfig+0x110>
 8004e56:	2b40      	cmp	r3, #64	@ 0x40
 8004e58:	d019      	beq.n	8004e8e <TIM_SlaveTimer_SetConfig+0x96>
 8004e5a:	2b40      	cmp	r3, #64	@ 0x40
 8004e5c:	d854      	bhi.n	8004f08 <TIM_SlaveTimer_SetConfig+0x110>
 8004e5e:	2b30      	cmp	r3, #48	@ 0x30
 8004e60:	d055      	beq.n	8004f0e <TIM_SlaveTimer_SetConfig+0x116>
 8004e62:	2b30      	cmp	r3, #48	@ 0x30
 8004e64:	d850      	bhi.n	8004f08 <TIM_SlaveTimer_SetConfig+0x110>
 8004e66:	2b20      	cmp	r3, #32
 8004e68:	d051      	beq.n	8004f0e <TIM_SlaveTimer_SetConfig+0x116>
 8004e6a:	2b20      	cmp	r3, #32
 8004e6c:	d84c      	bhi.n	8004f08 <TIM_SlaveTimer_SetConfig+0x110>
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d04d      	beq.n	8004f0e <TIM_SlaveTimer_SetConfig+0x116>
 8004e72:	2b10      	cmp	r3, #16
 8004e74:	d04b      	beq.n	8004f0e <TIM_SlaveTimer_SetConfig+0x116>
 8004e76:	e047      	b.n	8004f08 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8004e88:	f000 f8c1 	bl	800500e <TIM_ETR_SetConfig>
      break;
 8004e8c:	e040      	b.n	8004f10 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	2b05      	cmp	r3, #5
 8004e94:	d101      	bne.n	8004e9a <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8004e96:	2301      	movs	r3, #1
 8004e98:	e03b      	b.n	8004f12 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	6a1b      	ldr	r3, [r3, #32]
 8004ea0:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	6a1a      	ldr	r2, [r3, #32]
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f022 0201 	bic.w	r2, r2, #1
 8004eb0:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	699b      	ldr	r3, [r3, #24]
 8004eb8:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004eba:	68bb      	ldr	r3, [r7, #8]
 8004ebc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004ec0:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	691b      	ldr	r3, [r3, #16]
 8004ec6:	011b      	lsls	r3, r3, #4
 8004ec8:	68ba      	ldr	r2, [r7, #8]
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	68ba      	ldr	r2, [r7, #8]
 8004ed4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	68fa      	ldr	r2, [r7, #12]
 8004edc:	621a      	str	r2, [r3, #32]
      break;
 8004ede:	e017      	b.n	8004f10 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004eec:	461a      	mov	r2, r3
 8004eee:	f000 f814 	bl	8004f1a <TIM_TI1_ConfigInputStage>
      break;
 8004ef2:	e00d      	b.n	8004f10 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f00:	461a      	mov	r2, r3
 8004f02:	f000 f839 	bl	8004f78 <TIM_TI2_ConfigInputStage>
      break;
 8004f06:	e003      	b.n	8004f10 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8004f08:	2301      	movs	r3, #1
 8004f0a:	75fb      	strb	r3, [r7, #23]
      break;
 8004f0c:	e000      	b.n	8004f10 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8004f0e:	bf00      	nop
  }

  return status;
 8004f10:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f12:	4618      	mov	r0, r3
 8004f14:	3718      	adds	r7, #24
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bd80      	pop	{r7, pc}

08004f1a <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f1a:	b480      	push	{r7}
 8004f1c:	b087      	sub	sp, #28
 8004f1e:	af00      	add	r7, sp, #0
 8004f20:	60f8      	str	r0, [r7, #12]
 8004f22:	60b9      	str	r1, [r7, #8]
 8004f24:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	6a1b      	ldr	r3, [r3, #32]
 8004f2a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	6a1b      	ldr	r3, [r3, #32]
 8004f30:	f023 0201 	bic.w	r2, r3, #1
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	699b      	ldr	r3, [r3, #24]
 8004f3c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004f3e:	693b      	ldr	r3, [r7, #16]
 8004f40:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004f44:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	011b      	lsls	r3, r3, #4
 8004f4a:	693a      	ldr	r2, [r7, #16]
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004f50:	697b      	ldr	r3, [r7, #20]
 8004f52:	f023 030a 	bic.w	r3, r3, #10
 8004f56:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004f58:	697a      	ldr	r2, [r7, #20]
 8004f5a:	68bb      	ldr	r3, [r7, #8]
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	693a      	ldr	r2, [r7, #16]
 8004f64:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	697a      	ldr	r2, [r7, #20]
 8004f6a:	621a      	str	r2, [r3, #32]
}
 8004f6c:	bf00      	nop
 8004f6e:	371c      	adds	r7, #28
 8004f70:	46bd      	mov	sp, r7
 8004f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f76:	4770      	bx	lr

08004f78 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f78:	b480      	push	{r7}
 8004f7a:	b087      	sub	sp, #28
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	60f8      	str	r0, [r7, #12]
 8004f80:	60b9      	str	r1, [r7, #8]
 8004f82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	6a1b      	ldr	r3, [r3, #32]
 8004f88:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	6a1b      	ldr	r3, [r3, #32]
 8004f8e:	f023 0210 	bic.w	r2, r3, #16
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	699b      	ldr	r3, [r3, #24]
 8004f9a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004f9c:	693b      	ldr	r3, [r7, #16]
 8004f9e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004fa2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	031b      	lsls	r3, r3, #12
 8004fa8:	693a      	ldr	r2, [r7, #16]
 8004faa:	4313      	orrs	r3, r2
 8004fac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004fae:	697b      	ldr	r3, [r7, #20]
 8004fb0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004fb4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004fb6:	68bb      	ldr	r3, [r7, #8]
 8004fb8:	011b      	lsls	r3, r3, #4
 8004fba:	697a      	ldr	r2, [r7, #20]
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	693a      	ldr	r2, [r7, #16]
 8004fc4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	697a      	ldr	r2, [r7, #20]
 8004fca:	621a      	str	r2, [r3, #32]
}
 8004fcc:	bf00      	nop
 8004fce:	371c      	adds	r7, #28
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd6:	4770      	bx	lr

08004fd8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004fd8:	b480      	push	{r7}
 8004fda:	b085      	sub	sp, #20
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
 8004fe0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	689b      	ldr	r3, [r3, #8]
 8004fe6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004fee:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004ff0:	683a      	ldr	r2, [r7, #0]
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	4313      	orrs	r3, r2
 8004ff6:	f043 0307 	orr.w	r3, r3, #7
 8004ffa:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	68fa      	ldr	r2, [r7, #12]
 8005000:	609a      	str	r2, [r3, #8]
}
 8005002:	bf00      	nop
 8005004:	3714      	adds	r7, #20
 8005006:	46bd      	mov	sp, r7
 8005008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500c:	4770      	bx	lr

0800500e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800500e:	b480      	push	{r7}
 8005010:	b087      	sub	sp, #28
 8005012:	af00      	add	r7, sp, #0
 8005014:	60f8      	str	r0, [r7, #12]
 8005016:	60b9      	str	r1, [r7, #8]
 8005018:	607a      	str	r2, [r7, #4]
 800501a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	689b      	ldr	r3, [r3, #8]
 8005020:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005028:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	021a      	lsls	r2, r3, #8
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	431a      	orrs	r2, r3
 8005032:	68bb      	ldr	r3, [r7, #8]
 8005034:	4313      	orrs	r3, r2
 8005036:	697a      	ldr	r2, [r7, #20]
 8005038:	4313      	orrs	r3, r2
 800503a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	697a      	ldr	r2, [r7, #20]
 8005040:	609a      	str	r2, [r3, #8]
}
 8005042:	bf00      	nop
 8005044:	371c      	adds	r7, #28
 8005046:	46bd      	mov	sp, r7
 8005048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504c:	4770      	bx	lr
	...

08005050 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005050:	b480      	push	{r7}
 8005052:	b085      	sub	sp, #20
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
 8005058:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005060:	2b01      	cmp	r3, #1
 8005062:	d101      	bne.n	8005068 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005064:	2302      	movs	r3, #2
 8005066:	e05a      	b.n	800511e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2201      	movs	r2, #1
 800506c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2202      	movs	r2, #2
 8005074:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	685b      	ldr	r3, [r3, #4]
 800507e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	689b      	ldr	r3, [r3, #8]
 8005086:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800508e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	68fa      	ldr	r2, [r7, #12]
 8005096:	4313      	orrs	r3, r2
 8005098:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	68fa      	ldr	r2, [r7, #12]
 80050a0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4a21      	ldr	r2, [pc, #132]	@ (800512c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d022      	beq.n	80050f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050b4:	d01d      	beq.n	80050f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4a1d      	ldr	r2, [pc, #116]	@ (8005130 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d018      	beq.n	80050f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4a1b      	ldr	r2, [pc, #108]	@ (8005134 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d013      	beq.n	80050f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4a1a      	ldr	r2, [pc, #104]	@ (8005138 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d00e      	beq.n	80050f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4a18      	ldr	r2, [pc, #96]	@ (800513c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d009      	beq.n	80050f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4a17      	ldr	r2, [pc, #92]	@ (8005140 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d004      	beq.n	80050f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a15      	ldr	r2, [pc, #84]	@ (8005144 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d10c      	bne.n	800510c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80050f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	68ba      	ldr	r2, [r7, #8]
 8005100:	4313      	orrs	r3, r2
 8005102:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	68ba      	ldr	r2, [r7, #8]
 800510a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2201      	movs	r2, #1
 8005110:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2200      	movs	r2, #0
 8005118:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800511c:	2300      	movs	r3, #0
}
 800511e:	4618      	mov	r0, r3
 8005120:	3714      	adds	r7, #20
 8005122:	46bd      	mov	sp, r7
 8005124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005128:	4770      	bx	lr
 800512a:	bf00      	nop
 800512c:	40010000 	.word	0x40010000
 8005130:	40000400 	.word	0x40000400
 8005134:	40000800 	.word	0x40000800
 8005138:	40000c00 	.word	0x40000c00
 800513c:	40010400 	.word	0x40010400
 8005140:	40014000 	.word	0x40014000
 8005144:	40001800 	.word	0x40001800

08005148 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005148:	b480      	push	{r7}
 800514a:	b083      	sub	sp, #12
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005150:	bf00      	nop
 8005152:	370c      	adds	r7, #12
 8005154:	46bd      	mov	sp, r7
 8005156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515a:	4770      	bx	lr

0800515c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800515c:	b480      	push	{r7}
 800515e:	b083      	sub	sp, #12
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005164:	bf00      	nop
 8005166:	370c      	adds	r7, #12
 8005168:	46bd      	mov	sp, r7
 800516a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516e:	4770      	bx	lr

08005170 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b082      	sub	sp, #8
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d101      	bne.n	8005182 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800517e:	2301      	movs	r3, #1
 8005180:	e042      	b.n	8005208 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005188:	b2db      	uxtb	r3, r3
 800518a:	2b00      	cmp	r3, #0
 800518c:	d106      	bne.n	800519c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2200      	movs	r2, #0
 8005192:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005196:	6878      	ldr	r0, [r7, #4]
 8005198:	f7fb ff84 	bl	80010a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2224      	movs	r2, #36	@ 0x24
 80051a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	68da      	ldr	r2, [r3, #12]
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80051b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80051b4:	6878      	ldr	r0, [r7, #4]
 80051b6:	f000 f97f 	bl	80054b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	691a      	ldr	r2, [r3, #16]
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80051c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	695a      	ldr	r2, [r3, #20]
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80051d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	68da      	ldr	r2, [r3, #12]
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80051e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2200      	movs	r2, #0
 80051ee:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2220      	movs	r2, #32
 80051f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2220      	movs	r2, #32
 80051fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2200      	movs	r2, #0
 8005204:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005206:	2300      	movs	r3, #0
}
 8005208:	4618      	mov	r0, r3
 800520a:	3708      	adds	r7, #8
 800520c:	46bd      	mov	sp, r7
 800520e:	bd80      	pop	{r7, pc}

08005210 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b08a      	sub	sp, #40	@ 0x28
 8005214:	af02      	add	r7, sp, #8
 8005216:	60f8      	str	r0, [r7, #12]
 8005218:	60b9      	str	r1, [r7, #8]
 800521a:	603b      	str	r3, [r7, #0]
 800521c:	4613      	mov	r3, r2
 800521e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005220:	2300      	movs	r3, #0
 8005222:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800522a:	b2db      	uxtb	r3, r3
 800522c:	2b20      	cmp	r3, #32
 800522e:	f040 8081 	bne.w	8005334 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8005232:	68bb      	ldr	r3, [r7, #8]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d002      	beq.n	800523e <HAL_UART_Receive+0x2e>
 8005238:	88fb      	ldrh	r3, [r7, #6]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d101      	bne.n	8005242 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800523e:	2301      	movs	r3, #1
 8005240:	e079      	b.n	8005336 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	2200      	movs	r2, #0
 8005246:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	2222      	movs	r2, #34	@ 0x22
 800524c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	2200      	movs	r2, #0
 8005254:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005256:	f7fc f913 	bl	8001480 <HAL_GetTick>
 800525a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	88fa      	ldrh	r2, [r7, #6]
 8005260:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	88fa      	ldrh	r2, [r7, #6]
 8005266:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	689b      	ldr	r3, [r3, #8]
 800526c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005270:	d108      	bne.n	8005284 <HAL_UART_Receive+0x74>
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	691b      	ldr	r3, [r3, #16]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d104      	bne.n	8005284 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 800527a:	2300      	movs	r3, #0
 800527c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800527e:	68bb      	ldr	r3, [r7, #8]
 8005280:	61bb      	str	r3, [r7, #24]
 8005282:	e003      	b.n	800528c <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005288:	2300      	movs	r3, #0
 800528a:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800528c:	e047      	b.n	800531e <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	9300      	str	r3, [sp, #0]
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	2200      	movs	r2, #0
 8005296:	2120      	movs	r1, #32
 8005298:	68f8      	ldr	r0, [r7, #12]
 800529a:	f000 f850 	bl	800533e <UART_WaitOnFlagUntilTimeout>
 800529e:	4603      	mov	r3, r0
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d005      	beq.n	80052b0 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	2220      	movs	r2, #32
 80052a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 80052ac:	2303      	movs	r3, #3
 80052ae:	e042      	b.n	8005336 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 80052b0:	69fb      	ldr	r3, [r7, #28]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d10c      	bne.n	80052d0 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	685b      	ldr	r3, [r3, #4]
 80052bc:	b29b      	uxth	r3, r3
 80052be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052c2:	b29a      	uxth	r2, r3
 80052c4:	69bb      	ldr	r3, [r7, #24]
 80052c6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80052c8:	69bb      	ldr	r3, [r7, #24]
 80052ca:	3302      	adds	r3, #2
 80052cc:	61bb      	str	r3, [r7, #24]
 80052ce:	e01f      	b.n	8005310 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	689b      	ldr	r3, [r3, #8]
 80052d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80052d8:	d007      	beq.n	80052ea <HAL_UART_Receive+0xda>
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	689b      	ldr	r3, [r3, #8]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d10a      	bne.n	80052f8 <HAL_UART_Receive+0xe8>
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	691b      	ldr	r3, [r3, #16]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d106      	bne.n	80052f8 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	685b      	ldr	r3, [r3, #4]
 80052f0:	b2da      	uxtb	r2, r3
 80052f2:	69fb      	ldr	r3, [r7, #28]
 80052f4:	701a      	strb	r2, [r3, #0]
 80052f6:	e008      	b.n	800530a <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	685b      	ldr	r3, [r3, #4]
 80052fe:	b2db      	uxtb	r3, r3
 8005300:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005304:	b2da      	uxtb	r2, r3
 8005306:	69fb      	ldr	r3, [r7, #28]
 8005308:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800530a:	69fb      	ldr	r3, [r7, #28]
 800530c:	3301      	adds	r3, #1
 800530e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005314:	b29b      	uxth	r3, r3
 8005316:	3b01      	subs	r3, #1
 8005318:	b29a      	uxth	r2, r3
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005322:	b29b      	uxth	r3, r3
 8005324:	2b00      	cmp	r3, #0
 8005326:	d1b2      	bne.n	800528e <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	2220      	movs	r2, #32
 800532c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8005330:	2300      	movs	r3, #0
 8005332:	e000      	b.n	8005336 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8005334:	2302      	movs	r3, #2
  }
}
 8005336:	4618      	mov	r0, r3
 8005338:	3720      	adds	r7, #32
 800533a:	46bd      	mov	sp, r7
 800533c:	bd80      	pop	{r7, pc}

0800533e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800533e:	b580      	push	{r7, lr}
 8005340:	b086      	sub	sp, #24
 8005342:	af00      	add	r7, sp, #0
 8005344:	60f8      	str	r0, [r7, #12]
 8005346:	60b9      	str	r1, [r7, #8]
 8005348:	603b      	str	r3, [r7, #0]
 800534a:	4613      	mov	r3, r2
 800534c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800534e:	e03b      	b.n	80053c8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005350:	6a3b      	ldr	r3, [r7, #32]
 8005352:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005356:	d037      	beq.n	80053c8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005358:	f7fc f892 	bl	8001480 <HAL_GetTick>
 800535c:	4602      	mov	r2, r0
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	1ad3      	subs	r3, r2, r3
 8005362:	6a3a      	ldr	r2, [r7, #32]
 8005364:	429a      	cmp	r2, r3
 8005366:	d302      	bcc.n	800536e <UART_WaitOnFlagUntilTimeout+0x30>
 8005368:	6a3b      	ldr	r3, [r7, #32]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d101      	bne.n	8005372 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800536e:	2303      	movs	r3, #3
 8005370:	e03a      	b.n	80053e8 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	68db      	ldr	r3, [r3, #12]
 8005378:	f003 0304 	and.w	r3, r3, #4
 800537c:	2b00      	cmp	r3, #0
 800537e:	d023      	beq.n	80053c8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	2b80      	cmp	r3, #128	@ 0x80
 8005384:	d020      	beq.n	80053c8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	2b40      	cmp	r3, #64	@ 0x40
 800538a:	d01d      	beq.n	80053c8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f003 0308 	and.w	r3, r3, #8
 8005396:	2b08      	cmp	r3, #8
 8005398:	d116      	bne.n	80053c8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800539a:	2300      	movs	r3, #0
 800539c:	617b      	str	r3, [r7, #20]
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	617b      	str	r3, [r7, #20]
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	685b      	ldr	r3, [r3, #4]
 80053ac:	617b      	str	r3, [r7, #20]
 80053ae:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80053b0:	68f8      	ldr	r0, [r7, #12]
 80053b2:	f000 f81d 	bl	80053f0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	2208      	movs	r2, #8
 80053ba:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	2200      	movs	r2, #0
 80053c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80053c4:	2301      	movs	r3, #1
 80053c6:	e00f      	b.n	80053e8 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	681a      	ldr	r2, [r3, #0]
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	4013      	ands	r3, r2
 80053d2:	68ba      	ldr	r2, [r7, #8]
 80053d4:	429a      	cmp	r2, r3
 80053d6:	bf0c      	ite	eq
 80053d8:	2301      	moveq	r3, #1
 80053da:	2300      	movne	r3, #0
 80053dc:	b2db      	uxtb	r3, r3
 80053de:	461a      	mov	r2, r3
 80053e0:	79fb      	ldrb	r3, [r7, #7]
 80053e2:	429a      	cmp	r2, r3
 80053e4:	d0b4      	beq.n	8005350 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80053e6:	2300      	movs	r3, #0
}
 80053e8:	4618      	mov	r0, r3
 80053ea:	3718      	adds	r7, #24
 80053ec:	46bd      	mov	sp, r7
 80053ee:	bd80      	pop	{r7, pc}

080053f0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80053f0:	b480      	push	{r7}
 80053f2:	b095      	sub	sp, #84	@ 0x54
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	330c      	adds	r3, #12
 80053fe:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005400:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005402:	e853 3f00 	ldrex	r3, [r3]
 8005406:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005408:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800540a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800540e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	330c      	adds	r3, #12
 8005416:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005418:	643a      	str	r2, [r7, #64]	@ 0x40
 800541a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800541c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800541e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005420:	e841 2300 	strex	r3, r2, [r1]
 8005424:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005426:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005428:	2b00      	cmp	r3, #0
 800542a:	d1e5      	bne.n	80053f8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	3314      	adds	r3, #20
 8005432:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005434:	6a3b      	ldr	r3, [r7, #32]
 8005436:	e853 3f00 	ldrex	r3, [r3]
 800543a:	61fb      	str	r3, [r7, #28]
   return(result);
 800543c:	69fb      	ldr	r3, [r7, #28]
 800543e:	f023 0301 	bic.w	r3, r3, #1
 8005442:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	3314      	adds	r3, #20
 800544a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800544c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800544e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005450:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005452:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005454:	e841 2300 	strex	r3, r2, [r1]
 8005458:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800545a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800545c:	2b00      	cmp	r3, #0
 800545e:	d1e5      	bne.n	800542c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005464:	2b01      	cmp	r3, #1
 8005466:	d119      	bne.n	800549c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	330c      	adds	r3, #12
 800546e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	e853 3f00 	ldrex	r3, [r3]
 8005476:	60bb      	str	r3, [r7, #8]
   return(result);
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	f023 0310 	bic.w	r3, r3, #16
 800547e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	330c      	adds	r3, #12
 8005486:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005488:	61ba      	str	r2, [r7, #24]
 800548a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800548c:	6979      	ldr	r1, [r7, #20]
 800548e:	69ba      	ldr	r2, [r7, #24]
 8005490:	e841 2300 	strex	r3, r2, [r1]
 8005494:	613b      	str	r3, [r7, #16]
   return(result);
 8005496:	693b      	ldr	r3, [r7, #16]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d1e5      	bne.n	8005468 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2220      	movs	r2, #32
 80054a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2200      	movs	r2, #0
 80054a8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80054aa:	bf00      	nop
 80054ac:	3754      	adds	r7, #84	@ 0x54
 80054ae:	46bd      	mov	sp, r7
 80054b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b4:	4770      	bx	lr
	...

080054b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80054b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80054bc:	b0c0      	sub	sp, #256	@ 0x100
 80054be:	af00      	add	r7, sp, #0
 80054c0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80054c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	691b      	ldr	r3, [r3, #16]
 80054cc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80054d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054d4:	68d9      	ldr	r1, [r3, #12]
 80054d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054da:	681a      	ldr	r2, [r3, #0]
 80054dc:	ea40 0301 	orr.w	r3, r0, r1
 80054e0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80054e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054e6:	689a      	ldr	r2, [r3, #8]
 80054e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054ec:	691b      	ldr	r3, [r3, #16]
 80054ee:	431a      	orrs	r2, r3
 80054f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054f4:	695b      	ldr	r3, [r3, #20]
 80054f6:	431a      	orrs	r2, r3
 80054f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054fc:	69db      	ldr	r3, [r3, #28]
 80054fe:	4313      	orrs	r3, r2
 8005500:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005504:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	68db      	ldr	r3, [r3, #12]
 800550c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005510:	f021 010c 	bic.w	r1, r1, #12
 8005514:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005518:	681a      	ldr	r2, [r3, #0]
 800551a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800551e:	430b      	orrs	r3, r1
 8005520:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005522:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	695b      	ldr	r3, [r3, #20]
 800552a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800552e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005532:	6999      	ldr	r1, [r3, #24]
 8005534:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005538:	681a      	ldr	r2, [r3, #0]
 800553a:	ea40 0301 	orr.w	r3, r0, r1
 800553e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005540:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005544:	681a      	ldr	r2, [r3, #0]
 8005546:	4b8f      	ldr	r3, [pc, #572]	@ (8005784 <UART_SetConfig+0x2cc>)
 8005548:	429a      	cmp	r2, r3
 800554a:	d005      	beq.n	8005558 <UART_SetConfig+0xa0>
 800554c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005550:	681a      	ldr	r2, [r3, #0]
 8005552:	4b8d      	ldr	r3, [pc, #564]	@ (8005788 <UART_SetConfig+0x2d0>)
 8005554:	429a      	cmp	r2, r3
 8005556:	d104      	bne.n	8005562 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005558:	f7fe f8b0 	bl	80036bc <HAL_RCC_GetPCLK2Freq>
 800555c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005560:	e003      	b.n	800556a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005562:	f7fe f897 	bl	8003694 <HAL_RCC_GetPCLK1Freq>
 8005566:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800556a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800556e:	69db      	ldr	r3, [r3, #28]
 8005570:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005574:	f040 810c 	bne.w	8005790 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005578:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800557c:	2200      	movs	r2, #0
 800557e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005582:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005586:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800558a:	4622      	mov	r2, r4
 800558c:	462b      	mov	r3, r5
 800558e:	1891      	adds	r1, r2, r2
 8005590:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005592:	415b      	adcs	r3, r3
 8005594:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005596:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800559a:	4621      	mov	r1, r4
 800559c:	eb12 0801 	adds.w	r8, r2, r1
 80055a0:	4629      	mov	r1, r5
 80055a2:	eb43 0901 	adc.w	r9, r3, r1
 80055a6:	f04f 0200 	mov.w	r2, #0
 80055aa:	f04f 0300 	mov.w	r3, #0
 80055ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80055b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80055b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80055ba:	4690      	mov	r8, r2
 80055bc:	4699      	mov	r9, r3
 80055be:	4623      	mov	r3, r4
 80055c0:	eb18 0303 	adds.w	r3, r8, r3
 80055c4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80055c8:	462b      	mov	r3, r5
 80055ca:	eb49 0303 	adc.w	r3, r9, r3
 80055ce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80055d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055d6:	685b      	ldr	r3, [r3, #4]
 80055d8:	2200      	movs	r2, #0
 80055da:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80055de:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80055e2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80055e6:	460b      	mov	r3, r1
 80055e8:	18db      	adds	r3, r3, r3
 80055ea:	653b      	str	r3, [r7, #80]	@ 0x50
 80055ec:	4613      	mov	r3, r2
 80055ee:	eb42 0303 	adc.w	r3, r2, r3
 80055f2:	657b      	str	r3, [r7, #84]	@ 0x54
 80055f4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80055f8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80055fc:	f7fa fe02 	bl	8000204 <__aeabi_uldivmod>
 8005600:	4602      	mov	r2, r0
 8005602:	460b      	mov	r3, r1
 8005604:	4b61      	ldr	r3, [pc, #388]	@ (800578c <UART_SetConfig+0x2d4>)
 8005606:	fba3 2302 	umull	r2, r3, r3, r2
 800560a:	095b      	lsrs	r3, r3, #5
 800560c:	011c      	lsls	r4, r3, #4
 800560e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005612:	2200      	movs	r2, #0
 8005614:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005618:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800561c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005620:	4642      	mov	r2, r8
 8005622:	464b      	mov	r3, r9
 8005624:	1891      	adds	r1, r2, r2
 8005626:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005628:	415b      	adcs	r3, r3
 800562a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800562c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005630:	4641      	mov	r1, r8
 8005632:	eb12 0a01 	adds.w	sl, r2, r1
 8005636:	4649      	mov	r1, r9
 8005638:	eb43 0b01 	adc.w	fp, r3, r1
 800563c:	f04f 0200 	mov.w	r2, #0
 8005640:	f04f 0300 	mov.w	r3, #0
 8005644:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005648:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800564c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005650:	4692      	mov	sl, r2
 8005652:	469b      	mov	fp, r3
 8005654:	4643      	mov	r3, r8
 8005656:	eb1a 0303 	adds.w	r3, sl, r3
 800565a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800565e:	464b      	mov	r3, r9
 8005660:	eb4b 0303 	adc.w	r3, fp, r3
 8005664:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005668:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800566c:	685b      	ldr	r3, [r3, #4]
 800566e:	2200      	movs	r2, #0
 8005670:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005674:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005678:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800567c:	460b      	mov	r3, r1
 800567e:	18db      	adds	r3, r3, r3
 8005680:	643b      	str	r3, [r7, #64]	@ 0x40
 8005682:	4613      	mov	r3, r2
 8005684:	eb42 0303 	adc.w	r3, r2, r3
 8005688:	647b      	str	r3, [r7, #68]	@ 0x44
 800568a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800568e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005692:	f7fa fdb7 	bl	8000204 <__aeabi_uldivmod>
 8005696:	4602      	mov	r2, r0
 8005698:	460b      	mov	r3, r1
 800569a:	4611      	mov	r1, r2
 800569c:	4b3b      	ldr	r3, [pc, #236]	@ (800578c <UART_SetConfig+0x2d4>)
 800569e:	fba3 2301 	umull	r2, r3, r3, r1
 80056a2:	095b      	lsrs	r3, r3, #5
 80056a4:	2264      	movs	r2, #100	@ 0x64
 80056a6:	fb02 f303 	mul.w	r3, r2, r3
 80056aa:	1acb      	subs	r3, r1, r3
 80056ac:	00db      	lsls	r3, r3, #3
 80056ae:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80056b2:	4b36      	ldr	r3, [pc, #216]	@ (800578c <UART_SetConfig+0x2d4>)
 80056b4:	fba3 2302 	umull	r2, r3, r3, r2
 80056b8:	095b      	lsrs	r3, r3, #5
 80056ba:	005b      	lsls	r3, r3, #1
 80056bc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80056c0:	441c      	add	r4, r3
 80056c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80056c6:	2200      	movs	r2, #0
 80056c8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80056cc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80056d0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80056d4:	4642      	mov	r2, r8
 80056d6:	464b      	mov	r3, r9
 80056d8:	1891      	adds	r1, r2, r2
 80056da:	63b9      	str	r1, [r7, #56]	@ 0x38
 80056dc:	415b      	adcs	r3, r3
 80056de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80056e0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80056e4:	4641      	mov	r1, r8
 80056e6:	1851      	adds	r1, r2, r1
 80056e8:	6339      	str	r1, [r7, #48]	@ 0x30
 80056ea:	4649      	mov	r1, r9
 80056ec:	414b      	adcs	r3, r1
 80056ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80056f0:	f04f 0200 	mov.w	r2, #0
 80056f4:	f04f 0300 	mov.w	r3, #0
 80056f8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80056fc:	4659      	mov	r1, fp
 80056fe:	00cb      	lsls	r3, r1, #3
 8005700:	4651      	mov	r1, sl
 8005702:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005706:	4651      	mov	r1, sl
 8005708:	00ca      	lsls	r2, r1, #3
 800570a:	4610      	mov	r0, r2
 800570c:	4619      	mov	r1, r3
 800570e:	4603      	mov	r3, r0
 8005710:	4642      	mov	r2, r8
 8005712:	189b      	adds	r3, r3, r2
 8005714:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005718:	464b      	mov	r3, r9
 800571a:	460a      	mov	r2, r1
 800571c:	eb42 0303 	adc.w	r3, r2, r3
 8005720:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005724:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005728:	685b      	ldr	r3, [r3, #4]
 800572a:	2200      	movs	r2, #0
 800572c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005730:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005734:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005738:	460b      	mov	r3, r1
 800573a:	18db      	adds	r3, r3, r3
 800573c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800573e:	4613      	mov	r3, r2
 8005740:	eb42 0303 	adc.w	r3, r2, r3
 8005744:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005746:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800574a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800574e:	f7fa fd59 	bl	8000204 <__aeabi_uldivmod>
 8005752:	4602      	mov	r2, r0
 8005754:	460b      	mov	r3, r1
 8005756:	4b0d      	ldr	r3, [pc, #52]	@ (800578c <UART_SetConfig+0x2d4>)
 8005758:	fba3 1302 	umull	r1, r3, r3, r2
 800575c:	095b      	lsrs	r3, r3, #5
 800575e:	2164      	movs	r1, #100	@ 0x64
 8005760:	fb01 f303 	mul.w	r3, r1, r3
 8005764:	1ad3      	subs	r3, r2, r3
 8005766:	00db      	lsls	r3, r3, #3
 8005768:	3332      	adds	r3, #50	@ 0x32
 800576a:	4a08      	ldr	r2, [pc, #32]	@ (800578c <UART_SetConfig+0x2d4>)
 800576c:	fba2 2303 	umull	r2, r3, r2, r3
 8005770:	095b      	lsrs	r3, r3, #5
 8005772:	f003 0207 	and.w	r2, r3, #7
 8005776:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4422      	add	r2, r4
 800577e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005780:	e106      	b.n	8005990 <UART_SetConfig+0x4d8>
 8005782:	bf00      	nop
 8005784:	40011000 	.word	0x40011000
 8005788:	40011400 	.word	0x40011400
 800578c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005790:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005794:	2200      	movs	r2, #0
 8005796:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800579a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800579e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80057a2:	4642      	mov	r2, r8
 80057a4:	464b      	mov	r3, r9
 80057a6:	1891      	adds	r1, r2, r2
 80057a8:	6239      	str	r1, [r7, #32]
 80057aa:	415b      	adcs	r3, r3
 80057ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80057ae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80057b2:	4641      	mov	r1, r8
 80057b4:	1854      	adds	r4, r2, r1
 80057b6:	4649      	mov	r1, r9
 80057b8:	eb43 0501 	adc.w	r5, r3, r1
 80057bc:	f04f 0200 	mov.w	r2, #0
 80057c0:	f04f 0300 	mov.w	r3, #0
 80057c4:	00eb      	lsls	r3, r5, #3
 80057c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80057ca:	00e2      	lsls	r2, r4, #3
 80057cc:	4614      	mov	r4, r2
 80057ce:	461d      	mov	r5, r3
 80057d0:	4643      	mov	r3, r8
 80057d2:	18e3      	adds	r3, r4, r3
 80057d4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80057d8:	464b      	mov	r3, r9
 80057da:	eb45 0303 	adc.w	r3, r5, r3
 80057de:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80057e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057e6:	685b      	ldr	r3, [r3, #4]
 80057e8:	2200      	movs	r2, #0
 80057ea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80057ee:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80057f2:	f04f 0200 	mov.w	r2, #0
 80057f6:	f04f 0300 	mov.w	r3, #0
 80057fa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80057fe:	4629      	mov	r1, r5
 8005800:	008b      	lsls	r3, r1, #2
 8005802:	4621      	mov	r1, r4
 8005804:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005808:	4621      	mov	r1, r4
 800580a:	008a      	lsls	r2, r1, #2
 800580c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005810:	f7fa fcf8 	bl	8000204 <__aeabi_uldivmod>
 8005814:	4602      	mov	r2, r0
 8005816:	460b      	mov	r3, r1
 8005818:	4b60      	ldr	r3, [pc, #384]	@ (800599c <UART_SetConfig+0x4e4>)
 800581a:	fba3 2302 	umull	r2, r3, r3, r2
 800581e:	095b      	lsrs	r3, r3, #5
 8005820:	011c      	lsls	r4, r3, #4
 8005822:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005826:	2200      	movs	r2, #0
 8005828:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800582c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005830:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005834:	4642      	mov	r2, r8
 8005836:	464b      	mov	r3, r9
 8005838:	1891      	adds	r1, r2, r2
 800583a:	61b9      	str	r1, [r7, #24]
 800583c:	415b      	adcs	r3, r3
 800583e:	61fb      	str	r3, [r7, #28]
 8005840:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005844:	4641      	mov	r1, r8
 8005846:	1851      	adds	r1, r2, r1
 8005848:	6139      	str	r1, [r7, #16]
 800584a:	4649      	mov	r1, r9
 800584c:	414b      	adcs	r3, r1
 800584e:	617b      	str	r3, [r7, #20]
 8005850:	f04f 0200 	mov.w	r2, #0
 8005854:	f04f 0300 	mov.w	r3, #0
 8005858:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800585c:	4659      	mov	r1, fp
 800585e:	00cb      	lsls	r3, r1, #3
 8005860:	4651      	mov	r1, sl
 8005862:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005866:	4651      	mov	r1, sl
 8005868:	00ca      	lsls	r2, r1, #3
 800586a:	4610      	mov	r0, r2
 800586c:	4619      	mov	r1, r3
 800586e:	4603      	mov	r3, r0
 8005870:	4642      	mov	r2, r8
 8005872:	189b      	adds	r3, r3, r2
 8005874:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005878:	464b      	mov	r3, r9
 800587a:	460a      	mov	r2, r1
 800587c:	eb42 0303 	adc.w	r3, r2, r3
 8005880:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005884:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005888:	685b      	ldr	r3, [r3, #4]
 800588a:	2200      	movs	r2, #0
 800588c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800588e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005890:	f04f 0200 	mov.w	r2, #0
 8005894:	f04f 0300 	mov.w	r3, #0
 8005898:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800589c:	4649      	mov	r1, r9
 800589e:	008b      	lsls	r3, r1, #2
 80058a0:	4641      	mov	r1, r8
 80058a2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80058a6:	4641      	mov	r1, r8
 80058a8:	008a      	lsls	r2, r1, #2
 80058aa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80058ae:	f7fa fca9 	bl	8000204 <__aeabi_uldivmod>
 80058b2:	4602      	mov	r2, r0
 80058b4:	460b      	mov	r3, r1
 80058b6:	4611      	mov	r1, r2
 80058b8:	4b38      	ldr	r3, [pc, #224]	@ (800599c <UART_SetConfig+0x4e4>)
 80058ba:	fba3 2301 	umull	r2, r3, r3, r1
 80058be:	095b      	lsrs	r3, r3, #5
 80058c0:	2264      	movs	r2, #100	@ 0x64
 80058c2:	fb02 f303 	mul.w	r3, r2, r3
 80058c6:	1acb      	subs	r3, r1, r3
 80058c8:	011b      	lsls	r3, r3, #4
 80058ca:	3332      	adds	r3, #50	@ 0x32
 80058cc:	4a33      	ldr	r2, [pc, #204]	@ (800599c <UART_SetConfig+0x4e4>)
 80058ce:	fba2 2303 	umull	r2, r3, r2, r3
 80058d2:	095b      	lsrs	r3, r3, #5
 80058d4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80058d8:	441c      	add	r4, r3
 80058da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80058de:	2200      	movs	r2, #0
 80058e0:	673b      	str	r3, [r7, #112]	@ 0x70
 80058e2:	677a      	str	r2, [r7, #116]	@ 0x74
 80058e4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80058e8:	4642      	mov	r2, r8
 80058ea:	464b      	mov	r3, r9
 80058ec:	1891      	adds	r1, r2, r2
 80058ee:	60b9      	str	r1, [r7, #8]
 80058f0:	415b      	adcs	r3, r3
 80058f2:	60fb      	str	r3, [r7, #12]
 80058f4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80058f8:	4641      	mov	r1, r8
 80058fa:	1851      	adds	r1, r2, r1
 80058fc:	6039      	str	r1, [r7, #0]
 80058fe:	4649      	mov	r1, r9
 8005900:	414b      	adcs	r3, r1
 8005902:	607b      	str	r3, [r7, #4]
 8005904:	f04f 0200 	mov.w	r2, #0
 8005908:	f04f 0300 	mov.w	r3, #0
 800590c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005910:	4659      	mov	r1, fp
 8005912:	00cb      	lsls	r3, r1, #3
 8005914:	4651      	mov	r1, sl
 8005916:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800591a:	4651      	mov	r1, sl
 800591c:	00ca      	lsls	r2, r1, #3
 800591e:	4610      	mov	r0, r2
 8005920:	4619      	mov	r1, r3
 8005922:	4603      	mov	r3, r0
 8005924:	4642      	mov	r2, r8
 8005926:	189b      	adds	r3, r3, r2
 8005928:	66bb      	str	r3, [r7, #104]	@ 0x68
 800592a:	464b      	mov	r3, r9
 800592c:	460a      	mov	r2, r1
 800592e:	eb42 0303 	adc.w	r3, r2, r3
 8005932:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005934:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005938:	685b      	ldr	r3, [r3, #4]
 800593a:	2200      	movs	r2, #0
 800593c:	663b      	str	r3, [r7, #96]	@ 0x60
 800593e:	667a      	str	r2, [r7, #100]	@ 0x64
 8005940:	f04f 0200 	mov.w	r2, #0
 8005944:	f04f 0300 	mov.w	r3, #0
 8005948:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800594c:	4649      	mov	r1, r9
 800594e:	008b      	lsls	r3, r1, #2
 8005950:	4641      	mov	r1, r8
 8005952:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005956:	4641      	mov	r1, r8
 8005958:	008a      	lsls	r2, r1, #2
 800595a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800595e:	f7fa fc51 	bl	8000204 <__aeabi_uldivmod>
 8005962:	4602      	mov	r2, r0
 8005964:	460b      	mov	r3, r1
 8005966:	4b0d      	ldr	r3, [pc, #52]	@ (800599c <UART_SetConfig+0x4e4>)
 8005968:	fba3 1302 	umull	r1, r3, r3, r2
 800596c:	095b      	lsrs	r3, r3, #5
 800596e:	2164      	movs	r1, #100	@ 0x64
 8005970:	fb01 f303 	mul.w	r3, r1, r3
 8005974:	1ad3      	subs	r3, r2, r3
 8005976:	011b      	lsls	r3, r3, #4
 8005978:	3332      	adds	r3, #50	@ 0x32
 800597a:	4a08      	ldr	r2, [pc, #32]	@ (800599c <UART_SetConfig+0x4e4>)
 800597c:	fba2 2303 	umull	r2, r3, r2, r3
 8005980:	095b      	lsrs	r3, r3, #5
 8005982:	f003 020f 	and.w	r2, r3, #15
 8005986:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4422      	add	r2, r4
 800598e:	609a      	str	r2, [r3, #8]
}
 8005990:	bf00      	nop
 8005992:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005996:	46bd      	mov	sp, r7
 8005998:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800599c:	51eb851f 	.word	0x51eb851f

080059a0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80059a0:	b084      	sub	sp, #16
 80059a2:	b580      	push	{r7, lr}
 80059a4:	b084      	sub	sp, #16
 80059a6:	af00      	add	r7, sp, #0
 80059a8:	6078      	str	r0, [r7, #4]
 80059aa:	f107 001c 	add.w	r0, r7, #28
 80059ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80059b2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80059b6:	2b01      	cmp	r3, #1
 80059b8:	d123      	bne.n	8005a02 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059be:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	68db      	ldr	r3, [r3, #12]
 80059ca:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80059ce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80059d2:	687a      	ldr	r2, [r7, #4]
 80059d4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	68db      	ldr	r3, [r3, #12]
 80059da:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80059e2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80059e6:	2b01      	cmp	r3, #1
 80059e8:	d105      	bne.n	80059f6 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	68db      	ldr	r3, [r3, #12]
 80059ee:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80059f6:	6878      	ldr	r0, [r7, #4]
 80059f8:	f001 fae2 	bl	8006fc0 <USB_CoreReset>
 80059fc:	4603      	mov	r3, r0
 80059fe:	73fb      	strb	r3, [r7, #15]
 8005a00:	e01b      	b.n	8005a3a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	68db      	ldr	r3, [r3, #12]
 8005a06:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005a0e:	6878      	ldr	r0, [r7, #4]
 8005a10:	f001 fad6 	bl	8006fc0 <USB_CoreReset>
 8005a14:	4603      	mov	r3, r0
 8005a16:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005a18:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d106      	bne.n	8005a2e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a24:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	639a      	str	r2, [r3, #56]	@ 0x38
 8005a2c:	e005      	b.n	8005a3a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a32:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005a3a:	7fbb      	ldrb	r3, [r7, #30]
 8005a3c:	2b01      	cmp	r3, #1
 8005a3e:	d10b      	bne.n	8005a58 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	689b      	ldr	r3, [r3, #8]
 8005a44:	f043 0206 	orr.w	r2, r3, #6
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	689b      	ldr	r3, [r3, #8]
 8005a50:	f043 0220 	orr.w	r2, r3, #32
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005a58:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	3710      	adds	r7, #16
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005a64:	b004      	add	sp, #16
 8005a66:	4770      	bx	lr

08005a68 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005a68:	b480      	push	{r7}
 8005a6a:	b087      	sub	sp, #28
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	60f8      	str	r0, [r7, #12]
 8005a70:	60b9      	str	r1, [r7, #8]
 8005a72:	4613      	mov	r3, r2
 8005a74:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005a76:	79fb      	ldrb	r3, [r7, #7]
 8005a78:	2b02      	cmp	r3, #2
 8005a7a:	d165      	bne.n	8005b48 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005a7c:	68bb      	ldr	r3, [r7, #8]
 8005a7e:	4a41      	ldr	r2, [pc, #260]	@ (8005b84 <USB_SetTurnaroundTime+0x11c>)
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d906      	bls.n	8005a92 <USB_SetTurnaroundTime+0x2a>
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	4a40      	ldr	r2, [pc, #256]	@ (8005b88 <USB_SetTurnaroundTime+0x120>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d202      	bcs.n	8005a92 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005a8c:	230f      	movs	r3, #15
 8005a8e:	617b      	str	r3, [r7, #20]
 8005a90:	e062      	b.n	8005b58 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005a92:	68bb      	ldr	r3, [r7, #8]
 8005a94:	4a3c      	ldr	r2, [pc, #240]	@ (8005b88 <USB_SetTurnaroundTime+0x120>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d306      	bcc.n	8005aa8 <USB_SetTurnaroundTime+0x40>
 8005a9a:	68bb      	ldr	r3, [r7, #8]
 8005a9c:	4a3b      	ldr	r2, [pc, #236]	@ (8005b8c <USB_SetTurnaroundTime+0x124>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d202      	bcs.n	8005aa8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005aa2:	230e      	movs	r3, #14
 8005aa4:	617b      	str	r3, [r7, #20]
 8005aa6:	e057      	b.n	8005b58 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005aa8:	68bb      	ldr	r3, [r7, #8]
 8005aaa:	4a38      	ldr	r2, [pc, #224]	@ (8005b8c <USB_SetTurnaroundTime+0x124>)
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d306      	bcc.n	8005abe <USB_SetTurnaroundTime+0x56>
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	4a37      	ldr	r2, [pc, #220]	@ (8005b90 <USB_SetTurnaroundTime+0x128>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d202      	bcs.n	8005abe <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005ab8:	230d      	movs	r3, #13
 8005aba:	617b      	str	r3, [r7, #20]
 8005abc:	e04c      	b.n	8005b58 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005abe:	68bb      	ldr	r3, [r7, #8]
 8005ac0:	4a33      	ldr	r2, [pc, #204]	@ (8005b90 <USB_SetTurnaroundTime+0x128>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d306      	bcc.n	8005ad4 <USB_SetTurnaroundTime+0x6c>
 8005ac6:	68bb      	ldr	r3, [r7, #8]
 8005ac8:	4a32      	ldr	r2, [pc, #200]	@ (8005b94 <USB_SetTurnaroundTime+0x12c>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d802      	bhi.n	8005ad4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005ace:	230c      	movs	r3, #12
 8005ad0:	617b      	str	r3, [r7, #20]
 8005ad2:	e041      	b.n	8005b58 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	4a2f      	ldr	r2, [pc, #188]	@ (8005b94 <USB_SetTurnaroundTime+0x12c>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d906      	bls.n	8005aea <USB_SetTurnaroundTime+0x82>
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	4a2e      	ldr	r2, [pc, #184]	@ (8005b98 <USB_SetTurnaroundTime+0x130>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d802      	bhi.n	8005aea <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005ae4:	230b      	movs	r3, #11
 8005ae6:	617b      	str	r3, [r7, #20]
 8005ae8:	e036      	b.n	8005b58 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005aea:	68bb      	ldr	r3, [r7, #8]
 8005aec:	4a2a      	ldr	r2, [pc, #168]	@ (8005b98 <USB_SetTurnaroundTime+0x130>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d906      	bls.n	8005b00 <USB_SetTurnaroundTime+0x98>
 8005af2:	68bb      	ldr	r3, [r7, #8]
 8005af4:	4a29      	ldr	r2, [pc, #164]	@ (8005b9c <USB_SetTurnaroundTime+0x134>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d802      	bhi.n	8005b00 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005afa:	230a      	movs	r3, #10
 8005afc:	617b      	str	r3, [r7, #20]
 8005afe:	e02b      	b.n	8005b58 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	4a26      	ldr	r2, [pc, #152]	@ (8005b9c <USB_SetTurnaroundTime+0x134>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d906      	bls.n	8005b16 <USB_SetTurnaroundTime+0xae>
 8005b08:	68bb      	ldr	r3, [r7, #8]
 8005b0a:	4a25      	ldr	r2, [pc, #148]	@ (8005ba0 <USB_SetTurnaroundTime+0x138>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d202      	bcs.n	8005b16 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005b10:	2309      	movs	r3, #9
 8005b12:	617b      	str	r3, [r7, #20]
 8005b14:	e020      	b.n	8005b58 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005b16:	68bb      	ldr	r3, [r7, #8]
 8005b18:	4a21      	ldr	r2, [pc, #132]	@ (8005ba0 <USB_SetTurnaroundTime+0x138>)
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d306      	bcc.n	8005b2c <USB_SetTurnaroundTime+0xc4>
 8005b1e:	68bb      	ldr	r3, [r7, #8]
 8005b20:	4a20      	ldr	r2, [pc, #128]	@ (8005ba4 <USB_SetTurnaroundTime+0x13c>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d802      	bhi.n	8005b2c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005b26:	2308      	movs	r3, #8
 8005b28:	617b      	str	r3, [r7, #20]
 8005b2a:	e015      	b.n	8005b58 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	4a1d      	ldr	r2, [pc, #116]	@ (8005ba4 <USB_SetTurnaroundTime+0x13c>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d906      	bls.n	8005b42 <USB_SetTurnaroundTime+0xda>
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	4a1c      	ldr	r2, [pc, #112]	@ (8005ba8 <USB_SetTurnaroundTime+0x140>)
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d202      	bcs.n	8005b42 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005b3c:	2307      	movs	r3, #7
 8005b3e:	617b      	str	r3, [r7, #20]
 8005b40:	e00a      	b.n	8005b58 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005b42:	2306      	movs	r3, #6
 8005b44:	617b      	str	r3, [r7, #20]
 8005b46:	e007      	b.n	8005b58 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005b48:	79fb      	ldrb	r3, [r7, #7]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d102      	bne.n	8005b54 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005b4e:	2309      	movs	r3, #9
 8005b50:	617b      	str	r3, [r7, #20]
 8005b52:	e001      	b.n	8005b58 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005b54:	2309      	movs	r3, #9
 8005b56:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	68db      	ldr	r3, [r3, #12]
 8005b5c:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	68da      	ldr	r2, [r3, #12]
 8005b68:	697b      	ldr	r3, [r7, #20]
 8005b6a:	029b      	lsls	r3, r3, #10
 8005b6c:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8005b70:	431a      	orrs	r2, r3
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005b76:	2300      	movs	r3, #0
}
 8005b78:	4618      	mov	r0, r3
 8005b7a:	371c      	adds	r7, #28
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b82:	4770      	bx	lr
 8005b84:	00d8acbf 	.word	0x00d8acbf
 8005b88:	00e4e1c0 	.word	0x00e4e1c0
 8005b8c:	00f42400 	.word	0x00f42400
 8005b90:	01067380 	.word	0x01067380
 8005b94:	011a499f 	.word	0x011a499f
 8005b98:	01312cff 	.word	0x01312cff
 8005b9c:	014ca43f 	.word	0x014ca43f
 8005ba0:	016e3600 	.word	0x016e3600
 8005ba4:	01a6ab1f 	.word	0x01a6ab1f
 8005ba8:	01e84800 	.word	0x01e84800

08005bac <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005bac:	b480      	push	{r7}
 8005bae:	b083      	sub	sp, #12
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	689b      	ldr	r3, [r3, #8]
 8005bb8:	f043 0201 	orr.w	r2, r3, #1
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005bc0:	2300      	movs	r3, #0
}
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	370c      	adds	r7, #12
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bcc:	4770      	bx	lr

08005bce <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005bce:	b480      	push	{r7}
 8005bd0:	b083      	sub	sp, #12
 8005bd2:	af00      	add	r7, sp, #0
 8005bd4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	689b      	ldr	r3, [r3, #8]
 8005bda:	f023 0201 	bic.w	r2, r3, #1
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005be2:	2300      	movs	r3, #0
}
 8005be4:	4618      	mov	r0, r3
 8005be6:	370c      	adds	r7, #12
 8005be8:	46bd      	mov	sp, r7
 8005bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bee:	4770      	bx	lr

08005bf0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b084      	sub	sp, #16
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
 8005bf8:	460b      	mov	r3, r1
 8005bfa:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	68db      	ldr	r3, [r3, #12]
 8005c04:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005c0c:	78fb      	ldrb	r3, [r7, #3]
 8005c0e:	2b01      	cmp	r3, #1
 8005c10:	d115      	bne.n	8005c3e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	68db      	ldr	r3, [r3, #12]
 8005c16:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005c1e:	200a      	movs	r0, #10
 8005c20:	f7fb fc3a 	bl	8001498 <HAL_Delay>
      ms += 10U;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	330a      	adds	r3, #10
 8005c28:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005c2a:	6878      	ldr	r0, [r7, #4]
 8005c2c:	f001 f939 	bl	8006ea2 <USB_GetMode>
 8005c30:	4603      	mov	r3, r0
 8005c32:	2b01      	cmp	r3, #1
 8005c34:	d01e      	beq.n	8005c74 <USB_SetCurrentMode+0x84>
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	2bc7      	cmp	r3, #199	@ 0xc7
 8005c3a:	d9f0      	bls.n	8005c1e <USB_SetCurrentMode+0x2e>
 8005c3c:	e01a      	b.n	8005c74 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005c3e:	78fb      	ldrb	r3, [r7, #3]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d115      	bne.n	8005c70 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	68db      	ldr	r3, [r3, #12]
 8005c48:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005c50:	200a      	movs	r0, #10
 8005c52:	f7fb fc21 	bl	8001498 <HAL_Delay>
      ms += 10U;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	330a      	adds	r3, #10
 8005c5a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005c5c:	6878      	ldr	r0, [r7, #4]
 8005c5e:	f001 f920 	bl	8006ea2 <USB_GetMode>
 8005c62:	4603      	mov	r3, r0
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d005      	beq.n	8005c74 <USB_SetCurrentMode+0x84>
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	2bc7      	cmp	r3, #199	@ 0xc7
 8005c6c:	d9f0      	bls.n	8005c50 <USB_SetCurrentMode+0x60>
 8005c6e:	e001      	b.n	8005c74 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005c70:	2301      	movs	r3, #1
 8005c72:	e005      	b.n	8005c80 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	2bc8      	cmp	r3, #200	@ 0xc8
 8005c78:	d101      	bne.n	8005c7e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	e000      	b.n	8005c80 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005c7e:	2300      	movs	r3, #0
}
 8005c80:	4618      	mov	r0, r3
 8005c82:	3710      	adds	r7, #16
 8005c84:	46bd      	mov	sp, r7
 8005c86:	bd80      	pop	{r7, pc}

08005c88 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005c88:	b084      	sub	sp, #16
 8005c8a:	b580      	push	{r7, lr}
 8005c8c:	b086      	sub	sp, #24
 8005c8e:	af00      	add	r7, sp, #0
 8005c90:	6078      	str	r0, [r7, #4]
 8005c92:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8005c96:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	613b      	str	r3, [r7, #16]
 8005ca6:	e009      	b.n	8005cbc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005ca8:	687a      	ldr	r2, [r7, #4]
 8005caa:	693b      	ldr	r3, [r7, #16]
 8005cac:	3340      	adds	r3, #64	@ 0x40
 8005cae:	009b      	lsls	r3, r3, #2
 8005cb0:	4413      	add	r3, r2
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005cb6:	693b      	ldr	r3, [r7, #16]
 8005cb8:	3301      	adds	r3, #1
 8005cba:	613b      	str	r3, [r7, #16]
 8005cbc:	693b      	ldr	r3, [r7, #16]
 8005cbe:	2b0e      	cmp	r3, #14
 8005cc0:	d9f2      	bls.n	8005ca8 <USB_DevInit+0x20>

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005cc2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d11c      	bne.n	8005d04 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005cd0:	685b      	ldr	r3, [r3, #4]
 8005cd2:	68fa      	ldr	r2, [r7, #12]
 8005cd4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005cd8:	f043 0302 	orr.w	r3, r3, #2
 8005cdc:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ce2:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	601a      	str	r2, [r3, #0]
 8005d02:	e005      	b.n	8005d10 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d08:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005d16:	461a      	mov	r2, r3
 8005d18:	2300      	movs	r3, #0
 8005d1a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005d1c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8005d20:	2b01      	cmp	r3, #1
 8005d22:	d10d      	bne.n	8005d40 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005d24:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d104      	bne.n	8005d36 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005d2c:	2100      	movs	r1, #0
 8005d2e:	6878      	ldr	r0, [r7, #4]
 8005d30:	f000 f968 	bl	8006004 <USB_SetDevSpeed>
 8005d34:	e008      	b.n	8005d48 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005d36:	2101      	movs	r1, #1
 8005d38:	6878      	ldr	r0, [r7, #4]
 8005d3a:	f000 f963 	bl	8006004 <USB_SetDevSpeed>
 8005d3e:	e003      	b.n	8005d48 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005d40:	2103      	movs	r1, #3
 8005d42:	6878      	ldr	r0, [r7, #4]
 8005d44:	f000 f95e 	bl	8006004 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005d48:	2110      	movs	r1, #16
 8005d4a:	6878      	ldr	r0, [r7, #4]
 8005d4c:	f000 f8fa 	bl	8005f44 <USB_FlushTxFifo>
 8005d50:	4603      	mov	r3, r0
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d001      	beq.n	8005d5a <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8005d56:	2301      	movs	r3, #1
 8005d58:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005d5a:	6878      	ldr	r0, [r7, #4]
 8005d5c:	f000 f924 	bl	8005fa8 <USB_FlushRxFifo>
 8005d60:	4603      	mov	r3, r0
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d001      	beq.n	8005d6a <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8005d66:	2301      	movs	r3, #1
 8005d68:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d70:	461a      	mov	r2, r3
 8005d72:	2300      	movs	r3, #0
 8005d74:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d7c:	461a      	mov	r2, r3
 8005d7e:	2300      	movs	r3, #0
 8005d80:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d88:	461a      	mov	r2, r3
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005d8e:	2300      	movs	r3, #0
 8005d90:	613b      	str	r3, [r7, #16]
 8005d92:	e043      	b.n	8005e1c <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005d94:	693b      	ldr	r3, [r7, #16]
 8005d96:	015a      	lsls	r2, r3, #5
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	4413      	add	r3, r2
 8005d9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005da6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005daa:	d118      	bne.n	8005dde <USB_DevInit+0x156>
    {
      if (i == 0U)
 8005dac:	693b      	ldr	r3, [r7, #16]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d10a      	bne.n	8005dc8 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005db2:	693b      	ldr	r3, [r7, #16]
 8005db4:	015a      	lsls	r2, r3, #5
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	4413      	add	r3, r2
 8005dba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005dbe:	461a      	mov	r2, r3
 8005dc0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005dc4:	6013      	str	r3, [r2, #0]
 8005dc6:	e013      	b.n	8005df0 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005dc8:	693b      	ldr	r3, [r7, #16]
 8005dca:	015a      	lsls	r2, r3, #5
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	4413      	add	r3, r2
 8005dd0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005dd4:	461a      	mov	r2, r3
 8005dd6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005dda:	6013      	str	r3, [r2, #0]
 8005ddc:	e008      	b.n	8005df0 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005dde:	693b      	ldr	r3, [r7, #16]
 8005de0:	015a      	lsls	r2, r3, #5
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	4413      	add	r3, r2
 8005de6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005dea:	461a      	mov	r2, r3
 8005dec:	2300      	movs	r3, #0
 8005dee:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005df0:	693b      	ldr	r3, [r7, #16]
 8005df2:	015a      	lsls	r2, r3, #5
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	4413      	add	r3, r2
 8005df8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005dfc:	461a      	mov	r2, r3
 8005dfe:	2300      	movs	r3, #0
 8005e00:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005e02:	693b      	ldr	r3, [r7, #16]
 8005e04:	015a      	lsls	r2, r3, #5
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	4413      	add	r3, r2
 8005e0a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e0e:	461a      	mov	r2, r3
 8005e10:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005e14:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005e16:	693b      	ldr	r3, [r7, #16]
 8005e18:	3301      	adds	r3, #1
 8005e1a:	613b      	str	r3, [r7, #16]
 8005e1c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005e20:	461a      	mov	r2, r3
 8005e22:	693b      	ldr	r3, [r7, #16]
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d3b5      	bcc.n	8005d94 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005e28:	2300      	movs	r3, #0
 8005e2a:	613b      	str	r3, [r7, #16]
 8005e2c:	e043      	b.n	8005eb6 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005e2e:	693b      	ldr	r3, [r7, #16]
 8005e30:	015a      	lsls	r2, r3, #5
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	4413      	add	r3, r2
 8005e36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005e40:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005e44:	d118      	bne.n	8005e78 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8005e46:	693b      	ldr	r3, [r7, #16]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d10a      	bne.n	8005e62 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005e4c:	693b      	ldr	r3, [r7, #16]
 8005e4e:	015a      	lsls	r2, r3, #5
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	4413      	add	r3, r2
 8005e54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e58:	461a      	mov	r2, r3
 8005e5a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005e5e:	6013      	str	r3, [r2, #0]
 8005e60:	e013      	b.n	8005e8a <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005e62:	693b      	ldr	r3, [r7, #16]
 8005e64:	015a      	lsls	r2, r3, #5
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	4413      	add	r3, r2
 8005e6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e6e:	461a      	mov	r2, r3
 8005e70:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005e74:	6013      	str	r3, [r2, #0]
 8005e76:	e008      	b.n	8005e8a <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005e78:	693b      	ldr	r3, [r7, #16]
 8005e7a:	015a      	lsls	r2, r3, #5
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	4413      	add	r3, r2
 8005e80:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e84:	461a      	mov	r2, r3
 8005e86:	2300      	movs	r3, #0
 8005e88:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005e8a:	693b      	ldr	r3, [r7, #16]
 8005e8c:	015a      	lsls	r2, r3, #5
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	4413      	add	r3, r2
 8005e92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e96:	461a      	mov	r2, r3
 8005e98:	2300      	movs	r3, #0
 8005e9a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005e9c:	693b      	ldr	r3, [r7, #16]
 8005e9e:	015a      	lsls	r2, r3, #5
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	4413      	add	r3, r2
 8005ea4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ea8:	461a      	mov	r2, r3
 8005eaa:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005eae:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005eb0:	693b      	ldr	r3, [r7, #16]
 8005eb2:	3301      	adds	r3, #1
 8005eb4:	613b      	str	r3, [r7, #16]
 8005eb6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005eba:	461a      	mov	r2, r3
 8005ebc:	693b      	ldr	r3, [r7, #16]
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d3b5      	bcc.n	8005e2e <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ec8:	691b      	ldr	r3, [r3, #16]
 8005eca:	68fa      	ldr	r2, [r7, #12]
 8005ecc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005ed0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005ed4:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2200      	movs	r2, #0
 8005eda:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8005ee2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005ee4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d105      	bne.n	8005ef8 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	699b      	ldr	r3, [r3, #24]
 8005ef0:	f043 0210 	orr.w	r2, r3, #16
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	699a      	ldr	r2, [r3, #24]
 8005efc:	4b10      	ldr	r3, [pc, #64]	@ (8005f40 <USB_DevInit+0x2b8>)
 8005efe:	4313      	orrs	r3, r2
 8005f00:	687a      	ldr	r2, [r7, #4]
 8005f02:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005f04:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d005      	beq.n	8005f18 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	699b      	ldr	r3, [r3, #24]
 8005f10:	f043 0208 	orr.w	r2, r3, #8
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005f18:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005f1c:	2b01      	cmp	r3, #1
 8005f1e:	d107      	bne.n	8005f30 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	699b      	ldr	r3, [r3, #24]
 8005f24:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005f28:	f043 0304 	orr.w	r3, r3, #4
 8005f2c:	687a      	ldr	r2, [r7, #4]
 8005f2e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005f30:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f32:	4618      	mov	r0, r3
 8005f34:	3718      	adds	r7, #24
 8005f36:	46bd      	mov	sp, r7
 8005f38:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005f3c:	b004      	add	sp, #16
 8005f3e:	4770      	bx	lr
 8005f40:	803c3800 	.word	0x803c3800

08005f44 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005f44:	b480      	push	{r7}
 8005f46:	b085      	sub	sp, #20
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
 8005f4c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005f4e:	2300      	movs	r3, #0
 8005f50:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	3301      	adds	r3, #1
 8005f56:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005f5e:	d901      	bls.n	8005f64 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005f60:	2303      	movs	r3, #3
 8005f62:	e01b      	b.n	8005f9c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	691b      	ldr	r3, [r3, #16]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	daf2      	bge.n	8005f52 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	019b      	lsls	r3, r3, #6
 8005f74:	f043 0220 	orr.w	r2, r3, #32
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	3301      	adds	r3, #1
 8005f80:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005f88:	d901      	bls.n	8005f8e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005f8a:	2303      	movs	r3, #3
 8005f8c:	e006      	b.n	8005f9c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	691b      	ldr	r3, [r3, #16]
 8005f92:	f003 0320 	and.w	r3, r3, #32
 8005f96:	2b20      	cmp	r3, #32
 8005f98:	d0f0      	beq.n	8005f7c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005f9a:	2300      	movs	r3, #0
}
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	3714      	adds	r7, #20
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa6:	4770      	bx	lr

08005fa8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005fa8:	b480      	push	{r7}
 8005faa:	b085      	sub	sp, #20
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	3301      	adds	r3, #1
 8005fb8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005fc0:	d901      	bls.n	8005fc6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005fc2:	2303      	movs	r3, #3
 8005fc4:	e018      	b.n	8005ff8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	691b      	ldr	r3, [r3, #16]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	daf2      	bge.n	8005fb4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005fce:	2300      	movs	r3, #0
 8005fd0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2210      	movs	r2, #16
 8005fd6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	3301      	adds	r3, #1
 8005fdc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005fe4:	d901      	bls.n	8005fea <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005fe6:	2303      	movs	r3, #3
 8005fe8:	e006      	b.n	8005ff8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	691b      	ldr	r3, [r3, #16]
 8005fee:	f003 0310 	and.w	r3, r3, #16
 8005ff2:	2b10      	cmp	r3, #16
 8005ff4:	d0f0      	beq.n	8005fd8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005ff6:	2300      	movs	r3, #0
}
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	3714      	adds	r7, #20
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006002:	4770      	bx	lr

08006004 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006004:	b480      	push	{r7}
 8006006:	b085      	sub	sp, #20
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
 800600c:	460b      	mov	r3, r1
 800600e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800601a:	681a      	ldr	r2, [r3, #0]
 800601c:	78fb      	ldrb	r3, [r7, #3]
 800601e:	68f9      	ldr	r1, [r7, #12]
 8006020:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006024:	4313      	orrs	r3, r2
 8006026:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006028:	2300      	movs	r3, #0
}
 800602a:	4618      	mov	r0, r3
 800602c:	3714      	adds	r7, #20
 800602e:	46bd      	mov	sp, r7
 8006030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006034:	4770      	bx	lr

08006036 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8006036:	b480      	push	{r7}
 8006038:	b087      	sub	sp, #28
 800603a:	af00      	add	r7, sp, #0
 800603c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006042:	693b      	ldr	r3, [r7, #16]
 8006044:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006048:	689b      	ldr	r3, [r3, #8]
 800604a:	f003 0306 	and.w	r3, r3, #6
 800604e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d102      	bne.n	800605c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006056:	2300      	movs	r3, #0
 8006058:	75fb      	strb	r3, [r7, #23]
 800605a:	e00a      	b.n	8006072 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	2b02      	cmp	r3, #2
 8006060:	d002      	beq.n	8006068 <USB_GetDevSpeed+0x32>
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	2b06      	cmp	r3, #6
 8006066:	d102      	bne.n	800606e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006068:	2302      	movs	r3, #2
 800606a:	75fb      	strb	r3, [r7, #23]
 800606c:	e001      	b.n	8006072 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800606e:	230f      	movs	r3, #15
 8006070:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006072:	7dfb      	ldrb	r3, [r7, #23]
}
 8006074:	4618      	mov	r0, r3
 8006076:	371c      	adds	r7, #28
 8006078:	46bd      	mov	sp, r7
 800607a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607e:	4770      	bx	lr

08006080 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006080:	b480      	push	{r7}
 8006082:	b085      	sub	sp, #20
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
 8006088:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	781b      	ldrb	r3, [r3, #0]
 8006092:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	785b      	ldrb	r3, [r3, #1]
 8006098:	2b01      	cmp	r3, #1
 800609a:	d13a      	bne.n	8006112 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80060a2:	69da      	ldr	r2, [r3, #28]
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	781b      	ldrb	r3, [r3, #0]
 80060a8:	f003 030f 	and.w	r3, r3, #15
 80060ac:	2101      	movs	r1, #1
 80060ae:	fa01 f303 	lsl.w	r3, r1, r3
 80060b2:	b29b      	uxth	r3, r3
 80060b4:	68f9      	ldr	r1, [r7, #12]
 80060b6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80060ba:	4313      	orrs	r3, r2
 80060bc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80060be:	68bb      	ldr	r3, [r7, #8]
 80060c0:	015a      	lsls	r2, r3, #5
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	4413      	add	r3, r2
 80060c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d155      	bne.n	8006180 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80060d4:	68bb      	ldr	r3, [r7, #8]
 80060d6:	015a      	lsls	r2, r3, #5
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	4413      	add	r3, r2
 80060dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80060e0:	681a      	ldr	r2, [r3, #0]
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	689b      	ldr	r3, [r3, #8]
 80060e6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	791b      	ldrb	r3, [r3, #4]
 80060ee:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80060f0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80060f2:	68bb      	ldr	r3, [r7, #8]
 80060f4:	059b      	lsls	r3, r3, #22
 80060f6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80060f8:	4313      	orrs	r3, r2
 80060fa:	68ba      	ldr	r2, [r7, #8]
 80060fc:	0151      	lsls	r1, r2, #5
 80060fe:	68fa      	ldr	r2, [r7, #12]
 8006100:	440a      	add	r2, r1
 8006102:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006106:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800610a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800610e:	6013      	str	r3, [r2, #0]
 8006110:	e036      	b.n	8006180 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006118:	69da      	ldr	r2, [r3, #28]
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	781b      	ldrb	r3, [r3, #0]
 800611e:	f003 030f 	and.w	r3, r3, #15
 8006122:	2101      	movs	r1, #1
 8006124:	fa01 f303 	lsl.w	r3, r1, r3
 8006128:	041b      	lsls	r3, r3, #16
 800612a:	68f9      	ldr	r1, [r7, #12]
 800612c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006130:	4313      	orrs	r3, r2
 8006132:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006134:	68bb      	ldr	r3, [r7, #8]
 8006136:	015a      	lsls	r2, r3, #5
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	4413      	add	r3, r2
 800613c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006146:	2b00      	cmp	r3, #0
 8006148:	d11a      	bne.n	8006180 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800614a:	68bb      	ldr	r3, [r7, #8]
 800614c:	015a      	lsls	r2, r3, #5
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	4413      	add	r3, r2
 8006152:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006156:	681a      	ldr	r2, [r3, #0]
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	689b      	ldr	r3, [r3, #8]
 800615c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	791b      	ldrb	r3, [r3, #4]
 8006164:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006166:	430b      	orrs	r3, r1
 8006168:	4313      	orrs	r3, r2
 800616a:	68ba      	ldr	r2, [r7, #8]
 800616c:	0151      	lsls	r1, r2, #5
 800616e:	68fa      	ldr	r2, [r7, #12]
 8006170:	440a      	add	r2, r1
 8006172:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006176:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800617a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800617e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006180:	2300      	movs	r3, #0
}
 8006182:	4618      	mov	r0, r3
 8006184:	3714      	adds	r7, #20
 8006186:	46bd      	mov	sp, r7
 8006188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618c:	4770      	bx	lr
	...

08006190 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006190:	b480      	push	{r7}
 8006192:	b085      	sub	sp, #20
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
 8006198:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	781b      	ldrb	r3, [r3, #0]
 80061a2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	785b      	ldrb	r3, [r3, #1]
 80061a8:	2b01      	cmp	r3, #1
 80061aa:	d161      	bne.n	8006270 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80061ac:	68bb      	ldr	r3, [r7, #8]
 80061ae:	015a      	lsls	r2, r3, #5
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	4413      	add	r3, r2
 80061b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80061be:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80061c2:	d11f      	bne.n	8006204 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	015a      	lsls	r2, r3, #5
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	4413      	add	r3, r2
 80061cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	68ba      	ldr	r2, [r7, #8]
 80061d4:	0151      	lsls	r1, r2, #5
 80061d6:	68fa      	ldr	r2, [r7, #12]
 80061d8:	440a      	add	r2, r1
 80061da:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80061de:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80061e2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	015a      	lsls	r2, r3, #5
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	4413      	add	r3, r2
 80061ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	68ba      	ldr	r2, [r7, #8]
 80061f4:	0151      	lsls	r1, r2, #5
 80061f6:	68fa      	ldr	r2, [r7, #12]
 80061f8:	440a      	add	r2, r1
 80061fa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80061fe:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006202:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800620a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	781b      	ldrb	r3, [r3, #0]
 8006210:	f003 030f 	and.w	r3, r3, #15
 8006214:	2101      	movs	r1, #1
 8006216:	fa01 f303 	lsl.w	r3, r1, r3
 800621a:	b29b      	uxth	r3, r3
 800621c:	43db      	mvns	r3, r3
 800621e:	68f9      	ldr	r1, [r7, #12]
 8006220:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006224:	4013      	ands	r3, r2
 8006226:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800622e:	69da      	ldr	r2, [r3, #28]
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	781b      	ldrb	r3, [r3, #0]
 8006234:	f003 030f 	and.w	r3, r3, #15
 8006238:	2101      	movs	r1, #1
 800623a:	fa01 f303 	lsl.w	r3, r1, r3
 800623e:	b29b      	uxth	r3, r3
 8006240:	43db      	mvns	r3, r3
 8006242:	68f9      	ldr	r1, [r7, #12]
 8006244:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006248:	4013      	ands	r3, r2
 800624a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	015a      	lsls	r2, r3, #5
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	4413      	add	r3, r2
 8006254:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006258:	681a      	ldr	r2, [r3, #0]
 800625a:	68bb      	ldr	r3, [r7, #8]
 800625c:	0159      	lsls	r1, r3, #5
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	440b      	add	r3, r1
 8006262:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006266:	4619      	mov	r1, r3
 8006268:	4b35      	ldr	r3, [pc, #212]	@ (8006340 <USB_DeactivateEndpoint+0x1b0>)
 800626a:	4013      	ands	r3, r2
 800626c:	600b      	str	r3, [r1, #0]
 800626e:	e060      	b.n	8006332 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006270:	68bb      	ldr	r3, [r7, #8]
 8006272:	015a      	lsls	r2, r3, #5
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	4413      	add	r3, r2
 8006278:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006282:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006286:	d11f      	bne.n	80062c8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006288:	68bb      	ldr	r3, [r7, #8]
 800628a:	015a      	lsls	r2, r3, #5
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	4413      	add	r3, r2
 8006290:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	68ba      	ldr	r2, [r7, #8]
 8006298:	0151      	lsls	r1, r2, #5
 800629a:	68fa      	ldr	r2, [r7, #12]
 800629c:	440a      	add	r2, r1
 800629e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80062a2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80062a6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80062a8:	68bb      	ldr	r3, [r7, #8]
 80062aa:	015a      	lsls	r2, r3, #5
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	4413      	add	r3, r2
 80062b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	68ba      	ldr	r2, [r7, #8]
 80062b8:	0151      	lsls	r1, r2, #5
 80062ba:	68fa      	ldr	r2, [r7, #12]
 80062bc:	440a      	add	r2, r1
 80062be:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80062c2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80062c6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80062ce:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	781b      	ldrb	r3, [r3, #0]
 80062d4:	f003 030f 	and.w	r3, r3, #15
 80062d8:	2101      	movs	r1, #1
 80062da:	fa01 f303 	lsl.w	r3, r1, r3
 80062de:	041b      	lsls	r3, r3, #16
 80062e0:	43db      	mvns	r3, r3
 80062e2:	68f9      	ldr	r1, [r7, #12]
 80062e4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80062e8:	4013      	ands	r3, r2
 80062ea:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80062f2:	69da      	ldr	r2, [r3, #28]
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	781b      	ldrb	r3, [r3, #0]
 80062f8:	f003 030f 	and.w	r3, r3, #15
 80062fc:	2101      	movs	r1, #1
 80062fe:	fa01 f303 	lsl.w	r3, r1, r3
 8006302:	041b      	lsls	r3, r3, #16
 8006304:	43db      	mvns	r3, r3
 8006306:	68f9      	ldr	r1, [r7, #12]
 8006308:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800630c:	4013      	ands	r3, r2
 800630e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006310:	68bb      	ldr	r3, [r7, #8]
 8006312:	015a      	lsls	r2, r3, #5
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	4413      	add	r3, r2
 8006318:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800631c:	681a      	ldr	r2, [r3, #0]
 800631e:	68bb      	ldr	r3, [r7, #8]
 8006320:	0159      	lsls	r1, r3, #5
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	440b      	add	r3, r1
 8006326:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800632a:	4619      	mov	r1, r3
 800632c:	4b05      	ldr	r3, [pc, #20]	@ (8006344 <USB_DeactivateEndpoint+0x1b4>)
 800632e:	4013      	ands	r3, r2
 8006330:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006332:	2300      	movs	r3, #0
}
 8006334:	4618      	mov	r0, r3
 8006336:	3714      	adds	r7, #20
 8006338:	46bd      	mov	sp, r7
 800633a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633e:	4770      	bx	lr
 8006340:	ec337800 	.word	0xec337800
 8006344:	eff37800 	.word	0xeff37800

08006348 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b08a      	sub	sp, #40	@ 0x28
 800634c:	af02      	add	r7, sp, #8
 800634e:	60f8      	str	r0, [r7, #12]
 8006350:	60b9      	str	r1, [r7, #8]
 8006352:	4613      	mov	r3, r2
 8006354:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800635a:	68bb      	ldr	r3, [r7, #8]
 800635c:	781b      	ldrb	r3, [r3, #0]
 800635e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	785b      	ldrb	r3, [r3, #1]
 8006364:	2b01      	cmp	r3, #1
 8006366:	f040 817f 	bne.w	8006668 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	691b      	ldr	r3, [r3, #16]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d132      	bne.n	80063d8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006372:	69bb      	ldr	r3, [r7, #24]
 8006374:	015a      	lsls	r2, r3, #5
 8006376:	69fb      	ldr	r3, [r7, #28]
 8006378:	4413      	add	r3, r2
 800637a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800637e:	691b      	ldr	r3, [r3, #16]
 8006380:	69ba      	ldr	r2, [r7, #24]
 8006382:	0151      	lsls	r1, r2, #5
 8006384:	69fa      	ldr	r2, [r7, #28]
 8006386:	440a      	add	r2, r1
 8006388:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800638c:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006390:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006394:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006396:	69bb      	ldr	r3, [r7, #24]
 8006398:	015a      	lsls	r2, r3, #5
 800639a:	69fb      	ldr	r3, [r7, #28]
 800639c:	4413      	add	r3, r2
 800639e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063a2:	691b      	ldr	r3, [r3, #16]
 80063a4:	69ba      	ldr	r2, [r7, #24]
 80063a6:	0151      	lsls	r1, r2, #5
 80063a8:	69fa      	ldr	r2, [r7, #28]
 80063aa:	440a      	add	r2, r1
 80063ac:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80063b0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80063b4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80063b6:	69bb      	ldr	r3, [r7, #24]
 80063b8:	015a      	lsls	r2, r3, #5
 80063ba:	69fb      	ldr	r3, [r7, #28]
 80063bc:	4413      	add	r3, r2
 80063be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063c2:	691b      	ldr	r3, [r3, #16]
 80063c4:	69ba      	ldr	r2, [r7, #24]
 80063c6:	0151      	lsls	r1, r2, #5
 80063c8:	69fa      	ldr	r2, [r7, #28]
 80063ca:	440a      	add	r2, r1
 80063cc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80063d0:	0cdb      	lsrs	r3, r3, #19
 80063d2:	04db      	lsls	r3, r3, #19
 80063d4:	6113      	str	r3, [r2, #16]
 80063d6:	e097      	b.n	8006508 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80063d8:	69bb      	ldr	r3, [r7, #24]
 80063da:	015a      	lsls	r2, r3, #5
 80063dc:	69fb      	ldr	r3, [r7, #28]
 80063de:	4413      	add	r3, r2
 80063e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063e4:	691b      	ldr	r3, [r3, #16]
 80063e6:	69ba      	ldr	r2, [r7, #24]
 80063e8:	0151      	lsls	r1, r2, #5
 80063ea:	69fa      	ldr	r2, [r7, #28]
 80063ec:	440a      	add	r2, r1
 80063ee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80063f2:	0cdb      	lsrs	r3, r3, #19
 80063f4:	04db      	lsls	r3, r3, #19
 80063f6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80063f8:	69bb      	ldr	r3, [r7, #24]
 80063fa:	015a      	lsls	r2, r3, #5
 80063fc:	69fb      	ldr	r3, [r7, #28]
 80063fe:	4413      	add	r3, r2
 8006400:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006404:	691b      	ldr	r3, [r3, #16]
 8006406:	69ba      	ldr	r2, [r7, #24]
 8006408:	0151      	lsls	r1, r2, #5
 800640a:	69fa      	ldr	r2, [r7, #28]
 800640c:	440a      	add	r2, r1
 800640e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006412:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006416:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800641a:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800641c:	69bb      	ldr	r3, [r7, #24]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d11a      	bne.n	8006458 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8006422:	68bb      	ldr	r3, [r7, #8]
 8006424:	691a      	ldr	r2, [r3, #16]
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	689b      	ldr	r3, [r3, #8]
 800642a:	429a      	cmp	r2, r3
 800642c:	d903      	bls.n	8006436 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800642e:	68bb      	ldr	r3, [r7, #8]
 8006430:	689a      	ldr	r2, [r3, #8]
 8006432:	68bb      	ldr	r3, [r7, #8]
 8006434:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006436:	69bb      	ldr	r3, [r7, #24]
 8006438:	015a      	lsls	r2, r3, #5
 800643a:	69fb      	ldr	r3, [r7, #28]
 800643c:	4413      	add	r3, r2
 800643e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006442:	691b      	ldr	r3, [r3, #16]
 8006444:	69ba      	ldr	r2, [r7, #24]
 8006446:	0151      	lsls	r1, r2, #5
 8006448:	69fa      	ldr	r2, [r7, #28]
 800644a:	440a      	add	r2, r1
 800644c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006450:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006454:	6113      	str	r3, [r2, #16]
 8006456:	e044      	b.n	80064e2 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	691a      	ldr	r2, [r3, #16]
 800645c:	68bb      	ldr	r3, [r7, #8]
 800645e:	689b      	ldr	r3, [r3, #8]
 8006460:	4413      	add	r3, r2
 8006462:	1e5a      	subs	r2, r3, #1
 8006464:	68bb      	ldr	r3, [r7, #8]
 8006466:	689b      	ldr	r3, [r3, #8]
 8006468:	fbb2 f3f3 	udiv	r3, r2, r3
 800646c:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 800646e:	69bb      	ldr	r3, [r7, #24]
 8006470:	015a      	lsls	r2, r3, #5
 8006472:	69fb      	ldr	r3, [r7, #28]
 8006474:	4413      	add	r3, r2
 8006476:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800647a:	691a      	ldr	r2, [r3, #16]
 800647c:	8afb      	ldrh	r3, [r7, #22]
 800647e:	04d9      	lsls	r1, r3, #19
 8006480:	4ba4      	ldr	r3, [pc, #656]	@ (8006714 <USB_EPStartXfer+0x3cc>)
 8006482:	400b      	ands	r3, r1
 8006484:	69b9      	ldr	r1, [r7, #24]
 8006486:	0148      	lsls	r0, r1, #5
 8006488:	69f9      	ldr	r1, [r7, #28]
 800648a:	4401      	add	r1, r0
 800648c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006490:	4313      	orrs	r3, r2
 8006492:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8006494:	68bb      	ldr	r3, [r7, #8]
 8006496:	791b      	ldrb	r3, [r3, #4]
 8006498:	2b01      	cmp	r3, #1
 800649a:	d122      	bne.n	80064e2 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800649c:	69bb      	ldr	r3, [r7, #24]
 800649e:	015a      	lsls	r2, r3, #5
 80064a0:	69fb      	ldr	r3, [r7, #28]
 80064a2:	4413      	add	r3, r2
 80064a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80064a8:	691b      	ldr	r3, [r3, #16]
 80064aa:	69ba      	ldr	r2, [r7, #24]
 80064ac:	0151      	lsls	r1, r2, #5
 80064ae:	69fa      	ldr	r2, [r7, #28]
 80064b0:	440a      	add	r2, r1
 80064b2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80064b6:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80064ba:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 80064bc:	69bb      	ldr	r3, [r7, #24]
 80064be:	015a      	lsls	r2, r3, #5
 80064c0:	69fb      	ldr	r3, [r7, #28]
 80064c2:	4413      	add	r3, r2
 80064c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80064c8:	691a      	ldr	r2, [r3, #16]
 80064ca:	8afb      	ldrh	r3, [r7, #22]
 80064cc:	075b      	lsls	r3, r3, #29
 80064ce:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 80064d2:	69b9      	ldr	r1, [r7, #24]
 80064d4:	0148      	lsls	r0, r1, #5
 80064d6:	69f9      	ldr	r1, [r7, #28]
 80064d8:	4401      	add	r1, r0
 80064da:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80064de:	4313      	orrs	r3, r2
 80064e0:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80064e2:	69bb      	ldr	r3, [r7, #24]
 80064e4:	015a      	lsls	r2, r3, #5
 80064e6:	69fb      	ldr	r3, [r7, #28]
 80064e8:	4413      	add	r3, r2
 80064ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80064ee:	691a      	ldr	r2, [r3, #16]
 80064f0:	68bb      	ldr	r3, [r7, #8]
 80064f2:	691b      	ldr	r3, [r3, #16]
 80064f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80064f8:	69b9      	ldr	r1, [r7, #24]
 80064fa:	0148      	lsls	r0, r1, #5
 80064fc:	69f9      	ldr	r1, [r7, #28]
 80064fe:	4401      	add	r1, r0
 8006500:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006504:	4313      	orrs	r3, r2
 8006506:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006508:	79fb      	ldrb	r3, [r7, #7]
 800650a:	2b01      	cmp	r3, #1
 800650c:	d14b      	bne.n	80065a6 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800650e:	68bb      	ldr	r3, [r7, #8]
 8006510:	69db      	ldr	r3, [r3, #28]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d009      	beq.n	800652a <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006516:	69bb      	ldr	r3, [r7, #24]
 8006518:	015a      	lsls	r2, r3, #5
 800651a:	69fb      	ldr	r3, [r7, #28]
 800651c:	4413      	add	r3, r2
 800651e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006522:	461a      	mov	r2, r3
 8006524:	68bb      	ldr	r3, [r7, #8]
 8006526:	69db      	ldr	r3, [r3, #28]
 8006528:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800652a:	68bb      	ldr	r3, [r7, #8]
 800652c:	791b      	ldrb	r3, [r3, #4]
 800652e:	2b01      	cmp	r3, #1
 8006530:	d128      	bne.n	8006584 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006532:	69fb      	ldr	r3, [r7, #28]
 8006534:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006538:	689b      	ldr	r3, [r3, #8]
 800653a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800653e:	2b00      	cmp	r3, #0
 8006540:	d110      	bne.n	8006564 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006542:	69bb      	ldr	r3, [r7, #24]
 8006544:	015a      	lsls	r2, r3, #5
 8006546:	69fb      	ldr	r3, [r7, #28]
 8006548:	4413      	add	r3, r2
 800654a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	69ba      	ldr	r2, [r7, #24]
 8006552:	0151      	lsls	r1, r2, #5
 8006554:	69fa      	ldr	r2, [r7, #28]
 8006556:	440a      	add	r2, r1
 8006558:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800655c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006560:	6013      	str	r3, [r2, #0]
 8006562:	e00f      	b.n	8006584 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006564:	69bb      	ldr	r3, [r7, #24]
 8006566:	015a      	lsls	r2, r3, #5
 8006568:	69fb      	ldr	r3, [r7, #28]
 800656a:	4413      	add	r3, r2
 800656c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	69ba      	ldr	r2, [r7, #24]
 8006574:	0151      	lsls	r1, r2, #5
 8006576:	69fa      	ldr	r2, [r7, #28]
 8006578:	440a      	add	r2, r1
 800657a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800657e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006582:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006584:	69bb      	ldr	r3, [r7, #24]
 8006586:	015a      	lsls	r2, r3, #5
 8006588:	69fb      	ldr	r3, [r7, #28]
 800658a:	4413      	add	r3, r2
 800658c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	69ba      	ldr	r2, [r7, #24]
 8006594:	0151      	lsls	r1, r2, #5
 8006596:	69fa      	ldr	r2, [r7, #28]
 8006598:	440a      	add	r2, r1
 800659a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800659e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80065a2:	6013      	str	r3, [r2, #0]
 80065a4:	e166      	b.n	8006874 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80065a6:	69bb      	ldr	r3, [r7, #24]
 80065a8:	015a      	lsls	r2, r3, #5
 80065aa:	69fb      	ldr	r3, [r7, #28]
 80065ac:	4413      	add	r3, r2
 80065ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	69ba      	ldr	r2, [r7, #24]
 80065b6:	0151      	lsls	r1, r2, #5
 80065b8:	69fa      	ldr	r2, [r7, #28]
 80065ba:	440a      	add	r2, r1
 80065bc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80065c0:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80065c4:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80065c6:	68bb      	ldr	r3, [r7, #8]
 80065c8:	791b      	ldrb	r3, [r3, #4]
 80065ca:	2b01      	cmp	r3, #1
 80065cc:	d015      	beq.n	80065fa <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80065ce:	68bb      	ldr	r3, [r7, #8]
 80065d0:	691b      	ldr	r3, [r3, #16]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	f000 814e 	beq.w	8006874 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80065d8:	69fb      	ldr	r3, [r7, #28]
 80065da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80065de:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80065e0:	68bb      	ldr	r3, [r7, #8]
 80065e2:	781b      	ldrb	r3, [r3, #0]
 80065e4:	f003 030f 	and.w	r3, r3, #15
 80065e8:	2101      	movs	r1, #1
 80065ea:	fa01 f303 	lsl.w	r3, r1, r3
 80065ee:	69f9      	ldr	r1, [r7, #28]
 80065f0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80065f4:	4313      	orrs	r3, r2
 80065f6:	634b      	str	r3, [r1, #52]	@ 0x34
 80065f8:	e13c      	b.n	8006874 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80065fa:	69fb      	ldr	r3, [r7, #28]
 80065fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006600:	689b      	ldr	r3, [r3, #8]
 8006602:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006606:	2b00      	cmp	r3, #0
 8006608:	d110      	bne.n	800662c <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800660a:	69bb      	ldr	r3, [r7, #24]
 800660c:	015a      	lsls	r2, r3, #5
 800660e:	69fb      	ldr	r3, [r7, #28]
 8006610:	4413      	add	r3, r2
 8006612:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	69ba      	ldr	r2, [r7, #24]
 800661a:	0151      	lsls	r1, r2, #5
 800661c:	69fa      	ldr	r2, [r7, #28]
 800661e:	440a      	add	r2, r1
 8006620:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006624:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006628:	6013      	str	r3, [r2, #0]
 800662a:	e00f      	b.n	800664c <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800662c:	69bb      	ldr	r3, [r7, #24]
 800662e:	015a      	lsls	r2, r3, #5
 8006630:	69fb      	ldr	r3, [r7, #28]
 8006632:	4413      	add	r3, r2
 8006634:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	69ba      	ldr	r2, [r7, #24]
 800663c:	0151      	lsls	r1, r2, #5
 800663e:	69fa      	ldr	r2, [r7, #28]
 8006640:	440a      	add	r2, r1
 8006642:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006646:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800664a:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800664c:	68bb      	ldr	r3, [r7, #8]
 800664e:	68d9      	ldr	r1, [r3, #12]
 8006650:	68bb      	ldr	r3, [r7, #8]
 8006652:	781a      	ldrb	r2, [r3, #0]
 8006654:	68bb      	ldr	r3, [r7, #8]
 8006656:	691b      	ldr	r3, [r3, #16]
 8006658:	b298      	uxth	r0, r3
 800665a:	79fb      	ldrb	r3, [r7, #7]
 800665c:	9300      	str	r3, [sp, #0]
 800665e:	4603      	mov	r3, r0
 8006660:	68f8      	ldr	r0, [r7, #12]
 8006662:	f000 f9b9 	bl	80069d8 <USB_WritePacket>
 8006666:	e105      	b.n	8006874 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006668:	69bb      	ldr	r3, [r7, #24]
 800666a:	015a      	lsls	r2, r3, #5
 800666c:	69fb      	ldr	r3, [r7, #28]
 800666e:	4413      	add	r3, r2
 8006670:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006674:	691b      	ldr	r3, [r3, #16]
 8006676:	69ba      	ldr	r2, [r7, #24]
 8006678:	0151      	lsls	r1, r2, #5
 800667a:	69fa      	ldr	r2, [r7, #28]
 800667c:	440a      	add	r2, r1
 800667e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006682:	0cdb      	lsrs	r3, r3, #19
 8006684:	04db      	lsls	r3, r3, #19
 8006686:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006688:	69bb      	ldr	r3, [r7, #24]
 800668a:	015a      	lsls	r2, r3, #5
 800668c:	69fb      	ldr	r3, [r7, #28]
 800668e:	4413      	add	r3, r2
 8006690:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006694:	691b      	ldr	r3, [r3, #16]
 8006696:	69ba      	ldr	r2, [r7, #24]
 8006698:	0151      	lsls	r1, r2, #5
 800669a:	69fa      	ldr	r2, [r7, #28]
 800669c:	440a      	add	r2, r1
 800669e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80066a2:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80066a6:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80066aa:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 80066ac:	69bb      	ldr	r3, [r7, #24]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d132      	bne.n	8006718 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 80066b2:	68bb      	ldr	r3, [r7, #8]
 80066b4:	691b      	ldr	r3, [r3, #16]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d003      	beq.n	80066c2 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 80066ba:	68bb      	ldr	r3, [r7, #8]
 80066bc:	689a      	ldr	r2, [r3, #8]
 80066be:	68bb      	ldr	r3, [r7, #8]
 80066c0:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80066c2:	68bb      	ldr	r3, [r7, #8]
 80066c4:	689a      	ldr	r2, [r3, #8]
 80066c6:	68bb      	ldr	r3, [r7, #8]
 80066c8:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80066ca:	69bb      	ldr	r3, [r7, #24]
 80066cc:	015a      	lsls	r2, r3, #5
 80066ce:	69fb      	ldr	r3, [r7, #28]
 80066d0:	4413      	add	r3, r2
 80066d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066d6:	691a      	ldr	r2, [r3, #16]
 80066d8:	68bb      	ldr	r3, [r7, #8]
 80066da:	6a1b      	ldr	r3, [r3, #32]
 80066dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80066e0:	69b9      	ldr	r1, [r7, #24]
 80066e2:	0148      	lsls	r0, r1, #5
 80066e4:	69f9      	ldr	r1, [r7, #28]
 80066e6:	4401      	add	r1, r0
 80066e8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80066ec:	4313      	orrs	r3, r2
 80066ee:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80066f0:	69bb      	ldr	r3, [r7, #24]
 80066f2:	015a      	lsls	r2, r3, #5
 80066f4:	69fb      	ldr	r3, [r7, #28]
 80066f6:	4413      	add	r3, r2
 80066f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066fc:	691b      	ldr	r3, [r3, #16]
 80066fe:	69ba      	ldr	r2, [r7, #24]
 8006700:	0151      	lsls	r1, r2, #5
 8006702:	69fa      	ldr	r2, [r7, #28]
 8006704:	440a      	add	r2, r1
 8006706:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800670a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800670e:	6113      	str	r3, [r2, #16]
 8006710:	e062      	b.n	80067d8 <USB_EPStartXfer+0x490>
 8006712:	bf00      	nop
 8006714:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8006718:	68bb      	ldr	r3, [r7, #8]
 800671a:	691b      	ldr	r3, [r3, #16]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d123      	bne.n	8006768 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006720:	69bb      	ldr	r3, [r7, #24]
 8006722:	015a      	lsls	r2, r3, #5
 8006724:	69fb      	ldr	r3, [r7, #28]
 8006726:	4413      	add	r3, r2
 8006728:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800672c:	691a      	ldr	r2, [r3, #16]
 800672e:	68bb      	ldr	r3, [r7, #8]
 8006730:	689b      	ldr	r3, [r3, #8]
 8006732:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006736:	69b9      	ldr	r1, [r7, #24]
 8006738:	0148      	lsls	r0, r1, #5
 800673a:	69f9      	ldr	r1, [r7, #28]
 800673c:	4401      	add	r1, r0
 800673e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006742:	4313      	orrs	r3, r2
 8006744:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006746:	69bb      	ldr	r3, [r7, #24]
 8006748:	015a      	lsls	r2, r3, #5
 800674a:	69fb      	ldr	r3, [r7, #28]
 800674c:	4413      	add	r3, r2
 800674e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006752:	691b      	ldr	r3, [r3, #16]
 8006754:	69ba      	ldr	r2, [r7, #24]
 8006756:	0151      	lsls	r1, r2, #5
 8006758:	69fa      	ldr	r2, [r7, #28]
 800675a:	440a      	add	r2, r1
 800675c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006760:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006764:	6113      	str	r3, [r2, #16]
 8006766:	e037      	b.n	80067d8 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006768:	68bb      	ldr	r3, [r7, #8]
 800676a:	691a      	ldr	r2, [r3, #16]
 800676c:	68bb      	ldr	r3, [r7, #8]
 800676e:	689b      	ldr	r3, [r3, #8]
 8006770:	4413      	add	r3, r2
 8006772:	1e5a      	subs	r2, r3, #1
 8006774:	68bb      	ldr	r3, [r7, #8]
 8006776:	689b      	ldr	r3, [r3, #8]
 8006778:	fbb2 f3f3 	udiv	r3, r2, r3
 800677c:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800677e:	68bb      	ldr	r3, [r7, #8]
 8006780:	689b      	ldr	r3, [r3, #8]
 8006782:	8afa      	ldrh	r2, [r7, #22]
 8006784:	fb03 f202 	mul.w	r2, r3, r2
 8006788:	68bb      	ldr	r3, [r7, #8]
 800678a:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800678c:	69bb      	ldr	r3, [r7, #24]
 800678e:	015a      	lsls	r2, r3, #5
 8006790:	69fb      	ldr	r3, [r7, #28]
 8006792:	4413      	add	r3, r2
 8006794:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006798:	691a      	ldr	r2, [r3, #16]
 800679a:	8afb      	ldrh	r3, [r7, #22]
 800679c:	04d9      	lsls	r1, r3, #19
 800679e:	4b38      	ldr	r3, [pc, #224]	@ (8006880 <USB_EPStartXfer+0x538>)
 80067a0:	400b      	ands	r3, r1
 80067a2:	69b9      	ldr	r1, [r7, #24]
 80067a4:	0148      	lsls	r0, r1, #5
 80067a6:	69f9      	ldr	r1, [r7, #28]
 80067a8:	4401      	add	r1, r0
 80067aa:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80067ae:	4313      	orrs	r3, r2
 80067b0:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80067b2:	69bb      	ldr	r3, [r7, #24]
 80067b4:	015a      	lsls	r2, r3, #5
 80067b6:	69fb      	ldr	r3, [r7, #28]
 80067b8:	4413      	add	r3, r2
 80067ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067be:	691a      	ldr	r2, [r3, #16]
 80067c0:	68bb      	ldr	r3, [r7, #8]
 80067c2:	6a1b      	ldr	r3, [r3, #32]
 80067c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80067c8:	69b9      	ldr	r1, [r7, #24]
 80067ca:	0148      	lsls	r0, r1, #5
 80067cc:	69f9      	ldr	r1, [r7, #28]
 80067ce:	4401      	add	r1, r0
 80067d0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80067d4:	4313      	orrs	r3, r2
 80067d6:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80067d8:	79fb      	ldrb	r3, [r7, #7]
 80067da:	2b01      	cmp	r3, #1
 80067dc:	d10d      	bne.n	80067fa <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80067de:	68bb      	ldr	r3, [r7, #8]
 80067e0:	68db      	ldr	r3, [r3, #12]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d009      	beq.n	80067fa <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80067e6:	68bb      	ldr	r3, [r7, #8]
 80067e8:	68d9      	ldr	r1, [r3, #12]
 80067ea:	69bb      	ldr	r3, [r7, #24]
 80067ec:	015a      	lsls	r2, r3, #5
 80067ee:	69fb      	ldr	r3, [r7, #28]
 80067f0:	4413      	add	r3, r2
 80067f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067f6:	460a      	mov	r2, r1
 80067f8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80067fa:	68bb      	ldr	r3, [r7, #8]
 80067fc:	791b      	ldrb	r3, [r3, #4]
 80067fe:	2b01      	cmp	r3, #1
 8006800:	d128      	bne.n	8006854 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006802:	69fb      	ldr	r3, [r7, #28]
 8006804:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006808:	689b      	ldr	r3, [r3, #8]
 800680a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800680e:	2b00      	cmp	r3, #0
 8006810:	d110      	bne.n	8006834 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006812:	69bb      	ldr	r3, [r7, #24]
 8006814:	015a      	lsls	r2, r3, #5
 8006816:	69fb      	ldr	r3, [r7, #28]
 8006818:	4413      	add	r3, r2
 800681a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	69ba      	ldr	r2, [r7, #24]
 8006822:	0151      	lsls	r1, r2, #5
 8006824:	69fa      	ldr	r2, [r7, #28]
 8006826:	440a      	add	r2, r1
 8006828:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800682c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006830:	6013      	str	r3, [r2, #0]
 8006832:	e00f      	b.n	8006854 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006834:	69bb      	ldr	r3, [r7, #24]
 8006836:	015a      	lsls	r2, r3, #5
 8006838:	69fb      	ldr	r3, [r7, #28]
 800683a:	4413      	add	r3, r2
 800683c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	69ba      	ldr	r2, [r7, #24]
 8006844:	0151      	lsls	r1, r2, #5
 8006846:	69fa      	ldr	r2, [r7, #28]
 8006848:	440a      	add	r2, r1
 800684a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800684e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006852:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006854:	69bb      	ldr	r3, [r7, #24]
 8006856:	015a      	lsls	r2, r3, #5
 8006858:	69fb      	ldr	r3, [r7, #28]
 800685a:	4413      	add	r3, r2
 800685c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	69ba      	ldr	r2, [r7, #24]
 8006864:	0151      	lsls	r1, r2, #5
 8006866:	69fa      	ldr	r2, [r7, #28]
 8006868:	440a      	add	r2, r1
 800686a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800686e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006872:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006874:	2300      	movs	r3, #0
}
 8006876:	4618      	mov	r0, r3
 8006878:	3720      	adds	r7, #32
 800687a:	46bd      	mov	sp, r7
 800687c:	bd80      	pop	{r7, pc}
 800687e:	bf00      	nop
 8006880:	1ff80000 	.word	0x1ff80000

08006884 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006884:	b480      	push	{r7}
 8006886:	b087      	sub	sp, #28
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
 800688c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800688e:	2300      	movs	r3, #0
 8006890:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8006892:	2300      	movs	r3, #0
 8006894:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	785b      	ldrb	r3, [r3, #1]
 800689e:	2b01      	cmp	r3, #1
 80068a0:	d14a      	bne.n	8006938 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	781b      	ldrb	r3, [r3, #0]
 80068a6:	015a      	lsls	r2, r3, #5
 80068a8:	693b      	ldr	r3, [r7, #16]
 80068aa:	4413      	add	r3, r2
 80068ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80068b6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80068ba:	f040 8086 	bne.w	80069ca <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	781b      	ldrb	r3, [r3, #0]
 80068c2:	015a      	lsls	r2, r3, #5
 80068c4:	693b      	ldr	r3, [r7, #16]
 80068c6:	4413      	add	r3, r2
 80068c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	683a      	ldr	r2, [r7, #0]
 80068d0:	7812      	ldrb	r2, [r2, #0]
 80068d2:	0151      	lsls	r1, r2, #5
 80068d4:	693a      	ldr	r2, [r7, #16]
 80068d6:	440a      	add	r2, r1
 80068d8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80068dc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80068e0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	781b      	ldrb	r3, [r3, #0]
 80068e6:	015a      	lsls	r2, r3, #5
 80068e8:	693b      	ldr	r3, [r7, #16]
 80068ea:	4413      	add	r3, r2
 80068ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	683a      	ldr	r2, [r7, #0]
 80068f4:	7812      	ldrb	r2, [r2, #0]
 80068f6:	0151      	lsls	r1, r2, #5
 80068f8:	693a      	ldr	r2, [r7, #16]
 80068fa:	440a      	add	r2, r1
 80068fc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006900:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006904:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	3301      	adds	r3, #1
 800690a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8006912:	4293      	cmp	r3, r2
 8006914:	d902      	bls.n	800691c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8006916:	2301      	movs	r3, #1
 8006918:	75fb      	strb	r3, [r7, #23]
          break;
 800691a:	e056      	b.n	80069ca <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	781b      	ldrb	r3, [r3, #0]
 8006920:	015a      	lsls	r2, r3, #5
 8006922:	693b      	ldr	r3, [r7, #16]
 8006924:	4413      	add	r3, r2
 8006926:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006930:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006934:	d0e7      	beq.n	8006906 <USB_EPStopXfer+0x82>
 8006936:	e048      	b.n	80069ca <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	781b      	ldrb	r3, [r3, #0]
 800693c:	015a      	lsls	r2, r3, #5
 800693e:	693b      	ldr	r3, [r7, #16]
 8006940:	4413      	add	r3, r2
 8006942:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800694c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006950:	d13b      	bne.n	80069ca <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	781b      	ldrb	r3, [r3, #0]
 8006956:	015a      	lsls	r2, r3, #5
 8006958:	693b      	ldr	r3, [r7, #16]
 800695a:	4413      	add	r3, r2
 800695c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	683a      	ldr	r2, [r7, #0]
 8006964:	7812      	ldrb	r2, [r2, #0]
 8006966:	0151      	lsls	r1, r2, #5
 8006968:	693a      	ldr	r2, [r7, #16]
 800696a:	440a      	add	r2, r1
 800696c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006970:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006974:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	781b      	ldrb	r3, [r3, #0]
 800697a:	015a      	lsls	r2, r3, #5
 800697c:	693b      	ldr	r3, [r7, #16]
 800697e:	4413      	add	r3, r2
 8006980:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	683a      	ldr	r2, [r7, #0]
 8006988:	7812      	ldrb	r2, [r2, #0]
 800698a:	0151      	lsls	r1, r2, #5
 800698c:	693a      	ldr	r2, [r7, #16]
 800698e:	440a      	add	r2, r1
 8006990:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006994:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006998:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	3301      	adds	r3, #1
 800699e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	f242 7210 	movw	r2, #10000	@ 0x2710
 80069a6:	4293      	cmp	r3, r2
 80069a8:	d902      	bls.n	80069b0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80069aa:	2301      	movs	r3, #1
 80069ac:	75fb      	strb	r3, [r7, #23]
          break;
 80069ae:	e00c      	b.n	80069ca <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	781b      	ldrb	r3, [r3, #0]
 80069b4:	015a      	lsls	r2, r3, #5
 80069b6:	693b      	ldr	r3, [r7, #16]
 80069b8:	4413      	add	r3, r2
 80069ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80069c4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80069c8:	d0e7      	beq.n	800699a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80069ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80069cc:	4618      	mov	r0, r3
 80069ce:	371c      	adds	r7, #28
 80069d0:	46bd      	mov	sp, r7
 80069d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d6:	4770      	bx	lr

080069d8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80069d8:	b480      	push	{r7}
 80069da:	b089      	sub	sp, #36	@ 0x24
 80069dc:	af00      	add	r7, sp, #0
 80069de:	60f8      	str	r0, [r7, #12]
 80069e0:	60b9      	str	r1, [r7, #8]
 80069e2:	4611      	mov	r1, r2
 80069e4:	461a      	mov	r2, r3
 80069e6:	460b      	mov	r3, r1
 80069e8:	71fb      	strb	r3, [r7, #7]
 80069ea:	4613      	mov	r3, r2
 80069ec:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80069f2:	68bb      	ldr	r3, [r7, #8]
 80069f4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80069f6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d123      	bne.n	8006a46 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80069fe:	88bb      	ldrh	r3, [r7, #4]
 8006a00:	3303      	adds	r3, #3
 8006a02:	089b      	lsrs	r3, r3, #2
 8006a04:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006a06:	2300      	movs	r3, #0
 8006a08:	61bb      	str	r3, [r7, #24]
 8006a0a:	e018      	b.n	8006a3e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006a0c:	79fb      	ldrb	r3, [r7, #7]
 8006a0e:	031a      	lsls	r2, r3, #12
 8006a10:	697b      	ldr	r3, [r7, #20]
 8006a12:	4413      	add	r3, r2
 8006a14:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006a18:	461a      	mov	r2, r3
 8006a1a:	69fb      	ldr	r3, [r7, #28]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006a20:	69fb      	ldr	r3, [r7, #28]
 8006a22:	3301      	adds	r3, #1
 8006a24:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006a26:	69fb      	ldr	r3, [r7, #28]
 8006a28:	3301      	adds	r3, #1
 8006a2a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006a2c:	69fb      	ldr	r3, [r7, #28]
 8006a2e:	3301      	adds	r3, #1
 8006a30:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006a32:	69fb      	ldr	r3, [r7, #28]
 8006a34:	3301      	adds	r3, #1
 8006a36:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006a38:	69bb      	ldr	r3, [r7, #24]
 8006a3a:	3301      	adds	r3, #1
 8006a3c:	61bb      	str	r3, [r7, #24]
 8006a3e:	69ba      	ldr	r2, [r7, #24]
 8006a40:	693b      	ldr	r3, [r7, #16]
 8006a42:	429a      	cmp	r2, r3
 8006a44:	d3e2      	bcc.n	8006a0c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006a46:	2300      	movs	r3, #0
}
 8006a48:	4618      	mov	r0, r3
 8006a4a:	3724      	adds	r7, #36	@ 0x24
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a52:	4770      	bx	lr

08006a54 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006a54:	b480      	push	{r7}
 8006a56:	b08b      	sub	sp, #44	@ 0x2c
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	60f8      	str	r0, [r7, #12]
 8006a5c:	60b9      	str	r1, [r7, #8]
 8006a5e:	4613      	mov	r3, r2
 8006a60:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006a66:	68bb      	ldr	r3, [r7, #8]
 8006a68:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006a6a:	88fb      	ldrh	r3, [r7, #6]
 8006a6c:	089b      	lsrs	r3, r3, #2
 8006a6e:	b29b      	uxth	r3, r3
 8006a70:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006a72:	88fb      	ldrh	r3, [r7, #6]
 8006a74:	f003 0303 	and.w	r3, r3, #3
 8006a78:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	623b      	str	r3, [r7, #32]
 8006a7e:	e014      	b.n	8006aaa <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006a80:	69bb      	ldr	r3, [r7, #24]
 8006a82:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006a86:	681a      	ldr	r2, [r3, #0]
 8006a88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a8a:	601a      	str	r2, [r3, #0]
    pDest++;
 8006a8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a8e:	3301      	adds	r3, #1
 8006a90:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006a92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a94:	3301      	adds	r3, #1
 8006a96:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006a98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a9a:	3301      	adds	r3, #1
 8006a9c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006a9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aa0:	3301      	adds	r3, #1
 8006aa2:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8006aa4:	6a3b      	ldr	r3, [r7, #32]
 8006aa6:	3301      	adds	r3, #1
 8006aa8:	623b      	str	r3, [r7, #32]
 8006aaa:	6a3a      	ldr	r2, [r7, #32]
 8006aac:	697b      	ldr	r3, [r7, #20]
 8006aae:	429a      	cmp	r2, r3
 8006ab0:	d3e6      	bcc.n	8006a80 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006ab2:	8bfb      	ldrh	r3, [r7, #30]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d01e      	beq.n	8006af6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006ab8:	2300      	movs	r3, #0
 8006aba:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006abc:	69bb      	ldr	r3, [r7, #24]
 8006abe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006ac2:	461a      	mov	r2, r3
 8006ac4:	f107 0310 	add.w	r3, r7, #16
 8006ac8:	6812      	ldr	r2, [r2, #0]
 8006aca:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006acc:	693a      	ldr	r2, [r7, #16]
 8006ace:	6a3b      	ldr	r3, [r7, #32]
 8006ad0:	b2db      	uxtb	r3, r3
 8006ad2:	00db      	lsls	r3, r3, #3
 8006ad4:	fa22 f303 	lsr.w	r3, r2, r3
 8006ad8:	b2da      	uxtb	r2, r3
 8006ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006adc:	701a      	strb	r2, [r3, #0]
      i++;
 8006ade:	6a3b      	ldr	r3, [r7, #32]
 8006ae0:	3301      	adds	r3, #1
 8006ae2:	623b      	str	r3, [r7, #32]
      pDest++;
 8006ae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ae6:	3301      	adds	r3, #1
 8006ae8:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8006aea:	8bfb      	ldrh	r3, [r7, #30]
 8006aec:	3b01      	subs	r3, #1
 8006aee:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006af0:	8bfb      	ldrh	r3, [r7, #30]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d1ea      	bne.n	8006acc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006af6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006af8:	4618      	mov	r0, r3
 8006afa:	372c      	adds	r7, #44	@ 0x2c
 8006afc:	46bd      	mov	sp, r7
 8006afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b02:	4770      	bx	lr

08006b04 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006b04:	b480      	push	{r7}
 8006b06:	b085      	sub	sp, #20
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
 8006b0c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	781b      	ldrb	r3, [r3, #0]
 8006b16:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	785b      	ldrb	r3, [r3, #1]
 8006b1c:	2b01      	cmp	r3, #1
 8006b1e:	d12c      	bne.n	8006b7a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006b20:	68bb      	ldr	r3, [r7, #8]
 8006b22:	015a      	lsls	r2, r3, #5
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	4413      	add	r3, r2
 8006b28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	db12      	blt.n	8006b58 <USB_EPSetStall+0x54>
 8006b32:	68bb      	ldr	r3, [r7, #8]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d00f      	beq.n	8006b58 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006b38:	68bb      	ldr	r3, [r7, #8]
 8006b3a:	015a      	lsls	r2, r3, #5
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	4413      	add	r3, r2
 8006b40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	68ba      	ldr	r2, [r7, #8]
 8006b48:	0151      	lsls	r1, r2, #5
 8006b4a:	68fa      	ldr	r2, [r7, #12]
 8006b4c:	440a      	add	r2, r1
 8006b4e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006b52:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006b56:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	015a      	lsls	r2, r3, #5
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	4413      	add	r3, r2
 8006b60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	68ba      	ldr	r2, [r7, #8]
 8006b68:	0151      	lsls	r1, r2, #5
 8006b6a:	68fa      	ldr	r2, [r7, #12]
 8006b6c:	440a      	add	r2, r1
 8006b6e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006b72:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006b76:	6013      	str	r3, [r2, #0]
 8006b78:	e02b      	b.n	8006bd2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006b7a:	68bb      	ldr	r3, [r7, #8]
 8006b7c:	015a      	lsls	r2, r3, #5
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	4413      	add	r3, r2
 8006b82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	db12      	blt.n	8006bb2 <USB_EPSetStall+0xae>
 8006b8c:	68bb      	ldr	r3, [r7, #8]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d00f      	beq.n	8006bb2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006b92:	68bb      	ldr	r3, [r7, #8]
 8006b94:	015a      	lsls	r2, r3, #5
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	4413      	add	r3, r2
 8006b9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	68ba      	ldr	r2, [r7, #8]
 8006ba2:	0151      	lsls	r1, r2, #5
 8006ba4:	68fa      	ldr	r2, [r7, #12]
 8006ba6:	440a      	add	r2, r1
 8006ba8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006bac:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006bb0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006bb2:	68bb      	ldr	r3, [r7, #8]
 8006bb4:	015a      	lsls	r2, r3, #5
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	4413      	add	r3, r2
 8006bba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	68ba      	ldr	r2, [r7, #8]
 8006bc2:	0151      	lsls	r1, r2, #5
 8006bc4:	68fa      	ldr	r2, [r7, #12]
 8006bc6:	440a      	add	r2, r1
 8006bc8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006bcc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006bd0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006bd2:	2300      	movs	r3, #0
}
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	3714      	adds	r7, #20
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bde:	4770      	bx	lr

08006be0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006be0:	b480      	push	{r7}
 8006be2:	b085      	sub	sp, #20
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
 8006be8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	781b      	ldrb	r3, [r3, #0]
 8006bf2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	785b      	ldrb	r3, [r3, #1]
 8006bf8:	2b01      	cmp	r3, #1
 8006bfa:	d128      	bne.n	8006c4e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006bfc:	68bb      	ldr	r3, [r7, #8]
 8006bfe:	015a      	lsls	r2, r3, #5
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	4413      	add	r3, r2
 8006c04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	68ba      	ldr	r2, [r7, #8]
 8006c0c:	0151      	lsls	r1, r2, #5
 8006c0e:	68fa      	ldr	r2, [r7, #12]
 8006c10:	440a      	add	r2, r1
 8006c12:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006c16:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006c1a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	791b      	ldrb	r3, [r3, #4]
 8006c20:	2b03      	cmp	r3, #3
 8006c22:	d003      	beq.n	8006c2c <USB_EPClearStall+0x4c>
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	791b      	ldrb	r3, [r3, #4]
 8006c28:	2b02      	cmp	r3, #2
 8006c2a:	d138      	bne.n	8006c9e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006c2c:	68bb      	ldr	r3, [r7, #8]
 8006c2e:	015a      	lsls	r2, r3, #5
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	4413      	add	r3, r2
 8006c34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	68ba      	ldr	r2, [r7, #8]
 8006c3c:	0151      	lsls	r1, r2, #5
 8006c3e:	68fa      	ldr	r2, [r7, #12]
 8006c40:	440a      	add	r2, r1
 8006c42:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006c46:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006c4a:	6013      	str	r3, [r2, #0]
 8006c4c:	e027      	b.n	8006c9e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006c4e:	68bb      	ldr	r3, [r7, #8]
 8006c50:	015a      	lsls	r2, r3, #5
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	4413      	add	r3, r2
 8006c56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	68ba      	ldr	r2, [r7, #8]
 8006c5e:	0151      	lsls	r1, r2, #5
 8006c60:	68fa      	ldr	r2, [r7, #12]
 8006c62:	440a      	add	r2, r1
 8006c64:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006c68:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006c6c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	791b      	ldrb	r3, [r3, #4]
 8006c72:	2b03      	cmp	r3, #3
 8006c74:	d003      	beq.n	8006c7e <USB_EPClearStall+0x9e>
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	791b      	ldrb	r3, [r3, #4]
 8006c7a:	2b02      	cmp	r3, #2
 8006c7c:	d10f      	bne.n	8006c9e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006c7e:	68bb      	ldr	r3, [r7, #8]
 8006c80:	015a      	lsls	r2, r3, #5
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	4413      	add	r3, r2
 8006c86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	68ba      	ldr	r2, [r7, #8]
 8006c8e:	0151      	lsls	r1, r2, #5
 8006c90:	68fa      	ldr	r2, [r7, #12]
 8006c92:	440a      	add	r2, r1
 8006c94:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006c98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006c9c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006c9e:	2300      	movs	r3, #0
}
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	3714      	adds	r7, #20
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006caa:	4770      	bx	lr

08006cac <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006cac:	b480      	push	{r7}
 8006cae:	b085      	sub	sp, #20
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
 8006cb4:	460b      	mov	r3, r1
 8006cb6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	68fa      	ldr	r2, [r7, #12]
 8006cc6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006cca:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8006cce:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006cd6:	681a      	ldr	r2, [r3, #0]
 8006cd8:	78fb      	ldrb	r3, [r7, #3]
 8006cda:	011b      	lsls	r3, r3, #4
 8006cdc:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8006ce0:	68f9      	ldr	r1, [r7, #12]
 8006ce2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006ce6:	4313      	orrs	r3, r2
 8006ce8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006cea:	2300      	movs	r3, #0
}
 8006cec:	4618      	mov	r0, r3
 8006cee:	3714      	adds	r7, #20
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf6:	4770      	bx	lr

08006cf8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006cf8:	b480      	push	{r7}
 8006cfa:	b085      	sub	sp, #20
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	68fa      	ldr	r2, [r7, #12]
 8006d0e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006d12:	f023 0303 	bic.w	r3, r3, #3
 8006d16:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d1e:	685b      	ldr	r3, [r3, #4]
 8006d20:	68fa      	ldr	r2, [r7, #12]
 8006d22:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006d26:	f023 0302 	bic.w	r3, r3, #2
 8006d2a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006d2c:	2300      	movs	r3, #0
}
 8006d2e:	4618      	mov	r0, r3
 8006d30:	3714      	adds	r7, #20
 8006d32:	46bd      	mov	sp, r7
 8006d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d38:	4770      	bx	lr

08006d3a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006d3a:	b480      	push	{r7}
 8006d3c:	b085      	sub	sp, #20
 8006d3e:	af00      	add	r7, sp, #0
 8006d40:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	68fa      	ldr	r2, [r7, #12]
 8006d50:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006d54:	f023 0303 	bic.w	r3, r3, #3
 8006d58:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d60:	685b      	ldr	r3, [r3, #4]
 8006d62:	68fa      	ldr	r2, [r7, #12]
 8006d64:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006d68:	f043 0302 	orr.w	r3, r3, #2
 8006d6c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006d6e:	2300      	movs	r3, #0
}
 8006d70:	4618      	mov	r0, r3
 8006d72:	3714      	adds	r7, #20
 8006d74:	46bd      	mov	sp, r7
 8006d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7a:	4770      	bx	lr

08006d7c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8006d7c:	b480      	push	{r7}
 8006d7e:	b085      	sub	sp, #20
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	695b      	ldr	r3, [r3, #20]
 8006d88:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	699b      	ldr	r3, [r3, #24]
 8006d8e:	68fa      	ldr	r2, [r7, #12]
 8006d90:	4013      	ands	r3, r2
 8006d92:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006d94:	68fb      	ldr	r3, [r7, #12]
}
 8006d96:	4618      	mov	r0, r3
 8006d98:	3714      	adds	r7, #20
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da0:	4770      	bx	lr

08006da2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006da2:	b480      	push	{r7}
 8006da4:	b085      	sub	sp, #20
 8006da6:	af00      	add	r7, sp, #0
 8006da8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006db4:	699b      	ldr	r3, [r3, #24]
 8006db6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006dbe:	69db      	ldr	r3, [r3, #28]
 8006dc0:	68ba      	ldr	r2, [r7, #8]
 8006dc2:	4013      	ands	r3, r2
 8006dc4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006dc6:	68bb      	ldr	r3, [r7, #8]
 8006dc8:	0c1b      	lsrs	r3, r3, #16
}
 8006dca:	4618      	mov	r0, r3
 8006dcc:	3714      	adds	r7, #20
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd4:	4770      	bx	lr

08006dd6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006dd6:	b480      	push	{r7}
 8006dd8:	b085      	sub	sp, #20
 8006dda:	af00      	add	r7, sp, #0
 8006ddc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006de8:	699b      	ldr	r3, [r3, #24]
 8006dea:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006df2:	69db      	ldr	r3, [r3, #28]
 8006df4:	68ba      	ldr	r2, [r7, #8]
 8006df6:	4013      	ands	r3, r2
 8006df8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006dfa:	68bb      	ldr	r3, [r7, #8]
 8006dfc:	b29b      	uxth	r3, r3
}
 8006dfe:	4618      	mov	r0, r3
 8006e00:	3714      	adds	r7, #20
 8006e02:	46bd      	mov	sp, r7
 8006e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e08:	4770      	bx	lr

08006e0a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006e0a:	b480      	push	{r7}
 8006e0c:	b085      	sub	sp, #20
 8006e0e:	af00      	add	r7, sp, #0
 8006e10:	6078      	str	r0, [r7, #4]
 8006e12:	460b      	mov	r3, r1
 8006e14:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006e1a:	78fb      	ldrb	r3, [r7, #3]
 8006e1c:	015a      	lsls	r2, r3, #5
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	4413      	add	r3, r2
 8006e22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e26:	689b      	ldr	r3, [r3, #8]
 8006e28:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e30:	695b      	ldr	r3, [r3, #20]
 8006e32:	68ba      	ldr	r2, [r7, #8]
 8006e34:	4013      	ands	r3, r2
 8006e36:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006e38:	68bb      	ldr	r3, [r7, #8]
}
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	3714      	adds	r7, #20
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e44:	4770      	bx	lr

08006e46 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006e46:	b480      	push	{r7}
 8006e48:	b087      	sub	sp, #28
 8006e4a:	af00      	add	r7, sp, #0
 8006e4c:	6078      	str	r0, [r7, #4]
 8006e4e:	460b      	mov	r3, r1
 8006e50:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006e56:	697b      	ldr	r3, [r7, #20]
 8006e58:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e5c:	691b      	ldr	r3, [r3, #16]
 8006e5e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006e60:	697b      	ldr	r3, [r7, #20]
 8006e62:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e68:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006e6a:	78fb      	ldrb	r3, [r7, #3]
 8006e6c:	f003 030f 	and.w	r3, r3, #15
 8006e70:	68fa      	ldr	r2, [r7, #12]
 8006e72:	fa22 f303 	lsr.w	r3, r2, r3
 8006e76:	01db      	lsls	r3, r3, #7
 8006e78:	b2db      	uxtb	r3, r3
 8006e7a:	693a      	ldr	r2, [r7, #16]
 8006e7c:	4313      	orrs	r3, r2
 8006e7e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006e80:	78fb      	ldrb	r3, [r7, #3]
 8006e82:	015a      	lsls	r2, r3, #5
 8006e84:	697b      	ldr	r3, [r7, #20]
 8006e86:	4413      	add	r3, r2
 8006e88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e8c:	689b      	ldr	r3, [r3, #8]
 8006e8e:	693a      	ldr	r2, [r7, #16]
 8006e90:	4013      	ands	r3, r2
 8006e92:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006e94:	68bb      	ldr	r3, [r7, #8]
}
 8006e96:	4618      	mov	r0, r3
 8006e98:	371c      	adds	r7, #28
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea0:	4770      	bx	lr

08006ea2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006ea2:	b480      	push	{r7}
 8006ea4:	b083      	sub	sp, #12
 8006ea6:	af00      	add	r7, sp, #0
 8006ea8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	695b      	ldr	r3, [r3, #20]
 8006eae:	f003 0301 	and.w	r3, r3, #1
}
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	370c      	adds	r7, #12
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ebc:	4770      	bx	lr

08006ebe <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8006ebe:	b480      	push	{r7}
 8006ec0:	b085      	sub	sp, #20
 8006ec2:	af00      	add	r7, sp, #0
 8006ec4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	68fa      	ldr	r2, [r7, #12]
 8006ed4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006ed8:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8006edc:	f023 0307 	bic.w	r3, r3, #7
 8006ee0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ee8:	685b      	ldr	r3, [r3, #4]
 8006eea:	68fa      	ldr	r2, [r7, #12]
 8006eec:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006ef0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006ef4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006ef6:	2300      	movs	r3, #0
}
 8006ef8:	4618      	mov	r0, r3
 8006efa:	3714      	adds	r7, #20
 8006efc:	46bd      	mov	sp, r7
 8006efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f02:	4770      	bx	lr

08006f04 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8006f04:	b480      	push	{r7}
 8006f06:	b087      	sub	sp, #28
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	60f8      	str	r0, [r7, #12]
 8006f0c:	460b      	mov	r3, r1
 8006f0e:	607a      	str	r2, [r7, #4]
 8006f10:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	333c      	adds	r3, #60	@ 0x3c
 8006f1a:	3304      	adds	r3, #4
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006f20:	693b      	ldr	r3, [r7, #16]
 8006f22:	4a26      	ldr	r2, [pc, #152]	@ (8006fbc <USB_EP0_OutStart+0xb8>)
 8006f24:	4293      	cmp	r3, r2
 8006f26:	d90a      	bls.n	8006f3e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006f28:	697b      	ldr	r3, [r7, #20]
 8006f2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006f34:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006f38:	d101      	bne.n	8006f3e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	e037      	b.n	8006fae <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006f3e:	697b      	ldr	r3, [r7, #20]
 8006f40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f44:	461a      	mov	r2, r3
 8006f46:	2300      	movs	r3, #0
 8006f48:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006f4a:	697b      	ldr	r3, [r7, #20]
 8006f4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f50:	691b      	ldr	r3, [r3, #16]
 8006f52:	697a      	ldr	r2, [r7, #20]
 8006f54:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006f58:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006f5c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006f5e:	697b      	ldr	r3, [r7, #20]
 8006f60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f64:	691b      	ldr	r3, [r3, #16]
 8006f66:	697a      	ldr	r2, [r7, #20]
 8006f68:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006f6c:	f043 0318 	orr.w	r3, r3, #24
 8006f70:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006f72:	697b      	ldr	r3, [r7, #20]
 8006f74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f78:	691b      	ldr	r3, [r3, #16]
 8006f7a:	697a      	ldr	r2, [r7, #20]
 8006f7c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006f80:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8006f84:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006f86:	7afb      	ldrb	r3, [r7, #11]
 8006f88:	2b01      	cmp	r3, #1
 8006f8a:	d10f      	bne.n	8006fac <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006f8c:	697b      	ldr	r3, [r7, #20]
 8006f8e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f92:	461a      	mov	r2, r3
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006f98:	697b      	ldr	r3, [r7, #20]
 8006f9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	697a      	ldr	r2, [r7, #20]
 8006fa2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006fa6:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8006faa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006fac:	2300      	movs	r3, #0
}
 8006fae:	4618      	mov	r0, r3
 8006fb0:	371c      	adds	r7, #28
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb8:	4770      	bx	lr
 8006fba:	bf00      	nop
 8006fbc:	4f54300a 	.word	0x4f54300a

08006fc0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006fc0:	b480      	push	{r7}
 8006fc2:	b085      	sub	sp, #20
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006fc8:	2300      	movs	r3, #0
 8006fca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	3301      	adds	r3, #1
 8006fd0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006fd8:	d901      	bls.n	8006fde <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006fda:	2303      	movs	r3, #3
 8006fdc:	e022      	b.n	8007024 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	691b      	ldr	r3, [r3, #16]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	daf2      	bge.n	8006fcc <USB_CoreReset+0xc>

  count = 10U;
 8006fe6:	230a      	movs	r3, #10
 8006fe8:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 8006fea:	e002      	b.n	8006ff2 <USB_CoreReset+0x32>
  {
    count--;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	3b01      	subs	r3, #1
 8006ff0:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d1f9      	bne.n	8006fec <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	691b      	ldr	r3, [r3, #16]
 8006ffc:	f043 0201 	orr.w	r2, r3, #1
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	3301      	adds	r3, #1
 8007008:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007010:	d901      	bls.n	8007016 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 8007012:	2303      	movs	r3, #3
 8007014:	e006      	b.n	8007024 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	691b      	ldr	r3, [r3, #16]
 800701a:	f003 0301 	and.w	r3, r3, #1
 800701e:	2b01      	cmp	r3, #1
 8007020:	d0f0      	beq.n	8007004 <USB_CoreReset+0x44>

  return HAL_OK;
 8007022:	2300      	movs	r3, #0
}
 8007024:	4618      	mov	r0, r3
 8007026:	3714      	adds	r7, #20
 8007028:	46bd      	mov	sp, r7
 800702a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702e:	4770      	bx	lr

08007030 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007030:	b580      	push	{r7, lr}
 8007032:	b084      	sub	sp, #16
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
 8007038:	460b      	mov	r3, r1
 800703a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800703c:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8007040:	f002 fd70 	bl	8009b24 <USBD_static_malloc>
 8007044:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d109      	bne.n	8007060 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	32b0      	adds	r2, #176	@ 0xb0
 8007056:	2100      	movs	r1, #0
 8007058:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800705c:	2302      	movs	r3, #2
 800705e:	e0d4      	b.n	800720a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8007060:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8007064:	2100      	movs	r1, #0
 8007066:	68f8      	ldr	r0, [r7, #12]
 8007068:	f002 fda0 	bl	8009bac <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	32b0      	adds	r2, #176	@ 0xb0
 8007076:	68f9      	ldr	r1, [r7, #12]
 8007078:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	32b0      	adds	r2, #176	@ 0xb0
 8007086:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	7c1b      	ldrb	r3, [r3, #16]
 8007094:	2b00      	cmp	r3, #0
 8007096:	d138      	bne.n	800710a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007098:	4b5e      	ldr	r3, [pc, #376]	@ (8007214 <USBD_CDC_Init+0x1e4>)
 800709a:	7819      	ldrb	r1, [r3, #0]
 800709c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80070a0:	2202      	movs	r2, #2
 80070a2:	6878      	ldr	r0, [r7, #4]
 80070a4:	f002 fbcd 	bl	8009842 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80070a8:	4b5a      	ldr	r3, [pc, #360]	@ (8007214 <USBD_CDC_Init+0x1e4>)
 80070aa:	781b      	ldrb	r3, [r3, #0]
 80070ac:	f003 020f 	and.w	r2, r3, #15
 80070b0:	6879      	ldr	r1, [r7, #4]
 80070b2:	4613      	mov	r3, r2
 80070b4:	009b      	lsls	r3, r3, #2
 80070b6:	4413      	add	r3, r2
 80070b8:	009b      	lsls	r3, r3, #2
 80070ba:	440b      	add	r3, r1
 80070bc:	3323      	adds	r3, #35	@ 0x23
 80070be:	2201      	movs	r2, #1
 80070c0:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80070c2:	4b55      	ldr	r3, [pc, #340]	@ (8007218 <USBD_CDC_Init+0x1e8>)
 80070c4:	7819      	ldrb	r1, [r3, #0]
 80070c6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80070ca:	2202      	movs	r2, #2
 80070cc:	6878      	ldr	r0, [r7, #4]
 80070ce:	f002 fbb8 	bl	8009842 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80070d2:	4b51      	ldr	r3, [pc, #324]	@ (8007218 <USBD_CDC_Init+0x1e8>)
 80070d4:	781b      	ldrb	r3, [r3, #0]
 80070d6:	f003 020f 	and.w	r2, r3, #15
 80070da:	6879      	ldr	r1, [r7, #4]
 80070dc:	4613      	mov	r3, r2
 80070de:	009b      	lsls	r3, r3, #2
 80070e0:	4413      	add	r3, r2
 80070e2:	009b      	lsls	r3, r3, #2
 80070e4:	440b      	add	r3, r1
 80070e6:	f203 1363 	addw	r3, r3, #355	@ 0x163
 80070ea:	2201      	movs	r2, #1
 80070ec:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80070ee:	4b4b      	ldr	r3, [pc, #300]	@ (800721c <USBD_CDC_Init+0x1ec>)
 80070f0:	781b      	ldrb	r3, [r3, #0]
 80070f2:	f003 020f 	and.w	r2, r3, #15
 80070f6:	6879      	ldr	r1, [r7, #4]
 80070f8:	4613      	mov	r3, r2
 80070fa:	009b      	lsls	r3, r3, #2
 80070fc:	4413      	add	r3, r2
 80070fe:	009b      	lsls	r3, r3, #2
 8007100:	440b      	add	r3, r1
 8007102:	331c      	adds	r3, #28
 8007104:	2210      	movs	r2, #16
 8007106:	601a      	str	r2, [r3, #0]
 8007108:	e035      	b.n	8007176 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800710a:	4b42      	ldr	r3, [pc, #264]	@ (8007214 <USBD_CDC_Init+0x1e4>)
 800710c:	7819      	ldrb	r1, [r3, #0]
 800710e:	2340      	movs	r3, #64	@ 0x40
 8007110:	2202      	movs	r2, #2
 8007112:	6878      	ldr	r0, [r7, #4]
 8007114:	f002 fb95 	bl	8009842 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007118:	4b3e      	ldr	r3, [pc, #248]	@ (8007214 <USBD_CDC_Init+0x1e4>)
 800711a:	781b      	ldrb	r3, [r3, #0]
 800711c:	f003 020f 	and.w	r2, r3, #15
 8007120:	6879      	ldr	r1, [r7, #4]
 8007122:	4613      	mov	r3, r2
 8007124:	009b      	lsls	r3, r3, #2
 8007126:	4413      	add	r3, r2
 8007128:	009b      	lsls	r3, r3, #2
 800712a:	440b      	add	r3, r1
 800712c:	3323      	adds	r3, #35	@ 0x23
 800712e:	2201      	movs	r2, #1
 8007130:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007132:	4b39      	ldr	r3, [pc, #228]	@ (8007218 <USBD_CDC_Init+0x1e8>)
 8007134:	7819      	ldrb	r1, [r3, #0]
 8007136:	2340      	movs	r3, #64	@ 0x40
 8007138:	2202      	movs	r2, #2
 800713a:	6878      	ldr	r0, [r7, #4]
 800713c:	f002 fb81 	bl	8009842 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007140:	4b35      	ldr	r3, [pc, #212]	@ (8007218 <USBD_CDC_Init+0x1e8>)
 8007142:	781b      	ldrb	r3, [r3, #0]
 8007144:	f003 020f 	and.w	r2, r3, #15
 8007148:	6879      	ldr	r1, [r7, #4]
 800714a:	4613      	mov	r3, r2
 800714c:	009b      	lsls	r3, r3, #2
 800714e:	4413      	add	r3, r2
 8007150:	009b      	lsls	r3, r3, #2
 8007152:	440b      	add	r3, r1
 8007154:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8007158:	2201      	movs	r2, #1
 800715a:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800715c:	4b2f      	ldr	r3, [pc, #188]	@ (800721c <USBD_CDC_Init+0x1ec>)
 800715e:	781b      	ldrb	r3, [r3, #0]
 8007160:	f003 020f 	and.w	r2, r3, #15
 8007164:	6879      	ldr	r1, [r7, #4]
 8007166:	4613      	mov	r3, r2
 8007168:	009b      	lsls	r3, r3, #2
 800716a:	4413      	add	r3, r2
 800716c:	009b      	lsls	r3, r3, #2
 800716e:	440b      	add	r3, r1
 8007170:	331c      	adds	r3, #28
 8007172:	2210      	movs	r2, #16
 8007174:	601a      	str	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007176:	4b29      	ldr	r3, [pc, #164]	@ (800721c <USBD_CDC_Init+0x1ec>)
 8007178:	7819      	ldrb	r1, [r3, #0]
 800717a:	2308      	movs	r3, #8
 800717c:	2203      	movs	r2, #3
 800717e:	6878      	ldr	r0, [r7, #4]
 8007180:	f002 fb5f 	bl	8009842 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8007184:	4b25      	ldr	r3, [pc, #148]	@ (800721c <USBD_CDC_Init+0x1ec>)
 8007186:	781b      	ldrb	r3, [r3, #0]
 8007188:	f003 020f 	and.w	r2, r3, #15
 800718c:	6879      	ldr	r1, [r7, #4]
 800718e:	4613      	mov	r3, r2
 8007190:	009b      	lsls	r3, r3, #2
 8007192:	4413      	add	r3, r2
 8007194:	009b      	lsls	r3, r3, #2
 8007196:	440b      	add	r3, r1
 8007198:	3323      	adds	r3, #35	@ 0x23
 800719a:	2201      	movs	r2, #1
 800719c:	701a      	strb	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	2200      	movs	r2, #0
 80071a2:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80071ac:	687a      	ldr	r2, [r7, #4]
 80071ae:	33b0      	adds	r3, #176	@ 0xb0
 80071b0:	009b      	lsls	r3, r3, #2
 80071b2:	4413      	add	r3, r2
 80071b4:	685b      	ldr	r3, [r3, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	2200      	movs	r2, #0
 80071be:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	2200      	movs	r2, #0
 80071c6:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d101      	bne.n	80071d8 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80071d4:	2302      	movs	r3, #2
 80071d6:	e018      	b.n	800720a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	7c1b      	ldrb	r3, [r3, #16]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d10a      	bne.n	80071f6 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80071e0:	4b0d      	ldr	r3, [pc, #52]	@ (8007218 <USBD_CDC_Init+0x1e8>)
 80071e2:	7819      	ldrb	r1, [r3, #0]
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80071ea:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80071ee:	6878      	ldr	r0, [r7, #4]
 80071f0:	f002 fc16 	bl	8009a20 <USBD_LL_PrepareReceive>
 80071f4:	e008      	b.n	8007208 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80071f6:	4b08      	ldr	r3, [pc, #32]	@ (8007218 <USBD_CDC_Init+0x1e8>)
 80071f8:	7819      	ldrb	r1, [r3, #0]
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007200:	2340      	movs	r3, #64	@ 0x40
 8007202:	6878      	ldr	r0, [r7, #4]
 8007204:	f002 fc0c 	bl	8009a20 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007208:	2300      	movs	r3, #0
}
 800720a:	4618      	mov	r0, r3
 800720c:	3710      	adds	r7, #16
 800720e:	46bd      	mov	sp, r7
 8007210:	bd80      	pop	{r7, pc}
 8007212:	bf00      	nop
 8007214:	20000097 	.word	0x20000097
 8007218:	20000098 	.word	0x20000098
 800721c:	20000099 	.word	0x20000099

08007220 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007220:	b580      	push	{r7, lr}
 8007222:	b082      	sub	sp, #8
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
 8007228:	460b      	mov	r3, r1
 800722a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800722c:	4b3a      	ldr	r3, [pc, #232]	@ (8007318 <USBD_CDC_DeInit+0xf8>)
 800722e:	781b      	ldrb	r3, [r3, #0]
 8007230:	4619      	mov	r1, r3
 8007232:	6878      	ldr	r0, [r7, #4]
 8007234:	f002 fb2b 	bl	800988e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8007238:	4b37      	ldr	r3, [pc, #220]	@ (8007318 <USBD_CDC_DeInit+0xf8>)
 800723a:	781b      	ldrb	r3, [r3, #0]
 800723c:	f003 020f 	and.w	r2, r3, #15
 8007240:	6879      	ldr	r1, [r7, #4]
 8007242:	4613      	mov	r3, r2
 8007244:	009b      	lsls	r3, r3, #2
 8007246:	4413      	add	r3, r2
 8007248:	009b      	lsls	r3, r3, #2
 800724a:	440b      	add	r3, r1
 800724c:	3323      	adds	r3, #35	@ 0x23
 800724e:	2200      	movs	r2, #0
 8007250:	701a      	strb	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8007252:	4b32      	ldr	r3, [pc, #200]	@ (800731c <USBD_CDC_DeInit+0xfc>)
 8007254:	781b      	ldrb	r3, [r3, #0]
 8007256:	4619      	mov	r1, r3
 8007258:	6878      	ldr	r0, [r7, #4]
 800725a:	f002 fb18 	bl	800988e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800725e:	4b2f      	ldr	r3, [pc, #188]	@ (800731c <USBD_CDC_DeInit+0xfc>)
 8007260:	781b      	ldrb	r3, [r3, #0]
 8007262:	f003 020f 	and.w	r2, r3, #15
 8007266:	6879      	ldr	r1, [r7, #4]
 8007268:	4613      	mov	r3, r2
 800726a:	009b      	lsls	r3, r3, #2
 800726c:	4413      	add	r3, r2
 800726e:	009b      	lsls	r3, r3, #2
 8007270:	440b      	add	r3, r1
 8007272:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8007276:	2200      	movs	r2, #0
 8007278:	701a      	strb	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800727a:	4b29      	ldr	r3, [pc, #164]	@ (8007320 <USBD_CDC_DeInit+0x100>)
 800727c:	781b      	ldrb	r3, [r3, #0]
 800727e:	4619      	mov	r1, r3
 8007280:	6878      	ldr	r0, [r7, #4]
 8007282:	f002 fb04 	bl	800988e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8007286:	4b26      	ldr	r3, [pc, #152]	@ (8007320 <USBD_CDC_DeInit+0x100>)
 8007288:	781b      	ldrb	r3, [r3, #0]
 800728a:	f003 020f 	and.w	r2, r3, #15
 800728e:	6879      	ldr	r1, [r7, #4]
 8007290:	4613      	mov	r3, r2
 8007292:	009b      	lsls	r3, r3, #2
 8007294:	4413      	add	r3, r2
 8007296:	009b      	lsls	r3, r3, #2
 8007298:	440b      	add	r3, r1
 800729a:	3323      	adds	r3, #35	@ 0x23
 800729c:	2200      	movs	r2, #0
 800729e:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80072a0:	4b1f      	ldr	r3, [pc, #124]	@ (8007320 <USBD_CDC_DeInit+0x100>)
 80072a2:	781b      	ldrb	r3, [r3, #0]
 80072a4:	f003 020f 	and.w	r2, r3, #15
 80072a8:	6879      	ldr	r1, [r7, #4]
 80072aa:	4613      	mov	r3, r2
 80072ac:	009b      	lsls	r3, r3, #2
 80072ae:	4413      	add	r3, r2
 80072b0:	009b      	lsls	r3, r3, #2
 80072b2:	440b      	add	r3, r1
 80072b4:	331c      	adds	r3, #28
 80072b6:	2200      	movs	r2, #0
 80072b8:	601a      	str	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	32b0      	adds	r2, #176	@ 0xb0
 80072c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d01f      	beq.n	800730c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80072d2:	687a      	ldr	r2, [r7, #4]
 80072d4:	33b0      	adds	r3, #176	@ 0xb0
 80072d6:	009b      	lsls	r3, r3, #2
 80072d8:	4413      	add	r3, r2
 80072da:	685b      	ldr	r3, [r3, #4]
 80072dc:	685b      	ldr	r3, [r3, #4]
 80072de:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	32b0      	adds	r2, #176	@ 0xb0
 80072ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072ee:	4618      	mov	r0, r3
 80072f0:	f002 fc26 	bl	8009b40 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	32b0      	adds	r2, #176	@ 0xb0
 80072fe:	2100      	movs	r1, #0
 8007300:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2200      	movs	r2, #0
 8007308:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800730c:	2300      	movs	r3, #0
}
 800730e:	4618      	mov	r0, r3
 8007310:	3708      	adds	r7, #8
 8007312:	46bd      	mov	sp, r7
 8007314:	bd80      	pop	{r7, pc}
 8007316:	bf00      	nop
 8007318:	20000097 	.word	0x20000097
 800731c:	20000098 	.word	0x20000098
 8007320:	20000099 	.word	0x20000099

08007324 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007324:	b580      	push	{r7, lr}
 8007326:	b086      	sub	sp, #24
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
 800732c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	32b0      	adds	r2, #176	@ 0xb0
 8007338:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800733c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800733e:	2300      	movs	r3, #0
 8007340:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007342:	2300      	movs	r3, #0
 8007344:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007346:	2300      	movs	r3, #0
 8007348:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800734a:	693b      	ldr	r3, [r7, #16]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d101      	bne.n	8007354 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8007350:	2303      	movs	r3, #3
 8007352:	e0bf      	b.n	80074d4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007354:	683b      	ldr	r3, [r7, #0]
 8007356:	781b      	ldrb	r3, [r3, #0]
 8007358:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800735c:	2b00      	cmp	r3, #0
 800735e:	d050      	beq.n	8007402 <USBD_CDC_Setup+0xde>
 8007360:	2b20      	cmp	r3, #32
 8007362:	f040 80af 	bne.w	80074c4 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007366:	683b      	ldr	r3, [r7, #0]
 8007368:	88db      	ldrh	r3, [r3, #6]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d03a      	beq.n	80073e4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800736e:	683b      	ldr	r3, [r7, #0]
 8007370:	781b      	ldrb	r3, [r3, #0]
 8007372:	b25b      	sxtb	r3, r3
 8007374:	2b00      	cmp	r3, #0
 8007376:	da1b      	bge.n	80073b0 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800737e:	687a      	ldr	r2, [r7, #4]
 8007380:	33b0      	adds	r3, #176	@ 0xb0
 8007382:	009b      	lsls	r3, r3, #2
 8007384:	4413      	add	r3, r2
 8007386:	685b      	ldr	r3, [r3, #4]
 8007388:	689b      	ldr	r3, [r3, #8]
 800738a:	683a      	ldr	r2, [r7, #0]
 800738c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800738e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007390:	683a      	ldr	r2, [r7, #0]
 8007392:	88d2      	ldrh	r2, [r2, #6]
 8007394:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	88db      	ldrh	r3, [r3, #6]
 800739a:	2b07      	cmp	r3, #7
 800739c:	bf28      	it	cs
 800739e:	2307      	movcs	r3, #7
 80073a0:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80073a2:	693b      	ldr	r3, [r7, #16]
 80073a4:	89fa      	ldrh	r2, [r7, #14]
 80073a6:	4619      	mov	r1, r3
 80073a8:	6878      	ldr	r0, [r7, #4]
 80073aa:	f001 fdd1 	bl	8008f50 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80073ae:	e090      	b.n	80074d2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	785a      	ldrb	r2, [r3, #1]
 80073b4:	693b      	ldr	r3, [r7, #16]
 80073b6:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80073ba:	683b      	ldr	r3, [r7, #0]
 80073bc:	88db      	ldrh	r3, [r3, #6]
 80073be:	2b3f      	cmp	r3, #63	@ 0x3f
 80073c0:	d803      	bhi.n	80073ca <USBD_CDC_Setup+0xa6>
 80073c2:	683b      	ldr	r3, [r7, #0]
 80073c4:	88db      	ldrh	r3, [r3, #6]
 80073c6:	b2da      	uxtb	r2, r3
 80073c8:	e000      	b.n	80073cc <USBD_CDC_Setup+0xa8>
 80073ca:	2240      	movs	r2, #64	@ 0x40
 80073cc:	693b      	ldr	r3, [r7, #16]
 80073ce:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80073d2:	6939      	ldr	r1, [r7, #16]
 80073d4:	693b      	ldr	r3, [r7, #16]
 80073d6:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 80073da:	461a      	mov	r2, r3
 80073dc:	6878      	ldr	r0, [r7, #4]
 80073de:	f001 fde6 	bl	8008fae <USBD_CtlPrepareRx>
      break;
 80073e2:	e076      	b.n	80074d2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80073ea:	687a      	ldr	r2, [r7, #4]
 80073ec:	33b0      	adds	r3, #176	@ 0xb0
 80073ee:	009b      	lsls	r3, r3, #2
 80073f0:	4413      	add	r3, r2
 80073f2:	685b      	ldr	r3, [r3, #4]
 80073f4:	689b      	ldr	r3, [r3, #8]
 80073f6:	683a      	ldr	r2, [r7, #0]
 80073f8:	7850      	ldrb	r0, [r2, #1]
 80073fa:	2200      	movs	r2, #0
 80073fc:	6839      	ldr	r1, [r7, #0]
 80073fe:	4798      	blx	r3
      break;
 8007400:	e067      	b.n	80074d2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	785b      	ldrb	r3, [r3, #1]
 8007406:	2b0b      	cmp	r3, #11
 8007408:	d851      	bhi.n	80074ae <USBD_CDC_Setup+0x18a>
 800740a:	a201      	add	r2, pc, #4	@ (adr r2, 8007410 <USBD_CDC_Setup+0xec>)
 800740c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007410:	08007441 	.word	0x08007441
 8007414:	080074bd 	.word	0x080074bd
 8007418:	080074af 	.word	0x080074af
 800741c:	080074af 	.word	0x080074af
 8007420:	080074af 	.word	0x080074af
 8007424:	080074af 	.word	0x080074af
 8007428:	080074af 	.word	0x080074af
 800742c:	080074af 	.word	0x080074af
 8007430:	080074af 	.word	0x080074af
 8007434:	080074af 	.word	0x080074af
 8007438:	0800746b 	.word	0x0800746b
 800743c:	08007495 	.word	0x08007495
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007446:	b2db      	uxtb	r3, r3
 8007448:	2b03      	cmp	r3, #3
 800744a:	d107      	bne.n	800745c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800744c:	f107 030a 	add.w	r3, r7, #10
 8007450:	2202      	movs	r2, #2
 8007452:	4619      	mov	r1, r3
 8007454:	6878      	ldr	r0, [r7, #4]
 8007456:	f001 fd7b 	bl	8008f50 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800745a:	e032      	b.n	80074c2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800745c:	6839      	ldr	r1, [r7, #0]
 800745e:	6878      	ldr	r0, [r7, #4]
 8007460:	f001 fcf9 	bl	8008e56 <USBD_CtlError>
            ret = USBD_FAIL;
 8007464:	2303      	movs	r3, #3
 8007466:	75fb      	strb	r3, [r7, #23]
          break;
 8007468:	e02b      	b.n	80074c2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007470:	b2db      	uxtb	r3, r3
 8007472:	2b03      	cmp	r3, #3
 8007474:	d107      	bne.n	8007486 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007476:	f107 030d 	add.w	r3, r7, #13
 800747a:	2201      	movs	r2, #1
 800747c:	4619      	mov	r1, r3
 800747e:	6878      	ldr	r0, [r7, #4]
 8007480:	f001 fd66 	bl	8008f50 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007484:	e01d      	b.n	80074c2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007486:	6839      	ldr	r1, [r7, #0]
 8007488:	6878      	ldr	r0, [r7, #4]
 800748a:	f001 fce4 	bl	8008e56 <USBD_CtlError>
            ret = USBD_FAIL;
 800748e:	2303      	movs	r3, #3
 8007490:	75fb      	strb	r3, [r7, #23]
          break;
 8007492:	e016      	b.n	80074c2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800749a:	b2db      	uxtb	r3, r3
 800749c:	2b03      	cmp	r3, #3
 800749e:	d00f      	beq.n	80074c0 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80074a0:	6839      	ldr	r1, [r7, #0]
 80074a2:	6878      	ldr	r0, [r7, #4]
 80074a4:	f001 fcd7 	bl	8008e56 <USBD_CtlError>
            ret = USBD_FAIL;
 80074a8:	2303      	movs	r3, #3
 80074aa:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80074ac:	e008      	b.n	80074c0 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80074ae:	6839      	ldr	r1, [r7, #0]
 80074b0:	6878      	ldr	r0, [r7, #4]
 80074b2:	f001 fcd0 	bl	8008e56 <USBD_CtlError>
          ret = USBD_FAIL;
 80074b6:	2303      	movs	r3, #3
 80074b8:	75fb      	strb	r3, [r7, #23]
          break;
 80074ba:	e002      	b.n	80074c2 <USBD_CDC_Setup+0x19e>
          break;
 80074bc:	bf00      	nop
 80074be:	e008      	b.n	80074d2 <USBD_CDC_Setup+0x1ae>
          break;
 80074c0:	bf00      	nop
      }
      break;
 80074c2:	e006      	b.n	80074d2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80074c4:	6839      	ldr	r1, [r7, #0]
 80074c6:	6878      	ldr	r0, [r7, #4]
 80074c8:	f001 fcc5 	bl	8008e56 <USBD_CtlError>
      ret = USBD_FAIL;
 80074cc:	2303      	movs	r3, #3
 80074ce:	75fb      	strb	r3, [r7, #23]
      break;
 80074d0:	bf00      	nop
  }

  return (uint8_t)ret;
 80074d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80074d4:	4618      	mov	r0, r3
 80074d6:	3718      	adds	r7, #24
 80074d8:	46bd      	mov	sp, r7
 80074da:	bd80      	pop	{r7, pc}

080074dc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80074dc:	b580      	push	{r7, lr}
 80074de:	b084      	sub	sp, #16
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
 80074e4:	460b      	mov	r3, r1
 80074e6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80074ee:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	32b0      	adds	r2, #176	@ 0xb0
 80074fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d101      	bne.n	8007506 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8007502:	2303      	movs	r3, #3
 8007504:	e065      	b.n	80075d2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	32b0      	adds	r2, #176	@ 0xb0
 8007510:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007514:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007516:	78fb      	ldrb	r3, [r7, #3]
 8007518:	f003 020f 	and.w	r2, r3, #15
 800751c:	6879      	ldr	r1, [r7, #4]
 800751e:	4613      	mov	r3, r2
 8007520:	009b      	lsls	r3, r3, #2
 8007522:	4413      	add	r3, r2
 8007524:	009b      	lsls	r3, r3, #2
 8007526:	440b      	add	r3, r1
 8007528:	3314      	adds	r3, #20
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d02f      	beq.n	8007590 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8007530:	78fb      	ldrb	r3, [r7, #3]
 8007532:	f003 020f 	and.w	r2, r3, #15
 8007536:	6879      	ldr	r1, [r7, #4]
 8007538:	4613      	mov	r3, r2
 800753a:	009b      	lsls	r3, r3, #2
 800753c:	4413      	add	r3, r2
 800753e:	009b      	lsls	r3, r3, #2
 8007540:	440b      	add	r3, r1
 8007542:	3314      	adds	r3, #20
 8007544:	681a      	ldr	r2, [r3, #0]
 8007546:	78fb      	ldrb	r3, [r7, #3]
 8007548:	f003 010f 	and.w	r1, r3, #15
 800754c:	68f8      	ldr	r0, [r7, #12]
 800754e:	460b      	mov	r3, r1
 8007550:	00db      	lsls	r3, r3, #3
 8007552:	440b      	add	r3, r1
 8007554:	009b      	lsls	r3, r3, #2
 8007556:	4403      	add	r3, r0
 8007558:	331c      	adds	r3, #28
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	fbb2 f1f3 	udiv	r1, r2, r3
 8007560:	fb01 f303 	mul.w	r3, r1, r3
 8007564:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007566:	2b00      	cmp	r3, #0
 8007568:	d112      	bne.n	8007590 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800756a:	78fb      	ldrb	r3, [r7, #3]
 800756c:	f003 020f 	and.w	r2, r3, #15
 8007570:	6879      	ldr	r1, [r7, #4]
 8007572:	4613      	mov	r3, r2
 8007574:	009b      	lsls	r3, r3, #2
 8007576:	4413      	add	r3, r2
 8007578:	009b      	lsls	r3, r3, #2
 800757a:	440b      	add	r3, r1
 800757c:	3314      	adds	r3, #20
 800757e:	2200      	movs	r2, #0
 8007580:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007582:	78f9      	ldrb	r1, [r7, #3]
 8007584:	2300      	movs	r3, #0
 8007586:	2200      	movs	r2, #0
 8007588:	6878      	ldr	r0, [r7, #4]
 800758a:	f002 fa28 	bl	80099de <USBD_LL_Transmit>
 800758e:	e01f      	b.n	80075d0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007590:	68bb      	ldr	r3, [r7, #8]
 8007592:	2200      	movs	r2, #0
 8007594:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800759e:	687a      	ldr	r2, [r7, #4]
 80075a0:	33b0      	adds	r3, #176	@ 0xb0
 80075a2:	009b      	lsls	r3, r3, #2
 80075a4:	4413      	add	r3, r2
 80075a6:	685b      	ldr	r3, [r3, #4]
 80075a8:	691b      	ldr	r3, [r3, #16]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d010      	beq.n	80075d0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80075b4:	687a      	ldr	r2, [r7, #4]
 80075b6:	33b0      	adds	r3, #176	@ 0xb0
 80075b8:	009b      	lsls	r3, r3, #2
 80075ba:	4413      	add	r3, r2
 80075bc:	685b      	ldr	r3, [r3, #4]
 80075be:	691b      	ldr	r3, [r3, #16]
 80075c0:	68ba      	ldr	r2, [r7, #8]
 80075c2:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 80075c6:	68ba      	ldr	r2, [r7, #8]
 80075c8:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 80075cc:	78fa      	ldrb	r2, [r7, #3]
 80075ce:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80075d0:	2300      	movs	r3, #0
}
 80075d2:	4618      	mov	r0, r3
 80075d4:	3710      	adds	r7, #16
 80075d6:	46bd      	mov	sp, r7
 80075d8:	bd80      	pop	{r7, pc}

080075da <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80075da:	b580      	push	{r7, lr}
 80075dc:	b084      	sub	sp, #16
 80075de:	af00      	add	r7, sp, #0
 80075e0:	6078      	str	r0, [r7, #4]
 80075e2:	460b      	mov	r3, r1
 80075e4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	32b0      	adds	r2, #176	@ 0xb0
 80075f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075f4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	32b0      	adds	r2, #176	@ 0xb0
 8007600:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d101      	bne.n	800760c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007608:	2303      	movs	r3, #3
 800760a:	e01a      	b.n	8007642 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800760c:	78fb      	ldrb	r3, [r7, #3]
 800760e:	4619      	mov	r1, r3
 8007610:	6878      	ldr	r0, [r7, #4]
 8007612:	f002 fa26 	bl	8009a62 <USBD_LL_GetRxDataSize>
 8007616:	4602      	mov	r2, r0
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007624:	687a      	ldr	r2, [r7, #4]
 8007626:	33b0      	adds	r3, #176	@ 0xb0
 8007628:	009b      	lsls	r3, r3, #2
 800762a:	4413      	add	r3, r2
 800762c:	685b      	ldr	r3, [r3, #4]
 800762e:	68db      	ldr	r3, [r3, #12]
 8007630:	68fa      	ldr	r2, [r7, #12]
 8007632:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8007636:	68fa      	ldr	r2, [r7, #12]
 8007638:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800763c:	4611      	mov	r1, r2
 800763e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007640:	2300      	movs	r3, #0
}
 8007642:	4618      	mov	r0, r3
 8007644:	3710      	adds	r7, #16
 8007646:	46bd      	mov	sp, r7
 8007648:	bd80      	pop	{r7, pc}

0800764a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800764a:	b580      	push	{r7, lr}
 800764c:	b084      	sub	sp, #16
 800764e:	af00      	add	r7, sp, #0
 8007650:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	32b0      	adds	r2, #176	@ 0xb0
 800765c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007660:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d101      	bne.n	800766c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007668:	2303      	movs	r3, #3
 800766a:	e024      	b.n	80076b6 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007672:	687a      	ldr	r2, [r7, #4]
 8007674:	33b0      	adds	r3, #176	@ 0xb0
 8007676:	009b      	lsls	r3, r3, #2
 8007678:	4413      	add	r3, r2
 800767a:	685b      	ldr	r3, [r3, #4]
 800767c:	2b00      	cmp	r3, #0
 800767e:	d019      	beq.n	80076b4 <USBD_CDC_EP0_RxReady+0x6a>
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8007686:	2bff      	cmp	r3, #255	@ 0xff
 8007688:	d014      	beq.n	80076b4 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007690:	687a      	ldr	r2, [r7, #4]
 8007692:	33b0      	adds	r3, #176	@ 0xb0
 8007694:	009b      	lsls	r3, r3, #2
 8007696:	4413      	add	r3, r2
 8007698:	685b      	ldr	r3, [r3, #4]
 800769a:	689b      	ldr	r3, [r3, #8]
 800769c:	68fa      	ldr	r2, [r7, #12]
 800769e:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 80076a2:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80076a4:	68fa      	ldr	r2, [r7, #12]
 80076a6:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80076aa:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	22ff      	movs	r2, #255	@ 0xff
 80076b0:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 80076b4:	2300      	movs	r3, #0
}
 80076b6:	4618      	mov	r0, r3
 80076b8:	3710      	adds	r7, #16
 80076ba:	46bd      	mov	sp, r7
 80076bc:	bd80      	pop	{r7, pc}
	...

080076c0 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b086      	sub	sp, #24
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80076c8:	2182      	movs	r1, #130	@ 0x82
 80076ca:	4818      	ldr	r0, [pc, #96]	@ (800772c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80076cc:	f000 fd62 	bl	8008194 <USBD_GetEpDesc>
 80076d0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80076d2:	2101      	movs	r1, #1
 80076d4:	4815      	ldr	r0, [pc, #84]	@ (800772c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80076d6:	f000 fd5d 	bl	8008194 <USBD_GetEpDesc>
 80076da:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80076dc:	2181      	movs	r1, #129	@ 0x81
 80076de:	4813      	ldr	r0, [pc, #76]	@ (800772c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80076e0:	f000 fd58 	bl	8008194 <USBD_GetEpDesc>
 80076e4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80076e6:	697b      	ldr	r3, [r7, #20]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d002      	beq.n	80076f2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80076ec:	697b      	ldr	r3, [r7, #20]
 80076ee:	2210      	movs	r2, #16
 80076f0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80076f2:	693b      	ldr	r3, [r7, #16]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d006      	beq.n	8007706 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80076f8:	693b      	ldr	r3, [r7, #16]
 80076fa:	2200      	movs	r2, #0
 80076fc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007700:	711a      	strb	r2, [r3, #4]
 8007702:	2200      	movs	r2, #0
 8007704:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	2b00      	cmp	r3, #0
 800770a:	d006      	beq.n	800771a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	2200      	movs	r2, #0
 8007710:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007714:	711a      	strb	r2, [r3, #4]
 8007716:	2200      	movs	r2, #0
 8007718:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	2243      	movs	r2, #67	@ 0x43
 800771e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007720:	4b02      	ldr	r3, [pc, #8]	@ (800772c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8007722:	4618      	mov	r0, r3
 8007724:	3718      	adds	r7, #24
 8007726:	46bd      	mov	sp, r7
 8007728:	bd80      	pop	{r7, pc}
 800772a:	bf00      	nop
 800772c:	20000054 	.word	0x20000054

08007730 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b086      	sub	sp, #24
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007738:	2182      	movs	r1, #130	@ 0x82
 800773a:	4818      	ldr	r0, [pc, #96]	@ (800779c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800773c:	f000 fd2a 	bl	8008194 <USBD_GetEpDesc>
 8007740:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007742:	2101      	movs	r1, #1
 8007744:	4815      	ldr	r0, [pc, #84]	@ (800779c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007746:	f000 fd25 	bl	8008194 <USBD_GetEpDesc>
 800774a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800774c:	2181      	movs	r1, #129	@ 0x81
 800774e:	4813      	ldr	r0, [pc, #76]	@ (800779c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007750:	f000 fd20 	bl	8008194 <USBD_GetEpDesc>
 8007754:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007756:	697b      	ldr	r3, [r7, #20]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d002      	beq.n	8007762 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800775c:	697b      	ldr	r3, [r7, #20]
 800775e:	2210      	movs	r2, #16
 8007760:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007762:	693b      	ldr	r3, [r7, #16]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d006      	beq.n	8007776 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007768:	693b      	ldr	r3, [r7, #16]
 800776a:	2200      	movs	r2, #0
 800776c:	711a      	strb	r2, [r3, #4]
 800776e:	2200      	movs	r2, #0
 8007770:	f042 0202 	orr.w	r2, r2, #2
 8007774:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d006      	beq.n	800778a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	2200      	movs	r2, #0
 8007780:	711a      	strb	r2, [r3, #4]
 8007782:	2200      	movs	r2, #0
 8007784:	f042 0202 	orr.w	r2, r2, #2
 8007788:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	2243      	movs	r2, #67	@ 0x43
 800778e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007790:	4b02      	ldr	r3, [pc, #8]	@ (800779c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8007792:	4618      	mov	r0, r3
 8007794:	3718      	adds	r7, #24
 8007796:	46bd      	mov	sp, r7
 8007798:	bd80      	pop	{r7, pc}
 800779a:	bf00      	nop
 800779c:	20000054 	.word	0x20000054

080077a0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80077a0:	b580      	push	{r7, lr}
 80077a2:	b086      	sub	sp, #24
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80077a8:	2182      	movs	r1, #130	@ 0x82
 80077aa:	4818      	ldr	r0, [pc, #96]	@ (800780c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80077ac:	f000 fcf2 	bl	8008194 <USBD_GetEpDesc>
 80077b0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80077b2:	2101      	movs	r1, #1
 80077b4:	4815      	ldr	r0, [pc, #84]	@ (800780c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80077b6:	f000 fced 	bl	8008194 <USBD_GetEpDesc>
 80077ba:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80077bc:	2181      	movs	r1, #129	@ 0x81
 80077be:	4813      	ldr	r0, [pc, #76]	@ (800780c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80077c0:	f000 fce8 	bl	8008194 <USBD_GetEpDesc>
 80077c4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80077c6:	697b      	ldr	r3, [r7, #20]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d002      	beq.n	80077d2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80077cc:	697b      	ldr	r3, [r7, #20]
 80077ce:	2210      	movs	r2, #16
 80077d0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80077d2:	693b      	ldr	r3, [r7, #16]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d006      	beq.n	80077e6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80077d8:	693b      	ldr	r3, [r7, #16]
 80077da:	2200      	movs	r2, #0
 80077dc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80077e0:	711a      	strb	r2, [r3, #4]
 80077e2:	2200      	movs	r2, #0
 80077e4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d006      	beq.n	80077fa <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	2200      	movs	r2, #0
 80077f0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80077f4:	711a      	strb	r2, [r3, #4]
 80077f6:	2200      	movs	r2, #0
 80077f8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	2243      	movs	r2, #67	@ 0x43
 80077fe:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007800:	4b02      	ldr	r3, [pc, #8]	@ (800780c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8007802:	4618      	mov	r0, r3
 8007804:	3718      	adds	r7, #24
 8007806:	46bd      	mov	sp, r7
 8007808:	bd80      	pop	{r7, pc}
 800780a:	bf00      	nop
 800780c:	20000054 	.word	0x20000054

08007810 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007810:	b480      	push	{r7}
 8007812:	b083      	sub	sp, #12
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	220a      	movs	r2, #10
 800781c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800781e:	4b03      	ldr	r3, [pc, #12]	@ (800782c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007820:	4618      	mov	r0, r3
 8007822:	370c      	adds	r7, #12
 8007824:	46bd      	mov	sp, r7
 8007826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782a:	4770      	bx	lr
 800782c:	20000010 	.word	0x20000010

08007830 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007830:	b480      	push	{r7}
 8007832:	b083      	sub	sp, #12
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
 8007838:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800783a:	683b      	ldr	r3, [r7, #0]
 800783c:	2b00      	cmp	r3, #0
 800783e:	d101      	bne.n	8007844 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007840:	2303      	movs	r3, #3
 8007842:	e009      	b.n	8007858 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800784a:	687a      	ldr	r2, [r7, #4]
 800784c:	33b0      	adds	r3, #176	@ 0xb0
 800784e:	009b      	lsls	r3, r3, #2
 8007850:	4413      	add	r3, r2
 8007852:	683a      	ldr	r2, [r7, #0]
 8007854:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8007856:	2300      	movs	r3, #0
}
 8007858:	4618      	mov	r0, r3
 800785a:	370c      	adds	r7, #12
 800785c:	46bd      	mov	sp, r7
 800785e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007862:	4770      	bx	lr

08007864 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007864:	b480      	push	{r7}
 8007866:	b087      	sub	sp, #28
 8007868:	af00      	add	r7, sp, #0
 800786a:	60f8      	str	r0, [r7, #12]
 800786c:	60b9      	str	r1, [r7, #8]
 800786e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	32b0      	adds	r2, #176	@ 0xb0
 800787a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800787e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8007880:	697b      	ldr	r3, [r7, #20]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d101      	bne.n	800788a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007886:	2303      	movs	r3, #3
 8007888:	e008      	b.n	800789c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800788a:	697b      	ldr	r3, [r7, #20]
 800788c:	68ba      	ldr	r2, [r7, #8]
 800788e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8007892:	697b      	ldr	r3, [r7, #20]
 8007894:	687a      	ldr	r2, [r7, #4]
 8007896:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800789a:	2300      	movs	r3, #0
}
 800789c:	4618      	mov	r0, r3
 800789e:	371c      	adds	r7, #28
 80078a0:	46bd      	mov	sp, r7
 80078a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a6:	4770      	bx	lr

080078a8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80078a8:	b480      	push	{r7}
 80078aa:	b085      	sub	sp, #20
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
 80078b0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	32b0      	adds	r2, #176	@ 0xb0
 80078bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078c0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d101      	bne.n	80078cc <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80078c8:	2303      	movs	r3, #3
 80078ca:	e004      	b.n	80078d6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	683a      	ldr	r2, [r7, #0]
 80078d0:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 80078d4:	2300      	movs	r3, #0
}
 80078d6:	4618      	mov	r0, r3
 80078d8:	3714      	adds	r7, #20
 80078da:	46bd      	mov	sp, r7
 80078dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e0:	4770      	bx	lr
	...

080078e4 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b084      	sub	sp, #16
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	32b0      	adds	r2, #176	@ 0xb0
 80078f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078fa:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 80078fc:	2301      	movs	r3, #1
 80078fe:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8007900:	68bb      	ldr	r3, [r7, #8]
 8007902:	2b00      	cmp	r3, #0
 8007904:	d101      	bne.n	800790a <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007906:	2303      	movs	r3, #3
 8007908:	e025      	b.n	8007956 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800790a:	68bb      	ldr	r3, [r7, #8]
 800790c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8007910:	2b00      	cmp	r3, #0
 8007912:	d11f      	bne.n	8007954 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007914:	68bb      	ldr	r3, [r7, #8]
 8007916:	2201      	movs	r2, #1
 8007918:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800791c:	4b10      	ldr	r3, [pc, #64]	@ (8007960 <USBD_CDC_TransmitPacket+0x7c>)
 800791e:	781b      	ldrb	r3, [r3, #0]
 8007920:	f003 020f 	and.w	r2, r3, #15
 8007924:	68bb      	ldr	r3, [r7, #8]
 8007926:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800792a:	6878      	ldr	r0, [r7, #4]
 800792c:	4613      	mov	r3, r2
 800792e:	009b      	lsls	r3, r3, #2
 8007930:	4413      	add	r3, r2
 8007932:	009b      	lsls	r3, r3, #2
 8007934:	4403      	add	r3, r0
 8007936:	3314      	adds	r3, #20
 8007938:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800793a:	4b09      	ldr	r3, [pc, #36]	@ (8007960 <USBD_CDC_TransmitPacket+0x7c>)
 800793c:	7819      	ldrb	r1, [r3, #0]
 800793e:	68bb      	ldr	r3, [r7, #8]
 8007940:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8007944:	68bb      	ldr	r3, [r7, #8]
 8007946:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800794a:	6878      	ldr	r0, [r7, #4]
 800794c:	f002 f847 	bl	80099de <USBD_LL_Transmit>

    ret = USBD_OK;
 8007950:	2300      	movs	r3, #0
 8007952:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8007954:	7bfb      	ldrb	r3, [r7, #15]
}
 8007956:	4618      	mov	r0, r3
 8007958:	3710      	adds	r7, #16
 800795a:	46bd      	mov	sp, r7
 800795c:	bd80      	pop	{r7, pc}
 800795e:	bf00      	nop
 8007960:	20000097 	.word	0x20000097

08007964 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007964:	b580      	push	{r7, lr}
 8007966:	b084      	sub	sp, #16
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	32b0      	adds	r2, #176	@ 0xb0
 8007976:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800797a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	32b0      	adds	r2, #176	@ 0xb0
 8007986:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800798a:	2b00      	cmp	r3, #0
 800798c:	d101      	bne.n	8007992 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800798e:	2303      	movs	r3, #3
 8007990:	e018      	b.n	80079c4 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	7c1b      	ldrb	r3, [r3, #16]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d10a      	bne.n	80079b0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800799a:	4b0c      	ldr	r3, [pc, #48]	@ (80079cc <USBD_CDC_ReceivePacket+0x68>)
 800799c:	7819      	ldrb	r1, [r3, #0]
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80079a4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80079a8:	6878      	ldr	r0, [r7, #4]
 80079aa:	f002 f839 	bl	8009a20 <USBD_LL_PrepareReceive>
 80079ae:	e008      	b.n	80079c2 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80079b0:	4b06      	ldr	r3, [pc, #24]	@ (80079cc <USBD_CDC_ReceivePacket+0x68>)
 80079b2:	7819      	ldrb	r1, [r3, #0]
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80079ba:	2340      	movs	r3, #64	@ 0x40
 80079bc:	6878      	ldr	r0, [r7, #4]
 80079be:	f002 f82f 	bl	8009a20 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80079c2:	2300      	movs	r3, #0
}
 80079c4:	4618      	mov	r0, r3
 80079c6:	3710      	adds	r7, #16
 80079c8:	46bd      	mov	sp, r7
 80079ca:	bd80      	pop	{r7, pc}
 80079cc:	20000098 	.word	0x20000098

080079d0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b086      	sub	sp, #24
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	60f8      	str	r0, [r7, #12]
 80079d8:	60b9      	str	r1, [r7, #8]
 80079da:	4613      	mov	r3, r2
 80079dc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d101      	bne.n	80079e8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80079e4:	2303      	movs	r3, #3
 80079e6:	e01f      	b.n	8007a28 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	2200      	movs	r2, #0
 80079ec:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	2200      	movs	r2, #0
 80079f4:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	2200      	movs	r2, #0
 80079fc:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007a00:	68bb      	ldr	r3, [r7, #8]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d003      	beq.n	8007a0e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	68ba      	ldr	r2, [r7, #8]
 8007a0a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	2201      	movs	r2, #1
 8007a12:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	79fa      	ldrb	r2, [r7, #7]
 8007a1a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007a1c:	68f8      	ldr	r0, [r7, #12]
 8007a1e:	f001 fea9 	bl	8009774 <USBD_LL_Init>
 8007a22:	4603      	mov	r3, r0
 8007a24:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007a26:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a28:	4618      	mov	r0, r3
 8007a2a:	3718      	adds	r7, #24
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	bd80      	pop	{r7, pc}

08007a30 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b084      	sub	sp, #16
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
 8007a38:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007a3e:	683b      	ldr	r3, [r7, #0]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d101      	bne.n	8007a48 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007a44:	2303      	movs	r3, #3
 8007a46:	e025      	b.n	8007a94 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	683a      	ldr	r2, [r7, #0]
 8007a4c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	32ae      	adds	r2, #174	@ 0xae
 8007a5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d00f      	beq.n	8007a84 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	32ae      	adds	r2, #174	@ 0xae
 8007a6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a74:	f107 020e 	add.w	r2, r7, #14
 8007a78:	4610      	mov	r0, r2
 8007a7a:	4798      	blx	r3
 8007a7c:	4602      	mov	r2, r0
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8007a8a:	1c5a      	adds	r2, r3, #1
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8007a92:	2300      	movs	r3, #0
}
 8007a94:	4618      	mov	r0, r3
 8007a96:	3710      	adds	r7, #16
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	bd80      	pop	{r7, pc}

08007a9c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	b082      	sub	sp, #8
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007aa4:	6878      	ldr	r0, [r7, #4]
 8007aa6:	f001 feb1 	bl	800980c <USBD_LL_Start>
 8007aaa:	4603      	mov	r3, r0
}
 8007aac:	4618      	mov	r0, r3
 8007aae:	3708      	adds	r7, #8
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	bd80      	pop	{r7, pc}

08007ab4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007ab4:	b480      	push	{r7}
 8007ab6:	b083      	sub	sp, #12
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007abc:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8007abe:	4618      	mov	r0, r3
 8007ac0:	370c      	adds	r7, #12
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac8:	4770      	bx	lr

08007aca <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007aca:	b580      	push	{r7, lr}
 8007acc:	b084      	sub	sp, #16
 8007ace:	af00      	add	r7, sp, #0
 8007ad0:	6078      	str	r0, [r7, #4]
 8007ad2:	460b      	mov	r3, r1
 8007ad4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d009      	beq.n	8007af8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	78fa      	ldrb	r2, [r7, #3]
 8007aee:	4611      	mov	r1, r2
 8007af0:	6878      	ldr	r0, [r7, #4]
 8007af2:	4798      	blx	r3
 8007af4:	4603      	mov	r3, r0
 8007af6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007af8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007afa:	4618      	mov	r0, r3
 8007afc:	3710      	adds	r7, #16
 8007afe:	46bd      	mov	sp, r7
 8007b00:	bd80      	pop	{r7, pc}

08007b02 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007b02:	b580      	push	{r7, lr}
 8007b04:	b084      	sub	sp, #16
 8007b06:	af00      	add	r7, sp, #0
 8007b08:	6078      	str	r0, [r7, #4]
 8007b0a:	460b      	mov	r3, r1
 8007b0c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007b0e:	2300      	movs	r3, #0
 8007b10:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007b18:	685b      	ldr	r3, [r3, #4]
 8007b1a:	78fa      	ldrb	r2, [r7, #3]
 8007b1c:	4611      	mov	r1, r2
 8007b1e:	6878      	ldr	r0, [r7, #4]
 8007b20:	4798      	blx	r3
 8007b22:	4603      	mov	r3, r0
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d001      	beq.n	8007b2c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007b28:	2303      	movs	r3, #3
 8007b2a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007b2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b2e:	4618      	mov	r0, r3
 8007b30:	3710      	adds	r7, #16
 8007b32:	46bd      	mov	sp, r7
 8007b34:	bd80      	pop	{r7, pc}

08007b36 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007b36:	b580      	push	{r7, lr}
 8007b38:	b084      	sub	sp, #16
 8007b3a:	af00      	add	r7, sp, #0
 8007b3c:	6078      	str	r0, [r7, #4]
 8007b3e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007b46:	6839      	ldr	r1, [r7, #0]
 8007b48:	4618      	mov	r0, r3
 8007b4a:	f001 f94a 	bl	8008de2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	2201      	movs	r2, #1
 8007b52:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8007b5c:	461a      	mov	r2, r3
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007b6a:	f003 031f 	and.w	r3, r3, #31
 8007b6e:	2b02      	cmp	r3, #2
 8007b70:	d01a      	beq.n	8007ba8 <USBD_LL_SetupStage+0x72>
 8007b72:	2b02      	cmp	r3, #2
 8007b74:	d822      	bhi.n	8007bbc <USBD_LL_SetupStage+0x86>
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d002      	beq.n	8007b80 <USBD_LL_SetupStage+0x4a>
 8007b7a:	2b01      	cmp	r3, #1
 8007b7c:	d00a      	beq.n	8007b94 <USBD_LL_SetupStage+0x5e>
 8007b7e:	e01d      	b.n	8007bbc <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007b86:	4619      	mov	r1, r3
 8007b88:	6878      	ldr	r0, [r7, #4]
 8007b8a:	f000 fb75 	bl	8008278 <USBD_StdDevReq>
 8007b8e:	4603      	mov	r3, r0
 8007b90:	73fb      	strb	r3, [r7, #15]
      break;
 8007b92:	e020      	b.n	8007bd6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007b9a:	4619      	mov	r1, r3
 8007b9c:	6878      	ldr	r0, [r7, #4]
 8007b9e:	f000 fbdd 	bl	800835c <USBD_StdItfReq>
 8007ba2:	4603      	mov	r3, r0
 8007ba4:	73fb      	strb	r3, [r7, #15]
      break;
 8007ba6:	e016      	b.n	8007bd6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007bae:	4619      	mov	r1, r3
 8007bb0:	6878      	ldr	r0, [r7, #4]
 8007bb2:	f000 fc3f 	bl	8008434 <USBD_StdEPReq>
 8007bb6:	4603      	mov	r3, r0
 8007bb8:	73fb      	strb	r3, [r7, #15]
      break;
 8007bba:	e00c      	b.n	8007bd6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007bc2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007bc6:	b2db      	uxtb	r3, r3
 8007bc8:	4619      	mov	r1, r3
 8007bca:	6878      	ldr	r0, [r7, #4]
 8007bcc:	f001 fe7e 	bl	80098cc <USBD_LL_StallEP>
 8007bd0:	4603      	mov	r3, r0
 8007bd2:	73fb      	strb	r3, [r7, #15]
      break;
 8007bd4:	bf00      	nop
  }

  return ret;
 8007bd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bd8:	4618      	mov	r0, r3
 8007bda:	3710      	adds	r7, #16
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	bd80      	pop	{r7, pc}

08007be0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b086      	sub	sp, #24
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	60f8      	str	r0, [r7, #12]
 8007be8:	460b      	mov	r3, r1
 8007bea:	607a      	str	r2, [r7, #4]
 8007bec:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007bee:	2300      	movs	r3, #0
 8007bf0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 8007bf2:	7afb      	ldrb	r3, [r7, #11]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d177      	bne.n	8007ce8 <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8007bfe:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007c06:	2b03      	cmp	r3, #3
 8007c08:	f040 80a1 	bne.w	8007d4e <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 8007c0c:	693b      	ldr	r3, [r7, #16]
 8007c0e:	685b      	ldr	r3, [r3, #4]
 8007c10:	693a      	ldr	r2, [r7, #16]
 8007c12:	8992      	ldrh	r2, [r2, #12]
 8007c14:	4293      	cmp	r3, r2
 8007c16:	d91c      	bls.n	8007c52 <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 8007c18:	693b      	ldr	r3, [r7, #16]
 8007c1a:	685b      	ldr	r3, [r3, #4]
 8007c1c:	693a      	ldr	r2, [r7, #16]
 8007c1e:	8992      	ldrh	r2, [r2, #12]
 8007c20:	1a9a      	subs	r2, r3, r2
 8007c22:	693b      	ldr	r3, [r7, #16]
 8007c24:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 8007c26:	693b      	ldr	r3, [r7, #16]
 8007c28:	691b      	ldr	r3, [r3, #16]
 8007c2a:	693a      	ldr	r2, [r7, #16]
 8007c2c:	8992      	ldrh	r2, [r2, #12]
 8007c2e:	441a      	add	r2, r3
 8007c30:	693b      	ldr	r3, [r7, #16]
 8007c32:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 8007c34:	693b      	ldr	r3, [r7, #16]
 8007c36:	6919      	ldr	r1, [r3, #16]
 8007c38:	693b      	ldr	r3, [r7, #16]
 8007c3a:	899b      	ldrh	r3, [r3, #12]
 8007c3c:	461a      	mov	r2, r3
 8007c3e:	693b      	ldr	r3, [r7, #16]
 8007c40:	685b      	ldr	r3, [r3, #4]
 8007c42:	4293      	cmp	r3, r2
 8007c44:	bf38      	it	cc
 8007c46:	4613      	movcc	r3, r2
 8007c48:	461a      	mov	r2, r3
 8007c4a:	68f8      	ldr	r0, [r7, #12]
 8007c4c:	f001 f9d0 	bl	8008ff0 <USBD_CtlContinueRx>
 8007c50:	e07d      	b.n	8007d4e <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007c58:	f003 031f 	and.w	r3, r3, #31
 8007c5c:	2b02      	cmp	r3, #2
 8007c5e:	d014      	beq.n	8007c8a <USBD_LL_DataOutStage+0xaa>
 8007c60:	2b02      	cmp	r3, #2
 8007c62:	d81d      	bhi.n	8007ca0 <USBD_LL_DataOutStage+0xc0>
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d002      	beq.n	8007c6e <USBD_LL_DataOutStage+0x8e>
 8007c68:	2b01      	cmp	r3, #1
 8007c6a:	d003      	beq.n	8007c74 <USBD_LL_DataOutStage+0x94>
 8007c6c:	e018      	b.n	8007ca0 <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007c6e:	2300      	movs	r3, #0
 8007c70:	75bb      	strb	r3, [r7, #22]
            break;
 8007c72:	e018      	b.n	8007ca6 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8007c7a:	b2db      	uxtb	r3, r3
 8007c7c:	4619      	mov	r1, r3
 8007c7e:	68f8      	ldr	r0, [r7, #12]
 8007c80:	f000 fa6e 	bl	8008160 <USBD_CoreFindIF>
 8007c84:	4603      	mov	r3, r0
 8007c86:	75bb      	strb	r3, [r7, #22]
            break;
 8007c88:	e00d      	b.n	8007ca6 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8007c90:	b2db      	uxtb	r3, r3
 8007c92:	4619      	mov	r1, r3
 8007c94:	68f8      	ldr	r0, [r7, #12]
 8007c96:	f000 fa70 	bl	800817a <USBD_CoreFindEP>
 8007c9a:	4603      	mov	r3, r0
 8007c9c:	75bb      	strb	r3, [r7, #22]
            break;
 8007c9e:	e002      	b.n	8007ca6 <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	75bb      	strb	r3, [r7, #22]
            break;
 8007ca4:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007ca6:	7dbb      	ldrb	r3, [r7, #22]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d119      	bne.n	8007ce0 <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007cb2:	b2db      	uxtb	r3, r3
 8007cb4:	2b03      	cmp	r3, #3
 8007cb6:	d113      	bne.n	8007ce0 <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007cb8:	7dba      	ldrb	r2, [r7, #22]
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	32ae      	adds	r2, #174	@ 0xae
 8007cbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cc2:	691b      	ldr	r3, [r3, #16]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d00b      	beq.n	8007ce0 <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 8007cc8:	7dba      	ldrb	r2, [r7, #22]
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007cd0:	7dba      	ldrb	r2, [r7, #22]
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	32ae      	adds	r2, #174	@ 0xae
 8007cd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cda:	691b      	ldr	r3, [r3, #16]
 8007cdc:	68f8      	ldr	r0, [r7, #12]
 8007cde:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007ce0:	68f8      	ldr	r0, [r7, #12]
 8007ce2:	f001 f996 	bl	8009012 <USBD_CtlSendStatus>
 8007ce6:	e032      	b.n	8007d4e <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007ce8:	7afb      	ldrb	r3, [r7, #11]
 8007cea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007cee:	b2db      	uxtb	r3, r3
 8007cf0:	4619      	mov	r1, r3
 8007cf2:	68f8      	ldr	r0, [r7, #12]
 8007cf4:	f000 fa41 	bl	800817a <USBD_CoreFindEP>
 8007cf8:	4603      	mov	r3, r0
 8007cfa:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007cfc:	7dbb      	ldrb	r3, [r7, #22]
 8007cfe:	2bff      	cmp	r3, #255	@ 0xff
 8007d00:	d025      	beq.n	8007d4e <USBD_LL_DataOutStage+0x16e>
 8007d02:	7dbb      	ldrb	r3, [r7, #22]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d122      	bne.n	8007d4e <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007d0e:	b2db      	uxtb	r3, r3
 8007d10:	2b03      	cmp	r3, #3
 8007d12:	d117      	bne.n	8007d44 <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007d14:	7dba      	ldrb	r2, [r7, #22]
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	32ae      	adds	r2, #174	@ 0xae
 8007d1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d1e:	699b      	ldr	r3, [r3, #24]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d00f      	beq.n	8007d44 <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 8007d24:	7dba      	ldrb	r2, [r7, #22]
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007d2c:	7dba      	ldrb	r2, [r7, #22]
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	32ae      	adds	r2, #174	@ 0xae
 8007d32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d36:	699b      	ldr	r3, [r3, #24]
 8007d38:	7afa      	ldrb	r2, [r7, #11]
 8007d3a:	4611      	mov	r1, r2
 8007d3c:	68f8      	ldr	r0, [r7, #12]
 8007d3e:	4798      	blx	r3
 8007d40:	4603      	mov	r3, r0
 8007d42:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007d44:	7dfb      	ldrb	r3, [r7, #23]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d001      	beq.n	8007d4e <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 8007d4a:	7dfb      	ldrb	r3, [r7, #23]
 8007d4c:	e000      	b.n	8007d50 <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 8007d4e:	2300      	movs	r3, #0
}
 8007d50:	4618      	mov	r0, r3
 8007d52:	3718      	adds	r7, #24
 8007d54:	46bd      	mov	sp, r7
 8007d56:	bd80      	pop	{r7, pc}

08007d58 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b086      	sub	sp, #24
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	60f8      	str	r0, [r7, #12]
 8007d60:	460b      	mov	r3, r1
 8007d62:	607a      	str	r2, [r7, #4]
 8007d64:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 8007d66:	7afb      	ldrb	r3, [r7, #11]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d178      	bne.n	8007e5e <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	3314      	adds	r3, #20
 8007d70:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007d78:	2b02      	cmp	r3, #2
 8007d7a:	d163      	bne.n	8007e44 <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 8007d7c:	693b      	ldr	r3, [r7, #16]
 8007d7e:	685b      	ldr	r3, [r3, #4]
 8007d80:	693a      	ldr	r2, [r7, #16]
 8007d82:	8992      	ldrh	r2, [r2, #12]
 8007d84:	4293      	cmp	r3, r2
 8007d86:	d91c      	bls.n	8007dc2 <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 8007d88:	693b      	ldr	r3, [r7, #16]
 8007d8a:	685b      	ldr	r3, [r3, #4]
 8007d8c:	693a      	ldr	r2, [r7, #16]
 8007d8e:	8992      	ldrh	r2, [r2, #12]
 8007d90:	1a9a      	subs	r2, r3, r2
 8007d92:	693b      	ldr	r3, [r7, #16]
 8007d94:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 8007d96:	693b      	ldr	r3, [r7, #16]
 8007d98:	691b      	ldr	r3, [r3, #16]
 8007d9a:	693a      	ldr	r2, [r7, #16]
 8007d9c:	8992      	ldrh	r2, [r2, #12]
 8007d9e:	441a      	add	r2, r3
 8007da0:	693b      	ldr	r3, [r7, #16]
 8007da2:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 8007da4:	693b      	ldr	r3, [r7, #16]
 8007da6:	6919      	ldr	r1, [r3, #16]
 8007da8:	693b      	ldr	r3, [r7, #16]
 8007daa:	685b      	ldr	r3, [r3, #4]
 8007dac:	461a      	mov	r2, r3
 8007dae:	68f8      	ldr	r0, [r7, #12]
 8007db0:	f001 f8ec 	bl	8008f8c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007db4:	2300      	movs	r3, #0
 8007db6:	2200      	movs	r2, #0
 8007db8:	2100      	movs	r1, #0
 8007dba:	68f8      	ldr	r0, [r7, #12]
 8007dbc:	f001 fe30 	bl	8009a20 <USBD_LL_PrepareReceive>
 8007dc0:	e040      	b.n	8007e44 <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007dc2:	693b      	ldr	r3, [r7, #16]
 8007dc4:	899b      	ldrh	r3, [r3, #12]
 8007dc6:	461a      	mov	r2, r3
 8007dc8:	693b      	ldr	r3, [r7, #16]
 8007dca:	685b      	ldr	r3, [r3, #4]
 8007dcc:	429a      	cmp	r2, r3
 8007dce:	d11c      	bne.n	8007e0a <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 8007dd0:	693b      	ldr	r3, [r7, #16]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	693a      	ldr	r2, [r7, #16]
 8007dd6:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007dd8:	4293      	cmp	r3, r2
 8007dda:	d316      	bcc.n	8007e0a <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 8007ddc:	693b      	ldr	r3, [r7, #16]
 8007dde:	681a      	ldr	r2, [r3, #0]
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007de6:	429a      	cmp	r2, r3
 8007de8:	d20f      	bcs.n	8007e0a <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007dea:	2200      	movs	r2, #0
 8007dec:	2100      	movs	r1, #0
 8007dee:	68f8      	ldr	r0, [r7, #12]
 8007df0:	f001 f8cc 	bl	8008f8c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	2200      	movs	r2, #0
 8007df8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	2200      	movs	r2, #0
 8007e00:	2100      	movs	r1, #0
 8007e02:	68f8      	ldr	r0, [r7, #12]
 8007e04:	f001 fe0c 	bl	8009a20 <USBD_LL_PrepareReceive>
 8007e08:	e01c      	b.n	8007e44 <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007e10:	b2db      	uxtb	r3, r3
 8007e12:	2b03      	cmp	r3, #3
 8007e14:	d10f      	bne.n	8007e36 <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007e1c:	68db      	ldr	r3, [r3, #12]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d009      	beq.n	8007e36 <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	2200      	movs	r2, #0
 8007e26:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007e30:	68db      	ldr	r3, [r3, #12]
 8007e32:	68f8      	ldr	r0, [r7, #12]
 8007e34:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007e36:	2180      	movs	r1, #128	@ 0x80
 8007e38:	68f8      	ldr	r0, [r7, #12]
 8007e3a:	f001 fd47 	bl	80098cc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007e3e:	68f8      	ldr	r0, [r7, #12]
 8007e40:	f001 f8fa 	bl	8009038 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d03a      	beq.n	8007ec4 <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 8007e4e:	68f8      	ldr	r0, [r7, #12]
 8007e50:	f7ff fe30 	bl	8007ab4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	2200      	movs	r2, #0
 8007e58:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8007e5c:	e032      	b.n	8007ec4 <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007e5e:	7afb      	ldrb	r3, [r7, #11]
 8007e60:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007e64:	b2db      	uxtb	r3, r3
 8007e66:	4619      	mov	r1, r3
 8007e68:	68f8      	ldr	r0, [r7, #12]
 8007e6a:	f000 f986 	bl	800817a <USBD_CoreFindEP>
 8007e6e:	4603      	mov	r3, r0
 8007e70:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007e72:	7dfb      	ldrb	r3, [r7, #23]
 8007e74:	2bff      	cmp	r3, #255	@ 0xff
 8007e76:	d025      	beq.n	8007ec4 <USBD_LL_DataInStage+0x16c>
 8007e78:	7dfb      	ldrb	r3, [r7, #23]
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d122      	bne.n	8007ec4 <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007e84:	b2db      	uxtb	r3, r3
 8007e86:	2b03      	cmp	r3, #3
 8007e88:	d11c      	bne.n	8007ec4 <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007e8a:	7dfa      	ldrb	r2, [r7, #23]
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	32ae      	adds	r2, #174	@ 0xae
 8007e90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e94:	695b      	ldr	r3, [r3, #20]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d014      	beq.n	8007ec4 <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 8007e9a:	7dfa      	ldrb	r2, [r7, #23]
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007ea2:	7dfa      	ldrb	r2, [r7, #23]
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	32ae      	adds	r2, #174	@ 0xae
 8007ea8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007eac:	695b      	ldr	r3, [r3, #20]
 8007eae:	7afa      	ldrb	r2, [r7, #11]
 8007eb0:	4611      	mov	r1, r2
 8007eb2:	68f8      	ldr	r0, [r7, #12]
 8007eb4:	4798      	blx	r3
 8007eb6:	4603      	mov	r3, r0
 8007eb8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007eba:	7dbb      	ldrb	r3, [r7, #22]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d001      	beq.n	8007ec4 <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 8007ec0:	7dbb      	ldrb	r3, [r7, #22]
 8007ec2:	e000      	b.n	8007ec6 <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 8007ec4:	2300      	movs	r3, #0
}
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	3718      	adds	r7, #24
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	bd80      	pop	{r7, pc}

08007ece <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007ece:	b580      	push	{r7, lr}
 8007ed0:	b084      	sub	sp, #16
 8007ed2:	af00      	add	r7, sp, #0
 8007ed4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	2201      	movs	r2, #1
 8007ede:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	2200      	movs	r2, #0
 8007eee:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2200      	movs	r2, #0
 8007efc:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d014      	beq.n	8007f34 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007f10:	685b      	ldr	r3, [r3, #4]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d00e      	beq.n	8007f34 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007f1c:	685b      	ldr	r3, [r3, #4]
 8007f1e:	687a      	ldr	r2, [r7, #4]
 8007f20:	6852      	ldr	r2, [r2, #4]
 8007f22:	b2d2      	uxtb	r2, r2
 8007f24:	4611      	mov	r1, r2
 8007f26:	6878      	ldr	r0, [r7, #4]
 8007f28:	4798      	blx	r3
 8007f2a:	4603      	mov	r3, r0
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d001      	beq.n	8007f34 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007f30:	2303      	movs	r3, #3
 8007f32:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007f34:	2340      	movs	r3, #64	@ 0x40
 8007f36:	2200      	movs	r2, #0
 8007f38:	2100      	movs	r1, #0
 8007f3a:	6878      	ldr	r0, [r7, #4]
 8007f3c:	f001 fc81 	bl	8009842 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2201      	movs	r2, #1
 8007f44:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	2240      	movs	r2, #64	@ 0x40
 8007f4c:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007f50:	2340      	movs	r3, #64	@ 0x40
 8007f52:	2200      	movs	r2, #0
 8007f54:	2180      	movs	r1, #128	@ 0x80
 8007f56:	6878      	ldr	r0, [r7, #4]
 8007f58:	f001 fc73 	bl	8009842 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2201      	movs	r2, #1
 8007f60:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2240      	movs	r2, #64	@ 0x40
 8007f68:	841a      	strh	r2, [r3, #32]

  return ret;
 8007f6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	3710      	adds	r7, #16
 8007f70:	46bd      	mov	sp, r7
 8007f72:	bd80      	pop	{r7, pc}

08007f74 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007f74:	b480      	push	{r7}
 8007f76:	b083      	sub	sp, #12
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
 8007f7c:	460b      	mov	r3, r1
 8007f7e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	78fa      	ldrb	r2, [r7, #3]
 8007f84:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007f86:	2300      	movs	r3, #0
}
 8007f88:	4618      	mov	r0, r3
 8007f8a:	370c      	adds	r7, #12
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f92:	4770      	bx	lr

08007f94 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007f94:	b480      	push	{r7}
 8007f96:	b083      	sub	sp, #12
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007fa2:	b2db      	uxtb	r3, r3
 8007fa4:	2b04      	cmp	r3, #4
 8007fa6:	d006      	beq.n	8007fb6 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007fae:	b2da      	uxtb	r2, r3
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	2204      	movs	r2, #4
 8007fba:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8007fbe:	2300      	movs	r3, #0
}
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	370c      	adds	r7, #12
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fca:	4770      	bx	lr

08007fcc <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007fcc:	b480      	push	{r7}
 8007fce:	b083      	sub	sp, #12
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007fda:	b2db      	uxtb	r3, r3
 8007fdc:	2b04      	cmp	r3, #4
 8007fde:	d106      	bne.n	8007fee <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8007fe6:	b2da      	uxtb	r2, r3
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8007fee:	2300      	movs	r3, #0
}
 8007ff0:	4618      	mov	r0, r3
 8007ff2:	370c      	adds	r7, #12
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffa:	4770      	bx	lr

08007ffc <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	b082      	sub	sp, #8
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800800a:	b2db      	uxtb	r3, r3
 800800c:	2b03      	cmp	r3, #3
 800800e:	d110      	bne.n	8008032 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008016:	2b00      	cmp	r3, #0
 8008018:	d00b      	beq.n	8008032 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008020:	69db      	ldr	r3, [r3, #28]
 8008022:	2b00      	cmp	r3, #0
 8008024:	d005      	beq.n	8008032 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800802c:	69db      	ldr	r3, [r3, #28]
 800802e:	6878      	ldr	r0, [r7, #4]
 8008030:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8008032:	2300      	movs	r3, #0
}
 8008034:	4618      	mov	r0, r3
 8008036:	3708      	adds	r7, #8
 8008038:	46bd      	mov	sp, r7
 800803a:	bd80      	pop	{r7, pc}

0800803c <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800803c:	b580      	push	{r7, lr}
 800803e:	b082      	sub	sp, #8
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]
 8008044:	460b      	mov	r3, r1
 8008046:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	32ae      	adds	r2, #174	@ 0xae
 8008052:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008056:	2b00      	cmp	r3, #0
 8008058:	d101      	bne.n	800805e <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800805a:	2303      	movs	r3, #3
 800805c:	e01c      	b.n	8008098 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008064:	b2db      	uxtb	r3, r3
 8008066:	2b03      	cmp	r3, #3
 8008068:	d115      	bne.n	8008096 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	32ae      	adds	r2, #174	@ 0xae
 8008074:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008078:	6a1b      	ldr	r3, [r3, #32]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d00b      	beq.n	8008096 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	32ae      	adds	r2, #174	@ 0xae
 8008088:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800808c:	6a1b      	ldr	r3, [r3, #32]
 800808e:	78fa      	ldrb	r2, [r7, #3]
 8008090:	4611      	mov	r1, r2
 8008092:	6878      	ldr	r0, [r7, #4]
 8008094:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008096:	2300      	movs	r3, #0
}
 8008098:	4618      	mov	r0, r3
 800809a:	3708      	adds	r7, #8
 800809c:	46bd      	mov	sp, r7
 800809e:	bd80      	pop	{r7, pc}

080080a0 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80080a0:	b580      	push	{r7, lr}
 80080a2:	b082      	sub	sp, #8
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
 80080a8:	460b      	mov	r3, r1
 80080aa:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	32ae      	adds	r2, #174	@ 0xae
 80080b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d101      	bne.n	80080c2 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80080be:	2303      	movs	r3, #3
 80080c0:	e01c      	b.n	80080fc <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80080c8:	b2db      	uxtb	r3, r3
 80080ca:	2b03      	cmp	r3, #3
 80080cc:	d115      	bne.n	80080fa <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	32ae      	adds	r2, #174	@ 0xae
 80080d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d00b      	beq.n	80080fa <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	32ae      	adds	r2, #174	@ 0xae
 80080ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080f2:	78fa      	ldrb	r2, [r7, #3]
 80080f4:	4611      	mov	r1, r2
 80080f6:	6878      	ldr	r0, [r7, #4]
 80080f8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80080fa:	2300      	movs	r3, #0
}
 80080fc:	4618      	mov	r0, r3
 80080fe:	3708      	adds	r7, #8
 8008100:	46bd      	mov	sp, r7
 8008102:	bd80      	pop	{r7, pc}

08008104 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008104:	b480      	push	{r7}
 8008106:	b083      	sub	sp, #12
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800810c:	2300      	movs	r3, #0
}
 800810e:	4618      	mov	r0, r3
 8008110:	370c      	adds	r7, #12
 8008112:	46bd      	mov	sp, r7
 8008114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008118:	4770      	bx	lr

0800811a <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800811a:	b580      	push	{r7, lr}
 800811c:	b084      	sub	sp, #16
 800811e:	af00      	add	r7, sp, #0
 8008120:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8008122:	2300      	movs	r3, #0
 8008124:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	2201      	movs	r2, #1
 800812a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008134:	2b00      	cmp	r3, #0
 8008136:	d00e      	beq.n	8008156 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800813e:	685b      	ldr	r3, [r3, #4]
 8008140:	687a      	ldr	r2, [r7, #4]
 8008142:	6852      	ldr	r2, [r2, #4]
 8008144:	b2d2      	uxtb	r2, r2
 8008146:	4611      	mov	r1, r2
 8008148:	6878      	ldr	r0, [r7, #4]
 800814a:	4798      	blx	r3
 800814c:	4603      	mov	r3, r0
 800814e:	2b00      	cmp	r3, #0
 8008150:	d001      	beq.n	8008156 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8008152:	2303      	movs	r3, #3
 8008154:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008156:	7bfb      	ldrb	r3, [r7, #15]
}
 8008158:	4618      	mov	r0, r3
 800815a:	3710      	adds	r7, #16
 800815c:	46bd      	mov	sp, r7
 800815e:	bd80      	pop	{r7, pc}

08008160 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008160:	b480      	push	{r7}
 8008162:	b083      	sub	sp, #12
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
 8008168:	460b      	mov	r3, r1
 800816a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800816c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800816e:	4618      	mov	r0, r3
 8008170:	370c      	adds	r7, #12
 8008172:	46bd      	mov	sp, r7
 8008174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008178:	4770      	bx	lr

0800817a <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800817a:	b480      	push	{r7}
 800817c:	b083      	sub	sp, #12
 800817e:	af00      	add	r7, sp, #0
 8008180:	6078      	str	r0, [r7, #4]
 8008182:	460b      	mov	r3, r1
 8008184:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008186:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008188:	4618      	mov	r0, r3
 800818a:	370c      	adds	r7, #12
 800818c:	46bd      	mov	sp, r7
 800818e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008192:	4770      	bx	lr

08008194 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8008194:	b580      	push	{r7, lr}
 8008196:	b086      	sub	sp, #24
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]
 800819c:	460b      	mov	r3, r1
 800819e:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80081a8:	2300      	movs	r3, #0
 80081aa:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	885b      	ldrh	r3, [r3, #2]
 80081b0:	b29b      	uxth	r3, r3
 80081b2:	68fa      	ldr	r2, [r7, #12]
 80081b4:	7812      	ldrb	r2, [r2, #0]
 80081b6:	4293      	cmp	r3, r2
 80081b8:	d91f      	bls.n	80081fa <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	781b      	ldrb	r3, [r3, #0]
 80081be:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80081c0:	e013      	b.n	80081ea <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80081c2:	f107 030a 	add.w	r3, r7, #10
 80081c6:	4619      	mov	r1, r3
 80081c8:	6978      	ldr	r0, [r7, #20]
 80081ca:	f000 f81b 	bl	8008204 <USBD_GetNextDesc>
 80081ce:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80081d0:	697b      	ldr	r3, [r7, #20]
 80081d2:	785b      	ldrb	r3, [r3, #1]
 80081d4:	2b05      	cmp	r3, #5
 80081d6:	d108      	bne.n	80081ea <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80081d8:	697b      	ldr	r3, [r7, #20]
 80081da:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80081dc:	693b      	ldr	r3, [r7, #16]
 80081de:	789b      	ldrb	r3, [r3, #2]
 80081e0:	78fa      	ldrb	r2, [r7, #3]
 80081e2:	429a      	cmp	r2, r3
 80081e4:	d008      	beq.n	80081f8 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80081e6:	2300      	movs	r3, #0
 80081e8:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	885b      	ldrh	r3, [r3, #2]
 80081ee:	b29a      	uxth	r2, r3
 80081f0:	897b      	ldrh	r3, [r7, #10]
 80081f2:	429a      	cmp	r2, r3
 80081f4:	d8e5      	bhi.n	80081c2 <USBD_GetEpDesc+0x2e>
 80081f6:	e000      	b.n	80081fa <USBD_GetEpDesc+0x66>
          break;
 80081f8:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80081fa:	693b      	ldr	r3, [r7, #16]
}
 80081fc:	4618      	mov	r0, r3
 80081fe:	3718      	adds	r7, #24
 8008200:	46bd      	mov	sp, r7
 8008202:	bd80      	pop	{r7, pc}

08008204 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008204:	b480      	push	{r7}
 8008206:	b085      	sub	sp, #20
 8008208:	af00      	add	r7, sp, #0
 800820a:	6078      	str	r0, [r7, #4]
 800820c:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8008212:	683b      	ldr	r3, [r7, #0]
 8008214:	881b      	ldrh	r3, [r3, #0]
 8008216:	68fa      	ldr	r2, [r7, #12]
 8008218:	7812      	ldrb	r2, [r2, #0]
 800821a:	4413      	add	r3, r2
 800821c:	b29a      	uxth	r2, r3
 800821e:	683b      	ldr	r3, [r7, #0]
 8008220:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	781b      	ldrb	r3, [r3, #0]
 8008226:	461a      	mov	r2, r3
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	4413      	add	r3, r2
 800822c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800822e:	68fb      	ldr	r3, [r7, #12]
}
 8008230:	4618      	mov	r0, r3
 8008232:	3714      	adds	r7, #20
 8008234:	46bd      	mov	sp, r7
 8008236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823a:	4770      	bx	lr

0800823c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800823c:	b480      	push	{r7}
 800823e:	b087      	sub	sp, #28
 8008240:	af00      	add	r7, sp, #0
 8008242:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008248:	697b      	ldr	r3, [r7, #20]
 800824a:	781b      	ldrb	r3, [r3, #0]
 800824c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800824e:	697b      	ldr	r3, [r7, #20]
 8008250:	3301      	adds	r3, #1
 8008252:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008254:	697b      	ldr	r3, [r7, #20]
 8008256:	781b      	ldrb	r3, [r3, #0]
 8008258:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800825a:	8a3b      	ldrh	r3, [r7, #16]
 800825c:	021b      	lsls	r3, r3, #8
 800825e:	b21a      	sxth	r2, r3
 8008260:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008264:	4313      	orrs	r3, r2
 8008266:	b21b      	sxth	r3, r3
 8008268:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800826a:	89fb      	ldrh	r3, [r7, #14]
}
 800826c:	4618      	mov	r0, r3
 800826e:	371c      	adds	r7, #28
 8008270:	46bd      	mov	sp, r7
 8008272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008276:	4770      	bx	lr

08008278 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008278:	b580      	push	{r7, lr}
 800827a:	b084      	sub	sp, #16
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]
 8008280:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008282:	2300      	movs	r3, #0
 8008284:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008286:	683b      	ldr	r3, [r7, #0]
 8008288:	781b      	ldrb	r3, [r3, #0]
 800828a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800828e:	2b40      	cmp	r3, #64	@ 0x40
 8008290:	d005      	beq.n	800829e <USBD_StdDevReq+0x26>
 8008292:	2b40      	cmp	r3, #64	@ 0x40
 8008294:	d857      	bhi.n	8008346 <USBD_StdDevReq+0xce>
 8008296:	2b00      	cmp	r3, #0
 8008298:	d00f      	beq.n	80082ba <USBD_StdDevReq+0x42>
 800829a:	2b20      	cmp	r3, #32
 800829c:	d153      	bne.n	8008346 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	32ae      	adds	r2, #174	@ 0xae
 80082a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082ac:	689b      	ldr	r3, [r3, #8]
 80082ae:	6839      	ldr	r1, [r7, #0]
 80082b0:	6878      	ldr	r0, [r7, #4]
 80082b2:	4798      	blx	r3
 80082b4:	4603      	mov	r3, r0
 80082b6:	73fb      	strb	r3, [r7, #15]
      break;
 80082b8:	e04a      	b.n	8008350 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80082ba:	683b      	ldr	r3, [r7, #0]
 80082bc:	785b      	ldrb	r3, [r3, #1]
 80082be:	2b09      	cmp	r3, #9
 80082c0:	d83b      	bhi.n	800833a <USBD_StdDevReq+0xc2>
 80082c2:	a201      	add	r2, pc, #4	@ (adr r2, 80082c8 <USBD_StdDevReq+0x50>)
 80082c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082c8:	0800831d 	.word	0x0800831d
 80082cc:	08008331 	.word	0x08008331
 80082d0:	0800833b 	.word	0x0800833b
 80082d4:	08008327 	.word	0x08008327
 80082d8:	0800833b 	.word	0x0800833b
 80082dc:	080082fb 	.word	0x080082fb
 80082e0:	080082f1 	.word	0x080082f1
 80082e4:	0800833b 	.word	0x0800833b
 80082e8:	08008313 	.word	0x08008313
 80082ec:	08008305 	.word	0x08008305
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80082f0:	6839      	ldr	r1, [r7, #0]
 80082f2:	6878      	ldr	r0, [r7, #4]
 80082f4:	f000 fa3e 	bl	8008774 <USBD_GetDescriptor>
          break;
 80082f8:	e024      	b.n	8008344 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80082fa:	6839      	ldr	r1, [r7, #0]
 80082fc:	6878      	ldr	r0, [r7, #4]
 80082fe:	f000 fbcd 	bl	8008a9c <USBD_SetAddress>
          break;
 8008302:	e01f      	b.n	8008344 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008304:	6839      	ldr	r1, [r7, #0]
 8008306:	6878      	ldr	r0, [r7, #4]
 8008308:	f000 fc0c 	bl	8008b24 <USBD_SetConfig>
 800830c:	4603      	mov	r3, r0
 800830e:	73fb      	strb	r3, [r7, #15]
          break;
 8008310:	e018      	b.n	8008344 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008312:	6839      	ldr	r1, [r7, #0]
 8008314:	6878      	ldr	r0, [r7, #4]
 8008316:	f000 fcaf 	bl	8008c78 <USBD_GetConfig>
          break;
 800831a:	e013      	b.n	8008344 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800831c:	6839      	ldr	r1, [r7, #0]
 800831e:	6878      	ldr	r0, [r7, #4]
 8008320:	f000 fce0 	bl	8008ce4 <USBD_GetStatus>
          break;
 8008324:	e00e      	b.n	8008344 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008326:	6839      	ldr	r1, [r7, #0]
 8008328:	6878      	ldr	r0, [r7, #4]
 800832a:	f000 fd0f 	bl	8008d4c <USBD_SetFeature>
          break;
 800832e:	e009      	b.n	8008344 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008330:	6839      	ldr	r1, [r7, #0]
 8008332:	6878      	ldr	r0, [r7, #4]
 8008334:	f000 fd33 	bl	8008d9e <USBD_ClrFeature>
          break;
 8008338:	e004      	b.n	8008344 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800833a:	6839      	ldr	r1, [r7, #0]
 800833c:	6878      	ldr	r0, [r7, #4]
 800833e:	f000 fd8a 	bl	8008e56 <USBD_CtlError>
          break;
 8008342:	bf00      	nop
      }
      break;
 8008344:	e004      	b.n	8008350 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8008346:	6839      	ldr	r1, [r7, #0]
 8008348:	6878      	ldr	r0, [r7, #4]
 800834a:	f000 fd84 	bl	8008e56 <USBD_CtlError>
      break;
 800834e:	bf00      	nop
  }

  return ret;
 8008350:	7bfb      	ldrb	r3, [r7, #15]
}
 8008352:	4618      	mov	r0, r3
 8008354:	3710      	adds	r7, #16
 8008356:	46bd      	mov	sp, r7
 8008358:	bd80      	pop	{r7, pc}
 800835a:	bf00      	nop

0800835c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800835c:	b580      	push	{r7, lr}
 800835e:	b084      	sub	sp, #16
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]
 8008364:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008366:	2300      	movs	r3, #0
 8008368:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800836a:	683b      	ldr	r3, [r7, #0]
 800836c:	781b      	ldrb	r3, [r3, #0]
 800836e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008372:	2b40      	cmp	r3, #64	@ 0x40
 8008374:	d005      	beq.n	8008382 <USBD_StdItfReq+0x26>
 8008376:	2b40      	cmp	r3, #64	@ 0x40
 8008378:	d852      	bhi.n	8008420 <USBD_StdItfReq+0xc4>
 800837a:	2b00      	cmp	r3, #0
 800837c:	d001      	beq.n	8008382 <USBD_StdItfReq+0x26>
 800837e:	2b20      	cmp	r3, #32
 8008380:	d14e      	bne.n	8008420 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008388:	b2db      	uxtb	r3, r3
 800838a:	3b01      	subs	r3, #1
 800838c:	2b02      	cmp	r3, #2
 800838e:	d840      	bhi.n	8008412 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008390:	683b      	ldr	r3, [r7, #0]
 8008392:	889b      	ldrh	r3, [r3, #4]
 8008394:	b2db      	uxtb	r3, r3
 8008396:	2b01      	cmp	r3, #1
 8008398:	d836      	bhi.n	8008408 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800839a:	683b      	ldr	r3, [r7, #0]
 800839c:	889b      	ldrh	r3, [r3, #4]
 800839e:	b2db      	uxtb	r3, r3
 80083a0:	4619      	mov	r1, r3
 80083a2:	6878      	ldr	r0, [r7, #4]
 80083a4:	f7ff fedc 	bl	8008160 <USBD_CoreFindIF>
 80083a8:	4603      	mov	r3, r0
 80083aa:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80083ac:	7bbb      	ldrb	r3, [r7, #14]
 80083ae:	2bff      	cmp	r3, #255	@ 0xff
 80083b0:	d01d      	beq.n	80083ee <USBD_StdItfReq+0x92>
 80083b2:	7bbb      	ldrb	r3, [r7, #14]
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d11a      	bne.n	80083ee <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80083b8:	7bba      	ldrb	r2, [r7, #14]
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	32ae      	adds	r2, #174	@ 0xae
 80083be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083c2:	689b      	ldr	r3, [r3, #8]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d00f      	beq.n	80083e8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80083c8:	7bba      	ldrb	r2, [r7, #14]
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80083d0:	7bba      	ldrb	r2, [r7, #14]
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	32ae      	adds	r2, #174	@ 0xae
 80083d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083da:	689b      	ldr	r3, [r3, #8]
 80083dc:	6839      	ldr	r1, [r7, #0]
 80083de:	6878      	ldr	r0, [r7, #4]
 80083e0:	4798      	blx	r3
 80083e2:	4603      	mov	r3, r0
 80083e4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80083e6:	e004      	b.n	80083f2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80083e8:	2303      	movs	r3, #3
 80083ea:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80083ec:	e001      	b.n	80083f2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80083ee:	2303      	movs	r3, #3
 80083f0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80083f2:	683b      	ldr	r3, [r7, #0]
 80083f4:	88db      	ldrh	r3, [r3, #6]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d110      	bne.n	800841c <USBD_StdItfReq+0xc0>
 80083fa:	7bfb      	ldrb	r3, [r7, #15]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d10d      	bne.n	800841c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008400:	6878      	ldr	r0, [r7, #4]
 8008402:	f000 fe06 	bl	8009012 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008406:	e009      	b.n	800841c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008408:	6839      	ldr	r1, [r7, #0]
 800840a:	6878      	ldr	r0, [r7, #4]
 800840c:	f000 fd23 	bl	8008e56 <USBD_CtlError>
          break;
 8008410:	e004      	b.n	800841c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8008412:	6839      	ldr	r1, [r7, #0]
 8008414:	6878      	ldr	r0, [r7, #4]
 8008416:	f000 fd1e 	bl	8008e56 <USBD_CtlError>
          break;
 800841a:	e000      	b.n	800841e <USBD_StdItfReq+0xc2>
          break;
 800841c:	bf00      	nop
      }
      break;
 800841e:	e004      	b.n	800842a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008420:	6839      	ldr	r1, [r7, #0]
 8008422:	6878      	ldr	r0, [r7, #4]
 8008424:	f000 fd17 	bl	8008e56 <USBD_CtlError>
      break;
 8008428:	bf00      	nop
  }

  return ret;
 800842a:	7bfb      	ldrb	r3, [r7, #15]
}
 800842c:	4618      	mov	r0, r3
 800842e:	3710      	adds	r7, #16
 8008430:	46bd      	mov	sp, r7
 8008432:	bd80      	pop	{r7, pc}

08008434 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008434:	b580      	push	{r7, lr}
 8008436:	b084      	sub	sp, #16
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]
 800843c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800843e:	2300      	movs	r3, #0
 8008440:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8008442:	683b      	ldr	r3, [r7, #0]
 8008444:	889b      	ldrh	r3, [r3, #4]
 8008446:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008448:	683b      	ldr	r3, [r7, #0]
 800844a:	781b      	ldrb	r3, [r3, #0]
 800844c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008450:	2b40      	cmp	r3, #64	@ 0x40
 8008452:	d007      	beq.n	8008464 <USBD_StdEPReq+0x30>
 8008454:	2b40      	cmp	r3, #64	@ 0x40
 8008456:	f200 8181 	bhi.w	800875c <USBD_StdEPReq+0x328>
 800845a:	2b00      	cmp	r3, #0
 800845c:	d02a      	beq.n	80084b4 <USBD_StdEPReq+0x80>
 800845e:	2b20      	cmp	r3, #32
 8008460:	f040 817c 	bne.w	800875c <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008464:	7bbb      	ldrb	r3, [r7, #14]
 8008466:	4619      	mov	r1, r3
 8008468:	6878      	ldr	r0, [r7, #4]
 800846a:	f7ff fe86 	bl	800817a <USBD_CoreFindEP>
 800846e:	4603      	mov	r3, r0
 8008470:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008472:	7b7b      	ldrb	r3, [r7, #13]
 8008474:	2bff      	cmp	r3, #255	@ 0xff
 8008476:	f000 8176 	beq.w	8008766 <USBD_StdEPReq+0x332>
 800847a:	7b7b      	ldrb	r3, [r7, #13]
 800847c:	2b00      	cmp	r3, #0
 800847e:	f040 8172 	bne.w	8008766 <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 8008482:	7b7a      	ldrb	r2, [r7, #13]
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800848a:	7b7a      	ldrb	r2, [r7, #13]
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	32ae      	adds	r2, #174	@ 0xae
 8008490:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008494:	689b      	ldr	r3, [r3, #8]
 8008496:	2b00      	cmp	r3, #0
 8008498:	f000 8165 	beq.w	8008766 <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800849c:	7b7a      	ldrb	r2, [r7, #13]
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	32ae      	adds	r2, #174	@ 0xae
 80084a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084a6:	689b      	ldr	r3, [r3, #8]
 80084a8:	6839      	ldr	r1, [r7, #0]
 80084aa:	6878      	ldr	r0, [r7, #4]
 80084ac:	4798      	blx	r3
 80084ae:	4603      	mov	r3, r0
 80084b0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80084b2:	e158      	b.n	8008766 <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80084b4:	683b      	ldr	r3, [r7, #0]
 80084b6:	785b      	ldrb	r3, [r3, #1]
 80084b8:	2b03      	cmp	r3, #3
 80084ba:	d008      	beq.n	80084ce <USBD_StdEPReq+0x9a>
 80084bc:	2b03      	cmp	r3, #3
 80084be:	f300 8147 	bgt.w	8008750 <USBD_StdEPReq+0x31c>
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	f000 809b 	beq.w	80085fe <USBD_StdEPReq+0x1ca>
 80084c8:	2b01      	cmp	r3, #1
 80084ca:	d03c      	beq.n	8008546 <USBD_StdEPReq+0x112>
 80084cc:	e140      	b.n	8008750 <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80084d4:	b2db      	uxtb	r3, r3
 80084d6:	2b02      	cmp	r3, #2
 80084d8:	d002      	beq.n	80084e0 <USBD_StdEPReq+0xac>
 80084da:	2b03      	cmp	r3, #3
 80084dc:	d016      	beq.n	800850c <USBD_StdEPReq+0xd8>
 80084de:	e02c      	b.n	800853a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80084e0:	7bbb      	ldrb	r3, [r7, #14]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d00d      	beq.n	8008502 <USBD_StdEPReq+0xce>
 80084e6:	7bbb      	ldrb	r3, [r7, #14]
 80084e8:	2b80      	cmp	r3, #128	@ 0x80
 80084ea:	d00a      	beq.n	8008502 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80084ec:	7bbb      	ldrb	r3, [r7, #14]
 80084ee:	4619      	mov	r1, r3
 80084f0:	6878      	ldr	r0, [r7, #4]
 80084f2:	f001 f9eb 	bl	80098cc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80084f6:	2180      	movs	r1, #128	@ 0x80
 80084f8:	6878      	ldr	r0, [r7, #4]
 80084fa:	f001 f9e7 	bl	80098cc <USBD_LL_StallEP>
 80084fe:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008500:	e020      	b.n	8008544 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8008502:	6839      	ldr	r1, [r7, #0]
 8008504:	6878      	ldr	r0, [r7, #4]
 8008506:	f000 fca6 	bl	8008e56 <USBD_CtlError>
              break;
 800850a:	e01b      	b.n	8008544 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800850c:	683b      	ldr	r3, [r7, #0]
 800850e:	885b      	ldrh	r3, [r3, #2]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d10e      	bne.n	8008532 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008514:	7bbb      	ldrb	r3, [r7, #14]
 8008516:	2b00      	cmp	r3, #0
 8008518:	d00b      	beq.n	8008532 <USBD_StdEPReq+0xfe>
 800851a:	7bbb      	ldrb	r3, [r7, #14]
 800851c:	2b80      	cmp	r3, #128	@ 0x80
 800851e:	d008      	beq.n	8008532 <USBD_StdEPReq+0xfe>
 8008520:	683b      	ldr	r3, [r7, #0]
 8008522:	88db      	ldrh	r3, [r3, #6]
 8008524:	2b00      	cmp	r3, #0
 8008526:	d104      	bne.n	8008532 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008528:	7bbb      	ldrb	r3, [r7, #14]
 800852a:	4619      	mov	r1, r3
 800852c:	6878      	ldr	r0, [r7, #4]
 800852e:	f001 f9cd 	bl	80098cc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008532:	6878      	ldr	r0, [r7, #4]
 8008534:	f000 fd6d 	bl	8009012 <USBD_CtlSendStatus>

              break;
 8008538:	e004      	b.n	8008544 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800853a:	6839      	ldr	r1, [r7, #0]
 800853c:	6878      	ldr	r0, [r7, #4]
 800853e:	f000 fc8a 	bl	8008e56 <USBD_CtlError>
              break;
 8008542:	bf00      	nop
          }
          break;
 8008544:	e109      	b.n	800875a <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800854c:	b2db      	uxtb	r3, r3
 800854e:	2b02      	cmp	r3, #2
 8008550:	d002      	beq.n	8008558 <USBD_StdEPReq+0x124>
 8008552:	2b03      	cmp	r3, #3
 8008554:	d016      	beq.n	8008584 <USBD_StdEPReq+0x150>
 8008556:	e04b      	b.n	80085f0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008558:	7bbb      	ldrb	r3, [r7, #14]
 800855a:	2b00      	cmp	r3, #0
 800855c:	d00d      	beq.n	800857a <USBD_StdEPReq+0x146>
 800855e:	7bbb      	ldrb	r3, [r7, #14]
 8008560:	2b80      	cmp	r3, #128	@ 0x80
 8008562:	d00a      	beq.n	800857a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008564:	7bbb      	ldrb	r3, [r7, #14]
 8008566:	4619      	mov	r1, r3
 8008568:	6878      	ldr	r0, [r7, #4]
 800856a:	f001 f9af 	bl	80098cc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800856e:	2180      	movs	r1, #128	@ 0x80
 8008570:	6878      	ldr	r0, [r7, #4]
 8008572:	f001 f9ab 	bl	80098cc <USBD_LL_StallEP>
 8008576:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008578:	e040      	b.n	80085fc <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800857a:	6839      	ldr	r1, [r7, #0]
 800857c:	6878      	ldr	r0, [r7, #4]
 800857e:	f000 fc6a 	bl	8008e56 <USBD_CtlError>
              break;
 8008582:	e03b      	b.n	80085fc <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008584:	683b      	ldr	r3, [r7, #0]
 8008586:	885b      	ldrh	r3, [r3, #2]
 8008588:	2b00      	cmp	r3, #0
 800858a:	d136      	bne.n	80085fa <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800858c:	7bbb      	ldrb	r3, [r7, #14]
 800858e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008592:	2b00      	cmp	r3, #0
 8008594:	d004      	beq.n	80085a0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008596:	7bbb      	ldrb	r3, [r7, #14]
 8008598:	4619      	mov	r1, r3
 800859a:	6878      	ldr	r0, [r7, #4]
 800859c:	f001 f9b5 	bl	800990a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80085a0:	6878      	ldr	r0, [r7, #4]
 80085a2:	f000 fd36 	bl	8009012 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80085a6:	7bbb      	ldrb	r3, [r7, #14]
 80085a8:	4619      	mov	r1, r3
 80085aa:	6878      	ldr	r0, [r7, #4]
 80085ac:	f7ff fde5 	bl	800817a <USBD_CoreFindEP>
 80085b0:	4603      	mov	r3, r0
 80085b2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80085b4:	7b7b      	ldrb	r3, [r7, #13]
 80085b6:	2bff      	cmp	r3, #255	@ 0xff
 80085b8:	d01f      	beq.n	80085fa <USBD_StdEPReq+0x1c6>
 80085ba:	7b7b      	ldrb	r3, [r7, #13]
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d11c      	bne.n	80085fa <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80085c0:	7b7a      	ldrb	r2, [r7, #13]
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80085c8:	7b7a      	ldrb	r2, [r7, #13]
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	32ae      	adds	r2, #174	@ 0xae
 80085ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085d2:	689b      	ldr	r3, [r3, #8]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d010      	beq.n	80085fa <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80085d8:	7b7a      	ldrb	r2, [r7, #13]
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	32ae      	adds	r2, #174	@ 0xae
 80085de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085e2:	689b      	ldr	r3, [r3, #8]
 80085e4:	6839      	ldr	r1, [r7, #0]
 80085e6:	6878      	ldr	r0, [r7, #4]
 80085e8:	4798      	blx	r3
 80085ea:	4603      	mov	r3, r0
 80085ec:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80085ee:	e004      	b.n	80085fa <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80085f0:	6839      	ldr	r1, [r7, #0]
 80085f2:	6878      	ldr	r0, [r7, #4]
 80085f4:	f000 fc2f 	bl	8008e56 <USBD_CtlError>
              break;
 80085f8:	e000      	b.n	80085fc <USBD_StdEPReq+0x1c8>
              break;
 80085fa:	bf00      	nop
          }
          break;
 80085fc:	e0ad      	b.n	800875a <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008604:	b2db      	uxtb	r3, r3
 8008606:	2b02      	cmp	r3, #2
 8008608:	d002      	beq.n	8008610 <USBD_StdEPReq+0x1dc>
 800860a:	2b03      	cmp	r3, #3
 800860c:	d033      	beq.n	8008676 <USBD_StdEPReq+0x242>
 800860e:	e099      	b.n	8008744 <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008610:	7bbb      	ldrb	r3, [r7, #14]
 8008612:	2b00      	cmp	r3, #0
 8008614:	d007      	beq.n	8008626 <USBD_StdEPReq+0x1f2>
 8008616:	7bbb      	ldrb	r3, [r7, #14]
 8008618:	2b80      	cmp	r3, #128	@ 0x80
 800861a:	d004      	beq.n	8008626 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800861c:	6839      	ldr	r1, [r7, #0]
 800861e:	6878      	ldr	r0, [r7, #4]
 8008620:	f000 fc19 	bl	8008e56 <USBD_CtlError>
                break;
 8008624:	e093      	b.n	800874e <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008626:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800862a:	2b00      	cmp	r3, #0
 800862c:	da0b      	bge.n	8008646 <USBD_StdEPReq+0x212>
 800862e:	7bbb      	ldrb	r3, [r7, #14]
 8008630:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008634:	4613      	mov	r3, r2
 8008636:	009b      	lsls	r3, r3, #2
 8008638:	4413      	add	r3, r2
 800863a:	009b      	lsls	r3, r3, #2
 800863c:	3310      	adds	r3, #16
 800863e:	687a      	ldr	r2, [r7, #4]
 8008640:	4413      	add	r3, r2
 8008642:	3304      	adds	r3, #4
 8008644:	e00b      	b.n	800865e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008646:	7bbb      	ldrb	r3, [r7, #14]
 8008648:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800864c:	4613      	mov	r3, r2
 800864e:	009b      	lsls	r3, r3, #2
 8008650:	4413      	add	r3, r2
 8008652:	009b      	lsls	r3, r3, #2
 8008654:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008658:	687a      	ldr	r2, [r7, #4]
 800865a:	4413      	add	r3, r2
 800865c:	3304      	adds	r3, #4
 800865e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008660:	68bb      	ldr	r3, [r7, #8]
 8008662:	2200      	movs	r2, #0
 8008664:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008666:	68bb      	ldr	r3, [r7, #8]
 8008668:	330e      	adds	r3, #14
 800866a:	2202      	movs	r2, #2
 800866c:	4619      	mov	r1, r3
 800866e:	6878      	ldr	r0, [r7, #4]
 8008670:	f000 fc6e 	bl	8008f50 <USBD_CtlSendData>
              break;
 8008674:	e06b      	b.n	800874e <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008676:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800867a:	2b00      	cmp	r3, #0
 800867c:	da11      	bge.n	80086a2 <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800867e:	7bbb      	ldrb	r3, [r7, #14]
 8008680:	f003 020f 	and.w	r2, r3, #15
 8008684:	6879      	ldr	r1, [r7, #4]
 8008686:	4613      	mov	r3, r2
 8008688:	009b      	lsls	r3, r3, #2
 800868a:	4413      	add	r3, r2
 800868c:	009b      	lsls	r3, r3, #2
 800868e:	440b      	add	r3, r1
 8008690:	3323      	adds	r3, #35	@ 0x23
 8008692:	781b      	ldrb	r3, [r3, #0]
 8008694:	2b00      	cmp	r3, #0
 8008696:	d117      	bne.n	80086c8 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 8008698:	6839      	ldr	r1, [r7, #0]
 800869a:	6878      	ldr	r0, [r7, #4]
 800869c:	f000 fbdb 	bl	8008e56 <USBD_CtlError>
                  break;
 80086a0:	e055      	b.n	800874e <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80086a2:	7bbb      	ldrb	r3, [r7, #14]
 80086a4:	f003 020f 	and.w	r2, r3, #15
 80086a8:	6879      	ldr	r1, [r7, #4]
 80086aa:	4613      	mov	r3, r2
 80086ac:	009b      	lsls	r3, r3, #2
 80086ae:	4413      	add	r3, r2
 80086b0:	009b      	lsls	r3, r3, #2
 80086b2:	440b      	add	r3, r1
 80086b4:	f203 1363 	addw	r3, r3, #355	@ 0x163
 80086b8:	781b      	ldrb	r3, [r3, #0]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d104      	bne.n	80086c8 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 80086be:	6839      	ldr	r1, [r7, #0]
 80086c0:	6878      	ldr	r0, [r7, #4]
 80086c2:	f000 fbc8 	bl	8008e56 <USBD_CtlError>
                  break;
 80086c6:	e042      	b.n	800874e <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80086c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	da0b      	bge.n	80086e8 <USBD_StdEPReq+0x2b4>
 80086d0:	7bbb      	ldrb	r3, [r7, #14]
 80086d2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80086d6:	4613      	mov	r3, r2
 80086d8:	009b      	lsls	r3, r3, #2
 80086da:	4413      	add	r3, r2
 80086dc:	009b      	lsls	r3, r3, #2
 80086de:	3310      	adds	r3, #16
 80086e0:	687a      	ldr	r2, [r7, #4]
 80086e2:	4413      	add	r3, r2
 80086e4:	3304      	adds	r3, #4
 80086e6:	e00b      	b.n	8008700 <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80086e8:	7bbb      	ldrb	r3, [r7, #14]
 80086ea:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80086ee:	4613      	mov	r3, r2
 80086f0:	009b      	lsls	r3, r3, #2
 80086f2:	4413      	add	r3, r2
 80086f4:	009b      	lsls	r3, r3, #2
 80086f6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80086fa:	687a      	ldr	r2, [r7, #4]
 80086fc:	4413      	add	r3, r2
 80086fe:	3304      	adds	r3, #4
 8008700:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008702:	7bbb      	ldrb	r3, [r7, #14]
 8008704:	2b00      	cmp	r3, #0
 8008706:	d002      	beq.n	800870e <USBD_StdEPReq+0x2da>
 8008708:	7bbb      	ldrb	r3, [r7, #14]
 800870a:	2b80      	cmp	r3, #128	@ 0x80
 800870c:	d103      	bne.n	8008716 <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 800870e:	68bb      	ldr	r3, [r7, #8]
 8008710:	2200      	movs	r2, #0
 8008712:	739a      	strb	r2, [r3, #14]
 8008714:	e00e      	b.n	8008734 <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008716:	7bbb      	ldrb	r3, [r7, #14]
 8008718:	4619      	mov	r1, r3
 800871a:	6878      	ldr	r0, [r7, #4]
 800871c:	f001 f914 	bl	8009948 <USBD_LL_IsStallEP>
 8008720:	4603      	mov	r3, r0
 8008722:	2b00      	cmp	r3, #0
 8008724:	d003      	beq.n	800872e <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 8008726:	68bb      	ldr	r3, [r7, #8]
 8008728:	2201      	movs	r2, #1
 800872a:	739a      	strb	r2, [r3, #14]
 800872c:	e002      	b.n	8008734 <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 800872e:	68bb      	ldr	r3, [r7, #8]
 8008730:	2200      	movs	r2, #0
 8008732:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008734:	68bb      	ldr	r3, [r7, #8]
 8008736:	330e      	adds	r3, #14
 8008738:	2202      	movs	r2, #2
 800873a:	4619      	mov	r1, r3
 800873c:	6878      	ldr	r0, [r7, #4]
 800873e:	f000 fc07 	bl	8008f50 <USBD_CtlSendData>
              break;
 8008742:	e004      	b.n	800874e <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 8008744:	6839      	ldr	r1, [r7, #0]
 8008746:	6878      	ldr	r0, [r7, #4]
 8008748:	f000 fb85 	bl	8008e56 <USBD_CtlError>
              break;
 800874c:	bf00      	nop
          }
          break;
 800874e:	e004      	b.n	800875a <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 8008750:	6839      	ldr	r1, [r7, #0]
 8008752:	6878      	ldr	r0, [r7, #4]
 8008754:	f000 fb7f 	bl	8008e56 <USBD_CtlError>
          break;
 8008758:	bf00      	nop
      }
      break;
 800875a:	e005      	b.n	8008768 <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 800875c:	6839      	ldr	r1, [r7, #0]
 800875e:	6878      	ldr	r0, [r7, #4]
 8008760:	f000 fb79 	bl	8008e56 <USBD_CtlError>
      break;
 8008764:	e000      	b.n	8008768 <USBD_StdEPReq+0x334>
      break;
 8008766:	bf00      	nop
  }

  return ret;
 8008768:	7bfb      	ldrb	r3, [r7, #15]
}
 800876a:	4618      	mov	r0, r3
 800876c:	3710      	adds	r7, #16
 800876e:	46bd      	mov	sp, r7
 8008770:	bd80      	pop	{r7, pc}
	...

08008774 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008774:	b580      	push	{r7, lr}
 8008776:	b084      	sub	sp, #16
 8008778:	af00      	add	r7, sp, #0
 800877a:	6078      	str	r0, [r7, #4]
 800877c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800877e:	2300      	movs	r3, #0
 8008780:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008782:	2300      	movs	r3, #0
 8008784:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008786:	2300      	movs	r3, #0
 8008788:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800878a:	683b      	ldr	r3, [r7, #0]
 800878c:	885b      	ldrh	r3, [r3, #2]
 800878e:	0a1b      	lsrs	r3, r3, #8
 8008790:	b29b      	uxth	r3, r3
 8008792:	3b01      	subs	r3, #1
 8008794:	2b0e      	cmp	r3, #14
 8008796:	f200 8152 	bhi.w	8008a3e <USBD_GetDescriptor+0x2ca>
 800879a:	a201      	add	r2, pc, #4	@ (adr r2, 80087a0 <USBD_GetDescriptor+0x2c>)
 800879c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087a0:	08008811 	.word	0x08008811
 80087a4:	08008829 	.word	0x08008829
 80087a8:	08008869 	.word	0x08008869
 80087ac:	08008a3f 	.word	0x08008a3f
 80087b0:	08008a3f 	.word	0x08008a3f
 80087b4:	080089df 	.word	0x080089df
 80087b8:	08008a0b 	.word	0x08008a0b
 80087bc:	08008a3f 	.word	0x08008a3f
 80087c0:	08008a3f 	.word	0x08008a3f
 80087c4:	08008a3f 	.word	0x08008a3f
 80087c8:	08008a3f 	.word	0x08008a3f
 80087cc:	08008a3f 	.word	0x08008a3f
 80087d0:	08008a3f 	.word	0x08008a3f
 80087d4:	08008a3f 	.word	0x08008a3f
 80087d8:	080087dd 	.word	0x080087dd
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80087e2:	69db      	ldr	r3, [r3, #28]
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d00b      	beq.n	8008800 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80087ee:	69db      	ldr	r3, [r3, #28]
 80087f0:	687a      	ldr	r2, [r7, #4]
 80087f2:	7c12      	ldrb	r2, [r2, #16]
 80087f4:	f107 0108 	add.w	r1, r7, #8
 80087f8:	4610      	mov	r0, r2
 80087fa:	4798      	blx	r3
 80087fc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80087fe:	e126      	b.n	8008a4e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008800:	6839      	ldr	r1, [r7, #0]
 8008802:	6878      	ldr	r0, [r7, #4]
 8008804:	f000 fb27 	bl	8008e56 <USBD_CtlError>
        err++;
 8008808:	7afb      	ldrb	r3, [r7, #11]
 800880a:	3301      	adds	r3, #1
 800880c:	72fb      	strb	r3, [r7, #11]
      break;
 800880e:	e11e      	b.n	8008a4e <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	687a      	ldr	r2, [r7, #4]
 800881a:	7c12      	ldrb	r2, [r2, #16]
 800881c:	f107 0108 	add.w	r1, r7, #8
 8008820:	4610      	mov	r0, r2
 8008822:	4798      	blx	r3
 8008824:	60f8      	str	r0, [r7, #12]
      break;
 8008826:	e112      	b.n	8008a4e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	7c1b      	ldrb	r3, [r3, #16]
 800882c:	2b00      	cmp	r3, #0
 800882e:	d10d      	bne.n	800884c <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008836:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008838:	f107 0208 	add.w	r2, r7, #8
 800883c:	4610      	mov	r0, r2
 800883e:	4798      	blx	r3
 8008840:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	3301      	adds	r3, #1
 8008846:	2202      	movs	r2, #2
 8008848:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800884a:	e100      	b.n	8008a4e <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008852:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008854:	f107 0208 	add.w	r2, r7, #8
 8008858:	4610      	mov	r0, r2
 800885a:	4798      	blx	r3
 800885c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	3301      	adds	r3, #1
 8008862:	2202      	movs	r2, #2
 8008864:	701a      	strb	r2, [r3, #0]
      break;
 8008866:	e0f2      	b.n	8008a4e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008868:	683b      	ldr	r3, [r7, #0]
 800886a:	885b      	ldrh	r3, [r3, #2]
 800886c:	b2db      	uxtb	r3, r3
 800886e:	2b05      	cmp	r3, #5
 8008870:	f200 80ac 	bhi.w	80089cc <USBD_GetDescriptor+0x258>
 8008874:	a201      	add	r2, pc, #4	@ (adr r2, 800887c <USBD_GetDescriptor+0x108>)
 8008876:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800887a:	bf00      	nop
 800887c:	08008895 	.word	0x08008895
 8008880:	080088c9 	.word	0x080088c9
 8008884:	080088fd 	.word	0x080088fd
 8008888:	08008931 	.word	0x08008931
 800888c:	08008965 	.word	0x08008965
 8008890:	08008999 	.word	0x08008999
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800889a:	685b      	ldr	r3, [r3, #4]
 800889c:	2b00      	cmp	r3, #0
 800889e:	d00b      	beq.n	80088b8 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80088a6:	685b      	ldr	r3, [r3, #4]
 80088a8:	687a      	ldr	r2, [r7, #4]
 80088aa:	7c12      	ldrb	r2, [r2, #16]
 80088ac:	f107 0108 	add.w	r1, r7, #8
 80088b0:	4610      	mov	r0, r2
 80088b2:	4798      	blx	r3
 80088b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80088b6:	e091      	b.n	80089dc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80088b8:	6839      	ldr	r1, [r7, #0]
 80088ba:	6878      	ldr	r0, [r7, #4]
 80088bc:	f000 facb 	bl	8008e56 <USBD_CtlError>
            err++;
 80088c0:	7afb      	ldrb	r3, [r7, #11]
 80088c2:	3301      	adds	r3, #1
 80088c4:	72fb      	strb	r3, [r7, #11]
          break;
 80088c6:	e089      	b.n	80089dc <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80088ce:	689b      	ldr	r3, [r3, #8]
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d00b      	beq.n	80088ec <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80088da:	689b      	ldr	r3, [r3, #8]
 80088dc:	687a      	ldr	r2, [r7, #4]
 80088de:	7c12      	ldrb	r2, [r2, #16]
 80088e0:	f107 0108 	add.w	r1, r7, #8
 80088e4:	4610      	mov	r0, r2
 80088e6:	4798      	blx	r3
 80088e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80088ea:	e077      	b.n	80089dc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80088ec:	6839      	ldr	r1, [r7, #0]
 80088ee:	6878      	ldr	r0, [r7, #4]
 80088f0:	f000 fab1 	bl	8008e56 <USBD_CtlError>
            err++;
 80088f4:	7afb      	ldrb	r3, [r7, #11]
 80088f6:	3301      	adds	r3, #1
 80088f8:	72fb      	strb	r3, [r7, #11]
          break;
 80088fa:	e06f      	b.n	80089dc <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008902:	68db      	ldr	r3, [r3, #12]
 8008904:	2b00      	cmp	r3, #0
 8008906:	d00b      	beq.n	8008920 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800890e:	68db      	ldr	r3, [r3, #12]
 8008910:	687a      	ldr	r2, [r7, #4]
 8008912:	7c12      	ldrb	r2, [r2, #16]
 8008914:	f107 0108 	add.w	r1, r7, #8
 8008918:	4610      	mov	r0, r2
 800891a:	4798      	blx	r3
 800891c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800891e:	e05d      	b.n	80089dc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008920:	6839      	ldr	r1, [r7, #0]
 8008922:	6878      	ldr	r0, [r7, #4]
 8008924:	f000 fa97 	bl	8008e56 <USBD_CtlError>
            err++;
 8008928:	7afb      	ldrb	r3, [r7, #11]
 800892a:	3301      	adds	r3, #1
 800892c:	72fb      	strb	r3, [r7, #11]
          break;
 800892e:	e055      	b.n	80089dc <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008936:	691b      	ldr	r3, [r3, #16]
 8008938:	2b00      	cmp	r3, #0
 800893a:	d00b      	beq.n	8008954 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008942:	691b      	ldr	r3, [r3, #16]
 8008944:	687a      	ldr	r2, [r7, #4]
 8008946:	7c12      	ldrb	r2, [r2, #16]
 8008948:	f107 0108 	add.w	r1, r7, #8
 800894c:	4610      	mov	r0, r2
 800894e:	4798      	blx	r3
 8008950:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008952:	e043      	b.n	80089dc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008954:	6839      	ldr	r1, [r7, #0]
 8008956:	6878      	ldr	r0, [r7, #4]
 8008958:	f000 fa7d 	bl	8008e56 <USBD_CtlError>
            err++;
 800895c:	7afb      	ldrb	r3, [r7, #11]
 800895e:	3301      	adds	r3, #1
 8008960:	72fb      	strb	r3, [r7, #11]
          break;
 8008962:	e03b      	b.n	80089dc <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800896a:	695b      	ldr	r3, [r3, #20]
 800896c:	2b00      	cmp	r3, #0
 800896e:	d00b      	beq.n	8008988 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008976:	695b      	ldr	r3, [r3, #20]
 8008978:	687a      	ldr	r2, [r7, #4]
 800897a:	7c12      	ldrb	r2, [r2, #16]
 800897c:	f107 0108 	add.w	r1, r7, #8
 8008980:	4610      	mov	r0, r2
 8008982:	4798      	blx	r3
 8008984:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008986:	e029      	b.n	80089dc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008988:	6839      	ldr	r1, [r7, #0]
 800898a:	6878      	ldr	r0, [r7, #4]
 800898c:	f000 fa63 	bl	8008e56 <USBD_CtlError>
            err++;
 8008990:	7afb      	ldrb	r3, [r7, #11]
 8008992:	3301      	adds	r3, #1
 8008994:	72fb      	strb	r3, [r7, #11]
          break;
 8008996:	e021      	b.n	80089dc <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800899e:	699b      	ldr	r3, [r3, #24]
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d00b      	beq.n	80089bc <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80089aa:	699b      	ldr	r3, [r3, #24]
 80089ac:	687a      	ldr	r2, [r7, #4]
 80089ae:	7c12      	ldrb	r2, [r2, #16]
 80089b0:	f107 0108 	add.w	r1, r7, #8
 80089b4:	4610      	mov	r0, r2
 80089b6:	4798      	blx	r3
 80089b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80089ba:	e00f      	b.n	80089dc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80089bc:	6839      	ldr	r1, [r7, #0]
 80089be:	6878      	ldr	r0, [r7, #4]
 80089c0:	f000 fa49 	bl	8008e56 <USBD_CtlError>
            err++;
 80089c4:	7afb      	ldrb	r3, [r7, #11]
 80089c6:	3301      	adds	r3, #1
 80089c8:	72fb      	strb	r3, [r7, #11]
          break;
 80089ca:	e007      	b.n	80089dc <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80089cc:	6839      	ldr	r1, [r7, #0]
 80089ce:	6878      	ldr	r0, [r7, #4]
 80089d0:	f000 fa41 	bl	8008e56 <USBD_CtlError>
          err++;
 80089d4:	7afb      	ldrb	r3, [r7, #11]
 80089d6:	3301      	adds	r3, #1
 80089d8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80089da:	bf00      	nop
      }
      break;
 80089dc:	e037      	b.n	8008a4e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	7c1b      	ldrb	r3, [r3, #16]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d109      	bne.n	80089fa <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80089ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80089ee:	f107 0208 	add.w	r2, r7, #8
 80089f2:	4610      	mov	r0, r2
 80089f4:	4798      	blx	r3
 80089f6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80089f8:	e029      	b.n	8008a4e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80089fa:	6839      	ldr	r1, [r7, #0]
 80089fc:	6878      	ldr	r0, [r7, #4]
 80089fe:	f000 fa2a 	bl	8008e56 <USBD_CtlError>
        err++;
 8008a02:	7afb      	ldrb	r3, [r7, #11]
 8008a04:	3301      	adds	r3, #1
 8008a06:	72fb      	strb	r3, [r7, #11]
      break;
 8008a08:	e021      	b.n	8008a4e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	7c1b      	ldrb	r3, [r3, #16]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d10d      	bne.n	8008a2e <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008a18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a1a:	f107 0208 	add.w	r2, r7, #8
 8008a1e:	4610      	mov	r0, r2
 8008a20:	4798      	blx	r3
 8008a22:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	3301      	adds	r3, #1
 8008a28:	2207      	movs	r2, #7
 8008a2a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008a2c:	e00f      	b.n	8008a4e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008a2e:	6839      	ldr	r1, [r7, #0]
 8008a30:	6878      	ldr	r0, [r7, #4]
 8008a32:	f000 fa10 	bl	8008e56 <USBD_CtlError>
        err++;
 8008a36:	7afb      	ldrb	r3, [r7, #11]
 8008a38:	3301      	adds	r3, #1
 8008a3a:	72fb      	strb	r3, [r7, #11]
      break;
 8008a3c:	e007      	b.n	8008a4e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8008a3e:	6839      	ldr	r1, [r7, #0]
 8008a40:	6878      	ldr	r0, [r7, #4]
 8008a42:	f000 fa08 	bl	8008e56 <USBD_CtlError>
      err++;
 8008a46:	7afb      	ldrb	r3, [r7, #11]
 8008a48:	3301      	adds	r3, #1
 8008a4a:	72fb      	strb	r3, [r7, #11]
      break;
 8008a4c:	bf00      	nop
  }

  if (err != 0U)
 8008a4e:	7afb      	ldrb	r3, [r7, #11]
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d11e      	bne.n	8008a92 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8008a54:	683b      	ldr	r3, [r7, #0]
 8008a56:	88db      	ldrh	r3, [r3, #6]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d016      	beq.n	8008a8a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8008a5c:	893b      	ldrh	r3, [r7, #8]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d00e      	beq.n	8008a80 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8008a62:	683b      	ldr	r3, [r7, #0]
 8008a64:	88da      	ldrh	r2, [r3, #6]
 8008a66:	893b      	ldrh	r3, [r7, #8]
 8008a68:	4293      	cmp	r3, r2
 8008a6a:	bf28      	it	cs
 8008a6c:	4613      	movcs	r3, r2
 8008a6e:	b29b      	uxth	r3, r3
 8008a70:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008a72:	893b      	ldrh	r3, [r7, #8]
 8008a74:	461a      	mov	r2, r3
 8008a76:	68f9      	ldr	r1, [r7, #12]
 8008a78:	6878      	ldr	r0, [r7, #4]
 8008a7a:	f000 fa69 	bl	8008f50 <USBD_CtlSendData>
 8008a7e:	e009      	b.n	8008a94 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008a80:	6839      	ldr	r1, [r7, #0]
 8008a82:	6878      	ldr	r0, [r7, #4]
 8008a84:	f000 f9e7 	bl	8008e56 <USBD_CtlError>
 8008a88:	e004      	b.n	8008a94 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008a8a:	6878      	ldr	r0, [r7, #4]
 8008a8c:	f000 fac1 	bl	8009012 <USBD_CtlSendStatus>
 8008a90:	e000      	b.n	8008a94 <USBD_GetDescriptor+0x320>
    return;
 8008a92:	bf00      	nop
  }
}
 8008a94:	3710      	adds	r7, #16
 8008a96:	46bd      	mov	sp, r7
 8008a98:	bd80      	pop	{r7, pc}
 8008a9a:	bf00      	nop

08008a9c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a9c:	b580      	push	{r7, lr}
 8008a9e:	b084      	sub	sp, #16
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	6078      	str	r0, [r7, #4]
 8008aa4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008aa6:	683b      	ldr	r3, [r7, #0]
 8008aa8:	889b      	ldrh	r3, [r3, #4]
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d131      	bne.n	8008b12 <USBD_SetAddress+0x76>
 8008aae:	683b      	ldr	r3, [r7, #0]
 8008ab0:	88db      	ldrh	r3, [r3, #6]
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d12d      	bne.n	8008b12 <USBD_SetAddress+0x76>
 8008ab6:	683b      	ldr	r3, [r7, #0]
 8008ab8:	885b      	ldrh	r3, [r3, #2]
 8008aba:	2b7f      	cmp	r3, #127	@ 0x7f
 8008abc:	d829      	bhi.n	8008b12 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008abe:	683b      	ldr	r3, [r7, #0]
 8008ac0:	885b      	ldrh	r3, [r3, #2]
 8008ac2:	b2db      	uxtb	r3, r3
 8008ac4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008ac8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008ad0:	b2db      	uxtb	r3, r3
 8008ad2:	2b03      	cmp	r3, #3
 8008ad4:	d104      	bne.n	8008ae0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008ad6:	6839      	ldr	r1, [r7, #0]
 8008ad8:	6878      	ldr	r0, [r7, #4]
 8008ada:	f000 f9bc 	bl	8008e56 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ade:	e01d      	b.n	8008b1c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	7bfa      	ldrb	r2, [r7, #15]
 8008ae4:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008ae8:	7bfb      	ldrb	r3, [r7, #15]
 8008aea:	4619      	mov	r1, r3
 8008aec:	6878      	ldr	r0, [r7, #4]
 8008aee:	f000 ff57 	bl	80099a0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008af2:	6878      	ldr	r0, [r7, #4]
 8008af4:	f000 fa8d 	bl	8009012 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008af8:	7bfb      	ldrb	r3, [r7, #15]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d004      	beq.n	8008b08 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	2202      	movs	r2, #2
 8008b02:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b06:	e009      	b.n	8008b1c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	2201      	movs	r2, #1
 8008b0c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b10:	e004      	b.n	8008b1c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008b12:	6839      	ldr	r1, [r7, #0]
 8008b14:	6878      	ldr	r0, [r7, #4]
 8008b16:	f000 f99e 	bl	8008e56 <USBD_CtlError>
  }
}
 8008b1a:	bf00      	nop
 8008b1c:	bf00      	nop
 8008b1e:	3710      	adds	r7, #16
 8008b20:	46bd      	mov	sp, r7
 8008b22:	bd80      	pop	{r7, pc}

08008b24 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b24:	b580      	push	{r7, lr}
 8008b26:	b084      	sub	sp, #16
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	6078      	str	r0, [r7, #4]
 8008b2c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008b2e:	2300      	movs	r3, #0
 8008b30:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008b32:	683b      	ldr	r3, [r7, #0]
 8008b34:	885b      	ldrh	r3, [r3, #2]
 8008b36:	b2da      	uxtb	r2, r3
 8008b38:	4b4e      	ldr	r3, [pc, #312]	@ (8008c74 <USBD_SetConfig+0x150>)
 8008b3a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008b3c:	4b4d      	ldr	r3, [pc, #308]	@ (8008c74 <USBD_SetConfig+0x150>)
 8008b3e:	781b      	ldrb	r3, [r3, #0]
 8008b40:	2b01      	cmp	r3, #1
 8008b42:	d905      	bls.n	8008b50 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008b44:	6839      	ldr	r1, [r7, #0]
 8008b46:	6878      	ldr	r0, [r7, #4]
 8008b48:	f000 f985 	bl	8008e56 <USBD_CtlError>
    return USBD_FAIL;
 8008b4c:	2303      	movs	r3, #3
 8008b4e:	e08c      	b.n	8008c6a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008b56:	b2db      	uxtb	r3, r3
 8008b58:	2b02      	cmp	r3, #2
 8008b5a:	d002      	beq.n	8008b62 <USBD_SetConfig+0x3e>
 8008b5c:	2b03      	cmp	r3, #3
 8008b5e:	d029      	beq.n	8008bb4 <USBD_SetConfig+0x90>
 8008b60:	e075      	b.n	8008c4e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008b62:	4b44      	ldr	r3, [pc, #272]	@ (8008c74 <USBD_SetConfig+0x150>)
 8008b64:	781b      	ldrb	r3, [r3, #0]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d020      	beq.n	8008bac <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8008b6a:	4b42      	ldr	r3, [pc, #264]	@ (8008c74 <USBD_SetConfig+0x150>)
 8008b6c:	781b      	ldrb	r3, [r3, #0]
 8008b6e:	461a      	mov	r2, r3
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008b74:	4b3f      	ldr	r3, [pc, #252]	@ (8008c74 <USBD_SetConfig+0x150>)
 8008b76:	781b      	ldrb	r3, [r3, #0]
 8008b78:	4619      	mov	r1, r3
 8008b7a:	6878      	ldr	r0, [r7, #4]
 8008b7c:	f7fe ffa5 	bl	8007aca <USBD_SetClassConfig>
 8008b80:	4603      	mov	r3, r0
 8008b82:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008b84:	7bfb      	ldrb	r3, [r7, #15]
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d008      	beq.n	8008b9c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8008b8a:	6839      	ldr	r1, [r7, #0]
 8008b8c:	6878      	ldr	r0, [r7, #4]
 8008b8e:	f000 f962 	bl	8008e56 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	2202      	movs	r2, #2
 8008b96:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008b9a:	e065      	b.n	8008c68 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008b9c:	6878      	ldr	r0, [r7, #4]
 8008b9e:	f000 fa38 	bl	8009012 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	2203      	movs	r2, #3
 8008ba6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8008baa:	e05d      	b.n	8008c68 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008bac:	6878      	ldr	r0, [r7, #4]
 8008bae:	f000 fa30 	bl	8009012 <USBD_CtlSendStatus>
      break;
 8008bb2:	e059      	b.n	8008c68 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008bb4:	4b2f      	ldr	r3, [pc, #188]	@ (8008c74 <USBD_SetConfig+0x150>)
 8008bb6:	781b      	ldrb	r3, [r3, #0]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d112      	bne.n	8008be2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	2202      	movs	r2, #2
 8008bc0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8008bc4:	4b2b      	ldr	r3, [pc, #172]	@ (8008c74 <USBD_SetConfig+0x150>)
 8008bc6:	781b      	ldrb	r3, [r3, #0]
 8008bc8:	461a      	mov	r2, r3
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008bce:	4b29      	ldr	r3, [pc, #164]	@ (8008c74 <USBD_SetConfig+0x150>)
 8008bd0:	781b      	ldrb	r3, [r3, #0]
 8008bd2:	4619      	mov	r1, r3
 8008bd4:	6878      	ldr	r0, [r7, #4]
 8008bd6:	f7fe ff94 	bl	8007b02 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008bda:	6878      	ldr	r0, [r7, #4]
 8008bdc:	f000 fa19 	bl	8009012 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008be0:	e042      	b.n	8008c68 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8008be2:	4b24      	ldr	r3, [pc, #144]	@ (8008c74 <USBD_SetConfig+0x150>)
 8008be4:	781b      	ldrb	r3, [r3, #0]
 8008be6:	461a      	mov	r2, r3
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	685b      	ldr	r3, [r3, #4]
 8008bec:	429a      	cmp	r2, r3
 8008bee:	d02a      	beq.n	8008c46 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	685b      	ldr	r3, [r3, #4]
 8008bf4:	b2db      	uxtb	r3, r3
 8008bf6:	4619      	mov	r1, r3
 8008bf8:	6878      	ldr	r0, [r7, #4]
 8008bfa:	f7fe ff82 	bl	8007b02 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008bfe:	4b1d      	ldr	r3, [pc, #116]	@ (8008c74 <USBD_SetConfig+0x150>)
 8008c00:	781b      	ldrb	r3, [r3, #0]
 8008c02:	461a      	mov	r2, r3
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008c08:	4b1a      	ldr	r3, [pc, #104]	@ (8008c74 <USBD_SetConfig+0x150>)
 8008c0a:	781b      	ldrb	r3, [r3, #0]
 8008c0c:	4619      	mov	r1, r3
 8008c0e:	6878      	ldr	r0, [r7, #4]
 8008c10:	f7fe ff5b 	bl	8007aca <USBD_SetClassConfig>
 8008c14:	4603      	mov	r3, r0
 8008c16:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008c18:	7bfb      	ldrb	r3, [r7, #15]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d00f      	beq.n	8008c3e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008c1e:	6839      	ldr	r1, [r7, #0]
 8008c20:	6878      	ldr	r0, [r7, #4]
 8008c22:	f000 f918 	bl	8008e56 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	685b      	ldr	r3, [r3, #4]
 8008c2a:	b2db      	uxtb	r3, r3
 8008c2c:	4619      	mov	r1, r3
 8008c2e:	6878      	ldr	r0, [r7, #4]
 8008c30:	f7fe ff67 	bl	8007b02 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	2202      	movs	r2, #2
 8008c38:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8008c3c:	e014      	b.n	8008c68 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008c3e:	6878      	ldr	r0, [r7, #4]
 8008c40:	f000 f9e7 	bl	8009012 <USBD_CtlSendStatus>
      break;
 8008c44:	e010      	b.n	8008c68 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008c46:	6878      	ldr	r0, [r7, #4]
 8008c48:	f000 f9e3 	bl	8009012 <USBD_CtlSendStatus>
      break;
 8008c4c:	e00c      	b.n	8008c68 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008c4e:	6839      	ldr	r1, [r7, #0]
 8008c50:	6878      	ldr	r0, [r7, #4]
 8008c52:	f000 f900 	bl	8008e56 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008c56:	4b07      	ldr	r3, [pc, #28]	@ (8008c74 <USBD_SetConfig+0x150>)
 8008c58:	781b      	ldrb	r3, [r3, #0]
 8008c5a:	4619      	mov	r1, r3
 8008c5c:	6878      	ldr	r0, [r7, #4]
 8008c5e:	f7fe ff50 	bl	8007b02 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008c62:	2303      	movs	r3, #3
 8008c64:	73fb      	strb	r3, [r7, #15]
      break;
 8008c66:	bf00      	nop
  }

  return ret;
 8008c68:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	3710      	adds	r7, #16
 8008c6e:	46bd      	mov	sp, r7
 8008c70:	bd80      	pop	{r7, pc}
 8008c72:	bf00      	nop
 8008c74:	20000300 	.word	0x20000300

08008c78 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c78:	b580      	push	{r7, lr}
 8008c7a:	b082      	sub	sp, #8
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	6078      	str	r0, [r7, #4]
 8008c80:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008c82:	683b      	ldr	r3, [r7, #0]
 8008c84:	88db      	ldrh	r3, [r3, #6]
 8008c86:	2b01      	cmp	r3, #1
 8008c88:	d004      	beq.n	8008c94 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008c8a:	6839      	ldr	r1, [r7, #0]
 8008c8c:	6878      	ldr	r0, [r7, #4]
 8008c8e:	f000 f8e2 	bl	8008e56 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008c92:	e023      	b.n	8008cdc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008c9a:	b2db      	uxtb	r3, r3
 8008c9c:	2b02      	cmp	r3, #2
 8008c9e:	dc02      	bgt.n	8008ca6 <USBD_GetConfig+0x2e>
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	dc03      	bgt.n	8008cac <USBD_GetConfig+0x34>
 8008ca4:	e015      	b.n	8008cd2 <USBD_GetConfig+0x5a>
 8008ca6:	2b03      	cmp	r3, #3
 8008ca8:	d00b      	beq.n	8008cc2 <USBD_GetConfig+0x4a>
 8008caa:	e012      	b.n	8008cd2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	2200      	movs	r2, #0
 8008cb0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	3308      	adds	r3, #8
 8008cb6:	2201      	movs	r2, #1
 8008cb8:	4619      	mov	r1, r3
 8008cba:	6878      	ldr	r0, [r7, #4]
 8008cbc:	f000 f948 	bl	8008f50 <USBD_CtlSendData>
        break;
 8008cc0:	e00c      	b.n	8008cdc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	3304      	adds	r3, #4
 8008cc6:	2201      	movs	r2, #1
 8008cc8:	4619      	mov	r1, r3
 8008cca:	6878      	ldr	r0, [r7, #4]
 8008ccc:	f000 f940 	bl	8008f50 <USBD_CtlSendData>
        break;
 8008cd0:	e004      	b.n	8008cdc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008cd2:	6839      	ldr	r1, [r7, #0]
 8008cd4:	6878      	ldr	r0, [r7, #4]
 8008cd6:	f000 f8be 	bl	8008e56 <USBD_CtlError>
        break;
 8008cda:	bf00      	nop
}
 8008cdc:	bf00      	nop
 8008cde:	3708      	adds	r7, #8
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	bd80      	pop	{r7, pc}

08008ce4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ce4:	b580      	push	{r7, lr}
 8008ce6:	b082      	sub	sp, #8
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	6078      	str	r0, [r7, #4]
 8008cec:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008cf4:	b2db      	uxtb	r3, r3
 8008cf6:	3b01      	subs	r3, #1
 8008cf8:	2b02      	cmp	r3, #2
 8008cfa:	d81e      	bhi.n	8008d3a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008cfc:	683b      	ldr	r3, [r7, #0]
 8008cfe:	88db      	ldrh	r3, [r3, #6]
 8008d00:	2b02      	cmp	r3, #2
 8008d02:	d004      	beq.n	8008d0e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008d04:	6839      	ldr	r1, [r7, #0]
 8008d06:	6878      	ldr	r0, [r7, #4]
 8008d08:	f000 f8a5 	bl	8008e56 <USBD_CtlError>
        break;
 8008d0c:	e01a      	b.n	8008d44 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	2201      	movs	r2, #1
 8008d12:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d005      	beq.n	8008d2a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	68db      	ldr	r3, [r3, #12]
 8008d22:	f043 0202 	orr.w	r2, r3, #2
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	330c      	adds	r3, #12
 8008d2e:	2202      	movs	r2, #2
 8008d30:	4619      	mov	r1, r3
 8008d32:	6878      	ldr	r0, [r7, #4]
 8008d34:	f000 f90c 	bl	8008f50 <USBD_CtlSendData>
      break;
 8008d38:	e004      	b.n	8008d44 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008d3a:	6839      	ldr	r1, [r7, #0]
 8008d3c:	6878      	ldr	r0, [r7, #4]
 8008d3e:	f000 f88a 	bl	8008e56 <USBD_CtlError>
      break;
 8008d42:	bf00      	nop
  }
}
 8008d44:	bf00      	nop
 8008d46:	3708      	adds	r7, #8
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	bd80      	pop	{r7, pc}

08008d4c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d4c:	b580      	push	{r7, lr}
 8008d4e:	b082      	sub	sp, #8
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	6078      	str	r0, [r7, #4]
 8008d54:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008d56:	683b      	ldr	r3, [r7, #0]
 8008d58:	885b      	ldrh	r3, [r3, #2]
 8008d5a:	2b01      	cmp	r3, #1
 8008d5c:	d107      	bne.n	8008d6e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	2201      	movs	r2, #1
 8008d62:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008d66:	6878      	ldr	r0, [r7, #4]
 8008d68:	f000 f953 	bl	8009012 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008d6c:	e013      	b.n	8008d96 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008d6e:	683b      	ldr	r3, [r7, #0]
 8008d70:	885b      	ldrh	r3, [r3, #2]
 8008d72:	2b02      	cmp	r3, #2
 8008d74:	d10b      	bne.n	8008d8e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8008d76:	683b      	ldr	r3, [r7, #0]
 8008d78:	889b      	ldrh	r3, [r3, #4]
 8008d7a:	0a1b      	lsrs	r3, r3, #8
 8008d7c:	b29b      	uxth	r3, r3
 8008d7e:	b2da      	uxtb	r2, r3
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008d86:	6878      	ldr	r0, [r7, #4]
 8008d88:	f000 f943 	bl	8009012 <USBD_CtlSendStatus>
}
 8008d8c:	e003      	b.n	8008d96 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008d8e:	6839      	ldr	r1, [r7, #0]
 8008d90:	6878      	ldr	r0, [r7, #4]
 8008d92:	f000 f860 	bl	8008e56 <USBD_CtlError>
}
 8008d96:	bf00      	nop
 8008d98:	3708      	adds	r7, #8
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	bd80      	pop	{r7, pc}

08008d9e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d9e:	b580      	push	{r7, lr}
 8008da0:	b082      	sub	sp, #8
 8008da2:	af00      	add	r7, sp, #0
 8008da4:	6078      	str	r0, [r7, #4]
 8008da6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008dae:	b2db      	uxtb	r3, r3
 8008db0:	3b01      	subs	r3, #1
 8008db2:	2b02      	cmp	r3, #2
 8008db4:	d80b      	bhi.n	8008dce <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008db6:	683b      	ldr	r3, [r7, #0]
 8008db8:	885b      	ldrh	r3, [r3, #2]
 8008dba:	2b01      	cmp	r3, #1
 8008dbc:	d10c      	bne.n	8008dd8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	2200      	movs	r2, #0
 8008dc2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008dc6:	6878      	ldr	r0, [r7, #4]
 8008dc8:	f000 f923 	bl	8009012 <USBD_CtlSendStatus>
      }
      break;
 8008dcc:	e004      	b.n	8008dd8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008dce:	6839      	ldr	r1, [r7, #0]
 8008dd0:	6878      	ldr	r0, [r7, #4]
 8008dd2:	f000 f840 	bl	8008e56 <USBD_CtlError>
      break;
 8008dd6:	e000      	b.n	8008dda <USBD_ClrFeature+0x3c>
      break;
 8008dd8:	bf00      	nop
  }
}
 8008dda:	bf00      	nop
 8008ddc:	3708      	adds	r7, #8
 8008dde:	46bd      	mov	sp, r7
 8008de0:	bd80      	pop	{r7, pc}

08008de2 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008de2:	b580      	push	{r7, lr}
 8008de4:	b084      	sub	sp, #16
 8008de6:	af00      	add	r7, sp, #0
 8008de8:	6078      	str	r0, [r7, #4]
 8008dea:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008dec:	683b      	ldr	r3, [r7, #0]
 8008dee:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	781a      	ldrb	r2, [r3, #0]
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	3301      	adds	r3, #1
 8008dfc:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	781a      	ldrb	r2, [r3, #0]
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	3301      	adds	r3, #1
 8008e0a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008e0c:	68f8      	ldr	r0, [r7, #12]
 8008e0e:	f7ff fa15 	bl	800823c <SWAPBYTE>
 8008e12:	4603      	mov	r3, r0
 8008e14:	461a      	mov	r2, r3
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	3301      	adds	r3, #1
 8008e1e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	3301      	adds	r3, #1
 8008e24:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008e26:	68f8      	ldr	r0, [r7, #12]
 8008e28:	f7ff fa08 	bl	800823c <SWAPBYTE>
 8008e2c:	4603      	mov	r3, r0
 8008e2e:	461a      	mov	r2, r3
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	3301      	adds	r3, #1
 8008e38:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	3301      	adds	r3, #1
 8008e3e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008e40:	68f8      	ldr	r0, [r7, #12]
 8008e42:	f7ff f9fb 	bl	800823c <SWAPBYTE>
 8008e46:	4603      	mov	r3, r0
 8008e48:	461a      	mov	r2, r3
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	80da      	strh	r2, [r3, #6]
}
 8008e4e:	bf00      	nop
 8008e50:	3710      	adds	r7, #16
 8008e52:	46bd      	mov	sp, r7
 8008e54:	bd80      	pop	{r7, pc}

08008e56 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e56:	b580      	push	{r7, lr}
 8008e58:	b082      	sub	sp, #8
 8008e5a:	af00      	add	r7, sp, #0
 8008e5c:	6078      	str	r0, [r7, #4]
 8008e5e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008e60:	2180      	movs	r1, #128	@ 0x80
 8008e62:	6878      	ldr	r0, [r7, #4]
 8008e64:	f000 fd32 	bl	80098cc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008e68:	2100      	movs	r1, #0
 8008e6a:	6878      	ldr	r0, [r7, #4]
 8008e6c:	f000 fd2e 	bl	80098cc <USBD_LL_StallEP>
}
 8008e70:	bf00      	nop
 8008e72:	3708      	adds	r7, #8
 8008e74:	46bd      	mov	sp, r7
 8008e76:	bd80      	pop	{r7, pc}

08008e78 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b086      	sub	sp, #24
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	60f8      	str	r0, [r7, #12]
 8008e80:	60b9      	str	r1, [r7, #8]
 8008e82:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008e84:	2300      	movs	r3, #0
 8008e86:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d042      	beq.n	8008f14 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8008e92:	6938      	ldr	r0, [r7, #16]
 8008e94:	f000 f842 	bl	8008f1c <USBD_GetLen>
 8008e98:	4603      	mov	r3, r0
 8008e9a:	3301      	adds	r3, #1
 8008e9c:	005b      	lsls	r3, r3, #1
 8008e9e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008ea2:	d808      	bhi.n	8008eb6 <USBD_GetString+0x3e>
 8008ea4:	6938      	ldr	r0, [r7, #16]
 8008ea6:	f000 f839 	bl	8008f1c <USBD_GetLen>
 8008eaa:	4603      	mov	r3, r0
 8008eac:	3301      	adds	r3, #1
 8008eae:	b29b      	uxth	r3, r3
 8008eb0:	005b      	lsls	r3, r3, #1
 8008eb2:	b29a      	uxth	r2, r3
 8008eb4:	e001      	b.n	8008eba <USBD_GetString+0x42>
 8008eb6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008ebe:	7dfb      	ldrb	r3, [r7, #23]
 8008ec0:	68ba      	ldr	r2, [r7, #8]
 8008ec2:	4413      	add	r3, r2
 8008ec4:	687a      	ldr	r2, [r7, #4]
 8008ec6:	7812      	ldrb	r2, [r2, #0]
 8008ec8:	701a      	strb	r2, [r3, #0]
  idx++;
 8008eca:	7dfb      	ldrb	r3, [r7, #23]
 8008ecc:	3301      	adds	r3, #1
 8008ece:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008ed0:	7dfb      	ldrb	r3, [r7, #23]
 8008ed2:	68ba      	ldr	r2, [r7, #8]
 8008ed4:	4413      	add	r3, r2
 8008ed6:	2203      	movs	r2, #3
 8008ed8:	701a      	strb	r2, [r3, #0]
  idx++;
 8008eda:	7dfb      	ldrb	r3, [r7, #23]
 8008edc:	3301      	adds	r3, #1
 8008ede:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008ee0:	e013      	b.n	8008f0a <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8008ee2:	7dfb      	ldrb	r3, [r7, #23]
 8008ee4:	68ba      	ldr	r2, [r7, #8]
 8008ee6:	4413      	add	r3, r2
 8008ee8:	693a      	ldr	r2, [r7, #16]
 8008eea:	7812      	ldrb	r2, [r2, #0]
 8008eec:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008eee:	693b      	ldr	r3, [r7, #16]
 8008ef0:	3301      	adds	r3, #1
 8008ef2:	613b      	str	r3, [r7, #16]
    idx++;
 8008ef4:	7dfb      	ldrb	r3, [r7, #23]
 8008ef6:	3301      	adds	r3, #1
 8008ef8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008efa:	7dfb      	ldrb	r3, [r7, #23]
 8008efc:	68ba      	ldr	r2, [r7, #8]
 8008efe:	4413      	add	r3, r2
 8008f00:	2200      	movs	r2, #0
 8008f02:	701a      	strb	r2, [r3, #0]
    idx++;
 8008f04:	7dfb      	ldrb	r3, [r7, #23]
 8008f06:	3301      	adds	r3, #1
 8008f08:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008f0a:	693b      	ldr	r3, [r7, #16]
 8008f0c:	781b      	ldrb	r3, [r3, #0]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d1e7      	bne.n	8008ee2 <USBD_GetString+0x6a>
 8008f12:	e000      	b.n	8008f16 <USBD_GetString+0x9e>
    return;
 8008f14:	bf00      	nop
  }
}
 8008f16:	3718      	adds	r7, #24
 8008f18:	46bd      	mov	sp, r7
 8008f1a:	bd80      	pop	{r7, pc}

08008f1c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008f1c:	b480      	push	{r7}
 8008f1e:	b085      	sub	sp, #20
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008f24:	2300      	movs	r3, #0
 8008f26:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008f2c:	e005      	b.n	8008f3a <USBD_GetLen+0x1e>
  {
    len++;
 8008f2e:	7bfb      	ldrb	r3, [r7, #15]
 8008f30:	3301      	adds	r3, #1
 8008f32:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008f34:	68bb      	ldr	r3, [r7, #8]
 8008f36:	3301      	adds	r3, #1
 8008f38:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008f3a:	68bb      	ldr	r3, [r7, #8]
 8008f3c:	781b      	ldrb	r3, [r3, #0]
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d1f5      	bne.n	8008f2e <USBD_GetLen+0x12>
  }

  return len;
 8008f42:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f44:	4618      	mov	r0, r3
 8008f46:	3714      	adds	r7, #20
 8008f48:	46bd      	mov	sp, r7
 8008f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f4e:	4770      	bx	lr

08008f50 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008f50:	b580      	push	{r7, lr}
 8008f52:	b084      	sub	sp, #16
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	60f8      	str	r0, [r7, #12]
 8008f58:	60b9      	str	r1, [r7, #8]
 8008f5a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	2202      	movs	r2, #2
 8008f60:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	687a      	ldr	r2, [r7, #4]
 8008f68:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	68ba      	ldr	r2, [r7, #8]
 8008f6e:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	687a      	ldr	r2, [r7, #4]
 8008f74:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	68ba      	ldr	r2, [r7, #8]
 8008f7a:	2100      	movs	r1, #0
 8008f7c:	68f8      	ldr	r0, [r7, #12]
 8008f7e:	f000 fd2e 	bl	80099de <USBD_LL_Transmit>

  return USBD_OK;
 8008f82:	2300      	movs	r3, #0
}
 8008f84:	4618      	mov	r0, r3
 8008f86:	3710      	adds	r7, #16
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	bd80      	pop	{r7, pc}

08008f8c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008f8c:	b580      	push	{r7, lr}
 8008f8e:	b084      	sub	sp, #16
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	60f8      	str	r0, [r7, #12]
 8008f94:	60b9      	str	r1, [r7, #8]
 8008f96:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	68ba      	ldr	r2, [r7, #8]
 8008f9c:	2100      	movs	r1, #0
 8008f9e:	68f8      	ldr	r0, [r7, #12]
 8008fa0:	f000 fd1d 	bl	80099de <USBD_LL_Transmit>

  return USBD_OK;
 8008fa4:	2300      	movs	r3, #0
}
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	3710      	adds	r7, #16
 8008faa:	46bd      	mov	sp, r7
 8008fac:	bd80      	pop	{r7, pc}

08008fae <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008fae:	b580      	push	{r7, lr}
 8008fb0:	b084      	sub	sp, #16
 8008fb2:	af00      	add	r7, sp, #0
 8008fb4:	60f8      	str	r0, [r7, #12]
 8008fb6:	60b9      	str	r1, [r7, #8]
 8008fb8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	2203      	movs	r2, #3
 8008fbe:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	687a      	ldr	r2, [r7, #4]
 8008fc6:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
  pdev->ep_out[0].pbuffer = pbuf;
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	68ba      	ldr	r2, [r7, #8]
 8008fce:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	687a      	ldr	r2, [r7, #4]
 8008fd6:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	68ba      	ldr	r2, [r7, #8]
 8008fde:	2100      	movs	r1, #0
 8008fe0:	68f8      	ldr	r0, [r7, #12]
 8008fe2:	f000 fd1d 	bl	8009a20 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008fe6:	2300      	movs	r3, #0
}
 8008fe8:	4618      	mov	r0, r3
 8008fea:	3710      	adds	r7, #16
 8008fec:	46bd      	mov	sp, r7
 8008fee:	bd80      	pop	{r7, pc}

08008ff0 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008ff0:	b580      	push	{r7, lr}
 8008ff2:	b084      	sub	sp, #16
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	60f8      	str	r0, [r7, #12]
 8008ff8:	60b9      	str	r1, [r7, #8]
 8008ffa:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	68ba      	ldr	r2, [r7, #8]
 8009000:	2100      	movs	r1, #0
 8009002:	68f8      	ldr	r0, [r7, #12]
 8009004:	f000 fd0c 	bl	8009a20 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009008:	2300      	movs	r3, #0
}
 800900a:	4618      	mov	r0, r3
 800900c:	3710      	adds	r7, #16
 800900e:	46bd      	mov	sp, r7
 8009010:	bd80      	pop	{r7, pc}

08009012 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009012:	b580      	push	{r7, lr}
 8009014:	b082      	sub	sp, #8
 8009016:	af00      	add	r7, sp, #0
 8009018:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	2204      	movs	r2, #4
 800901e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009022:	2300      	movs	r3, #0
 8009024:	2200      	movs	r2, #0
 8009026:	2100      	movs	r1, #0
 8009028:	6878      	ldr	r0, [r7, #4]
 800902a:	f000 fcd8 	bl	80099de <USBD_LL_Transmit>

  return USBD_OK;
 800902e:	2300      	movs	r3, #0
}
 8009030:	4618      	mov	r0, r3
 8009032:	3708      	adds	r7, #8
 8009034:	46bd      	mov	sp, r7
 8009036:	bd80      	pop	{r7, pc}

08009038 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009038:	b580      	push	{r7, lr}
 800903a:	b082      	sub	sp, #8
 800903c:	af00      	add	r7, sp, #0
 800903e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	2205      	movs	r2, #5
 8009044:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009048:	2300      	movs	r3, #0
 800904a:	2200      	movs	r2, #0
 800904c:	2100      	movs	r1, #0
 800904e:	6878      	ldr	r0, [r7, #4]
 8009050:	f000 fce6 	bl	8009a20 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009054:	2300      	movs	r3, #0
}
 8009056:	4618      	mov	r0, r3
 8009058:	3708      	adds	r7, #8
 800905a:	46bd      	mov	sp, r7
 800905c:	bd80      	pop	{r7, pc}
	...

08009060 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009060:	b580      	push	{r7, lr}
 8009062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009064:	2200      	movs	r2, #0
 8009066:	4912      	ldr	r1, [pc, #72]	@ (80090b0 <MX_USB_DEVICE_Init+0x50>)
 8009068:	4812      	ldr	r0, [pc, #72]	@ (80090b4 <MX_USB_DEVICE_Init+0x54>)
 800906a:	f7fe fcb1 	bl	80079d0 <USBD_Init>
 800906e:	4603      	mov	r3, r0
 8009070:	2b00      	cmp	r3, #0
 8009072:	d001      	beq.n	8009078 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009074:	f7f7 ff7c 	bl	8000f70 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009078:	490f      	ldr	r1, [pc, #60]	@ (80090b8 <MX_USB_DEVICE_Init+0x58>)
 800907a:	480e      	ldr	r0, [pc, #56]	@ (80090b4 <MX_USB_DEVICE_Init+0x54>)
 800907c:	f7fe fcd8 	bl	8007a30 <USBD_RegisterClass>
 8009080:	4603      	mov	r3, r0
 8009082:	2b00      	cmp	r3, #0
 8009084:	d001      	beq.n	800908a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009086:	f7f7 ff73 	bl	8000f70 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800908a:	490c      	ldr	r1, [pc, #48]	@ (80090bc <MX_USB_DEVICE_Init+0x5c>)
 800908c:	4809      	ldr	r0, [pc, #36]	@ (80090b4 <MX_USB_DEVICE_Init+0x54>)
 800908e:	f7fe fbcf 	bl	8007830 <USBD_CDC_RegisterInterface>
 8009092:	4603      	mov	r3, r0
 8009094:	2b00      	cmp	r3, #0
 8009096:	d001      	beq.n	800909c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009098:	f7f7 ff6a 	bl	8000f70 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800909c:	4805      	ldr	r0, [pc, #20]	@ (80090b4 <MX_USB_DEVICE_Init+0x54>)
 800909e:	f7fe fcfd 	bl	8007a9c <USBD_Start>
 80090a2:	4603      	mov	r3, r0
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d001      	beq.n	80090ac <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80090a8:	f7f7 ff62 	bl	8000f70 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80090ac:	bf00      	nop
 80090ae:	bd80      	pop	{r7, pc}
 80090b0:	200000b0 	.word	0x200000b0
 80090b4:	20000304 	.word	0x20000304
 80090b8:	2000001c 	.word	0x2000001c
 80090bc:	2000009c 	.word	0x2000009c

080090c0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80090c0:	b580      	push	{r7, lr}
 80090c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80090c4:	2200      	movs	r2, #0
 80090c6:	4905      	ldr	r1, [pc, #20]	@ (80090dc <CDC_Init_FS+0x1c>)
 80090c8:	4805      	ldr	r0, [pc, #20]	@ (80090e0 <CDC_Init_FS+0x20>)
 80090ca:	f7fe fbcb 	bl	8007864 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80090ce:	4905      	ldr	r1, [pc, #20]	@ (80090e4 <CDC_Init_FS+0x24>)
 80090d0:	4803      	ldr	r0, [pc, #12]	@ (80090e0 <CDC_Init_FS+0x20>)
 80090d2:	f7fe fbe9 	bl	80078a8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80090d6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80090d8:	4618      	mov	r0, r3
 80090da:	bd80      	pop	{r7, pc}
 80090dc:	20000de0 	.word	0x20000de0
 80090e0:	20000304 	.word	0x20000304
 80090e4:	200005e0 	.word	0x200005e0

080090e8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80090e8:	b480      	push	{r7}
 80090ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80090ec:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80090ee:	4618      	mov	r0, r3
 80090f0:	46bd      	mov	sp, r7
 80090f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f6:	4770      	bx	lr

080090f8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80090f8:	b480      	push	{r7}
 80090fa:	b083      	sub	sp, #12
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	4603      	mov	r3, r0
 8009100:	6039      	str	r1, [r7, #0]
 8009102:	71fb      	strb	r3, [r7, #7]
 8009104:	4613      	mov	r3, r2
 8009106:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009108:	79fb      	ldrb	r3, [r7, #7]
 800910a:	2b23      	cmp	r3, #35	@ 0x23
 800910c:	d84a      	bhi.n	80091a4 <CDC_Control_FS+0xac>
 800910e:	a201      	add	r2, pc, #4	@ (adr r2, 8009114 <CDC_Control_FS+0x1c>)
 8009110:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009114:	080091a5 	.word	0x080091a5
 8009118:	080091a5 	.word	0x080091a5
 800911c:	080091a5 	.word	0x080091a5
 8009120:	080091a5 	.word	0x080091a5
 8009124:	080091a5 	.word	0x080091a5
 8009128:	080091a5 	.word	0x080091a5
 800912c:	080091a5 	.word	0x080091a5
 8009130:	080091a5 	.word	0x080091a5
 8009134:	080091a5 	.word	0x080091a5
 8009138:	080091a5 	.word	0x080091a5
 800913c:	080091a5 	.word	0x080091a5
 8009140:	080091a5 	.word	0x080091a5
 8009144:	080091a5 	.word	0x080091a5
 8009148:	080091a5 	.word	0x080091a5
 800914c:	080091a5 	.word	0x080091a5
 8009150:	080091a5 	.word	0x080091a5
 8009154:	080091a5 	.word	0x080091a5
 8009158:	080091a5 	.word	0x080091a5
 800915c:	080091a5 	.word	0x080091a5
 8009160:	080091a5 	.word	0x080091a5
 8009164:	080091a5 	.word	0x080091a5
 8009168:	080091a5 	.word	0x080091a5
 800916c:	080091a5 	.word	0x080091a5
 8009170:	080091a5 	.word	0x080091a5
 8009174:	080091a5 	.word	0x080091a5
 8009178:	080091a5 	.word	0x080091a5
 800917c:	080091a5 	.word	0x080091a5
 8009180:	080091a5 	.word	0x080091a5
 8009184:	080091a5 	.word	0x080091a5
 8009188:	080091a5 	.word	0x080091a5
 800918c:	080091a5 	.word	0x080091a5
 8009190:	080091a5 	.word	0x080091a5
 8009194:	080091a5 	.word	0x080091a5
 8009198:	080091a5 	.word	0x080091a5
 800919c:	080091a5 	.word	0x080091a5
 80091a0:	080091a5 	.word	0x080091a5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80091a4:	bf00      	nop
  }

  return (USBD_OK);
 80091a6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80091a8:	4618      	mov	r0, r3
 80091aa:	370c      	adds	r7, #12
 80091ac:	46bd      	mov	sp, r7
 80091ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b2:	4770      	bx	lr

080091b4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80091b4:	b580      	push	{r7, lr}
 80091b6:	b082      	sub	sp, #8
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	6078      	str	r0, [r7, #4]
 80091bc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80091be:	6879      	ldr	r1, [r7, #4]
 80091c0:	480f      	ldr	r0, [pc, #60]	@ (8009200 <CDC_Receive_FS+0x4c>)
 80091c2:	f7fe fb71 	bl	80078a8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80091c6:	480e      	ldr	r0, [pc, #56]	@ (8009200 <CDC_Receive_FS+0x4c>)
 80091c8:	f7fe fbcc 	bl	8007964 <USBD_CDC_ReceivePacket>

  rx_buff[0] = Buf[0];
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	781a      	ldrb	r2, [r3, #0]
 80091d0:	4b0c      	ldr	r3, [pc, #48]	@ (8009204 <CDC_Receive_FS+0x50>)
 80091d2:	701a      	strb	r2, [r3, #0]
  rx_buff[1] = Buf[1];
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	785a      	ldrb	r2, [r3, #1]
 80091d8:	4b0a      	ldr	r3, [pc, #40]	@ (8009204 <CDC_Receive_FS+0x50>)
 80091da:	705a      	strb	r2, [r3, #1]
  rx_buff[2] = Buf[2];
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	789a      	ldrb	r2, [r3, #2]
 80091e0:	4b08      	ldr	r3, [pc, #32]	@ (8009204 <CDC_Receive_FS+0x50>)
 80091e2:	709a      	strb	r2, [r3, #2]
  rx_buff[3] = Buf[3];
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	78da      	ldrb	r2, [r3, #3]
 80091e8:	4b06      	ldr	r3, [pc, #24]	@ (8009204 <CDC_Receive_FS+0x50>)
 80091ea:	70da      	strb	r2, [r3, #3]
  rx_buff[4] = Buf[4];
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	791a      	ldrb	r2, [r3, #4]
 80091f0:	4b04      	ldr	r3, [pc, #16]	@ (8009204 <CDC_Receive_FS+0x50>)
 80091f2:	711a      	strb	r2, [r3, #4]

  return (USBD_OK);
 80091f4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80091f6:	4618      	mov	r0, r3
 80091f8:	3708      	adds	r7, #8
 80091fa:	46bd      	mov	sp, r7
 80091fc:	bd80      	pop	{r7, pc}
 80091fe:	bf00      	nop
 8009200:	20000304 	.word	0x20000304
 8009204:	2000012c 	.word	0x2000012c

08009208 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009208:	b580      	push	{r7, lr}
 800920a:	b084      	sub	sp, #16
 800920c:	af00      	add	r7, sp, #0
 800920e:	6078      	str	r0, [r7, #4]
 8009210:	460b      	mov	r3, r1
 8009212:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009214:	2300      	movs	r3, #0
 8009216:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009218:	4b0d      	ldr	r3, [pc, #52]	@ (8009250 <CDC_Transmit_FS+0x48>)
 800921a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800921e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009220:	68bb      	ldr	r3, [r7, #8]
 8009222:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8009226:	2b00      	cmp	r3, #0
 8009228:	d001      	beq.n	800922e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800922a:	2301      	movs	r3, #1
 800922c:	e00b      	b.n	8009246 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800922e:	887b      	ldrh	r3, [r7, #2]
 8009230:	461a      	mov	r2, r3
 8009232:	6879      	ldr	r1, [r7, #4]
 8009234:	4806      	ldr	r0, [pc, #24]	@ (8009250 <CDC_Transmit_FS+0x48>)
 8009236:	f7fe fb15 	bl	8007864 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800923a:	4805      	ldr	r0, [pc, #20]	@ (8009250 <CDC_Transmit_FS+0x48>)
 800923c:	f7fe fb52 	bl	80078e4 <USBD_CDC_TransmitPacket>
 8009240:	4603      	mov	r3, r0
 8009242:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009244:	7bfb      	ldrb	r3, [r7, #15]
}
 8009246:	4618      	mov	r0, r3
 8009248:	3710      	adds	r7, #16
 800924a:	46bd      	mov	sp, r7
 800924c:	bd80      	pop	{r7, pc}
 800924e:	bf00      	nop
 8009250:	20000304 	.word	0x20000304

08009254 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009254:	b480      	push	{r7}
 8009256:	b087      	sub	sp, #28
 8009258:	af00      	add	r7, sp, #0
 800925a:	60f8      	str	r0, [r7, #12]
 800925c:	60b9      	str	r1, [r7, #8]
 800925e:	4613      	mov	r3, r2
 8009260:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8009262:	2300      	movs	r3, #0
 8009264:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8009266:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800926a:	4618      	mov	r0, r3
 800926c:	371c      	adds	r7, #28
 800926e:	46bd      	mov	sp, r7
 8009270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009274:	4770      	bx	lr
	...

08009278 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009278:	b480      	push	{r7}
 800927a:	b083      	sub	sp, #12
 800927c:	af00      	add	r7, sp, #0
 800927e:	4603      	mov	r3, r0
 8009280:	6039      	str	r1, [r7, #0]
 8009282:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009284:	683b      	ldr	r3, [r7, #0]
 8009286:	2212      	movs	r2, #18
 8009288:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800928a:	4b03      	ldr	r3, [pc, #12]	@ (8009298 <USBD_FS_DeviceDescriptor+0x20>)
}
 800928c:	4618      	mov	r0, r3
 800928e:	370c      	adds	r7, #12
 8009290:	46bd      	mov	sp, r7
 8009292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009296:	4770      	bx	lr
 8009298:	200000d0 	.word	0x200000d0

0800929c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800929c:	b480      	push	{r7}
 800929e:	b083      	sub	sp, #12
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	4603      	mov	r3, r0
 80092a4:	6039      	str	r1, [r7, #0]
 80092a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80092a8:	683b      	ldr	r3, [r7, #0]
 80092aa:	2204      	movs	r2, #4
 80092ac:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80092ae:	4b03      	ldr	r3, [pc, #12]	@ (80092bc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80092b0:	4618      	mov	r0, r3
 80092b2:	370c      	adds	r7, #12
 80092b4:	46bd      	mov	sp, r7
 80092b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ba:	4770      	bx	lr
 80092bc:	200000f0 	.word	0x200000f0

080092c0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80092c0:	b580      	push	{r7, lr}
 80092c2:	b082      	sub	sp, #8
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	4603      	mov	r3, r0
 80092c8:	6039      	str	r1, [r7, #0]
 80092ca:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80092cc:	79fb      	ldrb	r3, [r7, #7]
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d105      	bne.n	80092de <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80092d2:	683a      	ldr	r2, [r7, #0]
 80092d4:	4907      	ldr	r1, [pc, #28]	@ (80092f4 <USBD_FS_ProductStrDescriptor+0x34>)
 80092d6:	4808      	ldr	r0, [pc, #32]	@ (80092f8 <USBD_FS_ProductStrDescriptor+0x38>)
 80092d8:	f7ff fdce 	bl	8008e78 <USBD_GetString>
 80092dc:	e004      	b.n	80092e8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80092de:	683a      	ldr	r2, [r7, #0]
 80092e0:	4904      	ldr	r1, [pc, #16]	@ (80092f4 <USBD_FS_ProductStrDescriptor+0x34>)
 80092e2:	4805      	ldr	r0, [pc, #20]	@ (80092f8 <USBD_FS_ProductStrDescriptor+0x38>)
 80092e4:	f7ff fdc8 	bl	8008e78 <USBD_GetString>
  }
  return USBD_StrDesc;
 80092e8:	4b02      	ldr	r3, [pc, #8]	@ (80092f4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80092ea:	4618      	mov	r0, r3
 80092ec:	3708      	adds	r7, #8
 80092ee:	46bd      	mov	sp, r7
 80092f0:	bd80      	pop	{r7, pc}
 80092f2:	bf00      	nop
 80092f4:	200015e0 	.word	0x200015e0
 80092f8:	08009c1c 	.word	0x08009c1c

080092fc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80092fc:	b580      	push	{r7, lr}
 80092fe:	b082      	sub	sp, #8
 8009300:	af00      	add	r7, sp, #0
 8009302:	4603      	mov	r3, r0
 8009304:	6039      	str	r1, [r7, #0]
 8009306:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009308:	683a      	ldr	r2, [r7, #0]
 800930a:	4904      	ldr	r1, [pc, #16]	@ (800931c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800930c:	4804      	ldr	r0, [pc, #16]	@ (8009320 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800930e:	f7ff fdb3 	bl	8008e78 <USBD_GetString>
  return USBD_StrDesc;
 8009312:	4b02      	ldr	r3, [pc, #8]	@ (800931c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009314:	4618      	mov	r0, r3
 8009316:	3708      	adds	r7, #8
 8009318:	46bd      	mov	sp, r7
 800931a:	bd80      	pop	{r7, pc}
 800931c:	200015e0 	.word	0x200015e0
 8009320:	08009c34 	.word	0x08009c34

08009324 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009324:	b580      	push	{r7, lr}
 8009326:	b082      	sub	sp, #8
 8009328:	af00      	add	r7, sp, #0
 800932a:	4603      	mov	r3, r0
 800932c:	6039      	str	r1, [r7, #0]
 800932e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009330:	683b      	ldr	r3, [r7, #0]
 8009332:	221a      	movs	r2, #26
 8009334:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009336:	f000 f855 	bl	80093e4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800933a:	4b02      	ldr	r3, [pc, #8]	@ (8009344 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800933c:	4618      	mov	r0, r3
 800933e:	3708      	adds	r7, #8
 8009340:	46bd      	mov	sp, r7
 8009342:	bd80      	pop	{r7, pc}
 8009344:	200000f4 	.word	0x200000f4

08009348 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009348:	b580      	push	{r7, lr}
 800934a:	b082      	sub	sp, #8
 800934c:	af00      	add	r7, sp, #0
 800934e:	4603      	mov	r3, r0
 8009350:	6039      	str	r1, [r7, #0]
 8009352:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009354:	79fb      	ldrb	r3, [r7, #7]
 8009356:	2b00      	cmp	r3, #0
 8009358:	d105      	bne.n	8009366 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800935a:	683a      	ldr	r2, [r7, #0]
 800935c:	4907      	ldr	r1, [pc, #28]	@ (800937c <USBD_FS_ConfigStrDescriptor+0x34>)
 800935e:	4808      	ldr	r0, [pc, #32]	@ (8009380 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009360:	f7ff fd8a 	bl	8008e78 <USBD_GetString>
 8009364:	e004      	b.n	8009370 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009366:	683a      	ldr	r2, [r7, #0]
 8009368:	4904      	ldr	r1, [pc, #16]	@ (800937c <USBD_FS_ConfigStrDescriptor+0x34>)
 800936a:	4805      	ldr	r0, [pc, #20]	@ (8009380 <USBD_FS_ConfigStrDescriptor+0x38>)
 800936c:	f7ff fd84 	bl	8008e78 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009370:	4b02      	ldr	r3, [pc, #8]	@ (800937c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009372:	4618      	mov	r0, r3
 8009374:	3708      	adds	r7, #8
 8009376:	46bd      	mov	sp, r7
 8009378:	bd80      	pop	{r7, pc}
 800937a:	bf00      	nop
 800937c:	200015e0 	.word	0x200015e0
 8009380:	08009c48 	.word	0x08009c48

08009384 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009384:	b580      	push	{r7, lr}
 8009386:	b082      	sub	sp, #8
 8009388:	af00      	add	r7, sp, #0
 800938a:	4603      	mov	r3, r0
 800938c:	6039      	str	r1, [r7, #0]
 800938e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009390:	79fb      	ldrb	r3, [r7, #7]
 8009392:	2b00      	cmp	r3, #0
 8009394:	d105      	bne.n	80093a2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009396:	683a      	ldr	r2, [r7, #0]
 8009398:	4907      	ldr	r1, [pc, #28]	@ (80093b8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800939a:	4808      	ldr	r0, [pc, #32]	@ (80093bc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800939c:	f7ff fd6c 	bl	8008e78 <USBD_GetString>
 80093a0:	e004      	b.n	80093ac <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80093a2:	683a      	ldr	r2, [r7, #0]
 80093a4:	4904      	ldr	r1, [pc, #16]	@ (80093b8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80093a6:	4805      	ldr	r0, [pc, #20]	@ (80093bc <USBD_FS_InterfaceStrDescriptor+0x38>)
 80093a8:	f7ff fd66 	bl	8008e78 <USBD_GetString>
  }
  return USBD_StrDesc;
 80093ac:	4b02      	ldr	r3, [pc, #8]	@ (80093b8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80093ae:	4618      	mov	r0, r3
 80093b0:	3708      	adds	r7, #8
 80093b2:	46bd      	mov	sp, r7
 80093b4:	bd80      	pop	{r7, pc}
 80093b6:	bf00      	nop
 80093b8:	200015e0 	.word	0x200015e0
 80093bc:	08009c54 	.word	0x08009c54

080093c0 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80093c0:	b480      	push	{r7}
 80093c2:	b083      	sub	sp, #12
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	4603      	mov	r3, r0
 80093c8:	6039      	str	r1, [r7, #0]
 80093ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 80093cc:	683b      	ldr	r3, [r7, #0]
 80093ce:	220c      	movs	r2, #12
 80093d0:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 80093d2:	4b03      	ldr	r3, [pc, #12]	@ (80093e0 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 80093d4:	4618      	mov	r0, r3
 80093d6:	370c      	adds	r7, #12
 80093d8:	46bd      	mov	sp, r7
 80093da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093de:	4770      	bx	lr
 80093e0:	200000e4 	.word	0x200000e4

080093e4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80093e4:	b580      	push	{r7, lr}
 80093e6:	b084      	sub	sp, #16
 80093e8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80093ea:	4b0f      	ldr	r3, [pc, #60]	@ (8009428 <Get_SerialNum+0x44>)
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80093f0:	4b0e      	ldr	r3, [pc, #56]	@ (800942c <Get_SerialNum+0x48>)
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80093f6:	4b0e      	ldr	r3, [pc, #56]	@ (8009430 <Get_SerialNum+0x4c>)
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80093fc:	68fa      	ldr	r2, [r7, #12]
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	4413      	add	r3, r2
 8009402:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	2b00      	cmp	r3, #0
 8009408:	d009      	beq.n	800941e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800940a:	2208      	movs	r2, #8
 800940c:	4909      	ldr	r1, [pc, #36]	@ (8009434 <Get_SerialNum+0x50>)
 800940e:	68f8      	ldr	r0, [r7, #12]
 8009410:	f000 f814 	bl	800943c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009414:	2204      	movs	r2, #4
 8009416:	4908      	ldr	r1, [pc, #32]	@ (8009438 <Get_SerialNum+0x54>)
 8009418:	68b8      	ldr	r0, [r7, #8]
 800941a:	f000 f80f 	bl	800943c <IntToUnicode>
  }
}
 800941e:	bf00      	nop
 8009420:	3710      	adds	r7, #16
 8009422:	46bd      	mov	sp, r7
 8009424:	bd80      	pop	{r7, pc}
 8009426:	bf00      	nop
 8009428:	1fff7a10 	.word	0x1fff7a10
 800942c:	1fff7a14 	.word	0x1fff7a14
 8009430:	1fff7a18 	.word	0x1fff7a18
 8009434:	200000f6 	.word	0x200000f6
 8009438:	20000106 	.word	0x20000106

0800943c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800943c:	b480      	push	{r7}
 800943e:	b087      	sub	sp, #28
 8009440:	af00      	add	r7, sp, #0
 8009442:	60f8      	str	r0, [r7, #12]
 8009444:	60b9      	str	r1, [r7, #8]
 8009446:	4613      	mov	r3, r2
 8009448:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800944a:	2300      	movs	r3, #0
 800944c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800944e:	2300      	movs	r3, #0
 8009450:	75fb      	strb	r3, [r7, #23]
 8009452:	e027      	b.n	80094a4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	0f1b      	lsrs	r3, r3, #28
 8009458:	2b09      	cmp	r3, #9
 800945a:	d80b      	bhi.n	8009474 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	0f1b      	lsrs	r3, r3, #28
 8009460:	b2da      	uxtb	r2, r3
 8009462:	7dfb      	ldrb	r3, [r7, #23]
 8009464:	005b      	lsls	r3, r3, #1
 8009466:	4619      	mov	r1, r3
 8009468:	68bb      	ldr	r3, [r7, #8]
 800946a:	440b      	add	r3, r1
 800946c:	3230      	adds	r2, #48	@ 0x30
 800946e:	b2d2      	uxtb	r2, r2
 8009470:	701a      	strb	r2, [r3, #0]
 8009472:	e00a      	b.n	800948a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	0f1b      	lsrs	r3, r3, #28
 8009478:	b2da      	uxtb	r2, r3
 800947a:	7dfb      	ldrb	r3, [r7, #23]
 800947c:	005b      	lsls	r3, r3, #1
 800947e:	4619      	mov	r1, r3
 8009480:	68bb      	ldr	r3, [r7, #8]
 8009482:	440b      	add	r3, r1
 8009484:	3237      	adds	r2, #55	@ 0x37
 8009486:	b2d2      	uxtb	r2, r2
 8009488:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	011b      	lsls	r3, r3, #4
 800948e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009490:	7dfb      	ldrb	r3, [r7, #23]
 8009492:	005b      	lsls	r3, r3, #1
 8009494:	3301      	adds	r3, #1
 8009496:	68ba      	ldr	r2, [r7, #8]
 8009498:	4413      	add	r3, r2
 800949a:	2200      	movs	r2, #0
 800949c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800949e:	7dfb      	ldrb	r3, [r7, #23]
 80094a0:	3301      	adds	r3, #1
 80094a2:	75fb      	strb	r3, [r7, #23]
 80094a4:	7dfa      	ldrb	r2, [r7, #23]
 80094a6:	79fb      	ldrb	r3, [r7, #7]
 80094a8:	429a      	cmp	r2, r3
 80094aa:	d3d3      	bcc.n	8009454 <IntToUnicode+0x18>
  }
}
 80094ac:	bf00      	nop
 80094ae:	bf00      	nop
 80094b0:	371c      	adds	r7, #28
 80094b2:	46bd      	mov	sp, r7
 80094b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b8:	4770      	bx	lr
	...

080094bc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80094bc:	b580      	push	{r7, lr}
 80094be:	b0a0      	sub	sp, #128	@ 0x80
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80094c4:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80094c8:	2200      	movs	r2, #0
 80094ca:	601a      	str	r2, [r3, #0]
 80094cc:	605a      	str	r2, [r3, #4]
 80094ce:	609a      	str	r2, [r3, #8]
 80094d0:	60da      	str	r2, [r3, #12]
 80094d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80094d4:	f107 0310 	add.w	r3, r7, #16
 80094d8:	225c      	movs	r2, #92	@ 0x5c
 80094da:	2100      	movs	r1, #0
 80094dc:	4618      	mov	r0, r3
 80094de:	f000 fb65 	bl	8009bac <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80094ea:	d149      	bne.n	8009580 <HAL_PCD_MspInit+0xc4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80094ec:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80094f0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 80094f2:	2300      	movs	r3, #0
 80094f4:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80094f6:	f107 0310 	add.w	r3, r7, #16
 80094fa:	4618      	mov	r0, r3
 80094fc:	f7fa f8f2 	bl	80036e4 <HAL_RCCEx_PeriphCLKConfig>
 8009500:	4603      	mov	r3, r0
 8009502:	2b00      	cmp	r3, #0
 8009504:	d001      	beq.n	800950a <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 8009506:	f7f7 fd33 	bl	8000f70 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800950a:	2300      	movs	r3, #0
 800950c:	60fb      	str	r3, [r7, #12]
 800950e:	4b1e      	ldr	r3, [pc, #120]	@ (8009588 <HAL_PCD_MspInit+0xcc>)
 8009510:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009512:	4a1d      	ldr	r2, [pc, #116]	@ (8009588 <HAL_PCD_MspInit+0xcc>)
 8009514:	f043 0301 	orr.w	r3, r3, #1
 8009518:	6313      	str	r3, [r2, #48]	@ 0x30
 800951a:	4b1b      	ldr	r3, [pc, #108]	@ (8009588 <HAL_PCD_MspInit+0xcc>)
 800951c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800951e:	f003 0301 	and.w	r3, r3, #1
 8009522:	60fb      	str	r3, [r7, #12]
 8009524:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8009526:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800952a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800952c:	2302      	movs	r3, #2
 800952e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009530:	2300      	movs	r3, #0
 8009532:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009534:	2303      	movs	r3, #3
 8009536:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009538:	230a      	movs	r3, #10
 800953a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800953c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8009540:	4619      	mov	r1, r3
 8009542:	4812      	ldr	r0, [pc, #72]	@ (800958c <HAL_PCD_MspInit+0xd0>)
 8009544:	f7f8 fb50 	bl	8001be8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009548:	4b0f      	ldr	r3, [pc, #60]	@ (8009588 <HAL_PCD_MspInit+0xcc>)
 800954a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800954c:	4a0e      	ldr	r2, [pc, #56]	@ (8009588 <HAL_PCD_MspInit+0xcc>)
 800954e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009552:	6353      	str	r3, [r2, #52]	@ 0x34
 8009554:	2300      	movs	r3, #0
 8009556:	60bb      	str	r3, [r7, #8]
 8009558:	4b0b      	ldr	r3, [pc, #44]	@ (8009588 <HAL_PCD_MspInit+0xcc>)
 800955a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800955c:	4a0a      	ldr	r2, [pc, #40]	@ (8009588 <HAL_PCD_MspInit+0xcc>)
 800955e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009562:	6453      	str	r3, [r2, #68]	@ 0x44
 8009564:	4b08      	ldr	r3, [pc, #32]	@ (8009588 <HAL_PCD_MspInit+0xcc>)
 8009566:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009568:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800956c:	60bb      	str	r3, [r7, #8]
 800956e:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009570:	2200      	movs	r2, #0
 8009572:	2100      	movs	r1, #0
 8009574:	2043      	movs	r0, #67	@ 0x43
 8009576:	f7f8 fb00 	bl	8001b7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800957a:	2043      	movs	r0, #67	@ 0x43
 800957c:	f7f8 fb19 	bl	8001bb2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009580:	bf00      	nop
 8009582:	3780      	adds	r7, #128	@ 0x80
 8009584:	46bd      	mov	sp, r7
 8009586:	bd80      	pop	{r7, pc}
 8009588:	40023800 	.word	0x40023800
 800958c:	40020000 	.word	0x40020000

08009590 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009590:	b580      	push	{r7, lr}
 8009592:	b082      	sub	sp, #8
 8009594:	af00      	add	r7, sp, #0
 8009596:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80095a4:	4619      	mov	r1, r3
 80095a6:	4610      	mov	r0, r2
 80095a8:	f7fe fac5 	bl	8007b36 <USBD_LL_SetupStage>
}
 80095ac:	bf00      	nop
 80095ae:	3708      	adds	r7, #8
 80095b0:	46bd      	mov	sp, r7
 80095b2:	bd80      	pop	{r7, pc}

080095b4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80095b4:	b580      	push	{r7, lr}
 80095b6:	b082      	sub	sp, #8
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	6078      	str	r0, [r7, #4]
 80095bc:	460b      	mov	r3, r1
 80095be:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80095c6:	78fa      	ldrb	r2, [r7, #3]
 80095c8:	6879      	ldr	r1, [r7, #4]
 80095ca:	4613      	mov	r3, r2
 80095cc:	00db      	lsls	r3, r3, #3
 80095ce:	4413      	add	r3, r2
 80095d0:	009b      	lsls	r3, r3, #2
 80095d2:	440b      	add	r3, r1
 80095d4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80095d8:	681a      	ldr	r2, [r3, #0]
 80095da:	78fb      	ldrb	r3, [r7, #3]
 80095dc:	4619      	mov	r1, r3
 80095de:	f7fe faff 	bl	8007be0 <USBD_LL_DataOutStage>
}
 80095e2:	bf00      	nop
 80095e4:	3708      	adds	r7, #8
 80095e6:	46bd      	mov	sp, r7
 80095e8:	bd80      	pop	{r7, pc}

080095ea <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80095ea:	b580      	push	{r7, lr}
 80095ec:	b082      	sub	sp, #8
 80095ee:	af00      	add	r7, sp, #0
 80095f0:	6078      	str	r0, [r7, #4]
 80095f2:	460b      	mov	r3, r1
 80095f4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80095fc:	78fa      	ldrb	r2, [r7, #3]
 80095fe:	6879      	ldr	r1, [r7, #4]
 8009600:	4613      	mov	r3, r2
 8009602:	00db      	lsls	r3, r3, #3
 8009604:	4413      	add	r3, r2
 8009606:	009b      	lsls	r3, r3, #2
 8009608:	440b      	add	r3, r1
 800960a:	3320      	adds	r3, #32
 800960c:	681a      	ldr	r2, [r3, #0]
 800960e:	78fb      	ldrb	r3, [r7, #3]
 8009610:	4619      	mov	r1, r3
 8009612:	f7fe fba1 	bl	8007d58 <USBD_LL_DataInStage>
}
 8009616:	bf00      	nop
 8009618:	3708      	adds	r7, #8
 800961a:	46bd      	mov	sp, r7
 800961c:	bd80      	pop	{r7, pc}

0800961e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800961e:	b580      	push	{r7, lr}
 8009620:	b082      	sub	sp, #8
 8009622:	af00      	add	r7, sp, #0
 8009624:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800962c:	4618      	mov	r0, r3
 800962e:	f7fe fce5 	bl	8007ffc <USBD_LL_SOF>
}
 8009632:	bf00      	nop
 8009634:	3708      	adds	r7, #8
 8009636:	46bd      	mov	sp, r7
 8009638:	bd80      	pop	{r7, pc}

0800963a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800963a:	b580      	push	{r7, lr}
 800963c:	b084      	sub	sp, #16
 800963e:	af00      	add	r7, sp, #0
 8009640:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009642:	2301      	movs	r3, #1
 8009644:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	79db      	ldrb	r3, [r3, #7]
 800964a:	2b00      	cmp	r3, #0
 800964c:	d102      	bne.n	8009654 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800964e:	2300      	movs	r3, #0
 8009650:	73fb      	strb	r3, [r7, #15]
 8009652:	e008      	b.n	8009666 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	79db      	ldrb	r3, [r3, #7]
 8009658:	2b02      	cmp	r3, #2
 800965a:	d102      	bne.n	8009662 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800965c:	2301      	movs	r3, #1
 800965e:	73fb      	strb	r3, [r7, #15]
 8009660:	e001      	b.n	8009666 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8009662:	f7f7 fc85 	bl	8000f70 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800966c:	7bfa      	ldrb	r2, [r7, #15]
 800966e:	4611      	mov	r1, r2
 8009670:	4618      	mov	r0, r3
 8009672:	f7fe fc7f 	bl	8007f74 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800967c:	4618      	mov	r0, r3
 800967e:	f7fe fc26 	bl	8007ece <USBD_LL_Reset>
}
 8009682:	bf00      	nop
 8009684:	3710      	adds	r7, #16
 8009686:	46bd      	mov	sp, r7
 8009688:	bd80      	pop	{r7, pc}
	...

0800968c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800968c:	b580      	push	{r7, lr}
 800968e:	b082      	sub	sp, #8
 8009690:	af00      	add	r7, sp, #0
 8009692:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800969a:	4618      	mov	r0, r3
 800969c:	f7fe fc7a 	bl	8007f94 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	687a      	ldr	r2, [r7, #4]
 80096ac:	6812      	ldr	r2, [r2, #0]
 80096ae:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80096b2:	f043 0301 	orr.w	r3, r3, #1
 80096b6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	7adb      	ldrb	r3, [r3, #11]
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d005      	beq.n	80096cc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80096c0:	4b04      	ldr	r3, [pc, #16]	@ (80096d4 <HAL_PCD_SuspendCallback+0x48>)
 80096c2:	691b      	ldr	r3, [r3, #16]
 80096c4:	4a03      	ldr	r2, [pc, #12]	@ (80096d4 <HAL_PCD_SuspendCallback+0x48>)
 80096c6:	f043 0306 	orr.w	r3, r3, #6
 80096ca:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80096cc:	bf00      	nop
 80096ce:	3708      	adds	r7, #8
 80096d0:	46bd      	mov	sp, r7
 80096d2:	bd80      	pop	{r7, pc}
 80096d4:	e000ed00 	.word	0xe000ed00

080096d8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80096d8:	b580      	push	{r7, lr}
 80096da:	b082      	sub	sp, #8
 80096dc:	af00      	add	r7, sp, #0
 80096de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80096e6:	4618      	mov	r0, r3
 80096e8:	f7fe fc70 	bl	8007fcc <USBD_LL_Resume>
}
 80096ec:	bf00      	nop
 80096ee:	3708      	adds	r7, #8
 80096f0:	46bd      	mov	sp, r7
 80096f2:	bd80      	pop	{r7, pc}

080096f4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80096f4:	b580      	push	{r7, lr}
 80096f6:	b082      	sub	sp, #8
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	6078      	str	r0, [r7, #4]
 80096fc:	460b      	mov	r3, r1
 80096fe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009706:	78fa      	ldrb	r2, [r7, #3]
 8009708:	4611      	mov	r1, r2
 800970a:	4618      	mov	r0, r3
 800970c:	f7fe fcc8 	bl	80080a0 <USBD_LL_IsoOUTIncomplete>
}
 8009710:	bf00      	nop
 8009712:	3708      	adds	r7, #8
 8009714:	46bd      	mov	sp, r7
 8009716:	bd80      	pop	{r7, pc}

08009718 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009718:	b580      	push	{r7, lr}
 800971a:	b082      	sub	sp, #8
 800971c:	af00      	add	r7, sp, #0
 800971e:	6078      	str	r0, [r7, #4]
 8009720:	460b      	mov	r3, r1
 8009722:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800972a:	78fa      	ldrb	r2, [r7, #3]
 800972c:	4611      	mov	r1, r2
 800972e:	4618      	mov	r0, r3
 8009730:	f7fe fc84 	bl	800803c <USBD_LL_IsoINIncomplete>
}
 8009734:	bf00      	nop
 8009736:	3708      	adds	r7, #8
 8009738:	46bd      	mov	sp, r7
 800973a:	bd80      	pop	{r7, pc}

0800973c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800973c:	b580      	push	{r7, lr}
 800973e:	b082      	sub	sp, #8
 8009740:	af00      	add	r7, sp, #0
 8009742:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800974a:	4618      	mov	r0, r3
 800974c:	f7fe fcda 	bl	8008104 <USBD_LL_DevConnected>
}
 8009750:	bf00      	nop
 8009752:	3708      	adds	r7, #8
 8009754:	46bd      	mov	sp, r7
 8009756:	bd80      	pop	{r7, pc}

08009758 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009758:	b580      	push	{r7, lr}
 800975a:	b082      	sub	sp, #8
 800975c:	af00      	add	r7, sp, #0
 800975e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009766:	4618      	mov	r0, r3
 8009768:	f7fe fcd7 	bl	800811a <USBD_LL_DevDisconnected>
}
 800976c:	bf00      	nop
 800976e:	3708      	adds	r7, #8
 8009770:	46bd      	mov	sp, r7
 8009772:	bd80      	pop	{r7, pc}

08009774 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009774:	b580      	push	{r7, lr}
 8009776:	b082      	sub	sp, #8
 8009778:	af00      	add	r7, sp, #0
 800977a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	781b      	ldrb	r3, [r3, #0]
 8009780:	2b00      	cmp	r3, #0
 8009782:	d13c      	bne.n	80097fe <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009784:	4a20      	ldr	r2, [pc, #128]	@ (8009808 <USBD_LL_Init+0x94>)
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	4a1e      	ldr	r2, [pc, #120]	@ (8009808 <USBD_LL_Init+0x94>)
 8009790:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009794:	4b1c      	ldr	r3, [pc, #112]	@ (8009808 <USBD_LL_Init+0x94>)
 8009796:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800979a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800979c:	4b1a      	ldr	r3, [pc, #104]	@ (8009808 <USBD_LL_Init+0x94>)
 800979e:	2206      	movs	r2, #6
 80097a0:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80097a2:	4b19      	ldr	r3, [pc, #100]	@ (8009808 <USBD_LL_Init+0x94>)
 80097a4:	2202      	movs	r2, #2
 80097a6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80097a8:	4b17      	ldr	r3, [pc, #92]	@ (8009808 <USBD_LL_Init+0x94>)
 80097aa:	2200      	movs	r2, #0
 80097ac:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80097ae:	4b16      	ldr	r3, [pc, #88]	@ (8009808 <USBD_LL_Init+0x94>)
 80097b0:	2202      	movs	r2, #2
 80097b2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80097b4:	4b14      	ldr	r3, [pc, #80]	@ (8009808 <USBD_LL_Init+0x94>)
 80097b6:	2200      	movs	r2, #0
 80097b8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80097ba:	4b13      	ldr	r3, [pc, #76]	@ (8009808 <USBD_LL_Init+0x94>)
 80097bc:	2200      	movs	r2, #0
 80097be:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80097c0:	4b11      	ldr	r3, [pc, #68]	@ (8009808 <USBD_LL_Init+0x94>)
 80097c2:	2200      	movs	r2, #0
 80097c4:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80097c6:	4b10      	ldr	r3, [pc, #64]	@ (8009808 <USBD_LL_Init+0x94>)
 80097c8:	2200      	movs	r2, #0
 80097ca:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80097cc:	4b0e      	ldr	r3, [pc, #56]	@ (8009808 <USBD_LL_Init+0x94>)
 80097ce:	2200      	movs	r2, #0
 80097d0:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80097d2:	480d      	ldr	r0, [pc, #52]	@ (8009808 <USBD_LL_Init+0x94>)
 80097d4:	f7f8 fbcd 	bl	8001f72 <HAL_PCD_Init>
 80097d8:	4603      	mov	r3, r0
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d001      	beq.n	80097e2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80097de:	f7f7 fbc7 	bl	8000f70 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80097e2:	2180      	movs	r1, #128	@ 0x80
 80097e4:	4808      	ldr	r0, [pc, #32]	@ (8009808 <USBD_LL_Init+0x94>)
 80097e6:	f7f9 fe2e 	bl	8003446 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80097ea:	2240      	movs	r2, #64	@ 0x40
 80097ec:	2100      	movs	r1, #0
 80097ee:	4806      	ldr	r0, [pc, #24]	@ (8009808 <USBD_LL_Init+0x94>)
 80097f0:	f7f9 fde2 	bl	80033b8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80097f4:	2280      	movs	r2, #128	@ 0x80
 80097f6:	2101      	movs	r1, #1
 80097f8:	4803      	ldr	r0, [pc, #12]	@ (8009808 <USBD_LL_Init+0x94>)
 80097fa:	f7f9 fddd 	bl	80033b8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80097fe:	2300      	movs	r3, #0
}
 8009800:	4618      	mov	r0, r3
 8009802:	3708      	adds	r7, #8
 8009804:	46bd      	mov	sp, r7
 8009806:	bd80      	pop	{r7, pc}
 8009808:	200017e0 	.word	0x200017e0

0800980c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800980c:	b580      	push	{r7, lr}
 800980e:	b084      	sub	sp, #16
 8009810:	af00      	add	r7, sp, #0
 8009812:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009814:	2300      	movs	r3, #0
 8009816:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009818:	2300      	movs	r3, #0
 800981a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009822:	4618      	mov	r0, r3
 8009824:	f7f8 fcbb 	bl	800219e <HAL_PCD_Start>
 8009828:	4603      	mov	r3, r0
 800982a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800982c:	7bfb      	ldrb	r3, [r7, #15]
 800982e:	4618      	mov	r0, r3
 8009830:	f000 f990 	bl	8009b54 <USBD_Get_USB_Status>
 8009834:	4603      	mov	r3, r0
 8009836:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009838:	7bbb      	ldrb	r3, [r7, #14]
}
 800983a:	4618      	mov	r0, r3
 800983c:	3710      	adds	r7, #16
 800983e:	46bd      	mov	sp, r7
 8009840:	bd80      	pop	{r7, pc}

08009842 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009842:	b580      	push	{r7, lr}
 8009844:	b084      	sub	sp, #16
 8009846:	af00      	add	r7, sp, #0
 8009848:	6078      	str	r0, [r7, #4]
 800984a:	4608      	mov	r0, r1
 800984c:	4611      	mov	r1, r2
 800984e:	461a      	mov	r2, r3
 8009850:	4603      	mov	r3, r0
 8009852:	70fb      	strb	r3, [r7, #3]
 8009854:	460b      	mov	r3, r1
 8009856:	70bb      	strb	r3, [r7, #2]
 8009858:	4613      	mov	r3, r2
 800985a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800985c:	2300      	movs	r3, #0
 800985e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009860:	2300      	movs	r3, #0
 8009862:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800986a:	78bb      	ldrb	r3, [r7, #2]
 800986c:	883a      	ldrh	r2, [r7, #0]
 800986e:	78f9      	ldrb	r1, [r7, #3]
 8009870:	f7f9 f9bc 	bl	8002bec <HAL_PCD_EP_Open>
 8009874:	4603      	mov	r3, r0
 8009876:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009878:	7bfb      	ldrb	r3, [r7, #15]
 800987a:	4618      	mov	r0, r3
 800987c:	f000 f96a 	bl	8009b54 <USBD_Get_USB_Status>
 8009880:	4603      	mov	r3, r0
 8009882:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009884:	7bbb      	ldrb	r3, [r7, #14]
}
 8009886:	4618      	mov	r0, r3
 8009888:	3710      	adds	r7, #16
 800988a:	46bd      	mov	sp, r7
 800988c:	bd80      	pop	{r7, pc}

0800988e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800988e:	b580      	push	{r7, lr}
 8009890:	b084      	sub	sp, #16
 8009892:	af00      	add	r7, sp, #0
 8009894:	6078      	str	r0, [r7, #4]
 8009896:	460b      	mov	r3, r1
 8009898:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800989a:	2300      	movs	r3, #0
 800989c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800989e:	2300      	movs	r3, #0
 80098a0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80098a8:	78fa      	ldrb	r2, [r7, #3]
 80098aa:	4611      	mov	r1, r2
 80098ac:	4618      	mov	r0, r3
 80098ae:	f7f9 fa07 	bl	8002cc0 <HAL_PCD_EP_Close>
 80098b2:	4603      	mov	r3, r0
 80098b4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80098b6:	7bfb      	ldrb	r3, [r7, #15]
 80098b8:	4618      	mov	r0, r3
 80098ba:	f000 f94b 	bl	8009b54 <USBD_Get_USB_Status>
 80098be:	4603      	mov	r3, r0
 80098c0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80098c2:	7bbb      	ldrb	r3, [r7, #14]
}
 80098c4:	4618      	mov	r0, r3
 80098c6:	3710      	adds	r7, #16
 80098c8:	46bd      	mov	sp, r7
 80098ca:	bd80      	pop	{r7, pc}

080098cc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80098cc:	b580      	push	{r7, lr}
 80098ce:	b084      	sub	sp, #16
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	6078      	str	r0, [r7, #4]
 80098d4:	460b      	mov	r3, r1
 80098d6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80098d8:	2300      	movs	r3, #0
 80098da:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80098dc:	2300      	movs	r3, #0
 80098de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80098e6:	78fa      	ldrb	r2, [r7, #3]
 80098e8:	4611      	mov	r1, r2
 80098ea:	4618      	mov	r0, r3
 80098ec:	f7f9 fabf 	bl	8002e6e <HAL_PCD_EP_SetStall>
 80098f0:	4603      	mov	r3, r0
 80098f2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80098f4:	7bfb      	ldrb	r3, [r7, #15]
 80098f6:	4618      	mov	r0, r3
 80098f8:	f000 f92c 	bl	8009b54 <USBD_Get_USB_Status>
 80098fc:	4603      	mov	r3, r0
 80098fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009900:	7bbb      	ldrb	r3, [r7, #14]
}
 8009902:	4618      	mov	r0, r3
 8009904:	3710      	adds	r7, #16
 8009906:	46bd      	mov	sp, r7
 8009908:	bd80      	pop	{r7, pc}

0800990a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800990a:	b580      	push	{r7, lr}
 800990c:	b084      	sub	sp, #16
 800990e:	af00      	add	r7, sp, #0
 8009910:	6078      	str	r0, [r7, #4]
 8009912:	460b      	mov	r3, r1
 8009914:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009916:	2300      	movs	r3, #0
 8009918:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800991a:	2300      	movs	r3, #0
 800991c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009924:	78fa      	ldrb	r2, [r7, #3]
 8009926:	4611      	mov	r1, r2
 8009928:	4618      	mov	r0, r3
 800992a:	f7f9 fb03 	bl	8002f34 <HAL_PCD_EP_ClrStall>
 800992e:	4603      	mov	r3, r0
 8009930:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009932:	7bfb      	ldrb	r3, [r7, #15]
 8009934:	4618      	mov	r0, r3
 8009936:	f000 f90d 	bl	8009b54 <USBD_Get_USB_Status>
 800993a:	4603      	mov	r3, r0
 800993c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800993e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009940:	4618      	mov	r0, r3
 8009942:	3710      	adds	r7, #16
 8009944:	46bd      	mov	sp, r7
 8009946:	bd80      	pop	{r7, pc}

08009948 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009948:	b480      	push	{r7}
 800994a:	b085      	sub	sp, #20
 800994c:	af00      	add	r7, sp, #0
 800994e:	6078      	str	r0, [r7, #4]
 8009950:	460b      	mov	r3, r1
 8009952:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800995a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800995c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009960:	2b00      	cmp	r3, #0
 8009962:	da0b      	bge.n	800997c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009964:	78fb      	ldrb	r3, [r7, #3]
 8009966:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800996a:	68f9      	ldr	r1, [r7, #12]
 800996c:	4613      	mov	r3, r2
 800996e:	00db      	lsls	r3, r3, #3
 8009970:	4413      	add	r3, r2
 8009972:	009b      	lsls	r3, r3, #2
 8009974:	440b      	add	r3, r1
 8009976:	3316      	adds	r3, #22
 8009978:	781b      	ldrb	r3, [r3, #0]
 800997a:	e00b      	b.n	8009994 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800997c:	78fb      	ldrb	r3, [r7, #3]
 800997e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009982:	68f9      	ldr	r1, [r7, #12]
 8009984:	4613      	mov	r3, r2
 8009986:	00db      	lsls	r3, r3, #3
 8009988:	4413      	add	r3, r2
 800998a:	009b      	lsls	r3, r3, #2
 800998c:	440b      	add	r3, r1
 800998e:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8009992:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009994:	4618      	mov	r0, r3
 8009996:	3714      	adds	r7, #20
 8009998:	46bd      	mov	sp, r7
 800999a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800999e:	4770      	bx	lr

080099a0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80099a0:	b580      	push	{r7, lr}
 80099a2:	b084      	sub	sp, #16
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	6078      	str	r0, [r7, #4]
 80099a8:	460b      	mov	r3, r1
 80099aa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80099ac:	2300      	movs	r3, #0
 80099ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80099b0:	2300      	movs	r3, #0
 80099b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80099ba:	78fa      	ldrb	r2, [r7, #3]
 80099bc:	4611      	mov	r1, r2
 80099be:	4618      	mov	r0, r3
 80099c0:	f7f9 f8f0 	bl	8002ba4 <HAL_PCD_SetAddress>
 80099c4:	4603      	mov	r3, r0
 80099c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80099c8:	7bfb      	ldrb	r3, [r7, #15]
 80099ca:	4618      	mov	r0, r3
 80099cc:	f000 f8c2 	bl	8009b54 <USBD_Get_USB_Status>
 80099d0:	4603      	mov	r3, r0
 80099d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80099d4:	7bbb      	ldrb	r3, [r7, #14]
}
 80099d6:	4618      	mov	r0, r3
 80099d8:	3710      	adds	r7, #16
 80099da:	46bd      	mov	sp, r7
 80099dc:	bd80      	pop	{r7, pc}

080099de <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80099de:	b580      	push	{r7, lr}
 80099e0:	b086      	sub	sp, #24
 80099e2:	af00      	add	r7, sp, #0
 80099e4:	60f8      	str	r0, [r7, #12]
 80099e6:	607a      	str	r2, [r7, #4]
 80099e8:	603b      	str	r3, [r7, #0]
 80099ea:	460b      	mov	r3, r1
 80099ec:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80099ee:	2300      	movs	r3, #0
 80099f0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80099f2:	2300      	movs	r3, #0
 80099f4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80099fc:	7af9      	ldrb	r1, [r7, #11]
 80099fe:	683b      	ldr	r3, [r7, #0]
 8009a00:	687a      	ldr	r2, [r7, #4]
 8009a02:	f7f9 f9fa 	bl	8002dfa <HAL_PCD_EP_Transmit>
 8009a06:	4603      	mov	r3, r0
 8009a08:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a0a:	7dfb      	ldrb	r3, [r7, #23]
 8009a0c:	4618      	mov	r0, r3
 8009a0e:	f000 f8a1 	bl	8009b54 <USBD_Get_USB_Status>
 8009a12:	4603      	mov	r3, r0
 8009a14:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009a16:	7dbb      	ldrb	r3, [r7, #22]
}
 8009a18:	4618      	mov	r0, r3
 8009a1a:	3718      	adds	r7, #24
 8009a1c:	46bd      	mov	sp, r7
 8009a1e:	bd80      	pop	{r7, pc}

08009a20 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009a20:	b580      	push	{r7, lr}
 8009a22:	b086      	sub	sp, #24
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	60f8      	str	r0, [r7, #12]
 8009a28:	607a      	str	r2, [r7, #4]
 8009a2a:	603b      	str	r3, [r7, #0]
 8009a2c:	460b      	mov	r3, r1
 8009a2e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a30:	2300      	movs	r3, #0
 8009a32:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a34:	2300      	movs	r3, #0
 8009a36:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8009a3e:	7af9      	ldrb	r1, [r7, #11]
 8009a40:	683b      	ldr	r3, [r7, #0]
 8009a42:	687a      	ldr	r2, [r7, #4]
 8009a44:	f7f9 f986 	bl	8002d54 <HAL_PCD_EP_Receive>
 8009a48:	4603      	mov	r3, r0
 8009a4a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a4c:	7dfb      	ldrb	r3, [r7, #23]
 8009a4e:	4618      	mov	r0, r3
 8009a50:	f000 f880 	bl	8009b54 <USBD_Get_USB_Status>
 8009a54:	4603      	mov	r3, r0
 8009a56:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009a58:	7dbb      	ldrb	r3, [r7, #22]
}
 8009a5a:	4618      	mov	r0, r3
 8009a5c:	3718      	adds	r7, #24
 8009a5e:	46bd      	mov	sp, r7
 8009a60:	bd80      	pop	{r7, pc}

08009a62 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009a62:	b580      	push	{r7, lr}
 8009a64:	b082      	sub	sp, #8
 8009a66:	af00      	add	r7, sp, #0
 8009a68:	6078      	str	r0, [r7, #4]
 8009a6a:	460b      	mov	r3, r1
 8009a6c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009a74:	78fa      	ldrb	r2, [r7, #3]
 8009a76:	4611      	mov	r1, r2
 8009a78:	4618      	mov	r0, r3
 8009a7a:	f7f9 f9a6 	bl	8002dca <HAL_PCD_EP_GetRxCount>
 8009a7e:	4603      	mov	r3, r0
}
 8009a80:	4618      	mov	r0, r3
 8009a82:	3708      	adds	r7, #8
 8009a84:	46bd      	mov	sp, r7
 8009a86:	bd80      	pop	{r7, pc}

08009a88 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8009a88:	b580      	push	{r7, lr}
 8009a8a:	b082      	sub	sp, #8
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	6078      	str	r0, [r7, #4]
 8009a90:	460b      	mov	r3, r1
 8009a92:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8009a94:	78fb      	ldrb	r3, [r7, #3]
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d002      	beq.n	8009aa0 <HAL_PCDEx_LPM_Callback+0x18>
 8009a9a:	2b01      	cmp	r3, #1
 8009a9c:	d01f      	beq.n	8009ade <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8009a9e:	e03b      	b.n	8009b18 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	7adb      	ldrb	r3, [r3, #11]
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d007      	beq.n	8009ab8 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 8009aa8:	f7f6 ffd8 	bl	8000a5c <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009aac:	4b1c      	ldr	r3, [pc, #112]	@ (8009b20 <HAL_PCDEx_LPM_Callback+0x98>)
 8009aae:	691b      	ldr	r3, [r3, #16]
 8009ab0:	4a1b      	ldr	r2, [pc, #108]	@ (8009b20 <HAL_PCDEx_LPM_Callback+0x98>)
 8009ab2:	f023 0306 	bic.w	r3, r3, #6
 8009ab6:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	687a      	ldr	r2, [r7, #4]
 8009ac4:	6812      	ldr	r2, [r2, #0]
 8009ac6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009aca:	f023 0301 	bic.w	r3, r3, #1
 8009ace:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009ad6:	4618      	mov	r0, r3
 8009ad8:	f7fe fa78 	bl	8007fcc <USBD_LL_Resume>
    break;
 8009adc:	e01c      	b.n	8009b18 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	687a      	ldr	r2, [r7, #4]
 8009aea:	6812      	ldr	r2, [r2, #0]
 8009aec:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009af0:	f043 0301 	orr.w	r3, r3, #1
 8009af4:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009afc:	4618      	mov	r0, r3
 8009afe:	f7fe fa49 	bl	8007f94 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	7adb      	ldrb	r3, [r3, #11]
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d005      	beq.n	8009b16 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009b0a:	4b05      	ldr	r3, [pc, #20]	@ (8009b20 <HAL_PCDEx_LPM_Callback+0x98>)
 8009b0c:	691b      	ldr	r3, [r3, #16]
 8009b0e:	4a04      	ldr	r2, [pc, #16]	@ (8009b20 <HAL_PCDEx_LPM_Callback+0x98>)
 8009b10:	f043 0306 	orr.w	r3, r3, #6
 8009b14:	6113      	str	r3, [r2, #16]
    break;
 8009b16:	bf00      	nop
}
 8009b18:	bf00      	nop
 8009b1a:	3708      	adds	r7, #8
 8009b1c:	46bd      	mov	sp, r7
 8009b1e:	bd80      	pop	{r7, pc}
 8009b20:	e000ed00 	.word	0xe000ed00

08009b24 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009b24:	b480      	push	{r7}
 8009b26:	b083      	sub	sp, #12
 8009b28:	af00      	add	r7, sp, #0
 8009b2a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009b2c:	4b03      	ldr	r3, [pc, #12]	@ (8009b3c <USBD_static_malloc+0x18>)
}
 8009b2e:	4618      	mov	r0, r3
 8009b30:	370c      	adds	r7, #12
 8009b32:	46bd      	mov	sp, r7
 8009b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b38:	4770      	bx	lr
 8009b3a:	bf00      	nop
 8009b3c:	20001cc4 	.word	0x20001cc4

08009b40 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009b40:	b480      	push	{r7}
 8009b42:	b083      	sub	sp, #12
 8009b44:	af00      	add	r7, sp, #0
 8009b46:	6078      	str	r0, [r7, #4]

}
 8009b48:	bf00      	nop
 8009b4a:	370c      	adds	r7, #12
 8009b4c:	46bd      	mov	sp, r7
 8009b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b52:	4770      	bx	lr

08009b54 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009b54:	b480      	push	{r7}
 8009b56:	b085      	sub	sp, #20
 8009b58:	af00      	add	r7, sp, #0
 8009b5a:	4603      	mov	r3, r0
 8009b5c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b5e:	2300      	movs	r3, #0
 8009b60:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009b62:	79fb      	ldrb	r3, [r7, #7]
 8009b64:	2b03      	cmp	r3, #3
 8009b66:	d817      	bhi.n	8009b98 <USBD_Get_USB_Status+0x44>
 8009b68:	a201      	add	r2, pc, #4	@ (adr r2, 8009b70 <USBD_Get_USB_Status+0x1c>)
 8009b6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b6e:	bf00      	nop
 8009b70:	08009b81 	.word	0x08009b81
 8009b74:	08009b87 	.word	0x08009b87
 8009b78:	08009b8d 	.word	0x08009b8d
 8009b7c:	08009b93 	.word	0x08009b93
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009b80:	2300      	movs	r3, #0
 8009b82:	73fb      	strb	r3, [r7, #15]
    break;
 8009b84:	e00b      	b.n	8009b9e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009b86:	2303      	movs	r3, #3
 8009b88:	73fb      	strb	r3, [r7, #15]
    break;
 8009b8a:	e008      	b.n	8009b9e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009b8c:	2301      	movs	r3, #1
 8009b8e:	73fb      	strb	r3, [r7, #15]
    break;
 8009b90:	e005      	b.n	8009b9e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009b92:	2303      	movs	r3, #3
 8009b94:	73fb      	strb	r3, [r7, #15]
    break;
 8009b96:	e002      	b.n	8009b9e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009b98:	2303      	movs	r3, #3
 8009b9a:	73fb      	strb	r3, [r7, #15]
    break;
 8009b9c:	bf00      	nop
  }
  return usb_status;
 8009b9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ba0:	4618      	mov	r0, r3
 8009ba2:	3714      	adds	r7, #20
 8009ba4:	46bd      	mov	sp, r7
 8009ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009baa:	4770      	bx	lr

08009bac <memset>:
 8009bac:	4402      	add	r2, r0
 8009bae:	4603      	mov	r3, r0
 8009bb0:	4293      	cmp	r3, r2
 8009bb2:	d100      	bne.n	8009bb6 <memset+0xa>
 8009bb4:	4770      	bx	lr
 8009bb6:	f803 1b01 	strb.w	r1, [r3], #1
 8009bba:	e7f9      	b.n	8009bb0 <memset+0x4>

08009bbc <__libc_init_array>:
 8009bbc:	b570      	push	{r4, r5, r6, lr}
 8009bbe:	4d0d      	ldr	r5, [pc, #52]	@ (8009bf4 <__libc_init_array+0x38>)
 8009bc0:	4c0d      	ldr	r4, [pc, #52]	@ (8009bf8 <__libc_init_array+0x3c>)
 8009bc2:	1b64      	subs	r4, r4, r5
 8009bc4:	10a4      	asrs	r4, r4, #2
 8009bc6:	2600      	movs	r6, #0
 8009bc8:	42a6      	cmp	r6, r4
 8009bca:	d109      	bne.n	8009be0 <__libc_init_array+0x24>
 8009bcc:	4d0b      	ldr	r5, [pc, #44]	@ (8009bfc <__libc_init_array+0x40>)
 8009bce:	4c0c      	ldr	r4, [pc, #48]	@ (8009c00 <__libc_init_array+0x44>)
 8009bd0:	f000 f818 	bl	8009c04 <_init>
 8009bd4:	1b64      	subs	r4, r4, r5
 8009bd6:	10a4      	asrs	r4, r4, #2
 8009bd8:	2600      	movs	r6, #0
 8009bda:	42a6      	cmp	r6, r4
 8009bdc:	d105      	bne.n	8009bea <__libc_init_array+0x2e>
 8009bde:	bd70      	pop	{r4, r5, r6, pc}
 8009be0:	f855 3b04 	ldr.w	r3, [r5], #4
 8009be4:	4798      	blx	r3
 8009be6:	3601      	adds	r6, #1
 8009be8:	e7ee      	b.n	8009bc8 <__libc_init_array+0xc>
 8009bea:	f855 3b04 	ldr.w	r3, [r5], #4
 8009bee:	4798      	blx	r3
 8009bf0:	3601      	adds	r6, #1
 8009bf2:	e7f2      	b.n	8009bda <__libc_init_array+0x1e>
 8009bf4:	08009c84 	.word	0x08009c84
 8009bf8:	08009c84 	.word	0x08009c84
 8009bfc:	08009c84 	.word	0x08009c84
 8009c00:	08009c88 	.word	0x08009c88

08009c04 <_init>:
 8009c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c06:	bf00      	nop
 8009c08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c0a:	bc08      	pop	{r3}
 8009c0c:	469e      	mov	lr, r3
 8009c0e:	4770      	bx	lr

08009c10 <_fini>:
 8009c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c12:	bf00      	nop
 8009c14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c16:	bc08      	pop	{r3}
 8009c18:	469e      	mov	lr, r3
 8009c1a:	4770      	bx	lr
